/**
 * Copyright 2020 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Identity
 * With the Identity service in Splunk Cloud Services, you can authenticate and authorize Splunk Cloud Services users.
 *
 * OpenAPI spec version: v3alpha1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AddGroupMemberBody, AddGroupRoleBody, AddMemberBody, AddRolePermissionBody, CreateGroupBody, CreateRoleBody, ECJwk, Group, GroupList, GroupMember, GroupMemberList, GroupRole, GroupRoleList, Member, MemberList, PermissionList, Principal, PrincipalList, PrincipalPublicKey, PrincipalPublicKeyStatusBody, Role, RoleList, RolePermission, RolePermissionList, ValidateInfo } from '../models';
import BaseApiService from "../../../../baseapiservice";
import { IdentityServiceExtensions } from "../../../../service_extensions/identity";
import { RequestStatus } from '../../../../client';
export declare const IDENTITY_SERVICE_PREFIX: string;
export declare const IDENTITY_SERVICE_CLUSTER: string;
/**
  * @export
  */
export declare enum AccessEnum {
    Write = "write"
} /**
 * @export
 */
export declare enum KindEnum {
    User = "user",
    ServiceAccount = "service_account",
    Service = "service"
}
/**
 * Identity
 * Version: v3alpha1.1
 * With the Identity service in Splunk Cloud Services, you can authenticate and authorize Splunk Cloud Services users.
 */
export declare class GeneratedIdentityService extends BaseApiService {
    getServiceCluster(): string;
    getServicePrefix(): string;
    /**
     * Adds a member to a given group.
     * @param group The group name.
     * @param addGroupMemberBody The member to add to a group.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return GroupMember
     */
    addGroupMember: (group: string, addGroupMemberBody: AddGroupMemberBody, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<GroupMember>;
    /**
     * Adds a role to a given group.
     * @param group The group name.
     * @param addGroupRoleBody The role to add to a group.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return GroupRole
     */
    addGroupRole: (group: string, addGroupRoleBody: AddGroupRoleBody, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<GroupRole>;
    /**
     * Adds a member to a given tenant.
     * @param addMemberBody The member to associate with a tenant.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Member
     */
    addMember: (addMemberBody: AddMemberBody, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Member>;
    /**
     * Add service principal public key
     * @param principal The principal name.
     * @param eCJwk Service principal public key
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PrincipalPublicKey
     */
    addPrincipalPublicKey: (principal: string, eCJwk: ECJwk, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PrincipalPublicKey>;
    /**
     * Adds permissions to a role in a given tenant.
     * @param role The role name.
     * @param addRolePermissionBody The permission to add to a role.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return RolePermission
     */
    addRolePermission: (role: string, addRolePermissionBody: AddRolePermissionBody, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<RolePermission>;
    /**
     * Creates a new group in a given tenant.
     * @param createGroupBody The group definition.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Group
     */
    createGroup: (createGroupBody: CreateGroupBody, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Group>;
    /**
     * Creates a new authorization role in a given tenant.
     * @param createRoleBody Role definition
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Role
     */
    createRole: (createRoleBody: CreateRoleBody, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Role>;
    /**
     * Deletes a group in a given tenant.
     * @param group The group name.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteGroup: (group: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Deletes principal public key
     * @param principal The principal name.
     * @param keyId Identifier of a public key.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deletePrincipalPublicKey: (principal: string, keyId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Deletes a defined role for a given tenant.
     * @param role The role name.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteRole: (role: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Returns information about a given group within a tenant.
     * @param group The group name.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Group
     */
    getGroup: (group: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Group>;
    /**
     * Returns information about a given member within a given group.
     * @param group The group name.
     * @param member The member name.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return GroupMember
     */
    getGroupMember: (group: string, member: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<GroupMember>;
    /**
     * Returns information about a given role within a given group.
     * @param group The group name.
     * @param role The role name.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return GroupRole
     */
    getGroupRole: (group: string, role: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<GroupRole>;
    /**
     * Returns a member of a given tenant.
     * @param member The member name.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Member
     */
    getMember: (member: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Member>;
    /**
     * Returns the details of a principal, including its tenant membership and any relevant profile information.
     * @param principal The principal name.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Principal
     */
    getPrincipal: (principal: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Principal>;
    /**
     * Returns principal public key
     * @param principal The principal name.
     * @param keyId Identifier of a public key.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PrincipalPublicKey
     */
    getPrincipalPublicKey: (principal: string, keyId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PrincipalPublicKey>;
    /**
     * Returns principal public keys
     * @param principal The principal name.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PrincipalPublicKeys
     */
    getPrincipalPublicKeys: (principal: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PrincipalPublicKey[]>;
    /**
     * Returns a role for a given tenant.
     * @param role The role name.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Role
     */
    getRole: (role: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Role>;
    /**
     * Gets a permission for the specified role.
     * @param role The role name.
     * @param permission The permission string.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return RolePermission
     */
    getRolePermission: (role: string, permission: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<RolePermission>;
    /**
     * Returns a list of the members within a given group.
     * @param group The group name.
     * @param args parameters to be sent with the request
     * @param args.orderby The sorting order for returning list.
     * @param args.pageSize The maximize return items count of a list.
     * @param args.pageToken The cursor to then next page.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return GroupMemberList
     */
    listGroupMembers: (group: string, args?: {
        [key: string]: any;
        orderby?: string | undefined;
        pageSize?: number | undefined;
        pageToken?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<GroupMemberList>;
    /**
     * Returns a list of the roles that are attached to a group within a given tenant.
     * @param group The group name.
     * @param args parameters to be sent with the request
     * @param args.orderby The sorting order for returning list.
     * @param args.pageSize The maximize return items count of a list.
     * @param args.pageToken The cursor to then next page.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return GroupRoleList
     */
    listGroupRoles: (group: string, args?: {
        [key: string]: any;
        orderby?: string | undefined;
        pageSize?: number | undefined;
        pageToken?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<GroupRoleList>;
    /**
     * List the groups that exist in a given tenant.
     * @param args parameters to be sent with the request
     * @param args.access List only the groups with specified access permission.
     * @param args.orderby The sorting order for returning list.
     * @param args.pageSize The maximize return items count of a list.
     * @param args.pageToken The cursor to then next page.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return GroupList
     */
    listGroups: (args?: {
        [key: string]: any;
        access?: AccessEnum | undefined;
        orderby?: string | undefined;
        pageSize?: number | undefined;
        pageToken?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<GroupList>;
    /**
     * Returns a list of groups that a member belongs to within a tenant.
     * @param member The member name.
     * @param args parameters to be sent with the request
     * @param args.orderby The sorting order for returning list.
     * @param args.pageSize The maximize return items count of a list.
     * @param args.pageToken The cursor to then next page.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return GroupList
     */
    listMemberGroups: (member: string, args?: {
        [key: string]: any;
        orderby?: string | undefined;
        pageSize?: number | undefined;
        pageToken?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<GroupList>;
    /**
     * Returns a set of permissions granted to the member within the tenant.
     * @param member The member name.
     * @param args parameters to be sent with the request
     * @param args.orderby The sorting order for returning list.
     * @param args.pageSize The maximize return items count of a list.
     * @param args.pageToken The cursor to then next page.
     * @param args.scopeFilter List only the permissions matching the scope filter.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PermissionList
     */
    listMemberPermissions: (member: string, args?: {
        [key: string]: any;
        orderby?: string | undefined;
        pageSize?: number | undefined;
        pageToken?: string | undefined;
        scopeFilter?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PermissionList>;
    /**
     * Returns a set of roles that a given member holds within the tenant.
     * @param member The member name.
     * @param args parameters to be sent with the request
     * @param args.orderby The sorting order for returning list.
     * @param args.pageSize The maximize return items count of a list.
     * @param args.pageToken The cursor to then next page.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return RoleList
     */
    listMemberRoles: (member: string, args?: {
        [key: string]: any;
        orderby?: string | undefined;
        pageSize?: number | undefined;
        pageToken?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<RoleList>;
    /**
     * Returns a list of members in a given tenant.
     * @param args parameters to be sent with the request
     * @param args.kind Kind of member, one of: [user, service_account, service]
     * @param args.orderby The sorting order for returning list.
     * @param args.pageSize The maximize return items count of a list.
     * @param args.pageToken The cursor to then next page.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return MemberList
     */
    listMembers: (args?: {
        [key: string]: any;
        kind?: KindEnum | undefined;
        orderby?: string | undefined;
        pageSize?: number | undefined;
        pageToken?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<MemberList>;
    /**
     * Returns the list of principals that the Identity service knows about.
     * @param args parameters to be sent with the request
     * @param args.orderby The sorting order for returning list.
     * @param args.pageSize The maximize return items count of a list.
     * @param args.pageToken The cursor to then next page.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PrincipalList
     */
    listPrincipals: (args?: {
        [key: string]: any;
        orderby?: string | undefined;
        pageSize?: number | undefined;
        pageToken?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PrincipalList>;
    /**
     * Gets a list of groups for a role in a given tenant.
     * @param role The role name.
     * @param args parameters to be sent with the request
     * @param args.orderby The sorting order for returning list.
     * @param args.pageSize The maximize return items count of a list.
     * @param args.pageToken The cursor to then next page.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return GroupList
     */
    listRoleGroups: (role: string, args?: {
        [key: string]: any;
        orderby?: string | undefined;
        pageSize?: number | undefined;
        pageToken?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<GroupList>;
    /**
     * Gets the permissions for a role in a given tenant.
     * @param role The role name.
     * @param args parameters to be sent with the request
     * @param args.orderby The sorting order for returning list.
     * @param args.pageSize The maximize return items count of a list.
     * @param args.pageToken The cursor to then next page.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return RolePermissionList
     */
    listRolePermissions: (role: string, args?: {
        [key: string]: any;
        orderby?: string | undefined;
        pageSize?: number | undefined;
        pageToken?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<RolePermissionList>;
    /**
     * Returns all roles for a given tenant.
     * @param args parameters to be sent with the request
     * @param args.orderby The sorting order for returning list.
     * @param args.pageSize The maximize return items count of a list.
     * @param args.pageToken The cursor to then next page.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return RoleList
     */
    listRoles: (args?: {
        [key: string]: any;
        orderby?: string | undefined;
        pageSize?: number | undefined;
        pageToken?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<RoleList>;
    /**
     * Removes the member from a given group.
     * @param group The group name.
     * @param member The member name.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    removeGroupMember: (group: string, member: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Removes a role from a given group.
     * @param group The group name.
     * @param role The role name.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    removeGroupRole: (group: string, role: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Removes a member from a given tenant
     * @param member The member name.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    removeMember: (member: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Removes a permission from the role.
     * @param role The role name.
     * @param permission The permission string.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    removeRolePermission: (role: string, permission: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Revoke all existing access tokens issued to a principal. Principals can reset their password by visiting https://login.splunk.com/en_us/page/lost_password
     * @param principal The principal name.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    revokePrincipalAuthTokens: (principal: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Update principal public key
     * @param principal The principal name.
     * @param keyId Identifier of a public key.
     * @param principalPublicKeyStatusBody Status of the public key
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PrincipalPublicKey
     */
    updatePrincipalPublicKey: (principal: string, keyId: string, principalPublicKeyStatusBody: PrincipalPublicKeyStatusBody, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PrincipalPublicKey>;
    /**
     * Validates the access token obtained from the authorization header and returns the principal name and tenant memberships.
     * @param args parameters to be sent with the request
     * @param args.include Include additional information to return when validating tenant membership. Valid parameters [tenant, principal]
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return ValidateInfo
     */
    validateToken: (args?: {
        [key: string]: any;
        include?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<ValidateInfo>;
}
export declare type IdentityService = GeneratedIdentityService & IdentityServiceExtensions;
export declare const IdentityService: typeof GeneratedIdentityService;
