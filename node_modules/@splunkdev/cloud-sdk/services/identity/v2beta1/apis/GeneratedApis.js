"use strict";
// tslint:disable
/**
 * Copyright 2020 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Identity
 * With the Identity service in Splunk Cloud Services, you can authenticate and authorize Splunk Cloud Services users.
 *
 * OpenAPI spec version: v2beta1.20
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var baseapiservice_1 = __importDefault(require("../../../../baseapiservice"));
var identity_1 = require("../../../../service_extensions/identity");
exports.IDENTITY_SERVICE_PREFIX = '/identity/v2beta1';
exports.IDENTITY_SERVICE_CLUSTER = 'api';
/**
  * @export
  */
var AccessEnum;
(function (AccessEnum) {
    AccessEnum["Write"] = "write";
})(AccessEnum = exports.AccessEnum || (exports.AccessEnum = {}));
/**
 * Identity
 * Version: v2beta1.20
 * With the Identity service in Splunk Cloud Services, you can authenticate and authorize Splunk Cloud Services users.
 */
var GeneratedIdentityService = /** @class */ (function (_super) {
    __extends(GeneratedIdentityService, _super);
    function GeneratedIdentityService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Adds a member to a given group.
         * @param group The group name.
         * @param addGroupMemberBody The member to add to a group.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return GroupMember
         */
        _this.addGroupMember = function (group, addGroupMemberBody, args, requestStatusCallback) {
            var path_params = {
                group: group
            };
            var path = _this.template(templateObject_1 || (templateObject_1 = __makeTemplateObject(["/identity/v2beta1/groups/", "/members"], ["/identity/v2beta1/groups/", "/members"])), 'group')(path_params);
            return _this.client.post(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), addGroupMemberBody, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Adds a role to a given group.
         * @param group The group name.
         * @param addGroupRoleBody The role to add to a group.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return GroupRole
         */
        _this.addGroupRole = function (group, addGroupRoleBody, args, requestStatusCallback) {
            var path_params = {
                group: group
            };
            var path = _this.template(templateObject_2 || (templateObject_2 = __makeTemplateObject(["/identity/v2beta1/groups/", "/roles"], ["/identity/v2beta1/groups/", "/roles"])), 'group')(path_params);
            return _this.client.post(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), addGroupRoleBody, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Adds a member to a given tenant.
         * @param addMemberBody The member to associate with a tenant.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Member
         */
        _this.addMember = function (addMemberBody, args, requestStatusCallback) {
            var path = "/identity/v2beta1/members";
            return _this.client.post(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), addMemberBody, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Add service principal public key
         * @param principal The principal name.
         * @param eCJwk Service principal public key
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return PrincipalPublicKey
         */
        _this.addPrincipalPublicKey = function (principal, eCJwk, args, requestStatusCallback) {
            var path_params = {
                principal: principal
            };
            var path = _this.template(templateObject_3 || (templateObject_3 = __makeTemplateObject(["/system/identity/v2beta1/principals/", "/keys"], ["/system/identity/v2beta1/principals/", "/keys"])), 'principal')(path_params);
            return _this.client.post(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), eCJwk, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Adds permissions to a role in a given tenant.
         * @param role The role name.
         * @param body The permission to add to a role.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return RolePermission
         */
        _this.addRolePermission = function (role, body, args, requestStatusCallback) {
            var path_params = {
                role: role
            };
            var path = _this.template(templateObject_4 || (templateObject_4 = __makeTemplateObject(["/identity/v2beta1/roles/", "/permissions"], ["/identity/v2beta1/roles/", "/permissions"])), 'role')(path_params);
            return _this.client.post(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), body, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates a new group in a given tenant.
         * @param createGroupBody The group definition.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Group
         */
        _this.createGroup = function (createGroupBody, args, requestStatusCallback) {
            var path = "/identity/v2beta1/groups";
            return _this.client.post(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), createGroupBody, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Create a new principal
         * @param createPrincipalBody The new principal to add to the system.
         * @param args parameters to be sent with the request
         * @param args.inviteID The invite ID.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Principal
         */
        _this.createPrincipal = function (createPrincipalBody, args, requestStatusCallback) {
            var path = "/system/identity/v2beta1/principals";
            return _this.client.post(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), createPrincipalBody, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates a new authorization role in a given tenant.
         * @param createRoleBody Role definition
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Role
         */
        _this.createRole = function (createRoleBody, args, requestStatusCallback) {
            var path = "/identity/v2beta1/roles";
            return _this.client.post(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), createRoleBody, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Deletes a group in a given tenant.
         * @param group The group name.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteGroup = function (group, args, requestStatusCallback) {
            var path_params = {
                group: group
            };
            var path = _this.template(templateObject_5 || (templateObject_5 = __makeTemplateObject(["/identity/v2beta1/groups/", ""], ["/identity/v2beta1/groups/", ""])), 'group')(path_params);
            return _this.client["delete"](exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Deletes principal public key
         * @param principal The principal name.
         * @param keyId Identifier of a public key.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deletePrincipalPublicKey = function (principal, keyId, args, requestStatusCallback) {
            var path_params = {
                principal: principal,
                keyId: keyId
            };
            var path = _this.template(templateObject_6 || (templateObject_6 = __makeTemplateObject(["/system/identity/v2beta1/principals/", "/keys/", ""], ["/system/identity/v2beta1/principals/", "/keys/", ""])), 'principal', 'keyId')(path_params);
            return _this.client["delete"](exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Deletes a defined role for a given tenant.
         * @param role The role name.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteRole = function (role, args, requestStatusCallback) {
            var path_params = {
                role: role
            };
            var path = _this.template(templateObject_7 || (templateObject_7 = __makeTemplateObject(["/identity/v2beta1/roles/", ""], ["/identity/v2beta1/roles/", ""])), 'role')(path_params);
            return _this.client["delete"](exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns information about a given group within a tenant.
         * @param group The group name.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Group
         */
        _this.getGroup = function (group, args, requestStatusCallback) {
            var path_params = {
                group: group
            };
            var path = _this.template(templateObject_8 || (templateObject_8 = __makeTemplateObject(["/identity/v2beta1/groups/", ""], ["/identity/v2beta1/groups/", ""])), 'group')(path_params);
            return _this.client.get(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns information about a given member within a given group.
         * @param group The group name.
         * @param member The member name.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return GroupMember
         */
        _this.getGroupMember = function (group, member, args, requestStatusCallback) {
            var path_params = {
                group: group,
                member: member
            };
            var path = _this.template(templateObject_9 || (templateObject_9 = __makeTemplateObject(["/identity/v2beta1/groups/", "/members/", ""], ["/identity/v2beta1/groups/", "/members/", ""])), 'group', 'member')(path_params);
            return _this.client.get(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns information about a given role within a given group.
         * @param group The group name.
         * @param role The role name.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return GroupRole
         */
        _this.getGroupRole = function (group, role, args, requestStatusCallback) {
            var path_params = {
                group: group,
                role: role
            };
            var path = _this.template(templateObject_10 || (templateObject_10 = __makeTemplateObject(["/identity/v2beta1/groups/", "/roles/", ""], ["/identity/v2beta1/groups/", "/roles/", ""])), 'group', 'role')(path_params);
            return _this.client.get(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a member of a given tenant.
         * @param member The member name.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Member
         */
        _this.getMember = function (member, args, requestStatusCallback) {
            var path_params = {
                member: member
            };
            var path = _this.template(templateObject_11 || (templateObject_11 = __makeTemplateObject(["/identity/v2beta1/members/", ""], ["/identity/v2beta1/members/", ""])), 'member')(path_params);
            return _this.client.get(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the details of a principal, including its tenant membership.
         * @param principal The principal name.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Principal
         */
        _this.getPrincipal = function (principal, args, requestStatusCallback) {
            var path_params = {
                principal: principal
            };
            var path = _this.template(templateObject_12 || (templateObject_12 = __makeTemplateObject(["/system/identity/v2beta1/principals/", ""], ["/system/identity/v2beta1/principals/", ""])), 'principal')(path_params);
            return _this.client.get(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns principal public key
         * @param principal The principal name.
         * @param keyId Identifier of a public key.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return PrincipalPublicKey
         */
        _this.getPrincipalPublicKey = function (principal, keyId, args, requestStatusCallback) {
            var path_params = {
                principal: principal,
                keyId: keyId
            };
            var path = _this.template(templateObject_13 || (templateObject_13 = __makeTemplateObject(["/system/identity/v2beta1/principals/", "/keys/", ""], ["/system/identity/v2beta1/principals/", "/keys/", ""])), 'principal', 'keyId')(path_params);
            return _this.client.get(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns principal public keys
         * @param principal The principal name.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return PrincipalPublicKeys
         */
        _this.getPrincipalPublicKeys = function (principal, args, requestStatusCallback) {
            var path_params = {
                principal: principal
            };
            var path = _this.template(templateObject_14 || (templateObject_14 = __makeTemplateObject(["/system/identity/v2beta1/principals/", "/keys"], ["/system/identity/v2beta1/principals/", "/keys"])), 'principal')(path_params);
            return _this.client.get(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a role for a given tenant.
         * @param role The role name.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Role
         */
        _this.getRole = function (role, args, requestStatusCallback) {
            var path_params = {
                role: role
            };
            var path = _this.template(templateObject_15 || (templateObject_15 = __makeTemplateObject(["/identity/v2beta1/roles/", ""], ["/identity/v2beta1/roles/", ""])), 'role')(path_params);
            return _this.client.get(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Gets a permission for the specified role.
         * @param role The role name.
         * @param permission The permission string.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return RolePermission
         */
        _this.getRolePermission = function (role, permission, args, requestStatusCallback) {
            var path_params = {
                role: role,
                permission: permission
            };
            var path = _this.template(templateObject_16 || (templateObject_16 = __makeTemplateObject(["/identity/v2beta1/roles/", "/permissions/", ""], ["/identity/v2beta1/roles/", "/permissions/", ""])), 'role', 'permission')(path_params);
            return _this.client.get(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of the members within a given group.
         * @param group The group name.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<string>
         */
        _this.listGroupMembers = function (group, args, requestStatusCallback) {
            var path_params = {
                group: group
            };
            var path = _this.template(templateObject_17 || (templateObject_17 = __makeTemplateObject(["/identity/v2beta1/groups/", "/members"], ["/identity/v2beta1/groups/", "/members"])), 'group')(path_params);
            return _this.client.get(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of the roles that are attached to a group within a given tenant.
         * @param group The group name.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<string>
         */
        _this.listGroupRoles = function (group, args, requestStatusCallback) {
            var path_params = {
                group: group
            };
            var path = _this.template(templateObject_18 || (templateObject_18 = __makeTemplateObject(["/identity/v2beta1/groups/", "/roles"], ["/identity/v2beta1/groups/", "/roles"])), 'group')(path_params);
            return _this.client.get(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * List the groups that exist in a given tenant.
         * @param args parameters to be sent with the request
         * @param args.access List only the groups with specified access permission.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<string>
         */
        _this.listGroups = function (args, requestStatusCallback) {
            var path = "/identity/v2beta1/groups";
            return _this.client.get(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of groups that a member belongs to within a tenant.
         * @param member The member name.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<string>
         */
        _this.listMemberGroups = function (member, args, requestStatusCallback) {
            var path_params = {
                member: member
            };
            var path = _this.template(templateObject_19 || (templateObject_19 = __makeTemplateObject(["/identity/v2beta1/members/", "/groups"], ["/identity/v2beta1/members/", "/groups"])), 'member')(path_params);
            return _this.client.get(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a set of permissions granted to the member within the tenant.
         * @param member The member name.
         * @param args parameters to be sent with the request
         * @param args.scopeFilter List only the permissions matching the scope filter.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<string>
         */
        _this.listMemberPermissions = function (member, args, requestStatusCallback) {
            var path_params = {
                member: member
            };
            var path = _this.template(templateObject_20 || (templateObject_20 = __makeTemplateObject(["/identity/v2beta1/members/", "/permissions"], ["/identity/v2beta1/members/", "/permissions"])), 'member')(path_params);
            return _this.client.get(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a set of roles that a given member holds within the tenant.
         * @param member The member name.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<string>
         */
        _this.listMemberRoles = function (member, args, requestStatusCallback) {
            var path_params = {
                member: member
            };
            var path = _this.template(templateObject_21 || (templateObject_21 = __makeTemplateObject(["/identity/v2beta1/members/", "/roles"], ["/identity/v2beta1/members/", "/roles"])), 'member')(path_params);
            return _this.client.get(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of members in a given tenant.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<string>
         */
        _this.listMembers = function (args, requestStatusCallback) {
            var path = "/identity/v2beta1/members";
            return _this.client.get(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the list of principals that the Identity service knows about.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<string>
         */
        _this.listPrincipals = function (args, requestStatusCallback) {
            var path = "/system/identity/v2beta1/principals";
            return _this.client.get(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Gets a list of groups for a role in a given tenant.
         * @param role The role name.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<string>
         */
        _this.listRoleGroups = function (role, args, requestStatusCallback) {
            var path_params = {
                role: role
            };
            var path = _this.template(templateObject_22 || (templateObject_22 = __makeTemplateObject(["/identity/v2beta1/roles/", "/groups"], ["/identity/v2beta1/roles/", "/groups"])), 'role')(path_params);
            return _this.client.get(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Gets the permissions for a role in a given tenant.
         * @param role The role name.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<string>
         */
        _this.listRolePermissions = function (role, args, requestStatusCallback) {
            var path_params = {
                role: role
            };
            var path = _this.template(templateObject_23 || (templateObject_23 = __makeTemplateObject(["/identity/v2beta1/roles/", "/permissions"], ["/identity/v2beta1/roles/", "/permissions"])), 'role')(path_params);
            return _this.client.get(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns all roles for a given tenant.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<string>
         */
        _this.listRoles = function (args, requestStatusCallback) {
            var path = "/identity/v2beta1/roles";
            return _this.client.get(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Removes the member from a given group.
         * @param group The group name.
         * @param member The member name.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.removeGroupMember = function (group, member, args, requestStatusCallback) {
            var path_params = {
                group: group,
                member: member
            };
            var path = _this.template(templateObject_24 || (templateObject_24 = __makeTemplateObject(["/identity/v2beta1/groups/", "/members/", ""], ["/identity/v2beta1/groups/", "/members/", ""])), 'group', 'member')(path_params);
            return _this.client["delete"](exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Removes a role from a given group.
         * @param group The group name.
         * @param role The role name.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.removeGroupRole = function (group, role, args, requestStatusCallback) {
            var path_params = {
                group: group,
                role: role
            };
            var path = _this.template(templateObject_25 || (templateObject_25 = __makeTemplateObject(["/identity/v2beta1/groups/", "/roles/", ""], ["/identity/v2beta1/groups/", "/roles/", ""])), 'group', 'role')(path_params);
            return _this.client["delete"](exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Removes a member from a given tenant
         * @param member The member name.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.removeMember = function (member, args, requestStatusCallback) {
            var path_params = {
                member: member
            };
            var path = _this.template(templateObject_26 || (templateObject_26 = __makeTemplateObject(["/identity/v2beta1/members/", ""], ["/identity/v2beta1/members/", ""])), 'member')(path_params);
            return _this.client["delete"](exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Removes a permission from the role.
         * @param role The role name.
         * @param permission The permission string.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.removeRolePermission = function (role, permission, args, requestStatusCallback) {
            var path_params = {
                role: role,
                permission: permission
            };
            var path = _this.template(templateObject_27 || (templateObject_27 = __makeTemplateObject(["/identity/v2beta1/roles/", "/permissions/", ""], ["/identity/v2beta1/roles/", "/permissions/", ""])), 'role', 'permission')(path_params);
            return _this.client["delete"](exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Revoke all existing tokens issued to a principal. Principals can reset their password by visiting https://login.splunk.com/en_us/page/lost_password
         * @param principal The principal name.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.revokePrincipalAuthTokens = function (principal, args, requestStatusCallback) {
            var path_params = {
                principal: principal
            };
            var path = _this.template(templateObject_28 || (templateObject_28 = __makeTemplateObject(["/system/identity/v2beta1/principals/", "/revoke"], ["/system/identity/v2beta1/principals/", "/revoke"])), 'principal')(path_params);
            return _this.client.post(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Update principal public key
         * @param principal The principal name.
         * @param keyId Identifier of a public key.
         * @param principalPublicKeyStatusBody Status of the public key
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return PrincipalPublicKey
         */
        _this.updatePrincipalPublicKey = function (principal, keyId, principalPublicKeyStatusBody, args, requestStatusCallback) {
            var path_params = {
                principal: principal,
                keyId: keyId
            };
            var path = _this.template(templateObject_29 || (templateObject_29 = __makeTemplateObject(["/system/identity/v2beta1/principals/", "/keys/", ""], ["/system/identity/v2beta1/principals/", "/keys/", ""])), 'principal', 'keyId')(path_params);
            return _this.client.put(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), principalPublicKeyStatusBody, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Validates the access token obtained from the authorization header and returns the principal name and tenant memberships.
         * @param args parameters to be sent with the request
         * @param args.include Include additional information to return when validating tenant membership. Valid parameters [tenant, principal]
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return ValidateInfo
         */
        _this.validateToken = function (args, requestStatusCallback) {
            var path = "/identity/v2beta1/validate";
            return _this.client.get(exports.IDENTITY_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        return _this;
    }
    GeneratedIdentityService.prototype.getServiceCluster = function () {
        return exports.IDENTITY_SERVICE_CLUSTER;
    };
    GeneratedIdentityService.prototype.getServicePrefix = function () {
        return exports.IDENTITY_SERVICE_PREFIX;
    };
    return GeneratedIdentityService;
}(baseapiservice_1["default"]));
exports.GeneratedIdentityService = GeneratedIdentityService;
exports.IdentityService = identity_1.IdentityServiceExtensions(GeneratedIdentityService);
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12, templateObject_13, templateObject_14, templateObject_15, templateObject_16, templateObject_17, templateObject_18, templateObject_19, templateObject_20, templateObject_21, templateObject_22, templateObject_23, templateObject_24, templateObject_25, templateObject_26, templateObject_27, templateObject_28, templateObject_29;
//# sourceMappingURL=GeneratedApis.js.map