/**
 * Copyright 2020 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Provisioner
 * With the Provisioner service in Splunk Cloud Services, you can provision and manage tenants.
 *
 * OpenAPI spec version: v1beta1.4 (recommended default)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { InviteBody, InviteInfo, TenantInfo, UpdateInviteBody } from '../models';
import BaseApiService from "../../../../baseapiservice";
import { ProvisionerServiceExtensions } from "../../../../service_extensions/provisioner";
import { RequestStatus } from '../../../../client';
export declare const PROVISIONER_SERVICE_PREFIX: string;
export declare const PROVISIONER_SERVICE_CLUSTER: string;
/**
 * Provisioner
 * Version: v1beta1.4
 * With the Provisioner service in Splunk Cloud Services, you can provision and manage tenants.
 */
export declare class GeneratedProvisionerService extends BaseApiService {
    getServiceCluster(): string;
    getServicePrefix(): string;
    /**
     * Creates an invitation for a person to join the tenant using their email address.
     * @param inviteBody
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return InviteInfo
     */
    createInvite: (inviteBody: InviteBody, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<InviteInfo>;
    /**
     * Removes an invitation in the given tenant.
     * @param inviteId
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteInvite: (inviteId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Returns an invitation in the given tenant.
     * @param inviteId
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return InviteInfo
     */
    getInvite: (inviteId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<InviteInfo>;
    /**
     * Returns a specific tenant.
     * @param tenantName
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return TenantInfo
     */
    getTenant: (tenantName: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<TenantInfo>;
    /**
     * Returns a list of invitations in a given tenant.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Invites
     */
    listInvites: (args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<InviteInfo[]>;
    /**
     * Returns all tenants that the user can read.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Tenants
     */
    listTenants: (args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<TenantInfo[]>;
    /**
     * Modifies an invitation in the given tenant.
     * @param inviteId
     * @param updateInviteBody
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return InviteInfo
     */
    updateInvite: (inviteId: string, updateInviteBody: UpdateInviteBody, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<InviteInfo>;
}
export declare type ProvisionerService = GeneratedProvisionerService & ProvisionerServiceExtensions;
export declare const ProvisionerService: typeof GeneratedProvisionerService;
