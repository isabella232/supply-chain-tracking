"use strict";
// tslint:disable
/**
 * Copyright 2020 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Provisioner
 * With the Provisioner service in Splunk Cloud Services, you can provision and manage tenants.
 *
 * OpenAPI spec version: v1beta1.4 (recommended default)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var baseapiservice_1 = __importDefault(require("../../../../baseapiservice"));
var provisioner_1 = require("../../../../service_extensions/provisioner");
exports.PROVISIONER_SERVICE_PREFIX = '/provisioner/v1beta1';
exports.PROVISIONER_SERVICE_CLUSTER = 'api';
/**
 * Provisioner
 * Version: v1beta1.4
 * With the Provisioner service in Splunk Cloud Services, you can provision and manage tenants.
 */
var GeneratedProvisionerService = /** @class */ (function (_super) {
    __extends(GeneratedProvisionerService, _super);
    function GeneratedProvisionerService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Creates an invitation for a person to join the tenant using their email address.
         * @param inviteBody
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return InviteInfo
         */
        _this.createInvite = function (inviteBody, args, requestStatusCallback) {
            var path = "/provisioner/v1beta1/invites";
            return _this.client.post(exports.PROVISIONER_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), inviteBody, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Removes an invitation in the given tenant.
         * @param inviteId
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteInvite = function (inviteId, args, requestStatusCallback) {
            var path_params = {
                inviteId: inviteId
            };
            var path = _this.template(templateObject_1 || (templateObject_1 = __makeTemplateObject(["/provisioner/v1beta1/invites/", ""], ["/provisioner/v1beta1/invites/", ""])), 'inviteId')(path_params);
            return _this.client["delete"](exports.PROVISIONER_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns an invitation in the given tenant.
         * @param inviteId
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return InviteInfo
         */
        _this.getInvite = function (inviteId, args, requestStatusCallback) {
            var path_params = {
                inviteId: inviteId
            };
            var path = _this.template(templateObject_2 || (templateObject_2 = __makeTemplateObject(["/provisioner/v1beta1/invites/", ""], ["/provisioner/v1beta1/invites/", ""])), 'inviteId')(path_params);
            return _this.client.get(exports.PROVISIONER_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a specific tenant.
         * @param tenantName
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return TenantInfo
         */
        _this.getTenant = function (tenantName, args, requestStatusCallback) {
            var path_params = {
                tenantName: tenantName
            };
            var path = _this.template(templateObject_3 || (templateObject_3 = __makeTemplateObject(["/system/provisioner/v1beta1/tenants/", ""], ["/system/provisioner/v1beta1/tenants/", ""])), 'tenantName')(path_params);
            return _this.client.get(exports.PROVISIONER_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of invitations in a given tenant.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Invites
         */
        _this.listInvites = function (args, requestStatusCallback) {
            var path = "/provisioner/v1beta1/invites";
            return _this.client.get(exports.PROVISIONER_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns all tenants that the user can read.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Tenants
         */
        _this.listTenants = function (args, requestStatusCallback) {
            var path = "/system/provisioner/v1beta1/tenants";
            return _this.client.get(exports.PROVISIONER_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Modifies an invitation in the given tenant.
         * @param inviteId
         * @param updateInviteBody
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return InviteInfo
         */
        _this.updateInvite = function (inviteId, updateInviteBody, args, requestStatusCallback) {
            var path_params = {
                inviteId: inviteId
            };
            var path = _this.template(templateObject_4 || (templateObject_4 = __makeTemplateObject(["/provisioner/v1beta1/invites/", ""], ["/provisioner/v1beta1/invites/", ""])), 'inviteId')(path_params);
            return _this.client.patch(exports.PROVISIONER_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), updateInviteBody, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        return _this;
    }
    GeneratedProvisionerService.prototype.getServiceCluster = function () {
        return exports.PROVISIONER_SERVICE_CLUSTER;
    };
    GeneratedProvisionerService.prototype.getServicePrefix = function () {
        return exports.PROVISIONER_SERVICE_PREFIX;
    };
    return GeneratedProvisionerService;
}(baseapiservice_1["default"]));
exports.GeneratedProvisionerService = GeneratedProvisionerService;
exports.ProvisionerService = provisioner_1.ProvisionerServiceExtensions(GeneratedProvisionerService);
var templateObject_1, templateObject_2, templateObject_3, templateObject_4;
//# sourceMappingURL=GeneratedApis.js.map