"use strict";
// tslint:disable
/**
 * Copyright 2020 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Metadata Catalog
 * With the Metadata Catalog you can create and manage knowledge objects such as datasets, fields, rules, actions, dashboards, and workflows.
 *
 * OpenAPI spec version: v2alpha2.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var baseapiservice_1 = __importDefault(require("../../../../baseapiservice"));
var catalog_1 = require("../../../../service_extensions/catalog");
var client_1 = require("../../../../client");
exports.CATALOG_SERVICE_PREFIX = '/catalog/v2alpha2';
exports.CATALOG_SERVICE_CLUSTER = 'api';
/**
 * Metadata Catalog
 * Version: v2alpha2.6
 * With the Metadata Catalog you can create and manage knowledge objects such as datasets, fields, rules, actions, dashboards, and workflows.
 */
var GeneratedCatalogService = /** @class */ (function (_super) {
    __extends(GeneratedCatalogService, _super);
    function GeneratedCatalogService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Create a new action for a rule associated with a specific resource name.
         * @param ruleresourcename The resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
         * @param actionPOST The JSON representation of the action to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Action
         */
        _this.createActionForRule = function (ruleresourcename, actionPOST, args, requestStatusCallback) {
            var path_params = {
                ruleresourcename: ruleresourcename
            };
            var path = _this.template(templateObject_1 || (templateObject_1 = __makeTemplateObject(["/catalog/v2alpha2/rules/", "/actions"], ["/catalog/v2alpha2/rules/", "/actions"])), 'ruleresourcename')(path_params);
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), actionPOST, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Create a new action for a specific rule.
         * @param ruleid ID of a Field.
         * @param actionPOST The JSON representation of the action to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Action
         */
        _this.createActionForRuleById = function (ruleid, actionPOST, args, requestStatusCallback) {
            var path_params = {
                ruleid: ruleid
            };
            var path = _this.template(templateObject_2 || (templateObject_2 = __makeTemplateObject(["/catalog/v2alpha2/rules/", "/actions"], ["/catalog/v2alpha2/rules/", "/actions"])), 'ruleid')(path_params);
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), actionPOST, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Create a new annotation for a specific dashboard.
         * @param dashboardid ID of a dashboard.
         * @param annotationPOST The JSON representation of the annotation to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Annotation
         */
        _this.createAnnotationForDashboardbyId = function (dashboardid, annotationPOST, args, requestStatusCallback) {
            var path_params = {
                dashboardid: dashboardid
            };
            var path = _this.template(templateObject_3 || (templateObject_3 = __makeTemplateObject(["/catalog/v2alpha2/dashboards/", "/annotations"], ["/catalog/v2alpha2/dashboards/", "/annotations"])), 'dashboardid')(path_params);
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), annotationPOST, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Create a new annotation for a specific dataset.
         * @param dashboardresourcename The resource name of a dashvboard. The resource name format is module.dashboardname.
         * @param annotationPOST The JSON representation of the annotation to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Annotation
         */
        _this.createAnnotationForDashboardsByResourceName = function (dashboardresourcename, annotationPOST, args, requestStatusCallback) {
            var path_params = {
                dashboardresourcename: dashboardresourcename
            };
            var path = _this.template(templateObject_4 || (templateObject_4 = __makeTemplateObject(["/catalog/v2alpha2/dashboards/", "/annotations"], ["/catalog/v2alpha2/dashboards/", "/annotations"])), 'dashboardresourcename')(path_params);
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), annotationPOST, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Create a new annotation for a specific dataset.
         * @param datasetid ID of a Dataset.
         * @param annotationPOST The JSON representation of the annotation to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Annotation
         */
        _this.createAnnotationForDatasetById = function (datasetid, annotationPOST, args, requestStatusCallback) {
            var path_params = {
                datasetid: datasetid
            };
            var path = _this.template(templateObject_5 || (templateObject_5 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", "/annotations"], ["/catalog/v2alpha2/datasets/", "/annotations"])), 'datasetid')(path_params);
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), annotationPOST, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Create a new annotation for a specific dataset.
         * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param annotationPOST The JSON representation of the annotation to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Annotation
         */
        _this.createAnnotationForDatasetByResourceName = function (datasetresourcename, annotationPOST, args, requestStatusCallback) {
            var path_params = {
                datasetresourcename: datasetresourcename
            };
            var path = _this.template(templateObject_6 || (templateObject_6 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", "/annotations"], ["/catalog/v2alpha2/datasets/", "/annotations"])), 'datasetresourcename')(path_params);
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), annotationPOST, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Create a new dashboard.
         * @param dashboardPOST The JSON representation of the Dashboard to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Dashboard
         */
        _this.createDashboard = function (dashboardPOST, args, requestStatusCallback) {
            var path = "/catalog/v2alpha2/dashboards";
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), dashboardPOST, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Create a new dataset.
         * @param datasetPOST JSON representation of the DatasetInfo to be persisted
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Dataset
         */
        _this.createDataset = function (datasetPOST, args, requestStatusCallback) {
            var path = "/catalog/v2alpha2/datasets";
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), datasetPOST, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Create a new dataset import.
         * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param datasetImportedBy
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Dataset
         */
        _this.createDatasetImport = function (datasetresourcename, datasetImportedBy, args, requestStatusCallback) {
            if (!datasetImportedBy) {
                throw new client_1.SplunkError({ message: "Bad Request: datasetImportedBy is empty or undefined" });
            }
            var path_params = {
                datasetresourcename: datasetresourcename
            };
            var path = _this.template(templateObject_7 || (templateObject_7 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", "/imported-by"], ["/catalog/v2alpha2/datasets/", "/imported-by"])), 'datasetresourcename')(path_params);
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), datasetImportedBy, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Create a new dataset import.
         * @param datasetid ID of a Dataset.
         * @param datasetImportedBy
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return DatasetImportedBy
         */
        _this.createDatasetImportById = function (datasetid, datasetImportedBy, args, requestStatusCallback) {
            if (!datasetImportedBy) {
                throw new client_1.SplunkError({ message: "Bad Request: datasetImportedBy is empty or undefined" });
            }
            var path_params = {
                datasetid: datasetid
            };
            var path = _this.template(templateObject_8 || (templateObject_8 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", "/imported-by"], ["/catalog/v2alpha2/datasets/", "/imported-by"])), 'datasetid')(path_params);
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), datasetImportedBy, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Create a new dataset import.
         * @param datasetid ID of a Dataset.
         * @param datasetImportedBy
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return DatasetImportedBy
         */
        _this.createDatasetImportByIdv1 = function (datasetid, datasetImportedBy, args, requestStatusCallback) {
            if (!datasetImportedBy) {
                throw new client_1.SplunkError({ message: "Bad Request: datasetImportedBy is empty or undefined" });
            }
            var path_params = {
                datasetid: datasetid
            };
            var path = _this.template(templateObject_9 || (templateObject_9 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", "/importedby"], ["/catalog/v2alpha2/datasets/", "/importedby"])), 'datasetid')(path_params);
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), datasetImportedBy, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Create a new dataset import.
         * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param datasetImportedBy
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Dataset
         */
        _this.createDatasetImportv1 = function (datasetresourcename, datasetImportedBy, args, requestStatusCallback) {
            if (!datasetImportedBy) {
                throw new client_1.SplunkError({ message: "Bad Request: datasetImportedBy is empty or undefined" });
            }
            var path_params = {
                datasetresourcename: datasetresourcename
            };
            var path = _this.template(templateObject_10 || (templateObject_10 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", "/importedby"], ["/catalog/v2alpha2/datasets/", "/importedby"])), 'datasetresourcename')(path_params);
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), datasetImportedBy, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Create a new field on a specific dataset.
         * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param fieldPOST The JSON representation of the field to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Field
         */
        _this.createFieldForDataset = function (datasetresourcename, fieldPOST, args, requestStatusCallback) {
            var path_params = {
                datasetresourcename: datasetresourcename
            };
            var path = _this.template(templateObject_11 || (templateObject_11 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", "/fields"], ["/catalog/v2alpha2/datasets/", "/fields"])), 'datasetresourcename')(path_params);
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), fieldPOST, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Add a new field to a dataset.
         * @param datasetid ID of a Dataset.
         * @param fieldPOST The JSON representation of the field to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Field
         */
        _this.createFieldForDatasetById = function (datasetid, fieldPOST, args, requestStatusCallback) {
            var path_params = {
                datasetid: datasetid
            };
            var path = _this.template(templateObject_12 || (templateObject_12 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", "/fields"], ["/catalog/v2alpha2/datasets/", "/fields"])), 'datasetid')(path_params);
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), fieldPOST, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Create a new relationship.
         * @param relationshipPOST The JSON representation of the relationship to persist.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Relationship
         */
        _this.createRelationship = function (relationshipPOST, args, requestStatusCallback) {
            var path = "/catalog/v2alpha2/relationships";
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), relationshipPOST, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Create a new rule.
         * @param rulePOST The JSON representation of the rule to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Rule
         */
        _this.createRule = function (rulePOST, args, requestStatusCallback) {
            var path = "/catalog/v2alpha2/rules";
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), rulePOST, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Create a new workflow configuration.
         * @param workflowPOST The JSON representation of the workflow to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Workflow
         */
        _this.createWorkflow = function (workflowPOST, args, requestStatusCallback) {
            var path = "/catalog/v2alpha2/workflows";
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), workflowPOST, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Create a new workflow build.
         * @param workflowid ID of a workflow.
         * @param workflowBuildPOST The JSON representation of the workflow build to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return WorkflowBuild
         */
        _this.createWorkflowBuild = function (workflowid, workflowBuildPOST, args, requestStatusCallback) {
            var path_params = {
                workflowid: workflowid
            };
            var path = _this.template(templateObject_13 || (templateObject_13 = __makeTemplateObject(["/catalog/v2alpha2/workflows/", "/builds"], ["/catalog/v2alpha2/workflows/", "/builds"])), 'workflowid')(path_params);
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), workflowBuildPOST, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Create a new workflow run for the specified workflow build ID.
         * @param workflowid ID of a workflow.
         * @param workflowbuildid ID of a workflow build.
         * @param workflowRunPOST The JSON representation of the workflow run to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return WorkflowRun
         */
        _this.createWorkflowRun = function (workflowid, workflowbuildid, workflowRunPOST, args, requestStatusCallback) {
            var path_params = {
                workflowid: workflowid,
                workflowbuildid: workflowbuildid
            };
            var path = _this.template(templateObject_14 || (templateObject_14 = __makeTemplateObject(["/catalog/v2alpha2/workflows/", "/builds/", "/runs"], ["/catalog/v2alpha2/workflows/", "/builds/", "/runs"])), 'workflowid', 'workflowbuildid')(path_params);
            return _this.client.post(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), workflowRunPOST, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Delete an action on a rule.
         * @param ruleresourcename The resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
         * @param actionid ID of an Action.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteActionByIdForRule = function (ruleresourcename, actionid, args, requestStatusCallback) {
            var path_params = {
                ruleresourcename: ruleresourcename,
                actionid: actionid
            };
            var path = _this.template(templateObject_15 || (templateObject_15 = __makeTemplateObject(["/catalog/v2alpha2/rules/", "/actions/", ""], ["/catalog/v2alpha2/rules/", "/actions/", ""])), 'ruleresourcename', 'actionid')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Delete an action that is part of a specific rule.
         * @param ruleid ID of a Field.
         * @param actionid ID of an Action.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteActionByIdForRuleById = function (ruleid, actionid, args, requestStatusCallback) {
            var path_params = {
                ruleid: ruleid,
                actionid: actionid
            };
            var path = _this.template(templateObject_16 || (templateObject_16 = __makeTemplateObject(["/catalog/v2alpha2/rules/", "/actions/", ""], ["/catalog/v2alpha2/rules/", "/actions/", ""])), 'ruleid', 'actionid')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Delete a specific annotation of a dashboard.
         * @param dashboardid ID of a dashboard.
         * @param annotationid ID of a annotation.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteAnnotationOfDashboardById = function (dashboardid, annotationid, args, requestStatusCallback) {
            var path_params = {
                dashboardid: dashboardid,
                annotationid: annotationid
            };
            var path = _this.template(templateObject_17 || (templateObject_17 = __makeTemplateObject(["/catalog/v2alpha2/dashboards/", "/annotations/", ""], ["/catalog/v2alpha2/dashboards/", "/annotations/", ""])), 'dashboardid', 'annotationid')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Delete a specific annotation of a dashboard.
         * @param dashboardresourcename The resource name of a dashvboard. The resource name format is module.dashboardname.
         * @param annotationid ID of a annotation.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteAnnotationOfDashboardByResourceName = function (dashboardresourcename, annotationid, args, requestStatusCallback) {
            var path_params = {
                dashboardresourcename: dashboardresourcename,
                annotationid: annotationid
            };
            var path = _this.template(templateObject_18 || (templateObject_18 = __makeTemplateObject(["/catalog/v2alpha2/dashboards/", "/annotations/", ""], ["/catalog/v2alpha2/dashboards/", "/annotations/", ""])), 'dashboardresourcename', 'annotationid')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Delete a specific annotation of a dataset.
         * @param datasetid ID of a Dataset.
         * @param annotationid ID of a annotation.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteAnnotationOfDatasetById = function (datasetid, annotationid, args, requestStatusCallback) {
            var path_params = {
                datasetid: datasetid,
                annotationid: annotationid
            };
            var path = _this.template(templateObject_19 || (templateObject_19 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", "/annotations/", ""], ["/catalog/v2alpha2/datasets/", "/annotations/", ""])), 'datasetid', 'annotationid')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Delete a specific annotation of a dataset.
         * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param annotationid ID of a annotation.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteAnnotationOfDatasetByResourceName = function (datasetresourcename, annotationid, args, requestStatusCallback) {
            var path_params = {
                datasetresourcename: datasetresourcename,
                annotationid: annotationid
            };
            var path = _this.template(templateObject_20 || (templateObject_20 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", "/annotations/", ""], ["/catalog/v2alpha2/datasets/", "/annotations/", ""])), 'datasetresourcename', 'annotationid')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Delete the dashboard with the specified ID.
         * @param dashboardid ID of a dashboard.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteDashboardById = function (dashboardid, args, requestStatusCallback) {
            var path_params = {
                dashboardid: dashboardid
            };
            var path = _this.template(templateObject_21 || (templateObject_21 = __makeTemplateObject(["/catalog/v2alpha2/dashboards/", ""], ["/catalog/v2alpha2/dashboards/", ""])), 'dashboardid')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Delete the dashboard with the specified resource name.
         * @param dashboardresourcename The resource name of a dashvboard. The resource name format is module.dashboardname.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteDashboardByResourceName = function (dashboardresourcename, args, requestStatusCallback) {
            var path_params = {
                dashboardresourcename: dashboardresourcename
            };
            var path = _this.template(templateObject_22 || (templateObject_22 = __makeTemplateObject(["/catalog/v2alpha2/dashboards/", ""], ["/catalog/v2alpha2/dashboards/", ""])), 'dashboardresourcename')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Delete the dataset with the specified resource name, along with its dependencies. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteDataset = function (datasetresourcename, args, requestStatusCallback) {
            var path_params = {
                datasetresourcename: datasetresourcename
            };
            var path = _this.template(templateObject_23 || (templateObject_23 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", ""], ["/catalog/v2alpha2/datasets/", ""])), 'datasetresourcename')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Delete a specific dataset. Deleting a dataset also deletes its dependent objects, such as fields.
         * @param datasetid ID of a Dataset.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteDatasetById = function (datasetid, args, requestStatusCallback) {
            var path_params = {
                datasetid: datasetid
            };
            var path = _this.template(templateObject_24 || (templateObject_24 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", ""], ["/catalog/v2alpha2/datasets/", ""])), 'datasetid')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Delete a field that is part of a specific dataset.
         * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param fieldid ID of a Field.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteFieldByIdForDataset = function (datasetresourcename, fieldid, args, requestStatusCallback) {
            var path_params = {
                datasetresourcename: datasetresourcename,
                fieldid: fieldid
            };
            var path = _this.template(templateObject_25 || (templateObject_25 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", "/fields/", ""], ["/catalog/v2alpha2/datasets/", "/fields/", ""])), 'datasetresourcename', 'fieldid')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Delete a field that is part of a specific dataset.
         * @param datasetid ID of a Dataset.
         * @param fieldid ID of a Field.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteFieldByIdForDatasetById = function (datasetid, fieldid, args, requestStatusCallback) {
            var path_params = {
                datasetid: datasetid,
                fieldid: fieldid
            };
            var path = _this.template(templateObject_26 || (templateObject_26 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", "/fields/", ""], ["/catalog/v2alpha2/datasets/", "/fields/", ""])), 'datasetid', 'fieldid')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Delete a specific relationship. Deleting a relationship also deleletes any objects that are dependents of that relationship, such as relationship fields.
         * @param relationshipid ID of a relationship.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteRelationshipById = function (relationshipid, args, requestStatusCallback) {
            var path_params = {
                relationshipid: relationshipid
            };
            var path = _this.template(templateObject_27 || (templateObject_27 = __makeTemplateObject(["/catalog/v2alpha2/relationships/", ""], ["/catalog/v2alpha2/relationships/", ""])), 'relationshipid')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Delete the rule with the specified resource name and its dependencies.
         * @param ruleresourcename The resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteRule = function (ruleresourcename, args, requestStatusCallback) {
            var path_params = {
                ruleresourcename: ruleresourcename
            };
            var path = _this.template(templateObject_28 || (templateObject_28 = __makeTemplateObject(["/catalog/v2alpha2/rules/", ""], ["/catalog/v2alpha2/rules/", ""])), 'ruleresourcename')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Delete a specific rule. Deleting a rule also deleletes any objects that are dependents of that rule, such as rule actions.
         * @param ruleid ID of a Field.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteRuleById = function (ruleid, args, requestStatusCallback) {
            var path_params = {
                ruleid: ruleid
            };
            var path = _this.template(templateObject_29 || (templateObject_29 = __makeTemplateObject(["/catalog/v2alpha2/rules/", ""], ["/catalog/v2alpha2/rules/", ""])), 'ruleid')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Delete the workflow build with the specified workflow build ID.
         * @param workflowid ID of a workflow.
         * @param workflowbuildid ID of a workflow build.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteWorkflowBuildById = function (workflowid, workflowbuildid, args, requestStatusCallback) {
            var path_params = {
                workflowid: workflowid,
                workflowbuildid: workflowbuildid
            };
            var path = _this.template(templateObject_30 || (templateObject_30 = __makeTemplateObject(["/catalog/v2alpha2/workflows/", "/builds/", ""], ["/catalog/v2alpha2/workflows/", "/builds/", ""])), 'workflowid', 'workflowbuildid')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Delete the workflow with the specified workflow ID.
         * @param workflowid ID of a workflow.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteWorkflowById = function (workflowid, args, requestStatusCallback) {
            var path_params = {
                workflowid: workflowid
            };
            var path = _this.template(templateObject_31 || (templateObject_31 = __makeTemplateObject(["/catalog/v2alpha2/workflows/", ""], ["/catalog/v2alpha2/workflows/", ""])), 'workflowid')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Delete the workflow run with the specified workflow run ID.
         * @param workflowid ID of a workflow.
         * @param workflowbuildid ID of a workflow build.
         * @param workflowrunid ID of a workflow run.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteWorkflowRunById = function (workflowid, workflowbuildid, workflowrunid, args, requestStatusCallback) {
            var path_params = {
                workflowid: workflowid,
                workflowbuildid: workflowbuildid,
                workflowrunid: workflowrunid
            };
            var path = _this.template(templateObject_32 || (templateObject_32 = __makeTemplateObject(["/catalog/v2alpha2/workflows/", "/builds/", "/runs/", ""], ["/catalog/v2alpha2/workflows/", "/builds/", "/runs/", ""])), 'workflowid', 'workflowbuildid', 'workflowrunid')(path_params);
            return _this.client["delete"](exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return an action that is part of a specified rule.
         * @param ruleresourcename The resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
         * @param actionid ID of an Action.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Action
         */
        _this.getActionByIdForRule = function (ruleresourcename, actionid, args, requestStatusCallback) {
            var path_params = {
                ruleresourcename: ruleresourcename,
                actionid: actionid
            };
            var path = _this.template(templateObject_33 || (templateObject_33 = __makeTemplateObject(["/catalog/v2alpha2/rules/", "/actions/", ""], ["/catalog/v2alpha2/rules/", "/actions/", ""])), 'ruleresourcename', 'actionid')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return information about an action that is part of a specific rule.
         * @param ruleid ID of a Field.
         * @param actionid ID of an Action.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Action
         */
        _this.getActionByIdForRuleById = function (ruleid, actionid, args, requestStatusCallback) {
            var path_params = {
                ruleid: ruleid,
                actionid: actionid
            };
            var path = _this.template(templateObject_34 || (templateObject_34 = __makeTemplateObject(["/catalog/v2alpha2/rules/", "/actions/", ""], ["/catalog/v2alpha2/rules/", "/actions/", ""])), 'ruleid', 'actionid')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return information about a dashboard with the specified ID.
         * @param dashboardid ID of a dashboard.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Dashboard
         */
        _this.getDashboardById = function (dashboardid, args, requestStatusCallback) {
            var path_params = {
                dashboardid: dashboardid
            };
            var path = _this.template(templateObject_35 || (templateObject_35 = __makeTemplateObject(["/catalog/v2alpha2/dashboards/", ""], ["/catalog/v2alpha2/dashboards/", ""])), 'dashboardid')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return information about a dashboard with the specified resource name.
         * @param dashboardresourcename The resource name of a dashvboard. The resource name format is module.dashboardname.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Dashboard
         */
        _this.getDashboardByResourceName = function (dashboardresourcename, args, requestStatusCallback) {
            var path_params = {
                dashboardresourcename: dashboardresourcename
            };
            var path = _this.template(templateObject_36 || (templateObject_36 = __makeTemplateObject(["/catalog/v2alpha2/dashboards/", ""], ["/catalog/v2alpha2/dashboards/", ""])), 'dashboardresourcename')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param args parameters to be sent with the request
         * @param args.maxstale The number of seconds beyond which we will refresh index metadata.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Dataset
         */
        _this.getDataset = function (datasetresourcename, args, requestStatusCallback) {
            var path_params = {
                datasetresourcename: datasetresourcename
            };
            var path = _this.template(templateObject_37 || (templateObject_37 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", ""], ["/catalog/v2alpha2/datasets/", ""])), 'datasetresourcename')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return information about the dataset with the specified ID.
         * @param datasetid ID of a Dataset.
         * @param args parameters to be sent with the request
         * @param args.maxstale The number of seconds beyond which we will refresh index metadata.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Dataset
         */
        _this.getDatasetById = function (datasetid, args, requestStatusCallback) {
            var path_params = {
                datasetid: datasetid
            };
            var path = _this.template(templateObject_38 || (templateObject_38 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", ""], ["/catalog/v2alpha2/datasets/", ""])), 'datasetid')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Get a field that corresponds to a specific field ID.
         * @param fieldid ID of a Field.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Field
         */
        _this.getFieldById = function (fieldid, args, requestStatusCallback) {
            var path_params = {
                fieldid: fieldid
            };
            var path = _this.template(templateObject_39 || (templateObject_39 = __makeTemplateObject(["/catalog/v2alpha2/fields/", ""], ["/catalog/v2alpha2/fields/", ""])), 'fieldid')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return a field that is part of a specific dataset.
         * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param fieldid ID of a Field.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Field
         */
        _this.getFieldByIdForDataset = function (datasetresourcename, fieldid, args, requestStatusCallback) {
            var path_params = {
                datasetresourcename: datasetresourcename,
                fieldid: fieldid
            };
            var path = _this.template(templateObject_40 || (templateObject_40 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", "/fields/", ""], ["/catalog/v2alpha2/datasets/", "/fields/", ""])), 'datasetresourcename', 'fieldid')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return a field that is part of a specific dataset.
         * @param datasetid ID of a Dataset.
         * @param fieldid ID of a Field.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Field
         */
        _this.getFieldByIdForDatasetById = function (datasetid, fieldid, args, requestStatusCallback) {
            var path_params = {
                datasetid: datasetid,
                fieldid: fieldid
            };
            var path = _this.template(templateObject_41 || (templateObject_41 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", "/fields/", ""], ["/catalog/v2alpha2/datasets/", "/fields/", ""])), 'datasetid', 'fieldid')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Get a specific relationship.
         * @param relationshipid ID of a relationship.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Relationship
         */
        _this.getRelationshipById = function (relationshipid, args, requestStatusCallback) {
            var path_params = {
                relationshipid: relationshipid
            };
            var path = _this.template(templateObject_42 || (templateObject_42 = __makeTemplateObject(["/catalog/v2alpha2/relationships/", ""], ["/catalog/v2alpha2/relationships/", ""])), 'relationshipid')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Get a rule with a specified resource name.
         * @param ruleresourcename The resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Rule
         */
        _this.getRule = function (ruleresourcename, args, requestStatusCallback) {
            var path_params = {
                ruleresourcename: ruleresourcename
            };
            var path = _this.template(templateObject_43 || (templateObject_43 = __makeTemplateObject(["/catalog/v2alpha2/rules/", ""], ["/catalog/v2alpha2/rules/", ""])), 'ruleresourcename')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Get information about a specific rule.
         * @param ruleid ID of a Field.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Rule
         */
        _this.getRuleById = function (ruleid, args, requestStatusCallback) {
            var path_params = {
                ruleid: ruleid
            };
            var path = _this.template(templateObject_44 || (templateObject_44 = __makeTemplateObject(["/catalog/v2alpha2/rules/", ""], ["/catalog/v2alpha2/rules/", ""])), 'ruleid')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return information about the workflow build with the specified workflow build ID.
         * @param workflowid ID of a workflow.
         * @param workflowbuildid ID of a workflow build.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return WorkflowBuild
         */
        _this.getWorkflowBuildById = function (workflowid, workflowbuildid, args, requestStatusCallback) {
            var path_params = {
                workflowid: workflowid,
                workflowbuildid: workflowbuildid
            };
            var path = _this.template(templateObject_45 || (templateObject_45 = __makeTemplateObject(["/catalog/v2alpha2/workflows/", "/builds/", ""], ["/catalog/v2alpha2/workflows/", "/builds/", ""])), 'workflowid', 'workflowbuildid')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return information about a workflow with the specified workflow ID.
         * @param workflowid ID of a workflow.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Workflow
         */
        _this.getWorkflowById = function (workflowid, args, requestStatusCallback) {
            var path_params = {
                workflowid: workflowid
            };
            var path = _this.template(templateObject_46 || (templateObject_46 = __makeTemplateObject(["/catalog/v2alpha2/workflows/", ""], ["/catalog/v2alpha2/workflows/", ""])), 'workflowid')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return information about the workflow run with the specified workflow build ID.
         * @param workflowid ID of a workflow.
         * @param workflowbuildid ID of a workflow build.
         * @param workflowrunid ID of a workflow run.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return WorkflowRun
         */
        _this.getWorkflowRunById = function (workflowid, workflowbuildid, workflowrunid, args, requestStatusCallback) {
            var path_params = {
                workflowid: workflowid,
                workflowbuildid: workflowbuildid,
                workflowrunid: workflowrunid
            };
            var path = _this.template(templateObject_47 || (templateObject_47 = __makeTemplateObject(["/catalog/v2alpha2/workflows/", "/builds/", "/runs/", ""], ["/catalog/v2alpha2/workflows/", "/builds/", "/runs/", ""])), 'workflowid', 'workflowbuildid', 'workflowrunid')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return the list of actions that are part of a specified rule.
         * @param ruleresourcename The resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of results to return.
         * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
         * @param args.offset The number of results to skip before the first one returned.
         * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Action>
         */
        _this.listActionsForRule = function (ruleresourcename, args, requestStatusCallback) {
            var path_params = {
                ruleresourcename: ruleresourcename
            };
            var path = _this.template(templateObject_48 || (templateObject_48 = __makeTemplateObject(["/catalog/v2alpha2/rules/", "/actions"], ["/catalog/v2alpha2/rules/", "/actions"])), 'ruleresourcename')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return the set of actions that are part of a rule.
         * @param ruleid ID of a Field.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of results to return.
         * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
         * @param args.offset The number of results to skip before the first one returned.
         * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Action>
         */
        _this.listActionsForRuleById = function (ruleid, args, requestStatusCallback) {
            var path_params = {
                ruleid: ruleid
            };
            var path = _this.template(templateObject_49 || (templateObject_49 = __makeTemplateObject(["/catalog/v2alpha2/rules/", "/actions"], ["/catalog/v2alpha2/rules/", "/actions"])), 'ruleid')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return the set of annotations across all objects.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of results to return.
         * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
         * @param args.offset The number of results to skip before the first one returned.
         * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Annotation>
         */
        _this.listAnnotations = function (args, requestStatusCallback) {
            var path = "/catalog/v2beta1/annotations";
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return the set of annotations that are part of a dashboard.
         * @param dashboardid ID of a dashboard.
         * @param args parameters to be sent with the request
         * @param args.filter A filter query to apply to the annotations.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Annotation>
         */
        _this.listAnnotationsForDashboardById = function (dashboardid, args, requestStatusCallback) {
            var path_params = {
                dashboardid: dashboardid
            };
            var path = _this.template(templateObject_50 || (templateObject_50 = __makeTemplateObject(["/catalog/v2alpha2/dashboards/", "/annotations"], ["/catalog/v2alpha2/dashboards/", "/annotations"])), 'dashboardid')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return the set of annotations that are part of a dashboard.
         * @param dashboardresourcename The resource name of a dashvboard. The resource name format is module.dashboardname.
         * @param args parameters to be sent with the request
         * @param args.filter A filter query to apply to the annotations.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Annotation>
         */
        _this.listAnnotationsForDashboardByResourceName = function (dashboardresourcename, args, requestStatusCallback) {
            var path_params = {
                dashboardresourcename: dashboardresourcename
            };
            var path = _this.template(templateObject_51 || (templateObject_51 = __makeTemplateObject(["/catalog/v2alpha2/dashboards/", "/annotations"], ["/catalog/v2alpha2/dashboards/", "/annotations"])), 'dashboardresourcename')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return the set of annotations that are part of a dataset.
         * @param datasetid ID of a Dataset.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of results to return.
         * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
         * @param args.offset The number of results to skip before the first one returned.
         * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Annotation>
         */
        _this.listAnnotationsForDatasetById = function (datasetid, args, requestStatusCallback) {
            var path_params = {
                datasetid: datasetid
            };
            var path = _this.template(templateObject_52 || (templateObject_52 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", "/annotations"], ["/catalog/v2alpha2/datasets/", "/annotations"])), 'datasetid')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return the set of annotations that are part of a dataset.
         * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of results to return.
         * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
         * @param args.offset The number of results to skip before the first one returned.
         * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Annotation>
         */
        _this.listAnnotationsForDatasetByResourceName = function (datasetresourcename, args, requestStatusCallback) {
            var path_params = {
                datasetresourcename: datasetresourcename
            };
            var path = _this.template(templateObject_53 || (templateObject_53 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", "/annotations"], ["/catalog/v2alpha2/datasets/", "/annotations"])), 'datasetresourcename')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return a list of Dashboards.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of results to return.
         * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
         * @param args.offset The number of results to skip before the first one returned.
         * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Dashboard>
         */
        _this.listDashboards = function (args, requestStatusCallback) {
            var path = "/catalog/v2alpha2/dashboards";
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of all datasets, unless you specify a filter. Use a filter to return a specific list of datasets.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of results to return.
         * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
         * @param args.maxstale The number of seconds beyond which we will refresh index metadata.
         * @param args.offset The number of results to skip before the first one returned.
         * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc\".  Ascending order is the default.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Dataset>
         */
        _this.listDatasets = function (args, requestStatusCallback) {
            var path = "/catalog/v2alpha2/datasets";
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Get a list of all fields in the Catalog.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of results to return.
         * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
         * @param args.offset The number of results to skip before the first one returned.
         * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Field>
         */
        _this.listFields = function (args, requestStatusCallback) {
            var path = "/catalog/v2alpha2/fields";
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return the list of fields that are part of a specified dataset.
         * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of results to return.
         * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
         * @param args.offset The number of results to skip before the first one returned.
         * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Field>
         */
        _this.listFieldsForDataset = function (datasetresourcename, args, requestStatusCallback) {
            var path_params = {
                datasetresourcename: datasetresourcename
            };
            var path = _this.template(templateObject_54 || (templateObject_54 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", "/fields"], ["/catalog/v2alpha2/datasets/", "/fields"])), 'datasetresourcename')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return the set of fields for the specified dataset.
         * @param datasetid ID of a Dataset.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of results to return.
         * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
         * @param args.offset The number of results to skip before the first one returned.
         * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Field>
         */
        _this.listFieldsForDatasetById = function (datasetid, args, requestStatusCallback) {
            var path_params = {
                datasetid: datasetid
            };
            var path = _this.template(templateObject_55 || (templateObject_55 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", "/fields"], ["/catalog/v2alpha2/datasets/", "/fields"])), 'datasetid')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return a list of all modules, unless you specify a filter. Use a filter to return a specific list of modules.
         * @param args parameters to be sent with the request
         * @param args.filter A filter to apply to the modules.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Module>
         */
        _this.listModules = function (args, requestStatusCallback) {
            var path = "/catalog/v2alpha2/modules";
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of all relationships, unless you specify a filter. Use a filter to return a specific list of relationships.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of results to return.
         * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
         * @param args.offset The number of results to skip before the first one returned.
         * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Relationship>
         */
        _this.listRelationships = function (args, requestStatusCallback) {
            var path = "/catalog/v2alpha2/relationships";
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return a list of rules that match a filter query if it is given, otherwise return all rules.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of results to return.
         * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
         * @param args.offset The number of results to skip before the first one returned.
         * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Rule>
         */
        _this.listRules = function (args, requestStatusCallback) {
            var path = "/catalog/v2alpha2/rules";
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return a list of Machine Learning workflow builds.
         * @param workflowid ID of a workflow.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of results to return.
         * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
         * @param args.offset The number of results to skip before the first one returned.
         * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<WorkflowBuild>
         */
        _this.listWorkflowBuilds = function (workflowid, args, requestStatusCallback) {
            var path_params = {
                workflowid: workflowid
            };
            var path = _this.template(templateObject_56 || (templateObject_56 = __makeTemplateObject(["/catalog/v2alpha2/workflows/", "/builds"], ["/catalog/v2alpha2/workflows/", "/builds"])), 'workflowid')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return a list of Machine Learning workflow runs for specified workflow build ID.
         * @param workflowid ID of a workflow.
         * @param workflowbuildid ID of a workflow build.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of results to return.
         * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
         * @param args.offset The number of results to skip before the first one returned.
         * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<WorkflowRun>
         */
        _this.listWorkflowRuns = function (workflowid, workflowbuildid, args, requestStatusCallback) {
            var path_params = {
                workflowid: workflowid,
                workflowbuildid: workflowbuildid
            };
            var path = _this.template(templateObject_57 || (templateObject_57 = __makeTemplateObject(["/catalog/v2alpha2/workflows/", "/builds/", "/runs"], ["/catalog/v2alpha2/workflows/", "/builds/", "/runs"])), 'workflowid', 'workflowbuildid')(path_params);
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return a list of Machine Learning workflow configurations.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of results to return.
         * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
         * @param args.offset The number of results to skip before the first one returned.
         * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Workflow>
         */
        _this.listWorkflows = function (args, requestStatusCallback) {
            var path = "/catalog/v2alpha2/workflows";
            return _this.client.get(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Update the Action with the specified id for the specified Rule
         * @param ruleresourcename The resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
         * @param actionid ID of an Action.
         * @param actionPATCH The fields to update in the specified action.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Action
         */
        _this.updateActionByIdForRule = function (ruleresourcename, actionid, actionPATCH, args, requestStatusCallback) {
            var path_params = {
                ruleresourcename: ruleresourcename,
                actionid: actionid
            };
            var path = _this.template(templateObject_58 || (templateObject_58 = __makeTemplateObject(["/catalog/v2alpha2/rules/", "/actions/", ""], ["/catalog/v2alpha2/rules/", "/actions/", ""])), 'ruleresourcename', 'actionid')(path_params);
            return _this.client.patch(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), actionPATCH, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Update an action for a specific rule.
         * @param ruleid ID of a Field.
         * @param actionid ID of an Action.
         * @param actionPATCH The properties to update in the specified action.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Action
         */
        _this.updateActionByIdForRuleById = function (ruleid, actionid, actionPATCH, args, requestStatusCallback) {
            var path_params = {
                ruleid: ruleid,
                actionid: actionid
            };
            var path = _this.template(templateObject_59 || (templateObject_59 = __makeTemplateObject(["/catalog/v2alpha2/rules/", "/actions/", ""], ["/catalog/v2alpha2/rules/", "/actions/", ""])), 'ruleid', 'actionid')(path_params);
            return _this.client.patch(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), actionPATCH, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Update the dashboard with the specified ID.
         * @param dashboardid ID of a dashboard.
         * @param dashboardPATCH An updated representation of the dashboard to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Dashboard
         */
        _this.updateDashboardById = function (dashboardid, dashboardPATCH, args, requestStatusCallback) {
            var path_params = {
                dashboardid: dashboardid
            };
            var path = _this.template(templateObject_60 || (templateObject_60 = __makeTemplateObject(["/catalog/v2alpha2/dashboards/", ""], ["/catalog/v2alpha2/dashboards/", ""])), 'dashboardid')(path_params);
            return _this.client.patch(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), dashboardPATCH, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Update the dashboard with the specified resource name.
         * @param dashboardresourcename The resource name of a dashvboard. The resource name format is module.dashboardname.
         * @param dashboardPATCH An updated representation of the dashboard to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.updateDashboardByResourceName = function (dashboardresourcename, dashboardPATCH, args, requestStatusCallback) {
            var path_params = {
                dashboardresourcename: dashboardresourcename
            };
            var path = _this.template(templateObject_61 || (templateObject_61 = __makeTemplateObject(["/catalog/v2alpha2/dashboards/", ""], ["/catalog/v2alpha2/dashboards/", ""])), 'dashboardresourcename')(path_params);
            return _this.client.patch(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), dashboardPATCH, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Update the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param datasetPATCH An updated representation of the dataset to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Dataset
         */
        _this.updateDataset = function (datasetresourcename, datasetPATCH, args, requestStatusCallback) {
            var path_params = {
                datasetresourcename: datasetresourcename
            };
            var path = _this.template(templateObject_62 || (templateObject_62 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", ""], ["/catalog/v2alpha2/datasets/", ""])), 'datasetresourcename')(path_params);
            return _this.client.patch(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), datasetPATCH, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Update a specific dataset.
         * @param datasetid ID of a Dataset.
         * @param datasetPATCH An updated representation of the dataset to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Dataset
         */
        _this.updateDatasetById = function (datasetid, datasetPATCH, args, requestStatusCallback) {
            var path_params = {
                datasetid: datasetid
            };
            var path = _this.template(templateObject_63 || (templateObject_63 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", ""], ["/catalog/v2alpha2/datasets/", ""])), 'datasetid')(path_params);
            return _this.client.patch(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), datasetPATCH, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Update a field with a specified ID for a specified dataset.
         * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
         * @param fieldid ID of a Field.
         * @param fieldPATCH The properties to update in the specified field.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Field
         */
        _this.updateFieldByIdForDataset = function (datasetresourcename, fieldid, fieldPATCH, args, requestStatusCallback) {
            var path_params = {
                datasetresourcename: datasetresourcename,
                fieldid: fieldid
            };
            var path = _this.template(templateObject_64 || (templateObject_64 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", "/fields/", ""], ["/catalog/v2alpha2/datasets/", "/fields/", ""])), 'datasetresourcename', 'fieldid')(path_params);
            return _this.client.patch(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), fieldPATCH, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Update a field for a specific dataset.
         * @param datasetid ID of a Dataset.
         * @param fieldid ID of a Field.
         * @param fieldPATCH The properties to update in the specified field.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Field
         */
        _this.updateFieldByIdForDatasetById = function (datasetid, fieldid, fieldPATCH, args, requestStatusCallback) {
            var path_params = {
                datasetid: datasetid,
                fieldid: fieldid
            };
            var path = _this.template(templateObject_65 || (templateObject_65 = __makeTemplateObject(["/catalog/v2alpha2/datasets/", "/fields/", ""], ["/catalog/v2alpha2/datasets/", "/fields/", ""])), 'datasetid', 'fieldid')(path_params);
            return _this.client.patch(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), fieldPATCH, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Update a specific relationship.
         * @param relationshipid ID of a relationship.
         * @param relationshipPATCH The properties to update in the specified relationship.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Relationship
         */
        _this.updateRelationshipById = function (relationshipid, relationshipPATCH, args, requestStatusCallback) {
            var path_params = {
                relationshipid: relationshipid
            };
            var path = _this.template(templateObject_66 || (templateObject_66 = __makeTemplateObject(["/catalog/v2alpha2/relationships/", ""], ["/catalog/v2alpha2/relationships/", ""])), 'relationshipid')(path_params);
            return _this.client.patch(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), relationshipPATCH, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Update the Rule with the specified resourcename
         * @param ruleresourcename The resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
         * @param rulePATCH The properties to update in the specified rule.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Rule
         */
        _this.updateRule = function (ruleresourcename, rulePATCH, args, requestStatusCallback) {
            var path_params = {
                ruleresourcename: ruleresourcename
            };
            var path = _this.template(templateObject_67 || (templateObject_67 = __makeTemplateObject(["/catalog/v2alpha2/rules/", ""], ["/catalog/v2alpha2/rules/", ""])), 'ruleresourcename')(path_params);
            return _this.client.patch(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), rulePATCH, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Update a specific rule.
         * @param ruleid ID of a Field.
         * @param rulePATCH The properties to update in the specified rule.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Rule
         */
        _this.updateRuleById = function (ruleid, rulePATCH, args, requestStatusCallback) {
            var path_params = {
                ruleid: ruleid
            };
            var path = _this.template(templateObject_68 || (templateObject_68 = __makeTemplateObject(["/catalog/v2alpha2/rules/", ""], ["/catalog/v2alpha2/rules/", ""])), 'ruleid')(path_params);
            return _this.client.patch(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), rulePATCH, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Update the workflow build with the specified workflow build ID.
         * @param workflowid ID of a workflow.
         * @param workflowbuildid ID of a workflow build.
         * @param workflowBuildPATCH An updated representation of the workflow build to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.updateWorkflowBuildById = function (workflowid, workflowbuildid, workflowBuildPATCH, args, requestStatusCallback) {
            var path_params = {
                workflowid: workflowid,
                workflowbuildid: workflowbuildid
            };
            var path = _this.template(templateObject_69 || (templateObject_69 = __makeTemplateObject(["/catalog/v2alpha2/workflows/", "/builds/", ""], ["/catalog/v2alpha2/workflows/", "/builds/", ""])), 'workflowid', 'workflowbuildid')(path_params);
            return _this.client.patch(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), workflowBuildPATCH, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Update the workflow with the specified workflow ID.
         * @param workflowid ID of a workflow.
         * @param workflowPATCH An updated representation of the workflow to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.updateWorkflowById = function (workflowid, workflowPATCH, args, requestStatusCallback) {
            var path_params = {
                workflowid: workflowid
            };
            var path = _this.template(templateObject_70 || (templateObject_70 = __makeTemplateObject(["/catalog/v2alpha2/workflows/", ""], ["/catalog/v2alpha2/workflows/", ""])), 'workflowid')(path_params);
            return _this.client.patch(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), workflowPATCH, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Update the workflow run with the specified workflow run ID.
         * @param workflowid ID of a workflow.
         * @param workflowbuildid ID of a workflow build.
         * @param workflowrunid ID of a workflow run.
         * @param workflowRunPATCH An updated representation of the workflow run to be persisted.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.updateWorkflowRunById = function (workflowid, workflowbuildid, workflowrunid, workflowRunPATCH, args, requestStatusCallback) {
            var path_params = {
                workflowid: workflowid,
                workflowbuildid: workflowbuildid,
                workflowrunid: workflowrunid
            };
            var path = _this.template(templateObject_71 || (templateObject_71 = __makeTemplateObject(["/catalog/v2alpha2/workflows/", "/builds/", "/runs/", ""], ["/catalog/v2alpha2/workflows/", "/builds/", "/runs/", ""])), 'workflowid', 'workflowbuildid', 'workflowrunid')(path_params);
            return _this.client.patch(exports.CATALOG_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), workflowRunPATCH, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        return _this;
    }
    GeneratedCatalogService.prototype.getServiceCluster = function () {
        return exports.CATALOG_SERVICE_CLUSTER;
    };
    GeneratedCatalogService.prototype.getServicePrefix = function () {
        return exports.CATALOG_SERVICE_PREFIX;
    };
    return GeneratedCatalogService;
}(baseapiservice_1["default"]));
exports.GeneratedCatalogService = GeneratedCatalogService;
exports.CatalogService = catalog_1.CatalogServiceExtensions(GeneratedCatalogService);
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12, templateObject_13, templateObject_14, templateObject_15, templateObject_16, templateObject_17, templateObject_18, templateObject_19, templateObject_20, templateObject_21, templateObject_22, templateObject_23, templateObject_24, templateObject_25, templateObject_26, templateObject_27, templateObject_28, templateObject_29, templateObject_30, templateObject_31, templateObject_32, templateObject_33, templateObject_34, templateObject_35, templateObject_36, templateObject_37, templateObject_38, templateObject_39, templateObject_40, templateObject_41, templateObject_42, templateObject_43, templateObject_44, templateObject_45, templateObject_46, templateObject_47, templateObject_48, templateObject_49, templateObject_50, templateObject_51, templateObject_52, templateObject_53, templateObject_54, templateObject_55, templateObject_56, templateObject_57, templateObject_58, templateObject_59, templateObject_60, templateObject_61, templateObject_62, templateObject_63, templateObject_64, templateObject_65, templateObject_66, templateObject_67, templateObject_68, templateObject_69, templateObject_70, templateObject_71;
//# sourceMappingURL=GeneratedApis.js.map