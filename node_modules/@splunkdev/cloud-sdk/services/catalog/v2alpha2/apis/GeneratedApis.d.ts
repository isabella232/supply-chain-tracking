/**
 * Copyright 2020 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Metadata Catalog
 * With the Metadata Catalog you can create and manage knowledge objects such as datasets, fields, rules, actions, dashboards, and workflows.
 *
 * OpenAPI spec version: v2alpha2.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Action, ActionPATCH, ActionPOST, Annotation, AnnotationPOST, Dashboard, DashboardPATCH, DashboardPOST, Dataset, DatasetImportedBy, DatasetPATCH, DatasetPOST, Field, FieldPATCH, FieldPOST, Module, Relationship, RelationshipPATCH, RelationshipPOST, Rule, RulePATCH, RulePOST, Workflow, WorkflowBuild, WorkflowBuildPATCH, WorkflowBuildPOST, WorkflowPATCH, WorkflowPOST, WorkflowRun, WorkflowRunPATCH, WorkflowRunPOST } from '../models';
import BaseApiService from "../../../../baseapiservice";
import { CatalogServiceExtensions } from "../../../../service_extensions/catalog";
import { RequestStatus } from '../../../../client';
export declare const CATALOG_SERVICE_PREFIX: string;
export declare const CATALOG_SERVICE_CLUSTER: string;
/**
 * Metadata Catalog
 * Version: v2alpha2.6
 * With the Metadata Catalog you can create and manage knowledge objects such as datasets, fields, rules, actions, dashboards, and workflows.
 */
export declare class GeneratedCatalogService extends BaseApiService {
    getServiceCluster(): string;
    getServicePrefix(): string;
    /**
     * Create a new action for a rule associated with a specific resource name.
     * @param ruleresourcename The resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
     * @param actionPOST The JSON representation of the action to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Action
     */
    createActionForRule: (ruleresourcename: string, actionPOST: ActionPOST, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Action>;
    /**
     * Create a new action for a specific rule.
     * @param ruleid ID of a Field.
     * @param actionPOST The JSON representation of the action to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Action
     */
    createActionForRuleById: (ruleid: string, actionPOST: ActionPOST, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Action>;
    /**
     * Create a new annotation for a specific dashboard.
     * @param dashboardid ID of a dashboard.
     * @param annotationPOST The JSON representation of the annotation to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Annotation
     */
    createAnnotationForDashboardbyId: (dashboardid: string, annotationPOST: AnnotationPOST, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Annotation>;
    /**
     * Create a new annotation for a specific dataset.
     * @param dashboardresourcename The resource name of a dashvboard. The resource name format is module.dashboardname.
     * @param annotationPOST The JSON representation of the annotation to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Annotation
     */
    createAnnotationForDashboardsByResourceName: (dashboardresourcename: string, annotationPOST: AnnotationPOST, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Annotation>;
    /**
     * Create a new annotation for a specific dataset.
     * @param datasetid ID of a Dataset.
     * @param annotationPOST The JSON representation of the annotation to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Annotation
     */
    createAnnotationForDatasetById: (datasetid: string, annotationPOST: AnnotationPOST, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Annotation>;
    /**
     * Create a new annotation for a specific dataset.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param annotationPOST The JSON representation of the annotation to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Annotation
     */
    createAnnotationForDatasetByResourceName: (datasetresourcename: string, annotationPOST: AnnotationPOST, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Annotation>;
    /**
     * Create a new dashboard.
     * @param dashboardPOST The JSON representation of the Dashboard to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Dashboard
     */
    createDashboard: (dashboardPOST: DashboardPOST, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Dashboard>;
    /**
     * Create a new dataset.
     * @param datasetPOST JSON representation of the DatasetInfo to be persisted
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Dataset
     */
    createDataset: (datasetPOST: DatasetPOST, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Dataset>;
    /**
     * Create a new dataset import.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param datasetImportedBy
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Dataset
     */
    createDatasetImport: (datasetresourcename: string, datasetImportedBy?: DatasetImportedBy | undefined, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Dataset>;
    /**
     * Create a new dataset import.
     * @param datasetid ID of a Dataset.
     * @param datasetImportedBy
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return DatasetImportedBy
     */
    createDatasetImportById: (datasetid: string, datasetImportedBy?: DatasetImportedBy | undefined, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<DatasetImportedBy>;
    /**
     * Create a new dataset import.
     * @param datasetid ID of a Dataset.
     * @param datasetImportedBy
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return DatasetImportedBy
     */
    createDatasetImportByIdv1: (datasetid: string, datasetImportedBy?: DatasetImportedBy | undefined, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<DatasetImportedBy>;
    /**
     * Create a new dataset import.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param datasetImportedBy
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Dataset
     */
    createDatasetImportv1: (datasetresourcename: string, datasetImportedBy?: DatasetImportedBy | undefined, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Dataset>;
    /**
     * Create a new field on a specific dataset.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param fieldPOST The JSON representation of the field to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Field
     */
    createFieldForDataset: (datasetresourcename: string, fieldPOST: FieldPOST, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Field>;
    /**
     * Add a new field to a dataset.
     * @param datasetid ID of a Dataset.
     * @param fieldPOST The JSON representation of the field to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Field
     */
    createFieldForDatasetById: (datasetid: string, fieldPOST: FieldPOST, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Field>;
    /**
     * Create a new relationship.
     * @param relationshipPOST The JSON representation of the relationship to persist.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Relationship
     */
    createRelationship: (relationshipPOST: RelationshipPOST, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Relationship>;
    /**
     * Create a new rule.
     * @param rulePOST The JSON representation of the rule to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Rule
     */
    createRule: (rulePOST: RulePOST, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Rule>;
    /**
     * Create a new workflow configuration.
     * @param workflowPOST The JSON representation of the workflow to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Workflow
     */
    createWorkflow: (workflowPOST: WorkflowPOST, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Workflow>;
    /**
     * Create a new workflow build.
     * @param workflowid ID of a workflow.
     * @param workflowBuildPOST The JSON representation of the workflow build to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return WorkflowBuild
     */
    createWorkflowBuild: (workflowid: string, workflowBuildPOST: WorkflowBuildPOST, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowBuild>;
    /**
     * Create a new workflow run for the specified workflow build ID.
     * @param workflowid ID of a workflow.
     * @param workflowbuildid ID of a workflow build.
     * @param workflowRunPOST The JSON representation of the workflow run to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return WorkflowRun
     */
    createWorkflowRun: (workflowid: string, workflowbuildid: string, workflowRunPOST: WorkflowRunPOST, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowRun>;
    /**
     * Delete an action on a rule.
     * @param ruleresourcename The resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
     * @param actionid ID of an Action.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteActionByIdForRule: (ruleresourcename: string, actionid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Delete an action that is part of a specific rule.
     * @param ruleid ID of a Field.
     * @param actionid ID of an Action.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteActionByIdForRuleById: (ruleid: string, actionid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Delete a specific annotation of a dashboard.
     * @param dashboardid ID of a dashboard.
     * @param annotationid ID of a annotation.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteAnnotationOfDashboardById: (dashboardid: string, annotationid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Delete a specific annotation of a dashboard.
     * @param dashboardresourcename The resource name of a dashvboard. The resource name format is module.dashboardname.
     * @param annotationid ID of a annotation.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteAnnotationOfDashboardByResourceName: (dashboardresourcename: string, annotationid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Delete a specific annotation of a dataset.
     * @param datasetid ID of a Dataset.
     * @param annotationid ID of a annotation.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteAnnotationOfDatasetById: (datasetid: string, annotationid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Delete a specific annotation of a dataset.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param annotationid ID of a annotation.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteAnnotationOfDatasetByResourceName: (datasetresourcename: string, annotationid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Delete the dashboard with the specified ID.
     * @param dashboardid ID of a dashboard.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteDashboardById: (dashboardid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Delete the dashboard with the specified resource name.
     * @param dashboardresourcename The resource name of a dashvboard. The resource name format is module.dashboardname.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteDashboardByResourceName: (dashboardresourcename: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Delete the dataset with the specified resource name, along with its dependencies. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteDataset: (datasetresourcename: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Delete a specific dataset. Deleting a dataset also deletes its dependent objects, such as fields.
     * @param datasetid ID of a Dataset.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteDatasetById: (datasetid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Delete a field that is part of a specific dataset.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param fieldid ID of a Field.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteFieldByIdForDataset: (datasetresourcename: string, fieldid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Delete a field that is part of a specific dataset.
     * @param datasetid ID of a Dataset.
     * @param fieldid ID of a Field.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteFieldByIdForDatasetById: (datasetid: string, fieldid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Delete a specific relationship. Deleting a relationship also deleletes any objects that are dependents of that relationship, such as relationship fields.
     * @param relationshipid ID of a relationship.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteRelationshipById: (relationshipid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Delete the rule with the specified resource name and its dependencies.
     * @param ruleresourcename The resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteRule: (ruleresourcename: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Delete a specific rule. Deleting a rule also deleletes any objects that are dependents of that rule, such as rule actions.
     * @param ruleid ID of a Field.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteRuleById: (ruleid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Delete the workflow build with the specified workflow build ID.
     * @param workflowid ID of a workflow.
     * @param workflowbuildid ID of a workflow build.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteWorkflowBuildById: (workflowid: string, workflowbuildid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Delete the workflow with the specified workflow ID.
     * @param workflowid ID of a workflow.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteWorkflowById: (workflowid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Delete the workflow run with the specified workflow run ID.
     * @param workflowid ID of a workflow.
     * @param workflowbuildid ID of a workflow build.
     * @param workflowrunid ID of a workflow run.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteWorkflowRunById: (workflowid: string, workflowbuildid: string, workflowrunid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Return an action that is part of a specified rule.
     * @param ruleresourcename The resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
     * @param actionid ID of an Action.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Action
     */
    getActionByIdForRule: (ruleresourcename: string, actionid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Action>;
    /**
     * Return information about an action that is part of a specific rule.
     * @param ruleid ID of a Field.
     * @param actionid ID of an Action.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Action
     */
    getActionByIdForRuleById: (ruleid: string, actionid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Action>;
    /**
     * Return information about a dashboard with the specified ID.
     * @param dashboardid ID of a dashboard.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Dashboard
     */
    getDashboardById: (dashboardid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Dashboard>;
    /**
     * Return information about a dashboard with the specified resource name.
     * @param dashboardresourcename The resource name of a dashvboard. The resource name format is module.dashboardname.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Dashboard
     */
    getDashboardByResourceName: (dashboardresourcename: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Dashboard>;
    /**
     * Return the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param args parameters to be sent with the request
     * @param args.maxstale The number of seconds beyond which we will refresh index metadata.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Dataset
     */
    getDataset: (datasetresourcename: string, args?: {
        [key: string]: any;
        maxstale?: number | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Dataset>;
    /**
     * Return information about the dataset with the specified ID.
     * @param datasetid ID of a Dataset.
     * @param args parameters to be sent with the request
     * @param args.maxstale The number of seconds beyond which we will refresh index metadata.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Dataset
     */
    getDatasetById: (datasetid: string, args?: {
        [key: string]: any;
        maxstale?: number | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Dataset>;
    /**
     * Get a field that corresponds to a specific field ID.
     * @param fieldid ID of a Field.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Field
     */
    getFieldById: (fieldid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Field>;
    /**
     * Return a field that is part of a specific dataset.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param fieldid ID of a Field.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Field
     */
    getFieldByIdForDataset: (datasetresourcename: string, fieldid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Field>;
    /**
     * Return a field that is part of a specific dataset.
     * @param datasetid ID of a Dataset.
     * @param fieldid ID of a Field.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Field
     */
    getFieldByIdForDatasetById: (datasetid: string, fieldid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Field>;
    /**
     * Get a specific relationship.
     * @param relationshipid ID of a relationship.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Relationship
     */
    getRelationshipById: (relationshipid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Relationship>;
    /**
     * Get a rule with a specified resource name.
     * @param ruleresourcename The resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Rule
     */
    getRule: (ruleresourcename: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Rule>;
    /**
     * Get information about a specific rule.
     * @param ruleid ID of a Field.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Rule
     */
    getRuleById: (ruleid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Rule>;
    /**
     * Return information about the workflow build with the specified workflow build ID.
     * @param workflowid ID of a workflow.
     * @param workflowbuildid ID of a workflow build.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return WorkflowBuild
     */
    getWorkflowBuildById: (workflowid: string, workflowbuildid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowBuild>;
    /**
     * Return information about a workflow with the specified workflow ID.
     * @param workflowid ID of a workflow.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Workflow
     */
    getWorkflowById: (workflowid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Workflow>;
    /**
     * Return information about the workflow run with the specified workflow build ID.
     * @param workflowid ID of a workflow.
     * @param workflowbuildid ID of a workflow build.
     * @param workflowrunid ID of a workflow run.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return WorkflowRun
     */
    getWorkflowRunById: (workflowid: string, workflowbuildid: string, workflowrunid: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowRun>;
    /**
     * Return the list of actions that are part of a specified rule.
     * @param ruleresourcename The resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
     * @param args parameters to be sent with the request
     * @param args.count The maximum number of results to return.
     * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param args.offset The number of results to skip before the first one returned.
     * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Action>
     */
    listActionsForRule: (ruleresourcename: string, args?: {
        [key: string]: any;
        count?: number | undefined;
        filter?: string | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Action[]>;
    /**
     * Return the set of actions that are part of a rule.
     * @param ruleid ID of a Field.
     * @param args parameters to be sent with the request
     * @param args.count The maximum number of results to return.
     * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param args.offset The number of results to skip before the first one returned.
     * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Action>
     */
    listActionsForRuleById: (ruleid: string, args?: {
        [key: string]: any;
        count?: number | undefined;
        filter?: string | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Action[]>;
    /**
     * Return the set of annotations across all objects.
     * @param args parameters to be sent with the request
     * @param args.count The maximum number of results to return.
     * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param args.offset The number of results to skip before the first one returned.
     * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Annotation>
     */
    listAnnotations: (args?: {
        [key: string]: any;
        count?: number | undefined;
        filter?: string | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Annotation[]>;
    /**
     * Return the set of annotations that are part of a dashboard.
     * @param dashboardid ID of a dashboard.
     * @param args parameters to be sent with the request
     * @param args.filter A filter query to apply to the annotations.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Annotation>
     */
    listAnnotationsForDashboardById: (dashboardid: string, args?: {
        [key: string]: any;
        filter?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Annotation[]>;
    /**
     * Return the set of annotations that are part of a dashboard.
     * @param dashboardresourcename The resource name of a dashvboard. The resource name format is module.dashboardname.
     * @param args parameters to be sent with the request
     * @param args.filter A filter query to apply to the annotations.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Annotation>
     */
    listAnnotationsForDashboardByResourceName: (dashboardresourcename: string, args?: {
        [key: string]: any;
        filter?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Annotation[]>;
    /**
     * Return the set of annotations that are part of a dataset.
     * @param datasetid ID of a Dataset.
     * @param args parameters to be sent with the request
     * @param args.count The maximum number of results to return.
     * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param args.offset The number of results to skip before the first one returned.
     * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Annotation>
     */
    listAnnotationsForDatasetById: (datasetid: string, args?: {
        [key: string]: any;
        count?: number | undefined;
        filter?: string | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Annotation[]>;
    /**
     * Return the set of annotations that are part of a dataset.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param args parameters to be sent with the request
     * @param args.count The maximum number of results to return.
     * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param args.offset The number of results to skip before the first one returned.
     * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Annotation>
     */
    listAnnotationsForDatasetByResourceName: (datasetresourcename: string, args?: {
        [key: string]: any;
        count?: number | undefined;
        filter?: string | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Annotation[]>;
    /**
     * Return a list of Dashboards.
     * @param args parameters to be sent with the request
     * @param args.count The maximum number of results to return.
     * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param args.offset The number of results to skip before the first one returned.
     * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Dashboard>
     */
    listDashboards: (args?: {
        [key: string]: any;
        count?: number | undefined;
        filter?: string | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Dashboard[]>;
    /**
     * Returns a list of all datasets, unless you specify a filter. Use a filter to return a specific list of datasets.
     * @param args parameters to be sent with the request
     * @param args.count The maximum number of results to return.
     * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param args.maxstale The number of seconds beyond which we will refresh index metadata.
     * @param args.offset The number of results to skip before the first one returned.
     * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc\".  Ascending order is the default.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Dataset>
     */
    listDatasets: (args?: {
        [key: string]: any;
        count?: number | undefined;
        filter?: string | undefined;
        maxstale?: number | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Dataset[]>;
    /**
     * Get a list of all fields in the Catalog.
     * @param args parameters to be sent with the request
     * @param args.count The maximum number of results to return.
     * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param args.offset The number of results to skip before the first one returned.
     * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Field>
     */
    listFields: (args?: {
        [key: string]: any;
        count?: number | undefined;
        filter?: string | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Field[]>;
    /**
     * Return the list of fields that are part of a specified dataset.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param args parameters to be sent with the request
     * @param args.count The maximum number of results to return.
     * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param args.offset The number of results to skip before the first one returned.
     * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Field>
     */
    listFieldsForDataset: (datasetresourcename: string, args?: {
        [key: string]: any;
        count?: number | undefined;
        filter?: string | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Field[]>;
    /**
     * Return the set of fields for the specified dataset.
     * @param datasetid ID of a Dataset.
     * @param args parameters to be sent with the request
     * @param args.count The maximum number of results to return.
     * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param args.offset The number of results to skip before the first one returned.
     * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Field>
     */
    listFieldsForDatasetById: (datasetid: string, args?: {
        [key: string]: any;
        count?: number | undefined;
        filter?: string | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Field[]>;
    /**
     * Return a list of all modules, unless you specify a filter. Use a filter to return a specific list of modules.
     * @param args parameters to be sent with the request
     * @param args.filter A filter to apply to the modules.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Module>
     */
    listModules: (args?: {
        [key: string]: any;
        filter?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Module[]>;
    /**
     * Returns a list of all relationships, unless you specify a filter. Use a filter to return a specific list of relationships.
     * @param args parameters to be sent with the request
     * @param args.count The maximum number of results to return.
     * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param args.offset The number of results to skip before the first one returned.
     * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Relationship>
     */
    listRelationships: (args?: {
        [key: string]: any;
        count?: number | undefined;
        filter?: string | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Relationship[]>;
    /**
     * Return a list of rules that match a filter query if it is given, otherwise return all rules.
     * @param args parameters to be sent with the request
     * @param args.count The maximum number of results to return.
     * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param args.offset The number of results to skip before the first one returned.
     * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Rule>
     */
    listRules: (args?: {
        [key: string]: any;
        count?: number | undefined;
        filter?: string | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Rule[]>;
    /**
     * Return a list of Machine Learning workflow builds.
     * @param workflowid ID of a workflow.
     * @param args parameters to be sent with the request
     * @param args.count The maximum number of results to return.
     * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param args.offset The number of results to skip before the first one returned.
     * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<WorkflowBuild>
     */
    listWorkflowBuilds: (workflowid: string, args?: {
        [key: string]: any;
        count?: number | undefined;
        filter?: string | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowBuild[]>;
    /**
     * Return a list of Machine Learning workflow runs for specified workflow build ID.
     * @param workflowid ID of a workflow.
     * @param workflowbuildid ID of a workflow build.
     * @param args parameters to be sent with the request
     * @param args.count The maximum number of results to return.
     * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param args.offset The number of results to skip before the first one returned.
     * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<WorkflowRun>
     */
    listWorkflowRuns: (workflowid: string, workflowbuildid: string, args?: {
        [key: string]: any;
        count?: number | undefined;
        filter?: string | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowRun[]>;
    /**
     * Return a list of Machine Learning workflow configurations.
     * @param args parameters to be sent with the request
     * @param args.count The maximum number of results to return.
     * @param args.filter A filter to apply to the results list. The filter must be a SPL predicate expression.
     * @param args.offset The number of results to skip before the first one returned.
     * @param args.orderby A list of fields to order the results by.  You can specify either ascending or descending order using \"<field> asc\" or \"<field> desc.  Ascending order is the default.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Workflow>
     */
    listWorkflows: (args?: {
        [key: string]: any;
        count?: number | undefined;
        filter?: string | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Workflow[]>;
    /**
     * Update the Action with the specified id for the specified Rule
     * @param ruleresourcename The resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
     * @param actionid ID of an Action.
     * @param actionPATCH The fields to update in the specified action.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Action
     */
    updateActionByIdForRule: (ruleresourcename: string, actionid: string, actionPATCH: ActionPATCH, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Action>;
    /**
     * Update an action for a specific rule.
     * @param ruleid ID of a Field.
     * @param actionid ID of an Action.
     * @param actionPATCH The properties to update in the specified action.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Action
     */
    updateActionByIdForRuleById: (ruleid: string, actionid: string, actionPATCH: ActionPATCH, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Action>;
    /**
     * Update the dashboard with the specified ID.
     * @param dashboardid ID of a dashboard.
     * @param dashboardPATCH An updated representation of the dashboard to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Dashboard
     */
    updateDashboardById: (dashboardid: string, dashboardPATCH: DashboardPATCH, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Dashboard>;
    /**
     * Update the dashboard with the specified resource name.
     * @param dashboardresourcename The resource name of a dashvboard. The resource name format is module.dashboardname.
     * @param dashboardPATCH An updated representation of the dashboard to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    updateDashboardByResourceName: (dashboardresourcename: string, dashboardPATCH: DashboardPATCH, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Update the dataset with the specified resource name. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param datasetPATCH An updated representation of the dataset to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Dataset
     */
    updateDataset: (datasetresourcename: string, datasetPATCH: DatasetPATCH, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Dataset>;
    /**
     * Update a specific dataset.
     * @param datasetid ID of a Dataset.
     * @param datasetPATCH An updated representation of the dataset to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Dataset
     */
    updateDatasetById: (datasetid: string, datasetPATCH: DatasetPATCH, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Dataset>;
    /**
     * Update a field with a specified ID for a specified dataset.
     * @param datasetresourcename The resource name of a dataset. For the default module, the resource name format is datasetName. Otherwise, the resource name format is module.datasetName.
     * @param fieldid ID of a Field.
     * @param fieldPATCH The properties to update in the specified field.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Field
     */
    updateFieldByIdForDataset: (datasetresourcename: string, fieldid: string, fieldPATCH: FieldPATCH, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Field>;
    /**
     * Update a field for a specific dataset.
     * @param datasetid ID of a Dataset.
     * @param fieldid ID of a Field.
     * @param fieldPATCH The properties to update in the specified field.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Field
     */
    updateFieldByIdForDatasetById: (datasetid: string, fieldid: string, fieldPATCH: FieldPATCH, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Field>;
    /**
     * Update a specific relationship.
     * @param relationshipid ID of a relationship.
     * @param relationshipPATCH The properties to update in the specified relationship.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Relationship
     */
    updateRelationshipById: (relationshipid: string, relationshipPATCH: RelationshipPATCH, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Relationship>;
    /**
     * Update the Rule with the specified resourcename
     * @param ruleresourcename The resource name of a rule. For the default module, the resource name format is ruleName. Otherwise, the resource name format is module.ruleName.
     * @param rulePATCH The properties to update in the specified rule.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Rule
     */
    updateRule: (ruleresourcename: string, rulePATCH: RulePATCH, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Rule>;
    /**
     * Update a specific rule.
     * @param ruleid ID of a Field.
     * @param rulePATCH The properties to update in the specified rule.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Rule
     */
    updateRuleById: (ruleid: string, rulePATCH: RulePATCH, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Rule>;
    /**
     * Update the workflow build with the specified workflow build ID.
     * @param workflowid ID of a workflow.
     * @param workflowbuildid ID of a workflow build.
     * @param workflowBuildPATCH An updated representation of the workflow build to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    updateWorkflowBuildById: (workflowid: string, workflowbuildid: string, workflowBuildPATCH: WorkflowBuildPATCH, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Update the workflow with the specified workflow ID.
     * @param workflowid ID of a workflow.
     * @param workflowPATCH An updated representation of the workflow to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    updateWorkflowById: (workflowid: string, workflowPATCH: WorkflowPATCH, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Update the workflow run with the specified workflow run ID.
     * @param workflowid ID of a workflow.
     * @param workflowbuildid ID of a workflow build.
     * @param workflowrunid ID of a workflow run.
     * @param workflowRunPATCH An updated representation of the workflow run to be persisted.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    updateWorkflowRunById: (workflowid: string, workflowbuildid: string, workflowrunid: string, workflowRunPATCH: WorkflowRunPATCH, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
}
export declare type CatalogService = GeneratedCatalogService & CatalogServiceExtensions;
export declare const CatalogService: typeof GeneratedCatalogService;
