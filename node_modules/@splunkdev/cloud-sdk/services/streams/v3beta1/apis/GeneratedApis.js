"use strict";
// tslint:disable
/**
 * Copyright 2020 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Data Stream Processing REST API
 * Use the Streams service to perform create, read, update, and delete (CRUD) operations on your data pipeline. The Streams service also has metrics and preview session endpoints and gives you full control over your data pipeline.
 *
 * OpenAPI spec version: v3beta1.1 (recommended default)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var baseapiservice_1 = __importDefault(require("../../../../baseapiservice"));
var streams_1 = require("../../../../service_extensions/streams");
var client_1 = require("../../../../client");
exports.STREAMS_SERVICE_PREFIX = '/streams/v3beta1';
exports.STREAMS_SERVICE_CLUSTER = 'api';
/**
 * Data Stream Processing REST API
 * Version: v3beta1.1
 * Use the Streams service to perform create, read, update, and delete (CRUD) operations on your data pipeline. The Streams service also has metrics and preview session endpoints and gives you full control over your data pipeline.
 */
var GeneratedStreamsService = /** @class */ (function (_super) {
    __extends(GeneratedStreamsService, _super);
    function GeneratedStreamsService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Activates an existing pipeline.
         * @param id Pipeline ID
         * @param activatePipelineRequest Request JSON
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Response
         */
        _this.activatePipeline = function (id, activatePipelineRequest, args, requestStatusCallback) {
            var path_params = {
                id: id
            };
            var path = _this.template(templateObject_1 || (templateObject_1 = __makeTemplateObject(["/streams/v3beta1/pipelines/", "/activate"], ["/streams/v3beta1/pipelines/", "/activate"])), 'id')(path_params);
            return _this.client.post(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), activatePipelineRequest, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Compiles SPL2 and returns streams JSON.
         * @param splCompileRequest Request JSON
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Pipeline
         */
        _this.compile = function (splCompileRequest, args, requestStatusCallback) {
            var path = "/streams/v3beta1/pipelines/compile";
            return _this.client.post(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), splCompileRequest, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Create a new DSP connection.
         * @param connectionRequest Request JSON
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return ConnectionSaveResponse
         */
        _this.createConnection = function (connectionRequest, args, requestStatusCallback) {
            var path = "/streams/v3beta1/connections";
            return _this.client.post(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), connectionRequest, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates a data stream for a tenant.
         * @param dataStreamRequest Request JSON
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return DataStreamResponse
         */
        _this.createDataStream = function (dataStreamRequest, args, requestStatusCallback) {
            var path = "/streams/v3beta1/datastreams";
            return _this.client.post(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), dataStreamRequest, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates a pipeline.
         * @param pipelineRequest Request JSON
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return PipelineResponse
         */
        _this.createPipeline = function (pipelineRequest, args, requestStatusCallback) {
            var path = "/streams/v3beta1/pipelines";
            return _this.client.post(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), pipelineRequest, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates a template for a tenant.
         * @param templateRequest Request JSON
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return TemplateResponse
         */
        _this.createTemplate = function (templateRequest, args, requestStatusCallback) {
            var path = "/streams/v3beta1/templates";
            return _this.client.post(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), templateRequest, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Deactivates an existing pipeline.
         * @param id Pipeline ID
         * @param deactivatePipelineRequest Request JSON
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Response
         */
        _this.deactivatePipeline = function (id, deactivatePipelineRequest, args, requestStatusCallback) {
            var path_params = {
                id: id
            };
            var path = _this.template(templateObject_2 || (templateObject_2 = __makeTemplateObject(["/streams/v3beta1/pipelines/", "/deactivate"], ["/streams/v3beta1/pipelines/", "/deactivate"])), 'id')(path_params);
            return _this.client.post(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), deactivatePipelineRequest, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Decompiles UPL and returns SPL.
         * @param decompileRequest Request JSON
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return DecompileResponse
         */
        _this.decompile = function (decompileRequest, args, requestStatusCallback) {
            var path = "/streams/v3beta1/pipelines/decompile";
            return _this.client.post(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), decompileRequest, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Delete all versions of a connection by its id.
         * @param connectionId Connection ID
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteConnection = function (connectionId, args, requestStatusCallback) {
            var path_params = {
                connectionId: connectionId
            };
            var path = _this.template(templateObject_3 || (templateObject_3 = __makeTemplateObject(["/streams/v3beta1/connections/", ""], ["/streams/v3beta1/connections/", ""])), 'connectionId')(path_params);
            return _this.client["delete"](exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Deletes a data stream for a tenant.
         * @param id ID
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteDataStream = function (id, args, requestStatusCallback) {
            var path_params = {
                id: id
            };
            var path = _this.template(templateObject_4 || (templateObject_4 = __makeTemplateObject(["/streams/v3beta1/datastreams/", ""], ["/streams/v3beta1/datastreams/", ""])), 'id')(path_params);
            return _this.client["delete"](exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Delete file.
         * @param fileId File ID
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteFile = function (fileId, args, requestStatusCallback) {
            var path_params = {
                fileId: fileId
            };
            var path = _this.template(templateObject_5 || (templateObject_5 = __makeTemplateObject(["/streams/v3beta1/files/", ""], ["/streams/v3beta1/files/", ""])), 'fileId')(path_params);
            return _this.client["delete"](exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Delete lookup file.
         * @param fileId File ID
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteLookupFile = function (fileId, args, requestStatusCallback) {
            var path_params = {
                fileId: fileId
            };
            var path = _this.template(templateObject_6 || (templateObject_6 = __makeTemplateObject(["/streams/v3beta1/lookups/files/", ""], ["/streams/v3beta1/lookups/files/", ""])), 'fileId')(path_params);
            return _this.client["delete"](exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Removes a pipeline.
         * @param id Pipeline ID
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deletePipeline = function (id, args, requestStatusCallback) {
            var path_params = {
                id: id
            };
            var path = _this.template(templateObject_7 || (templateObject_7 = __makeTemplateObject(["/streams/v3beta1/pipelines/", ""], ["/streams/v3beta1/pipelines/", ""])), 'id')(path_params);
            return _this.client["delete"](exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Removes a template with a specific ID.
         * @param templateId Template ID
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteTemplate = function (templateId, args, requestStatusCallback) {
            var path_params = {
                templateId: templateId
            };
            var path = _this.template(templateObject_8 || (templateObject_8 = __makeTemplateObject(["/streams/v3beta1/templates/", ""], ["/streams/v3beta1/templates/", ""])), 'templateId')(path_params);
            return _this.client["delete"](exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Describes a data stream for a tenant.
         * @param id ID
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return DataStreamResponse
         */
        _this.describeDataStream = function (id, args, requestStatusCallback) {
            var path_params = {
                id: id
            };
            var path = _this.template(templateObject_9 || (templateObject_9 = __makeTemplateObject(["/streams/v3beta1/datastreams/", ""], ["/streams/v3beta1/datastreams/", ""])), 'id')(path_params);
            return _this.client.get(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Get file metadata.
         * @param fileId File ID
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return UploadFileResponse
         */
        _this.getFileMetadata = function (fileId, args, requestStatusCallback) {
            var path_params = {
                fileId: fileId
            };
            var path = _this.template(templateObject_10 || (templateObject_10 = __makeTemplateObject(["/streams/v3beta1/files/", ""], ["/streams/v3beta1/files/", ""])), 'fileId')(path_params);
            return _this.client.get(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns files metadata.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return FilesMetaDataResponse
         */
        _this.getFilesMetadata = function (args, requestStatusCallback) {
            var path = "/streams/v3beta1/files";
            return _this.client.get(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the input schema for a function in a pipeline.
         * @param getInputSchemaRequest Request JSON
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return UplType
         */
        _this.getInputSchema = function (getInputSchemaRequest, args, requestStatusCallback) {
            var path = "/streams/v3beta1/pipelines/input-schema";
            return _this.client.post(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), getInputSchemaRequest, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Get lookup file metadata.
         * @param fileId File ID
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return UploadFileResponse
         */
        _this.getLookupFileMetadata = function (fileId, args, requestStatusCallback) {
            var path_params = {
                fileId: fileId
            };
            var path = _this.template(templateObject_11 || (templateObject_11 = __makeTemplateObject(["/streams/v3beta1/lookups/files/", ""], ["/streams/v3beta1/lookups/files/", ""])), 'fileId')(path_params);
            return _this.client.get(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns lookup files metadata.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return FilesMetaDataResponse
         */
        _this.getLookupFilesMetadata = function (args, requestStatusCallback) {
            var path = "/streams/v3beta1/lookups/files";
            return _this.client.get(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns lookup table results.
         * @param connectionId Connection ID
         * @param args parameters to be sent with the request
         * @param args.offset offset
         * @param args.size size
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return LookupTableResponse
         */
        _this.getLookupTable = function (connectionId, args, requestStatusCallback) {
            var path_params = {
                connectionId: connectionId
            };
            var path = _this.template(templateObject_12 || (templateObject_12 = __makeTemplateObject(["/streams/v3beta1/lookups/", ""], ["/streams/v3beta1/lookups/", ""])), 'connectionId')(path_params);
            return _this.client.get(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the output schema for a specified function in a pipeline.
         * @param getOutputSchemaRequest Request JSON
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return { [key: string]: UplType; }
         */
        _this.getOutputSchema = function (getOutputSchemaRequest, args, requestStatusCallback) {
            var path = "/streams/v3beta1/pipelines/output-schema";
            return _this.client.post(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), getOutputSchemaRequest, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns an individual pipeline by version.
         * @param id Pipeline ID
         * @param args parameters to be sent with the request
         * @param args.version version
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return PipelineResponse
         */
        _this.getPipeline = function (id, args, requestStatusCallback) {
            var path_params = {
                id: id
            };
            var path = _this.template(templateObject_13 || (templateObject_13 = __makeTemplateObject(["/streams/v3beta1/pipelines/", ""], ["/streams/v3beta1/pipelines/", ""])), 'id')(path_params);
            return _this.client.get(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the latest metrics for a single pipeline.
         * @param id Pipeline ID
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return MetricsResponse
         */
        _this.getPipelineLatestMetrics = function (id, args, requestStatusCallback) {
            var path_params = {
                id: id
            };
            var path = _this.template(templateObject_14 || (templateObject_14 = __makeTemplateObject(["/streams/v3beta1/pipelines/", "/metrics/latest"], ["/streams/v3beta1/pipelines/", "/metrics/latest"])), 'id')(path_params);
            return _this.client.get(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the status of pipelines from the underlying streaming system.
         * @param args parameters to be sent with the request
         * @param args.activated activated
         * @param args.createUserId createUserId
         * @param args.name name
         * @param args.offset offset
         * @param args.pageSize pageSize
         * @param args.sortDir sortDir
         * @param args.sortField sortField
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return PaginatedResponseOfPipelineJobStatus
         */
        _this.getPipelinesStatus = function (args, requestStatusCallback) {
            var path = "/streams/v3beta1/pipelines/status";
            return _this.client.get(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the preview data for a session.
         * @param previewSessionId Preview Session ID
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return PreviewData
         */
        _this.getPreviewData = function (previewSessionId, args, requestStatusCallback) {
            var path_params = {
                previewSessionId: previewSessionId.toString()
            };
            var path = _this.template(templateObject_15 || (templateObject_15 = __makeTemplateObject(["/streams/v3beta1/preview-data/", ""], ["/streams/v3beta1/preview-data/", ""])), 'previewSessionId')(path_params);
            return _this.client.get(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns information from a preview session.
         * @param previewSessionId Preview Session ID
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return PreviewState
         */
        _this.getPreviewSession = function (previewSessionId, args, requestStatusCallback) {
            var path_params = {
                previewSessionId: previewSessionId.toString()
            };
            var path = _this.template(templateObject_16 || (templateObject_16 = __makeTemplateObject(["/streams/v3beta1/preview-session/", ""], ["/streams/v3beta1/preview-session/", ""])), 'previewSessionId')(path_params);
            return _this.client.get(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the latest metrics for a preview session.
         * @param previewSessionId Preview Session ID
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return MetricsResponse
         */
        _this.getPreviewSessionLatestMetrics = function (previewSessionId, args, requestStatusCallback) {
            var path_params = {
                previewSessionId: previewSessionId.toString()
            };
            var path = _this.template(templateObject_17 || (templateObject_17 = __makeTemplateObject(["/streams/v3beta1/preview-session/", "/metrics/latest"], ["/streams/v3beta1/preview-session/", "/metrics/latest"])), 'previewSessionId')(path_params);
            return _this.client.get(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns all functions in JSON format.
         * @param args parameters to be sent with the request
         * @param args.local local
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return RegistryModel
         */
        _this.getRegistry = function (args, requestStatusCallback) {
            var path = "/streams/v3beta1/pipelines/registry";
            return _this.client.get(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns an individual template by version.
         * @param templateId Template ID
         * @param args parameters to be sent with the request
         * @param args.version Template version
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return TemplateResponse
         */
        _this.getTemplate = function (templateId, args, requestStatusCallback) {
            var path_params = {
                templateId: templateId
            };
            var path = _this.template(templateObject_18 || (templateObject_18 = __makeTemplateObject(["/streams/v3beta1/templates/", ""], ["/streams/v3beta1/templates/", ""])), 'templateId')(path_params);
            return _this.client.get(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of connections (latest versions only) by tenant ID.
         * @param args parameters to be sent with the request
         * @param args.connectorId
         * @param args.createUserId
         * @param args.functionId
         * @param args.functionOp
         * @param args.name
         * @param args.offset
         * @param args.pageSize
         * @param args.showSecretNames
         * @param args.sortDir Specify either ascending ('asc') or descending ('desc') sort order for a given field (sortField), which must be set for sortDir to apply. Defaults to 'asc'.
         * @param args.sortField
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return PaginatedResponseOfConnectionResponse
         */
        _this.listConnections = function (args, requestStatusCallback) {
            var path = "/streams/v3beta1/connections";
            return _this.client.get(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of the available connectors.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return PaginatedResponseOfConnectorResponse
         */
        _this.listConnectors = function (args, requestStatusCallback) {
            var path = "/streams/v3beta1/connectors";
            return _this.client.get(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of datastreams for a tenant.
         * @param args parameters to be sent with the request
         * @param args.offset offset
         * @param args.pageSize pageSize
         * @param args.sortDir sortDir
         * @param args.sortField sortField
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<DataStreamResponse>
         */
        _this.listDataStreams = function (args, requestStatusCallback) {
            var path = "/streams/v3beta1/datastreams";
            return _this.client.get(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns all pipelines.
         * @param args parameters to be sent with the request
         * @param args.activated activated
         * @param args.createUserId createUserId
         * @param args.includeData includeData
         * @param args.name name
         * @param args.offset offset
         * @param args.pageSize pageSize
         * @param args.sortDir sortDir
         * @param args.sortField sortField
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return PaginatedResponseOfPipelineResponse
         */
        _this.listPipelines = function (args, requestStatusCallback) {
            var path = "/streams/v3beta1/pipelines";
            return _this.client.get(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of all templates.
         * @param args parameters to be sent with the request
         * @param args.offset offset
         * @param args.pageSize pageSize
         * @param args.sortDir sortDir
         * @param args.sortField sortField
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return PaginatedResponseOfTemplateResponse
         */
        _this.listTemplates = function (args, requestStatusCallback) {
            var path = "/streams/v3beta1/templates";
            return _this.client.get(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Patches an existing pipeline.
         * @param id Pipeline ID
         * @param pipelinePatchRequest Request JSON
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return PipelineResponse
         */
        _this.patchPipeline = function (id, pipelinePatchRequest, args, requestStatusCallback) {
            var path_params = {
                id: id
            };
            var path = _this.template(templateObject_19 || (templateObject_19 = __makeTemplateObject(["/streams/v3beta1/pipelines/", ""], ["/streams/v3beta1/pipelines/", ""])), 'id')(path_params);
            return _this.client.patch(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), pipelinePatchRequest, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Updates an existing DSP connection.
         * @param connectionId Connection ID
         * @param connectionPutRequest Request JSON
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return ConnectionSaveResponse
         */
        _this.putConnection = function (connectionId, connectionPutRequest, args, requestStatusCallback) {
            var path_params = {
                connectionId: connectionId
            };
            var path = _this.template(templateObject_20 || (templateObject_20 = __makeTemplateObject(["/streams/v3beta1/connections/", ""], ["/streams/v3beta1/connections/", ""])), 'connectionId')(path_params);
            return _this.client.put(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), connectionPutRequest, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Updates an existing template.
         * @param templateId Template ID
         * @param templatePutRequest Request JSON
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return TemplateResponse
         */
        _this.putTemplate = function (templateId, templatePutRequest, args, requestStatusCallback) {
            var path_params = {
                templateId: templateId
            };
            var path = _this.template(templateObject_21 || (templateObject_21 = __makeTemplateObject(["/streams/v3beta1/templates/", ""], ["/streams/v3beta1/templates/", ""])), 'templateId')(path_params);
            return _this.client.put(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), templatePutRequest, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Reactivate a pipeline
         * @param id Pipeline ID
         * @param reactivatePipelineRequest Request JSON
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return PipelineReactivateResponse
         */
        _this.reactivatePipeline = function (id, reactivatePipelineRequest, args, requestStatusCallback) {
            if (!reactivatePipelineRequest) {
                throw new client_1.SplunkError({ message: "Bad Request: reactivatePipelineRequest is empty or undefined" });
            }
            var path_params = {
                id: id
            };
            var path = _this.template(templateObject_22 || (templateObject_22 = __makeTemplateObject(["/streams/v3beta1/pipelines/", "/reactivate"], ["/streams/v3beta1/pipelines/", "/reactivate"])), 'id')(path_params);
            return _this.client.post(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), reactivatePipelineRequest, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates a preview session for a pipeline.
         * @param previewSessionStartRequest Parameters to start a new Preview session
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return PreviewStartResponse
         */
        _this.startPreview = function (previewSessionStartRequest, args, requestStatusCallback) {
            var path = "/streams/v3beta1/preview-session";
            return _this.client.post(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), previewSessionStartRequest, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Stops a preview session.
         * @param previewSessionId Preview Session ID
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.stopPreview = function (previewSessionId, args, requestStatusCallback) {
            var path_params = {
                previewSessionId: previewSessionId.toString()
            };
            var path = _this.template(templateObject_23 || (templateObject_23 = __makeTemplateObject(["/streams/v3beta1/preview-session/", ""], ["/streams/v3beta1/preview-session/", ""])), 'previewSessionId')(path_params);
            return _this.client["delete"](exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Patches an existing DSP connection.
         * @param connectionId Connection ID
         * @param connectionPatchRequest Request JSON
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return ConnectionSaveResponse
         */
        _this.updateConnection = function (connectionId, connectionPatchRequest, args, requestStatusCallback) {
            var path_params = {
                connectionId: connectionId
            };
            var path = _this.template(templateObject_24 || (templateObject_24 = __makeTemplateObject(["/streams/v3beta1/connections/", ""], ["/streams/v3beta1/connections/", ""])), 'connectionId')(path_params);
            return _this.client.patch(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), connectionPatchRequest, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Patches an existing data stream for a tenant.
         * @param id ID
         * @param dataStreamRequest Request JSON
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return DataStream
         */
        _this.updateDataStream = function (id, dataStreamRequest, args, requestStatusCallback) {
            var path_params = {
                id: id
            };
            var path = _this.template(templateObject_25 || (templateObject_25 = __makeTemplateObject(["/streams/v3beta1/datastreams/", ""], ["/streams/v3beta1/datastreams/", ""])), 'id')(path_params);
            return _this.client.patch(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), dataStreamRequest, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Updates an existing pipeline.
         * @param id Pipeline ID
         * @param pipelineRequest Request JSON
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return PipelineResponse
         */
        _this.updatePipeline = function (id, pipelineRequest, args, requestStatusCallback) {
            var path_params = {
                id: id
            };
            var path = _this.template(templateObject_26 || (templateObject_26 = __makeTemplateObject(["/streams/v3beta1/pipelines/", ""], ["/streams/v3beta1/pipelines/", ""])), 'id')(path_params);
            return _this.client.put(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), pipelineRequest, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Patches an existing template.
         * @param templateId Template ID
         * @param templatePatchRequest Request JSON
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return TemplateResponse
         */
        _this.updateTemplate = function (templateId, templatePatchRequest, args, requestStatusCallback) {
            var path_params = {
                templateId: templateId
            };
            var path = _this.template(templateObject_27 || (templateObject_27 = __makeTemplateObject(["/streams/v3beta1/templates/", ""], ["/streams/v3beta1/templates/", ""])), 'templateId')(path_params);
            return _this.client.patch(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), templatePatchRequest, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Verifies whether the Streams JSON is valid.
         * @param validateRequest Request JSON
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return ValidateResponse
         */
        _this.validatePipeline = function (validateRequest, args, requestStatusCallback) {
            var path = "/streams/v3beta1/pipelines/validate";
            return _this.client.post(exports.STREAMS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), validateRequest, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        return _this;
    }
    GeneratedStreamsService.prototype.getServiceCluster = function () {
        return exports.STREAMS_SERVICE_CLUSTER;
    };
    GeneratedStreamsService.prototype.getServicePrefix = function () {
        return exports.STREAMS_SERVICE_PREFIX;
    };
    return GeneratedStreamsService;
}(baseapiservice_1["default"]));
exports.GeneratedStreamsService = GeneratedStreamsService;
exports.StreamsService = streams_1.StreamsServiceExtensions(GeneratedStreamsService);
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12, templateObject_13, templateObject_14, templateObject_15, templateObject_16, templateObject_17, templateObject_18, templateObject_19, templateObject_20, templateObject_21, templateObject_22, templateObject_23, templateObject_24, templateObject_25, templateObject_26, templateObject_27;
//# sourceMappingURL=GeneratedApis.js.map