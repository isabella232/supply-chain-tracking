/**
 * Copyright 2020 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Data Stream Processing REST API
 * Use the Streams service to perform create, read, update, and delete (CRUD) operations on your data pipeline. The Streams service also has metrics and preview session endpoints and gives you full control over your data pipeline.
 *
 * OpenAPI spec version: v2beta1.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { ActivatePipelineRequest, ConnectionPatchRequest, ConnectionPutRequest, ConnectionRequest, ConnectionSaveResponse, DeactivatePipelineRequest, DslCompilationRequest, GetInputSchemaRequest, GetOutputSchemaRequest, GroupExpandRequest, GroupPatchRequest, GroupPutRequest, GroupRequest, GroupResponse, MetricsResponse, PaginatedResponseOfConnectionResponse, PaginatedResponseOfConnectorResponse, PaginatedResponseOfPipelineJobStatus, PaginatedResponseOfPipelineResponse, PaginatedResponseOfTemplateResponse, PipelineDeleteResponse, PipelinePatchRequest, PipelineReactivateResponse, PipelineRequest, PipelineResponse, PipelinesMergeRequest, PreviewData, PreviewSessionStartRequest, PreviewStartResponse, PreviewState, ReactivatePipelineRequest, Response, SplCompileRequest, TemplatePatchRequest, TemplatePutRequest, TemplateRequest, TemplateResponse, UplPipeline, UplRegistry, UplType, ValidateRequest, ValidateResponse } from '../models';
import BaseApiService from "../../../../baseapiservice";
import { StreamsServiceExtensions } from "../../../../service_extensions/streams";
import { RequestStatus } from '../../../../client';
export declare const STREAMS_SERVICE_PREFIX: string;
export declare const STREAMS_SERVICE_CLUSTER: string;
/**
 * Data Stream Processing REST API
 * Version: v2beta1.4
 * Use the Streams service to perform create, read, update, and delete (CRUD) operations on your data pipeline. The Streams service also has metrics and preview session endpoints and gives you full control over your data pipeline.
 */
export declare class GeneratedStreamsService extends BaseApiService {
    getServiceCluster(): string;
    getServicePrefix(): string;
    /**
     * Activates an existing pipeline.
     * @param id id of the pipeline to activate
     * @param activatePipelineRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Response
     */
    activatePipeline: (id: string, activatePipelineRequest: ActivatePipelineRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Response>;
    /**
     * Compiles the Streams DSL and returns Streams JSON.
     * @param dslCompilationRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return UplPipeline
     */
    compileDSL: (dslCompilationRequest: DslCompilationRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<UplPipeline>;
    /**
     * Compiles SPL2 and returns Streams JSON.
     * @param splCompileRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return UplPipeline
     */
    compileSPL: (splCompileRequest: SplCompileRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<UplPipeline>;
    /**
     * Create a new DSP connection.
     * @param connectionRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return ConnectionSaveResponse
     */
    createConnection: (connectionRequest: ConnectionRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<ConnectionSaveResponse>;
    /**
     * Create a new group function by combining the Streams JSON of two or more functions.
     * @param groupRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return GroupResponse
     */
    createGroup: (groupRequest: GroupRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<GroupResponse>;
    /**
     * Creates a pipeline.
     * @param pipelineRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PipelineResponse
     */
    createPipeline: (pipelineRequest: PipelineRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PipelineResponse>;
    /**
     * Creates a template for a tenant.
     * @param templateRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return TemplateResponse
     */
    createTemplate: (templateRequest: TemplateRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<TemplateResponse>;
    /**
     * Deactivates an existing pipeline.
     * @param id id of the pipeline to deactivate
     * @param deactivatePipelineRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Response
     */
    deactivatePipeline: (id: string, deactivatePipelineRequest: DeactivatePipelineRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Response>;
    /**
     * Delete all versions of a connection by its id.
     * @param connectionId ID of the connection
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteConnection: (connectionId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Removes an existing group.
     * @param groupId The group function's ID from the function registry
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteGroup: (groupId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Removes a pipeline.
     * @param id id of the pipeline to delete
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PipelineDeleteResponse
     */
    deletePipeline: (id: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PipelineDeleteResponse>;
    /**
     * Removes a template with a specific ID.
     * @param templateId ID of the template to delete
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteTemplate: (templateId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Creates and returns the expanded version of a group.
     * @param groupId The group function's ID from the function registry
     * @param groupExpandRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return UplPipeline
     */
    expandGroup: (groupId: string, groupExpandRequest: GroupExpandRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<UplPipeline>;
    /**
     * Returns the entire Streams JSON, including the expanded Streams JSON of any group functions in the pipeline.
     * @param uplPipeline Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return UplPipeline
     */
    expandPipeline: (uplPipeline: UplPipeline, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<UplPipeline>;
    /**
     * Returns the full Streams JSON of a group.
     * @param groupId The group function's ID from the function registry
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return GroupResponse
     */
    getGroup: (groupId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<GroupResponse>;
    /**
     * Returns the input schema for a function in a pipeline.
     * @param getInputSchemaRequest Input Schema Request
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return UplType
     */
    getInputSchema: (getInputSchemaRequest: GetInputSchemaRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<UplType>;
    /**
     * Returns the output schema for a specified function in a pipeline. If no function ID is  specified, the request returns the output schema for all functions in a pipeline.
     * @param getOutputSchemaRequest Output Schema Request
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return { [key: string]: UplType; }
     */
    getOutputSchema: (getOutputSchemaRequest: GetOutputSchemaRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<{
        [key: string]: UplType;
    }>;
    /**
     * Returns an individual pipeline by version.
     * @param id id of the pipeline to get
     * @param args parameters to be sent with the request
     * @param args.version version
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PipelineResponse
     */
    getPipeline: (id: string, args?: {
        [key: string]: any;
        version?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PipelineResponse>;
    /**
     * Returns the latest metrics for a single pipeline.
     * @param id ID of the pipeline to get metrics for
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return MetricsResponse
     */
    getPipelineLatestMetrics: (id: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<MetricsResponse>;
    /**
     * Returns the status of pipelines from the underlying streaming system.
     * @param args parameters to be sent with the request
     * @param args.activated activated
     * @param args.createUserId createUserId
     * @param args.name name
     * @param args.offset offset
     * @param args.pageSize pageSize
     * @param args.sortDir sortDir
     * @param args.sortField sortField
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PaginatedResponseOfPipelineJobStatus
     */
    getPipelinesStatus: (args?: {
        [key: string]: any;
        activated?: boolean | undefined;
        createUserId?: string | undefined;
        name?: string | undefined;
        offset?: number | undefined;
        pageSize?: number | undefined;
        sortDir?: string | undefined;
        sortField?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PaginatedResponseOfPipelineJobStatus>;
    /**
     * Returns the preview data for a session.
     * @param previewSessionId ID of the preview session
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PreviewData
     */
    getPreviewData: (previewSessionId: number, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PreviewData>;
    /**
     * Returns information from a preview session.
     * @param previewSessionId ID of the preview session
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PreviewState
     */
    getPreviewSession: (previewSessionId: number, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PreviewState>;
    /**
     * Returns the latest metrics for a preview session.
     * @param previewSessionId ID of the preview session
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return MetricsResponse
     */
    getPreviewSessionLatestMetrics: (previewSessionId: number, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<MetricsResponse>;
    /**
     * Returns all functions in JSON format.
     * @param args parameters to be sent with the request
     * @param args.local local
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return UplRegistry
     */
    getRegistry: (args?: {
        [key: string]: any;
        local?: boolean | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<UplRegistry>;
    /**
     * Returns an individual template by version.
     * @param templateId ID of the template
     * @param args parameters to be sent with the request
     * @param args.version version of the template
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return TemplateResponse
     */
    getTemplate: (templateId: string, args?: {
        [key: string]: any;
        version?: number | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<TemplateResponse>;
    /**
     * Returns a list of connections (latest versions only) by tenant ID.
     * @param args parameters to be sent with the request
     * @param args.connectorId
     * @param args.createUserId
     * @param args.functionId
     * @param args.functionOp
     * @param args.name
     * @param args.offset
     * @param args.pageSize
     * @param args.showSecretNames
     * @param args.sortDir Specify either ascending ('asc') or descending ('desc') sort order for a given field (sortField), which must be set for sortDir to apply. Defaults to 'asc'.
     * @param args.sortField
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PaginatedResponseOfConnectionResponse
     */
    listConnections: (args?: {
        [key: string]: any;
        connectorId?: string[] | undefined;
        createUserId?: string | undefined;
        functionId?: string | undefined;
        functionOp?: string | undefined;
        name?: string | undefined;
        offset?: number | undefined;
        pageSize?: number | undefined;
        showSecretNames?: string | undefined;
        sortDir?: string | undefined;
        sortField?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PaginatedResponseOfConnectionResponse>;
    /**
     * Returns a list of the available connectors.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PaginatedResponseOfConnectorResponse
     */
    listConnectors: (args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PaginatedResponseOfConnectorResponse>;
    /**
     * Returns all pipelines.
     * @param args parameters to be sent with the request
     * @param args.activated activated
     * @param args.createUserId createUserId
     * @param args.includeData includeData
     * @param args.name name
     * @param args.offset offset
     * @param args.pageSize pageSize
     * @param args.sortDir sortDir
     * @param args.sortField sortField
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PaginatedResponseOfPipelineResponse
     */
    listPipelines: (args?: {
        [key: string]: any;
        activated?: boolean | undefined;
        createUserId?: string | undefined;
        includeData?: boolean | undefined;
        name?: string | undefined;
        offset?: number | undefined;
        pageSize?: number | undefined;
        sortDir?: string | undefined;
        sortField?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PaginatedResponseOfPipelineResponse>;
    /**
     * Returns a list of all templates.
     * @param args parameters to be sent with the request
     * @param args.offset offset
     * @param args.pageSize pageSize
     * @param args.sortDir sortDir
     * @param args.sortField sortField
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PaginatedResponseOfTemplateResponse
     */
    listTemplates: (args?: {
        [key: string]: any;
        offset?: number | undefined;
        pageSize?: number | undefined;
        sortDir?: string | undefined;
        sortField?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PaginatedResponseOfTemplateResponse>;
    /**
     * Combines two Streams JSON programs.
     * @param pipelinesMergeRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return UplPipeline
     */
    mergePipelines: (pipelinesMergeRequest: PipelinesMergeRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<UplPipeline>;
    /**
     * Modifies an existing DSP connection.
     * @param connectionId ID of the connection
     * @param connectionPutRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return ConnectionSaveResponse
     */
    putConnection: (connectionId: string, connectionPutRequest: ConnectionPutRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<ConnectionSaveResponse>;
    /**
     * Update a group function combining the Streams JSON of two or more functions.
     * @param groupId The group function's ID from the function registry
     * @param groupPutRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return GroupResponse
     */
    putGroup: (groupId: string, groupPutRequest: GroupPutRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<GroupResponse>;
    /**
     * Updates an existing template.
     * @param templateId ID of the template
     * @param templatePutRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return TemplateResponse
     */
    putTemplate: (templateId: string, templatePutRequest: TemplatePutRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<TemplateResponse>;
    /**
     * Reactivate a pipeline
     * @param id Pipeline UUID to reactivate
     * @param reactivatePipelineRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PipelineReactivateResponse
     */
    reactivatePipeline: (id: string, reactivatePipelineRequest?: ReactivatePipelineRequest | undefined, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PipelineReactivateResponse>;
    /**
     * Creates a preview session for a pipeline.
     * @param previewSessionStartRequest Parameters to start a new Preview session
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PreviewStartResponse
     */
    startPreview: (previewSessionStartRequest: PreviewSessionStartRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PreviewStartResponse>;
    /**
     * Stops a preview session.
     * @param previewSessionId ID of the preview session
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return string
     */
    stopPreview: (previewSessionId: number, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<string>;
    /**
     * Partially modifies an existing DSP connection.
     * @param connectionId ID of the connection
     * @param connectionPatchRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return ConnectionSaveResponse
     */
    updateConnection: (connectionId: string, connectionPatchRequest: ConnectionPatchRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<ConnectionSaveResponse>;
    /**
     * Modify a group function by combining the Streams JSON of two or more functions.
     * @param groupId The group function's ID from the function registry
     * @param groupPatchRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return GroupResponse
     */
    updateGroup: (groupId: string, groupPatchRequest: GroupPatchRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<GroupResponse>;
    /**
     * Partially modifies an existing pipeline.
     * @param id id of the pipeline to update
     * @param pipelinePatchRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PipelineResponse
     */
    updatePipeline: (id: string, pipelinePatchRequest: PipelinePatchRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PipelineResponse>;
    /**
     * Partially modifies an existing template.
     * @param templateId ID of the template
     * @param templatePatchRequest Request JSON
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return TemplateResponse
     */
    updateTemplate: (templateId: string, templatePatchRequest: TemplatePatchRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<TemplateResponse>;
    /**
     * Verifies whether the Streams JSON is valid.
     * @param validateRequest JSON UPL to validate
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return ValidateResponse
     */
    validatePipeline: (validateRequest: ValidateRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<ValidateResponse>;
}
export declare type StreamsService = GeneratedStreamsService & StreamsServiceExtensions;
export declare const StreamsService: typeof GeneratedStreamsService;
