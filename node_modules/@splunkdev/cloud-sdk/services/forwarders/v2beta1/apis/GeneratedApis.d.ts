/**
 * Copyright 2020 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Splunk Forwarder Service
 * Send data from a Splunk forwarder to the Splunk Forwarder service in Splunk Cloud Services.
 *
 * OpenAPI spec version: v2beta1.4 (recommended default)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Certificate, CertificateInfo } from '../models';
import BaseApiService from "../../../../baseapiservice";
import { ForwardersServiceExtensions } from "../../../../service_extensions/forwarders";
import { RequestStatus } from '../../../../client';
export declare const FORWARDERS_SERVICE_PREFIX: string;
export declare const FORWARDERS_SERVICE_CLUSTER: string;
/**
 * Splunk Forwarder Service
 * Version: v2beta1.4
 * Send data from a Splunk forwarder to the Splunk Forwarder service in Splunk Cloud Services.
 */
export declare class GeneratedForwardersService extends BaseApiService {
    getServiceCluster(): string;
    getServicePrefix(): string;
    /**
     * Adds a certificate to a vacant slot on a tenant.
     * @param certificate
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return CertificateInfo
     */
    addCertificate: (certificate?: Certificate | undefined, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<CertificateInfo>;
    /**
     * Removes a certificate on a particular slot on a tenant.
     * @param slot
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteCertificate: (slot: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Removes all certificates on a tenant.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteCertificates: (args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Returns a list of all certificates for a tenant.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<CertificateInfo>
     */
    listCertificates: (args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<CertificateInfo[]>;
}
export declare type ForwardersService = GeneratedForwardersService & ForwardersServiceExtensions;
export declare const ForwardersService: typeof GeneratedForwardersService;
