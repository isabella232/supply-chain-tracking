"use strict";
// tslint:disable
/**
 * Copyright 2020 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Splunk Forwarder Service
 * Send data from a Splunk forwarder to the Splunk Forwarder service in Splunk Cloud Services.
 *
 * OpenAPI spec version: v2beta1.4 (recommended default)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var baseapiservice_1 = __importDefault(require("../../../../baseapiservice"));
var forwarders_1 = require("../../../../service_extensions/forwarders");
var client_1 = require("../../../../client");
exports.FORWARDERS_SERVICE_PREFIX = '/forwarders/v2beta1';
exports.FORWARDERS_SERVICE_CLUSTER = 'api';
/**
 * Splunk Forwarder Service
 * Version: v2beta1.4
 * Send data from a Splunk forwarder to the Splunk Forwarder service in Splunk Cloud Services.
 */
var GeneratedForwardersService = /** @class */ (function (_super) {
    __extends(GeneratedForwardersService, _super);
    function GeneratedForwardersService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Adds a certificate to a vacant slot on a tenant.
         * @param certificate
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return CertificateInfo
         */
        _this.addCertificate = function (certificate, args, requestStatusCallback) {
            if (!certificate) {
                throw new client_1.SplunkError({ message: "Bad Request: certificate is empty or undefined" });
            }
            var path = "/forwarders/v2beta1/certificates";
            return _this.client.post(exports.FORWARDERS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), certificate, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Removes a certificate on a particular slot on a tenant.
         * @param slot
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteCertificate = function (slot, args, requestStatusCallback) {
            var path_params = {
                slot: slot
            };
            var path = _this.template(templateObject_1 || (templateObject_1 = __makeTemplateObject(["/forwarders/v2beta1/certificates/", ""], ["/forwarders/v2beta1/certificates/", ""])), 'slot')(path_params);
            return _this.client["delete"](exports.FORWARDERS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Removes all certificates on a tenant.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteCertificates = function (args, requestStatusCallback) {
            var path = "/forwarders/v2beta1/certificates";
            return _this.client["delete"](exports.FORWARDERS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of all certificates for a tenant.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<CertificateInfo>
         */
        _this.listCertificates = function (args, requestStatusCallback) {
            var path = "/forwarders/v2beta1/certificates";
            return _this.client.get(exports.FORWARDERS_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        return _this;
    }
    GeneratedForwardersService.prototype.getServiceCluster = function () {
        return exports.FORWARDERS_SERVICE_CLUSTER;
    };
    GeneratedForwardersService.prototype.getServicePrefix = function () {
        return exports.FORWARDERS_SERVICE_PREFIX;
    };
    return GeneratedForwardersService;
}(baseapiservice_1["default"]));
exports.GeneratedForwardersService = GeneratedForwardersService;
exports.ForwardersService = forwarders_1.ForwardersServiceExtensions(GeneratedForwardersService);
var templateObject_1;
//# sourceMappingURL=GeneratedApis.js.map