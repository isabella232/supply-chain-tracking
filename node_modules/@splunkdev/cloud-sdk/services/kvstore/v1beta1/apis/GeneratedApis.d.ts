/**
 * Copyright 2020 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * KV Store API
 * With the Splunk Cloud KV store service in Splunk Cloud Services, you can save and retrieve data within your Splunk Cloud apps, enabling you to manage and maintain state in your application.
 *
 * OpenAPI spec version: v1beta1.2 (recommended default)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { IndexDefinition, IndexDescription, Key, PingResponse } from '../models';
import BaseApiService from "../../../../baseapiservice";
import { KVStoreServiceExtensions } from "../../../../service_extensions/kvstore";
import { RequestStatus } from '../../../../client';
export declare const KVSTORE_SERVICE_PREFIX: string;
export declare const KVSTORE_SERVICE_CLUSTER: string;
/**
 * KV Store API
 * Version: v1beta1.2
 * With the Splunk Cloud KV store service in Splunk Cloud Services, you can save and retrieve data within your Splunk Cloud apps, enabling you to manage and maintain state in your application.
 */
export declare class GeneratedKVStoreService extends BaseApiService {
    getServiceCluster(): string;
    getServicePrefix(): string;
    /**
     * Creates an index on a collection.
     * @param collection The name of the collection.
     * @param indexDefinition
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return IndexDescription
     */
    createIndex: (collection: string, indexDefinition?: IndexDefinition | undefined, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<IndexDescription>;
    /**
     * Removes an index from a collection.
     * @param collection The name of the collection.
     * @param index The name of the index.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteIndex: (collection: string, index: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Deletes a record with a given key.
     * @param collection The name of the collection.
     * @param key The key of the record.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteRecordByKey: (collection: string, key: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Removes records in a collection that match the query.
     * @param collection The name of the collection.
     * @param args parameters to be sent with the request
     * @param args.query Query JSON expression.
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteRecords: (collection: string, args?: {
        [key: string]: any;
        query?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Returns a record with a given key.
     * @param collection The name of the collection.
     * @param key The key of the record.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return { [key: string]: any; }
     */
    getRecordByKey: (collection: string, key: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<{
        [key: string]: any;
    }>;
    /**
     * Inserts a record into a collection.
     * @param collection The name of the collection.
     * @param body Record to add to the collection, formatted as a JSON object.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Key
     */
    insertRecord: (collection: string, body: {
        [key: string]: any;
    }, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Key>;
    /**
     * Inserts multiple records in a single request.
     * @param collection The name of the collection.
     * @param requestBody Array of records to insert.
     * @param args parameters to be sent with the request
     * @param args.allowUpdates Allow records with keys included to update their respective records in the database
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<string>
     */
    insertRecords: (collection: string, requestBody: {
        [key: string]: any;
    }[], args?: {
        [key: string]: any;
        allowUpdates?: boolean | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<string[]>;
    /**
     * Returns a list of all indexes on a collection.
     * @param collection The name of the collection.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<IndexDefinition>
     */
    listIndexes: (collection: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<IndexDefinition[]>;
    /**
     * Use key-value query parameters to filter fields. Fields are implicitly ANDed and values for the same field are implicitly ORed.
     * Returns a list of records in a collection with basic filtering, sorting, pagination and field projection.
     * @param collection The name of the collection.
     * @param args parameters to be sent with the request
     * @param args.count Maximum number of records to return.
     * @param args.fields Comma-separated list of fields to include or exclude.
     * @param args.offset Number of records to skip from the start.
     * @param args.orderby Sort order. Format is `<field>:<sort order>`. Valid sort orders are 1 for ascending, -1 for descending.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<{ [key: string]: any; }>
     */
    listRecords: (collection: string, args?: {
        [key: string]: any;
        count?: number | undefined;
        fields?: string[] | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<{
        [key: string]: any;
    }[]>;
    /**
     * Returns the health status from the database.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return PingResponse
     */
    ping: (args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PingResponse>;
    /**
     * Updates the record with a given key, either by inserting or replacing the record.
     * @param collection The name of the collection.
     * @param key The key of the record.
     * @param body Record to add to the collection, formatted as a JSON object.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Key
     */
    putRecord: (collection: string, key: string, body: {
        [key: string]: any;
    }, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Key>;
    /**
     * Returns a list of query records in a collection.
     * @param collection The name of the collection.
     * @param args parameters to be sent with the request
     * @param args.count Maximum number of records to return.
     * @param args.fields Comma-separated list of fields to include or exclude.
     * @param args.offset Number of records to skip from the start.
     * @param args.orderby Sort order. Format is `<field>:<sort order>`. Valid sort orders are 1 for ascending, -1 for descending.
     * @param args.query Query JSON expression.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<{ [key: string]: any; }>
     */
    queryRecords: (collection: string, args?: {
        [key: string]: any;
        count?: number | undefined;
        fields?: string[] | undefined;
        offset?: number | undefined;
        orderby?: string[] | undefined;
        query?: string | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<{
        [key: string]: any;
    }[]>;
    /**
     * Deletes all the records in a collection.
     * @param collection The name of the collection.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    truncateRecords: (collection: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
}
export declare type KVStoreService = GeneratedKVStoreService & KVStoreServiceExtensions;
export declare const KVStoreService: typeof GeneratedKVStoreService;
