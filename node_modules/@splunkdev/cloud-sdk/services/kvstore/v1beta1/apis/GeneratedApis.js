"use strict";
// tslint:disable
/**
 * Copyright 2020 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * KV Store API
 * With the Splunk Cloud KV store service in Splunk Cloud Services, you can save and retrieve data within your Splunk Cloud apps, enabling you to manage and maintain state in your application.
 *
 * OpenAPI spec version: v1beta1.2 (recommended default)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var baseapiservice_1 = __importDefault(require("../../../../baseapiservice"));
var kvstore_1 = require("../../../../service_extensions/kvstore");
var client_1 = require("../../../../client");
exports.KVSTORE_SERVICE_PREFIX = '/kvstore/v1beta1';
exports.KVSTORE_SERVICE_CLUSTER = 'api';
/**
 * KV Store API
 * Version: v1beta1.2
 * With the Splunk Cloud KV store service in Splunk Cloud Services, you can save and retrieve data within your Splunk Cloud apps, enabling you to manage and maintain state in your application.
 */
var GeneratedKVStoreService = /** @class */ (function (_super) {
    __extends(GeneratedKVStoreService, _super);
    function GeneratedKVStoreService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Creates an index on a collection.
         * @param collection The name of the collection.
         * @param indexDefinition
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return IndexDescription
         */
        _this.createIndex = function (collection, indexDefinition, args, requestStatusCallback) {
            if (!indexDefinition) {
                throw new client_1.SplunkError({ message: "Bad Request: indexDefinition is empty or undefined" });
            }
            var path_params = {
                collection: collection
            };
            var path = _this.template(templateObject_1 || (templateObject_1 = __makeTemplateObject(["/kvstore/v1beta1/collections/", "/indexes"], ["/kvstore/v1beta1/collections/", "/indexes"])), 'collection')(path_params);
            return _this.client.post(exports.KVSTORE_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), indexDefinition, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Removes an index from a collection.
         * @param collection The name of the collection.
         * @param index The name of the index.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteIndex = function (collection, index, args, requestStatusCallback) {
            var path_params = {
                collection: collection,
                index: index
            };
            var path = _this.template(templateObject_2 || (templateObject_2 = __makeTemplateObject(["/kvstore/v1beta1/collections/", "/indexes/", ""], ["/kvstore/v1beta1/collections/", "/indexes/", ""])), 'collection', 'index')(path_params);
            return _this.client["delete"](exports.KVSTORE_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Deletes a record with a given key.
         * @param collection The name of the collection.
         * @param key The key of the record.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteRecordByKey = function (collection, key, args, requestStatusCallback) {
            var path_params = {
                collection: collection,
                key: key
            };
            var path = _this.template(templateObject_3 || (templateObject_3 = __makeTemplateObject(["/kvstore/v1beta1/collections/", "/records/", ""], ["/kvstore/v1beta1/collections/", "/records/", ""])), 'collection', 'key')(path_params);
            return _this.client["delete"](exports.KVSTORE_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Removes records in a collection that match the query.
         * @param collection The name of the collection.
         * @param args parameters to be sent with the request
         * @param args.query Query JSON expression.
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteRecords = function (collection, args, requestStatusCallback) {
            var path_params = {
                collection: collection
            };
            var path = _this.template(templateObject_4 || (templateObject_4 = __makeTemplateObject(["/kvstore/v1beta1/collections/", "/query"], ["/kvstore/v1beta1/collections/", "/query"])), 'collection')(path_params);
            return _this.client["delete"](exports.KVSTORE_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a record with a given key.
         * @param collection The name of the collection.
         * @param key The key of the record.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return { [key: string]: any; }
         */
        _this.getRecordByKey = function (collection, key, args, requestStatusCallback) {
            var path_params = {
                collection: collection,
                key: key
            };
            var path = _this.template(templateObject_5 || (templateObject_5 = __makeTemplateObject(["/kvstore/v1beta1/collections/", "/records/", ""], ["/kvstore/v1beta1/collections/", "/records/", ""])), 'collection', 'key')(path_params);
            return _this.client.get(exports.KVSTORE_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Inserts a record into a collection.
         * @param collection The name of the collection.
         * @param body Record to add to the collection, formatted as a JSON object.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Key
         */
        _this.insertRecord = function (collection, body, args, requestStatusCallback) {
            var path_params = {
                collection: collection
            };
            var path = _this.template(templateObject_6 || (templateObject_6 = __makeTemplateObject(["/kvstore/v1beta1/collections/", ""], ["/kvstore/v1beta1/collections/", ""])), 'collection')(path_params);
            return _this.client.post(exports.KVSTORE_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), body, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Inserts multiple records in a single request.
         * @param collection The name of the collection.
         * @param requestBody Array of records to insert.
         * @param args parameters to be sent with the request
         * @param args.allowUpdates Allow records with keys included to update their respective records in the database
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<string>
         */
        _this.insertRecords = function (collection, requestBody, args, requestStatusCallback) {
            var path_params = {
                collection: collection
            };
            var path = _this.template(templateObject_7 || (templateObject_7 = __makeTemplateObject(["/kvstore/v1beta1/collections/", "/batch"], ["/kvstore/v1beta1/collections/", "/batch"])), 'collection')(path_params);
            return _this.client.post(exports.KVSTORE_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), requestBody, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of all indexes on a collection.
         * @param collection The name of the collection.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<IndexDefinition>
         */
        _this.listIndexes = function (collection, args, requestStatusCallback) {
            var path_params = {
                collection: collection
            };
            var path = _this.template(templateObject_8 || (templateObject_8 = __makeTemplateObject(["/kvstore/v1beta1/collections/", "/indexes"], ["/kvstore/v1beta1/collections/", "/indexes"])), 'collection')(path_params);
            return _this.client.get(exports.KVSTORE_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Use key-value query parameters to filter fields. Fields are implicitly ANDed and values for the same field are implicitly ORed.
         * Returns a list of records in a collection with basic filtering, sorting, pagination and field projection.
         * @param collection The name of the collection.
         * @param args parameters to be sent with the request
         * @param args.count Maximum number of records to return.
         * @param args.fields Comma-separated list of fields to include or exclude.
         * @param args.offset Number of records to skip from the start.
         * @param args.orderby Sort order. Format is `<field>:<sort order>`. Valid sort orders are 1 for ascending, -1 for descending.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<{ [key: string]: any; }>
         */
        _this.listRecords = function (collection, args, requestStatusCallback) {
            var path_params = {
                collection: collection
            };
            var path = _this.template(templateObject_9 || (templateObject_9 = __makeTemplateObject(["/kvstore/v1beta1/collections/", ""], ["/kvstore/v1beta1/collections/", ""])), 'collection')(path_params);
            return _this.client.get(exports.KVSTORE_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the health status from the database.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return PingResponse
         */
        _this.ping = function (args, requestStatusCallback) {
            var path = "/kvstore/v1beta1/ping";
            return _this.client.get(exports.KVSTORE_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Updates the record with a given key, either by inserting or replacing the record.
         * @param collection The name of the collection.
         * @param key The key of the record.
         * @param body Record to add to the collection, formatted as a JSON object.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Key
         */
        _this.putRecord = function (collection, key, body, args, requestStatusCallback) {
            var path_params = {
                collection: collection,
                key: key
            };
            var path = _this.template(templateObject_10 || (templateObject_10 = __makeTemplateObject(["/kvstore/v1beta1/collections/", "/records/", ""], ["/kvstore/v1beta1/collections/", "/records/", ""])), 'collection', 'key')(path_params);
            return _this.client.put(exports.KVSTORE_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), body, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of query records in a collection.
         * @param collection The name of the collection.
         * @param args parameters to be sent with the request
         * @param args.count Maximum number of records to return.
         * @param args.fields Comma-separated list of fields to include or exclude.
         * @param args.offset Number of records to skip from the start.
         * @param args.orderby Sort order. Format is `<field>:<sort order>`. Valid sort orders are 1 for ascending, -1 for descending.
         * @param args.query Query JSON expression.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<{ [key: string]: any; }>
         */
        _this.queryRecords = function (collection, args, requestStatusCallback) {
            var path_params = {
                collection: collection
            };
            var path = _this.template(templateObject_11 || (templateObject_11 = __makeTemplateObject(["/kvstore/v1beta1/collections/", "/query"], ["/kvstore/v1beta1/collections/", "/query"])), 'collection')(path_params);
            return _this.client.get(exports.KVSTORE_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Deletes all the records in a collection.
         * @param collection The name of the collection.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.truncateRecords = function (collection, args, requestStatusCallback) {
            var path_params = {
                collection: collection
            };
            var path = _this.template(templateObject_12 || (templateObject_12 = __makeTemplateObject(["/kvstore/v1beta1/collections/", "/truncate"], ["/kvstore/v1beta1/collections/", "/truncate"])), 'collection')(path_params);
            return _this.client["delete"](exports.KVSTORE_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        return _this;
    }
    GeneratedKVStoreService.prototype.getServiceCluster = function () {
        return exports.KVSTORE_SERVICE_CLUSTER;
    };
    GeneratedKVStoreService.prototype.getServicePrefix = function () {
        return exports.KVSTORE_SERVICE_PREFIX;
    };
    return GeneratedKVStoreService;
}(baseapiservice_1["default"]));
exports.GeneratedKVStoreService = GeneratedKVStoreService;
exports.KVStoreService = kvstore_1.KVStoreServiceExtensions(GeneratedKVStoreService);
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12;
//# sourceMappingURL=GeneratedApis.js.map