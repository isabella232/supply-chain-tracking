/**
 * Copyright 2020 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * App Registry
 * With the App Registry service in Splunk Cloud Services, you can create, update, and manage your apps.
 *
 * OpenAPI spec version: v1beta2.0 (recommended default)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AppName, AppResourceKind, AppResponseCreateUpdate, CreateAppRequest, Key, Subscription, UpdateAppRequest } from '../models';
import BaseApiService from "../../../../baseapiservice";
import { AppRegistryServiceExtensions } from "../../../../service_extensions/app-registry";
import { RequestStatus } from '../../../../client';
export declare const APPREGISTRY_SERVICE_PREFIX: string;
export declare const APPREGISTRY_SERVICE_CLUSTER: string;
/**
 * App Registry
 * Version: v1beta2.0
 * With the App Registry service in Splunk Cloud Services, you can create, update, and manage your apps.
 */
export declare class GeneratedAppRegistryService extends BaseApiService {
    getServiceCluster(): string;
    getServicePrefix(): string;
    /**
     * Creates an app.
     * @param createAppRequest Creates a new app.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return AppResponseCreateUpdate
     */
    createApp: (createAppRequest: CreateAppRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<AppResponseCreateUpdate>;
    /**
     * Creates a subscription.
     * @param appName Creates a subscription between a tenant and an app.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    createSubscription: (appName: AppName, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Removes an app.
     * @param appName App name.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteApp: (appName: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Removes a subscription.
     * @param appName App name.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteSubscription: (appName: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Returns the metadata of an app.
     * @param appName App name.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return AppResponseGetList
     */
    getApp: (appName: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<AppResponseCreateUpdate>;
    /**
     * Returns a list of the public keys used for verifying signed webhook requests.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Key>
     */
    getKeys: (args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Key[]>;
    /**
     * Returns or validates a subscription.
     * @param appName App name.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Subscription
     */
    getSubscription: (appName: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Subscription>;
    /**
     * Returns the collection of subscriptions to an app.
     * @param appName App name.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Subscription>
     */
    listAppSubscriptions: (appName: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Subscription[]>;
    /**
     * Returns a list of apps.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<AppResponseGetList>
     */
    listApps: (args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<AppResponseCreateUpdate[]>;
    /**
     * Returns the tenant subscriptions.
     * @param args parameters to be sent with the request
     * @param args.kind The kind of application.
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Subscription>
     */
    listSubscriptions: (args?: {
        [key: string]: any;
        kind?: AppResourceKind | undefined;
    } | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Subscription[]>;
    /**
     * Rotates the client secret for an app.
     * @param appName App name.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return AppResponseCreateUpdate
     */
    rotateSecret: (appName: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<AppResponseCreateUpdate>;
    /**
     * Updates an app.
     * @param appName App name.
     * @param updateAppRequest Updates app contents.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return AppResponseCreateUpdate
     */
    updateApp: (appName: string, updateAppRequest: UpdateAppRequest, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<AppResponseCreateUpdate>;
}
export declare type AppRegistryService = GeneratedAppRegistryService & AppRegistryServiceExtensions;
export declare const AppRegistryService: typeof GeneratedAppRegistryService;
