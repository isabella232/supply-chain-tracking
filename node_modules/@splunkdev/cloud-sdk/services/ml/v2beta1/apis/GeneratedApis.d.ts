/**
 * Copyright 2020 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Machine Learning
 * Use the Machine Learning service in Splunk Cloud Services to deliver resource intensive machine learning workloads. The Machine Learning service covers model experimentation, training, inference, validation, scoring, and serving.
 *
 * OpenAPI spec version: v2beta1.1 (recommended default)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Workflow, WorkflowBuild, WorkflowBuildError, WorkflowBuildLog, WorkflowDeployment, WorkflowDeploymentError, WorkflowDeploymentLog, WorkflowInference, WorkflowRun, WorkflowRunError, WorkflowRunLog, WorkflowStreamDeployment, WorkflowsGetResponse } from '../models';
import BaseApiService from "../../../../baseapiservice";
import { MLServiceExtensions } from "../../../../service_extensions/ml";
import { RequestStatus } from '../../../../client';
export declare const ML_SERVICE_PREFIX: string;
export declare const ML_SERVICE_CLUSTER: string;
/**
 * Machine Learning
 * Version: v2beta1.1
 * Use the Machine Learning service in Splunk Cloud Services to deliver resource intensive machine learning workloads. The Machine Learning service covers model experimentation, training, inference, validation, scoring, and serving.
 */
export declare class GeneratedMLService extends BaseApiService {
    getServiceCluster(): string;
    getServicePrefix(): string;
    /**
     * Creates a workflow configuration.
     * @param workflow Workflow configuration to be created.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Workflow
     */
    createWorkflow: (workflow: Workflow, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Workflow>;
    /**
     * Creates a workflow build.
     * @param id The workflow ID.
     * @param workflowBuild Input data used to build the workflow.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return WorkflowBuild
     */
    createWorkflowBuild: (id: string, workflowBuild: WorkflowBuild, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowBuild>;
    /**
     * Creates a workflow deployment.
     * @param id The workflow ID.
     * @param buildId The workflow build ID.
     * @param workflowDeployment Input data used to build the workflow deployment.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return WorkflowDeployment
     */
    createWorkflowDeployment: (id: string, buildId: string, workflowDeployment: WorkflowDeployment, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowDeployment>;
    /**
     * Creates a workflow inference request.
     * @param id The workflow ID.
     * @param buildId The workflow build ID.
     * @param deploymentId The workflow deployment ID.
     * @param workflowInference Input data to the inference request.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return WorkflowInference
     */
    createWorkflowInference: (id: string, buildId: string, deploymentId: string, workflowInference: WorkflowInference, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowInference>;
    /**
     * Creates a workflow run.
     * @param id The workflow ID.
     * @param buildId The workflow build ID.
     * @param workflowRun Input data used to build the workflow.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return WorkflowRun
     */
    createWorkflowRun: (id: string, buildId: string, workflowRun: WorkflowRun, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowRun>;
    /**
     * Creates a workflow streaming deployment.
     * @param id The workflow ID.
     * @param buildId The workflow build ID.
     * @param workflowStreamDeployment Configuration for the workflow streaming deployment.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return WorkflowStreamDeployment
     */
    createWorkflowStreamDeployment: (id: string, buildId: string, workflowStreamDeployment: WorkflowStreamDeployment, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowStreamDeployment>;
    /**
     * Removes a workflow configuration.
     * @param id The workflow ID.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteWorkflow: (id: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Removes a workflow build.
     * @param id The workflow ID.
     * @param buildId The workflow build ID.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteWorkflowBuild: (id: string, buildId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Removes a workflow deployment.
     * @param id The workflow ID.
     * @param buildId The workflow build ID.
     * @param deploymentId The workflow deployment ID.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteWorkflowDeployment: (id: string, buildId: string, deploymentId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Removes a workflow run.
     * @param id The workflow ID.
     * @param buildId The workflow build ID.
     * @param runId The workflow run ID.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteWorkflowRun: (id: string, buildId: string, runId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Removes a workflow streaming deployment.
     * @param id The workflow ID.
     * @param buildId The workflow build ID.
     * @param streamDeploymentId The workflow streaming deployment ID.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteWorkflowStreamDeployment: (id: string, buildId: string, streamDeploymentId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Returns a workflow configuration.
     * @param id The workflow ID.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Workflow
     */
    getWorkflow: (id: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Workflow>;
    /**
     * Returns the status of a workflow build.
     * @param id The workflow ID.
     * @param buildId The workflow build ID.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return WorkflowBuild
     */
    getWorkflowBuild: (id: string, buildId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowBuild>;
    /**
     * Returns a list of workflow errors.
     * @param id The workflow ID.
     * @param buildId The workflow build ID.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return WorkflowBuildError
     */
    getWorkflowBuildError: (id: string, buildId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowBuildError>;
    /**
     * Returns the logs from a workflow build.
     * @param id The workflow ID.
     * @param buildId The workflow build ID.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return WorkflowBuildLog
     */
    getWorkflowBuildLog: (id: string, buildId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowBuildLog>;
    /**
     * Returns the status of a workflow deployment.
     * @param id The workflow ID.
     * @param buildId The workflow build ID.
     * @param deploymentId The workflow deployment ID.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return WorkflowDeployment
     */
    getWorkflowDeployment: (id: string, buildId: string, deploymentId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowDeployment>;
    /**
     * Returns a list of workflow deployment errors.
     * @param id The workflow ID.
     * @param buildId The workflow build ID.
     * @param deploymentId The workflow deployment ID.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return WorkflowDeploymentError
     */
    getWorkflowDeploymentError: (id: string, buildId: string, deploymentId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowDeploymentError>;
    /**
     * Returns the logs from a workflow deployment.
     * @param id The workflow ID.
     * @param buildId The workflow build ID.
     * @param deploymentId The workflow deployment ID.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return WorkflowDeploymentLog
     */
    getWorkflowDeploymentLog: (id: string, buildId: string, deploymentId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowDeploymentLog>;
    /**
     * Returns the status of a workflow run.
     * @param id The workflow ID.
     * @param buildId The workflow build ID.
     * @param runId The workflow run ID.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return WorkflowRun
     */
    getWorkflowRun: (id: string, buildId: string, runId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowRun>;
    /**
     * Returns the errors for a workflow run.
     * @param id The workflow ID.
     * @param buildId The workflow build ID.
     * @param runId The workflow run ID.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return WorkflowRunError
     */
    getWorkflowRunError: (id: string, buildId: string, runId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowRunError>;
    /**
     * Returns the logs for a workflow run.
     * @param id The workflow ID.
     * @param buildId The workflow build ID.
     * @param runId The workflow run ID.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return WorkflowRunLog
     */
    getWorkflowRunLog: (id: string, buildId: string, runId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowRunLog>;
    /**
     * Returns the status of a workflow streaming deployment.
     * @param id The workflow ID.
     * @param buildId The workflow build ID.
     * @param streamDeploymentId The workflow streaming deployment ID.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return WorkflowStreamDeployment
     */
    getWorkflowStreamDeployment: (id: string, buildId: string, streamDeploymentId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowStreamDeployment>;
    /**
     * Returns a list of workflow builds.
     * @param id The workflow ID.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<WorkflowBuild>
     */
    listWorkflowBuilds: (id: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowBuild[]>;
    /**
     * Returns a list of workflow deployments.
     * @param id The workflow ID.
     * @param buildId The workflow build ID.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<WorkflowDeployment>
     */
    listWorkflowDeployments: (id: string, buildId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowDeployment[]>;
    /**
     * Returns a list of workflow runs.
     * @param id The workflow ID.
     * @param buildId The workflow build ID.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<WorkflowRun>
     */
    listWorkflowRuns: (id: string, buildId: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowRun[]>;
    /**
     * Returns a list of workflow configurations.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<WorkflowsGetResponse>
     */
    listWorkflows: (args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<WorkflowsGetResponse[]>;
}
export declare type MLService = GeneratedMLService & MLServiceExtensions;
export declare const MLService: typeof GeneratedMLService;
