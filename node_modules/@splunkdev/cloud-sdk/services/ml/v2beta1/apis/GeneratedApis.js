"use strict";
// tslint:disable
/**
 * Copyright 2020 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Machine Learning
 * Use the Machine Learning service in Splunk Cloud Services to deliver resource intensive machine learning workloads. The Machine Learning service covers model experimentation, training, inference, validation, scoring, and serving.
 *
 * OpenAPI spec version: v2beta1.1 (recommended default)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var baseapiservice_1 = __importDefault(require("../../../../baseapiservice"));
var ml_1 = require("../../../../service_extensions/ml");
exports.ML_SERVICE_PREFIX = '/ml/v2beta1';
exports.ML_SERVICE_CLUSTER = 'api';
/**
 * Machine Learning
 * Version: v2beta1.1
 * Use the Machine Learning service in Splunk Cloud Services to deliver resource intensive machine learning workloads. The Machine Learning service covers model experimentation, training, inference, validation, scoring, and serving.
 */
var GeneratedMLService = /** @class */ (function (_super) {
    __extends(GeneratedMLService, _super);
    function GeneratedMLService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Creates a workflow configuration.
         * @param workflow Workflow configuration to be created.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Workflow
         */
        _this.createWorkflow = function (workflow, args, requestStatusCallback) {
            var path = "/ml/v2beta1/workflows";
            return _this.client.post(exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), workflow, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates a workflow build.
         * @param id The workflow ID.
         * @param workflowBuild Input data used to build the workflow.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return WorkflowBuild
         */
        _this.createWorkflowBuild = function (id, workflowBuild, args, requestStatusCallback) {
            var path_params = {
                id: id
            };
            var path = _this.template(templateObject_1 || (templateObject_1 = __makeTemplateObject(["/ml/v2beta1/workflows/", "/builds"], ["/ml/v2beta1/workflows/", "/builds"])), 'id')(path_params);
            return _this.client.post(exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), workflowBuild, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates a workflow deployment.
         * @param id The workflow ID.
         * @param buildId The workflow build ID.
         * @param workflowDeployment Input data used to build the workflow deployment.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return WorkflowDeployment
         */
        _this.createWorkflowDeployment = function (id, buildId, workflowDeployment, args, requestStatusCallback) {
            var path_params = {
                id: id,
                buildId: buildId
            };
            var path = _this.template(templateObject_2 || (templateObject_2 = __makeTemplateObject(["/ml/v2beta1/workflows/", "/builds/", "/deployments"], ["/ml/v2beta1/workflows/", "/builds/", "/deployments"])), 'id', 'buildId')(path_params);
            return _this.client.post(exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), workflowDeployment, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates a workflow inference request.
         * @param id The workflow ID.
         * @param buildId The workflow build ID.
         * @param deploymentId The workflow deployment ID.
         * @param workflowInference Input data to the inference request.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return WorkflowInference
         */
        _this.createWorkflowInference = function (id, buildId, deploymentId, workflowInference, args, requestStatusCallback) {
            var path_params = {
                id: id,
                buildId: buildId,
                deploymentId: deploymentId
            };
            var path = _this.template(templateObject_3 || (templateObject_3 = __makeTemplateObject(["/ml/v2beta1/workflows/", "/builds/", "/deployments/", "/inference"], ["/ml/v2beta1/workflows/", "/builds/", "/deployments/", "/inference"])), 'id', 'buildId', 'deploymentId')(path_params);
            return _this.client.post(exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), workflowInference, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates a workflow run.
         * @param id The workflow ID.
         * @param buildId The workflow build ID.
         * @param workflowRun Input data used to build the workflow.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return WorkflowRun
         */
        _this.createWorkflowRun = function (id, buildId, workflowRun, args, requestStatusCallback) {
            var path_params = {
                id: id,
                buildId: buildId
            };
            var path = _this.template(templateObject_4 || (templateObject_4 = __makeTemplateObject(["/ml/v2beta1/workflows/", "/builds/", "/runs"], ["/ml/v2beta1/workflows/", "/builds/", "/runs"])), 'id', 'buildId')(path_params);
            return _this.client.post(exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), workflowRun, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates a workflow streaming deployment.
         * @param id The workflow ID.
         * @param buildId The workflow build ID.
         * @param workflowStreamDeployment Configuration for the workflow streaming deployment.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return WorkflowStreamDeployment
         */
        _this.createWorkflowStreamDeployment = function (id, buildId, workflowStreamDeployment, args, requestStatusCallback) {
            var path_params = {
                id: id,
                buildId: buildId
            };
            var path = _this.template(templateObject_5 || (templateObject_5 = __makeTemplateObject(["/ml/v2beta1/workflows/", "/builds/", "/stream-deployments"], ["/ml/v2beta1/workflows/", "/builds/", "/stream-deployments"])), 'id', 'buildId')(path_params);
            return _this.client.post(exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), workflowStreamDeployment, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Removes a workflow configuration.
         * @param id The workflow ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteWorkflow = function (id, args, requestStatusCallback) {
            var path_params = {
                id: id
            };
            var path = _this.template(templateObject_6 || (templateObject_6 = __makeTemplateObject(["/ml/v2beta1/workflows/", ""], ["/ml/v2beta1/workflows/", ""])), 'id')(path_params);
            return _this.client["delete"](exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Removes a workflow build.
         * @param id The workflow ID.
         * @param buildId The workflow build ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteWorkflowBuild = function (id, buildId, args, requestStatusCallback) {
            var path_params = {
                id: id,
                buildId: buildId
            };
            var path = _this.template(templateObject_7 || (templateObject_7 = __makeTemplateObject(["/ml/v2beta1/workflows/", "/builds/", ""], ["/ml/v2beta1/workflows/", "/builds/", ""])), 'id', 'buildId')(path_params);
            return _this.client["delete"](exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Removes a workflow deployment.
         * @param id The workflow ID.
         * @param buildId The workflow build ID.
         * @param deploymentId The workflow deployment ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteWorkflowDeployment = function (id, buildId, deploymentId, args, requestStatusCallback) {
            var path_params = {
                id: id,
                buildId: buildId,
                deploymentId: deploymentId
            };
            var path = _this.template(templateObject_8 || (templateObject_8 = __makeTemplateObject(["/ml/v2beta1/workflows/", "/builds/", "/deployments/", ""], ["/ml/v2beta1/workflows/", "/builds/", "/deployments/", ""])), 'id', 'buildId', 'deploymentId')(path_params);
            return _this.client["delete"](exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Removes a workflow run.
         * @param id The workflow ID.
         * @param buildId The workflow build ID.
         * @param runId The workflow run ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteWorkflowRun = function (id, buildId, runId, args, requestStatusCallback) {
            var path_params = {
                id: id,
                buildId: buildId,
                runId: runId
            };
            var path = _this.template(templateObject_9 || (templateObject_9 = __makeTemplateObject(["/ml/v2beta1/workflows/", "/builds/", "/runs/", ""], ["/ml/v2beta1/workflows/", "/builds/", "/runs/", ""])), 'id', 'buildId', 'runId')(path_params);
            return _this.client["delete"](exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Removes a workflow streaming deployment.
         * @param id The workflow ID.
         * @param buildId The workflow build ID.
         * @param streamDeploymentId The workflow streaming deployment ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteWorkflowStreamDeployment = function (id, buildId, streamDeploymentId, args, requestStatusCallback) {
            var path_params = {
                id: id,
                buildId: buildId,
                streamDeploymentId: streamDeploymentId
            };
            var path = _this.template(templateObject_10 || (templateObject_10 = __makeTemplateObject(["/ml/v2beta1/workflows/", "/builds/", "/stream-deployments/", ""], ["/ml/v2beta1/workflows/", "/builds/", "/stream-deployments/", ""])), 'id', 'buildId', 'streamDeploymentId')(path_params);
            return _this.client["delete"](exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a workflow configuration.
         * @param id The workflow ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Workflow
         */
        _this.getWorkflow = function (id, args, requestStatusCallback) {
            var path_params = {
                id: id
            };
            var path = _this.template(templateObject_11 || (templateObject_11 = __makeTemplateObject(["/ml/v2beta1/workflows/", ""], ["/ml/v2beta1/workflows/", ""])), 'id')(path_params);
            return _this.client.get(exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the status of a workflow build.
         * @param id The workflow ID.
         * @param buildId The workflow build ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return WorkflowBuild
         */
        _this.getWorkflowBuild = function (id, buildId, args, requestStatusCallback) {
            var path_params = {
                id: id,
                buildId: buildId
            };
            var path = _this.template(templateObject_12 || (templateObject_12 = __makeTemplateObject(["/ml/v2beta1/workflows/", "/builds/", ""], ["/ml/v2beta1/workflows/", "/builds/", ""])), 'id', 'buildId')(path_params);
            return _this.client.get(exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of workflow errors.
         * @param id The workflow ID.
         * @param buildId The workflow build ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return WorkflowBuildError
         */
        _this.getWorkflowBuildError = function (id, buildId, args, requestStatusCallback) {
            var path_params = {
                id: id,
                buildId: buildId
            };
            var path = _this.template(templateObject_13 || (templateObject_13 = __makeTemplateObject(["/ml/v2beta1/workflows/", "/builds/", "/errors"], ["/ml/v2beta1/workflows/", "/builds/", "/errors"])), 'id', 'buildId')(path_params);
            return _this.client.get(exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the logs from a workflow build.
         * @param id The workflow ID.
         * @param buildId The workflow build ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return WorkflowBuildLog
         */
        _this.getWorkflowBuildLog = function (id, buildId, args, requestStatusCallback) {
            var path_params = {
                id: id,
                buildId: buildId
            };
            var path = _this.template(templateObject_14 || (templateObject_14 = __makeTemplateObject(["/ml/v2beta1/workflows/", "/builds/", "/logs"], ["/ml/v2beta1/workflows/", "/builds/", "/logs"])), 'id', 'buildId')(path_params);
            return _this.client.get(exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the status of a workflow deployment.
         * @param id The workflow ID.
         * @param buildId The workflow build ID.
         * @param deploymentId The workflow deployment ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return WorkflowDeployment
         */
        _this.getWorkflowDeployment = function (id, buildId, deploymentId, args, requestStatusCallback) {
            var path_params = {
                id: id,
                buildId: buildId,
                deploymentId: deploymentId
            };
            var path = _this.template(templateObject_15 || (templateObject_15 = __makeTemplateObject(["/ml/v2beta1/workflows/", "/builds/", "/deployments/", ""], ["/ml/v2beta1/workflows/", "/builds/", "/deployments/", ""])), 'id', 'buildId', 'deploymentId')(path_params);
            return _this.client.get(exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of workflow deployment errors.
         * @param id The workflow ID.
         * @param buildId The workflow build ID.
         * @param deploymentId The workflow deployment ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return WorkflowDeploymentError
         */
        _this.getWorkflowDeploymentError = function (id, buildId, deploymentId, args, requestStatusCallback) {
            var path_params = {
                id: id,
                buildId: buildId,
                deploymentId: deploymentId
            };
            var path = _this.template(templateObject_16 || (templateObject_16 = __makeTemplateObject(["/ml/v2beta1/workflows/", "/builds/", "/deployments/", "/errors"], ["/ml/v2beta1/workflows/", "/builds/", "/deployments/", "/errors"])), 'id', 'buildId', 'deploymentId')(path_params);
            return _this.client.get(exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the logs from a workflow deployment.
         * @param id The workflow ID.
         * @param buildId The workflow build ID.
         * @param deploymentId The workflow deployment ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return WorkflowDeploymentLog
         */
        _this.getWorkflowDeploymentLog = function (id, buildId, deploymentId, args, requestStatusCallback) {
            var path_params = {
                id: id,
                buildId: buildId,
                deploymentId: deploymentId
            };
            var path = _this.template(templateObject_17 || (templateObject_17 = __makeTemplateObject(["/ml/v2beta1/workflows/", "/builds/", "/deployments/", "/logs"], ["/ml/v2beta1/workflows/", "/builds/", "/deployments/", "/logs"])), 'id', 'buildId', 'deploymentId')(path_params);
            return _this.client.get(exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the status of a workflow run.
         * @param id The workflow ID.
         * @param buildId The workflow build ID.
         * @param runId The workflow run ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return WorkflowRun
         */
        _this.getWorkflowRun = function (id, buildId, runId, args, requestStatusCallback) {
            var path_params = {
                id: id,
                buildId: buildId,
                runId: runId
            };
            var path = _this.template(templateObject_18 || (templateObject_18 = __makeTemplateObject(["/ml/v2beta1/workflows/", "/builds/", "/runs/", ""], ["/ml/v2beta1/workflows/", "/builds/", "/runs/", ""])), 'id', 'buildId', 'runId')(path_params);
            return _this.client.get(exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the errors for a workflow run.
         * @param id The workflow ID.
         * @param buildId The workflow build ID.
         * @param runId The workflow run ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return WorkflowRunError
         */
        _this.getWorkflowRunError = function (id, buildId, runId, args, requestStatusCallback) {
            var path_params = {
                id: id,
                buildId: buildId,
                runId: runId
            };
            var path = _this.template(templateObject_19 || (templateObject_19 = __makeTemplateObject(["/ml/v2beta1/workflows/", "/builds/", "/runs/", "/errors"], ["/ml/v2beta1/workflows/", "/builds/", "/runs/", "/errors"])), 'id', 'buildId', 'runId')(path_params);
            return _this.client.get(exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the logs for a workflow run.
         * @param id The workflow ID.
         * @param buildId The workflow build ID.
         * @param runId The workflow run ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return WorkflowRunLog
         */
        _this.getWorkflowRunLog = function (id, buildId, runId, args, requestStatusCallback) {
            var path_params = {
                id: id,
                buildId: buildId,
                runId: runId
            };
            var path = _this.template(templateObject_20 || (templateObject_20 = __makeTemplateObject(["/ml/v2beta1/workflows/", "/builds/", "/runs/", "/logs"], ["/ml/v2beta1/workflows/", "/builds/", "/runs/", "/logs"])), 'id', 'buildId', 'runId')(path_params);
            return _this.client.get(exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the status of a workflow streaming deployment.
         * @param id The workflow ID.
         * @param buildId The workflow build ID.
         * @param streamDeploymentId The workflow streaming deployment ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return WorkflowStreamDeployment
         */
        _this.getWorkflowStreamDeployment = function (id, buildId, streamDeploymentId, args, requestStatusCallback) {
            var path_params = {
                id: id,
                buildId: buildId,
                streamDeploymentId: streamDeploymentId
            };
            var path = _this.template(templateObject_21 || (templateObject_21 = __makeTemplateObject(["/ml/v2beta1/workflows/", "/builds/", "/stream-deployments/", ""], ["/ml/v2beta1/workflows/", "/builds/", "/stream-deployments/", ""])), 'id', 'buildId', 'streamDeploymentId')(path_params);
            return _this.client.get(exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of workflow builds.
         * @param id The workflow ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<WorkflowBuild>
         */
        _this.listWorkflowBuilds = function (id, args, requestStatusCallback) {
            var path_params = {
                id: id
            };
            var path = _this.template(templateObject_22 || (templateObject_22 = __makeTemplateObject(["/ml/v2beta1/workflows/", "/builds"], ["/ml/v2beta1/workflows/", "/builds"])), 'id')(path_params);
            return _this.client.get(exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of workflow deployments.
         * @param id The workflow ID.
         * @param buildId The workflow build ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<WorkflowDeployment>
         */
        _this.listWorkflowDeployments = function (id, buildId, args, requestStatusCallback) {
            var path_params = {
                id: id,
                buildId: buildId
            };
            var path = _this.template(templateObject_23 || (templateObject_23 = __makeTemplateObject(["/ml/v2beta1/workflows/", "/builds/", "/deployments"], ["/ml/v2beta1/workflows/", "/builds/", "/deployments"])), 'id', 'buildId')(path_params);
            return _this.client.get(exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of workflow runs.
         * @param id The workflow ID.
         * @param buildId The workflow build ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<WorkflowRun>
         */
        _this.listWorkflowRuns = function (id, buildId, args, requestStatusCallback) {
            var path_params = {
                id: id,
                buildId: buildId
            };
            var path = _this.template(templateObject_24 || (templateObject_24 = __makeTemplateObject(["/ml/v2beta1/workflows/", "/builds/", "/runs"], ["/ml/v2beta1/workflows/", "/builds/", "/runs"])), 'id', 'buildId')(path_params);
            return _this.client.get(exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of workflow configurations.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<WorkflowsGetResponse>
         */
        _this.listWorkflows = function (args, requestStatusCallback) {
            var path = "/ml/v2beta1/workflows";
            return _this.client.get(exports.ML_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        return _this;
    }
    GeneratedMLService.prototype.getServiceCluster = function () {
        return exports.ML_SERVICE_CLUSTER;
    };
    GeneratedMLService.prototype.getServicePrefix = function () {
        return exports.ML_SERVICE_PREFIX;
    };
    return GeneratedMLService;
}(baseapiservice_1["default"]));
exports.GeneratedMLService = GeneratedMLService;
exports.MLService = ml_1.MLServiceExtensions(GeneratedMLService);
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12, templateObject_13, templateObject_14, templateObject_15, templateObject_16, templateObject_17, templateObject_18, templateObject_19, templateObject_20, templateObject_21, templateObject_22, templateObject_23, templateObject_24;
//# sourceMappingURL=GeneratedApis.js.map