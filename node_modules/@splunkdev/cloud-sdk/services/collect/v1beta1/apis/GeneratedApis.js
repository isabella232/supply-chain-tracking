"use strict";
// tslint:disable
/**
 * Copyright 2020 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Collect Service
 * With the Collect service in Splunk Cloud Services, you can manage how data collection jobs ingest event and metric data.
 *
 * OpenAPI spec version: v1beta1.8 (recommended default)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var baseapiservice_1 = __importDefault(require("../../../../baseapiservice"));
var collect_1 = require("../../../../service_extensions/collect");
exports.COLLECT_SERVICE_PREFIX = '/collect/v1beta1';
exports.COLLECT_SERVICE_CLUSTER = 'api';
/**
 * Collect Service
 * Version: v1beta1.8
 * With the Collect service in Splunk Cloud Services, you can manage how data collection jobs ingest event and metric data.
 */
var GeneratedCollectService = /** @class */ (function (_super) {
    __extends(GeneratedCollectService, _super);
    function GeneratedCollectService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Creates an execution for a scheduled job based on the job ID.
         * @param jobId The job ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return SingleExecutionResponse
         */
        _this.createExecution = function (jobId, args, requestStatusCallback) {
            var path_params = {
                jobId: jobId
            };
            var path = _this.template(templateObject_1 || (templateObject_1 = __makeTemplateObject(["/collect/v1beta1/jobs/", "/executions"], ["/collect/v1beta1/jobs/", "/executions"])), 'jobId')(path_params);
            return _this.client.post(exports.COLLECT_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * This API returns `403` if the number of collect workers is over a certain limit.
         * Creates a job.
         * @param job The API request schema for the job.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return SingleJobResponse
         */
        _this.createJob = function (job, args, requestStatusCallback) {
            var path = "/collect/v1beta1/jobs";
            return _this.client.post(exports.COLLECT_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), job, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Removes a job based on the job ID.
         * @param jobId The job ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteJob = function (jobId, args, requestStatusCallback) {
            var path_params = {
                jobId: jobId
            };
            var path = _this.template(templateObject_2 || (templateObject_2 = __makeTemplateObject(["/collect/v1beta1/jobs/", ""], ["/collect/v1beta1/jobs/", ""])), 'jobId')(path_params);
            return _this.client["delete"](exports.COLLECT_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Removes all jobs on a tenant.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return DeleteJobsResponse
         */
        _this.deleteJobs = function (args, requestStatusCallback) {
            var path = "/collect/v1beta1/jobs";
            return _this.client["delete"](exports.COLLECT_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the execution details based on the execution ID and job ID.
         * @param jobId The job ID.
         * @param executionUid The execution UID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return SingleExecutionResponse
         */
        _this.getExecution = function (jobId, executionUid, args, requestStatusCallback) {
            var path_params = {
                jobId: jobId,
                executionUid: executionUid
            };
            var path = _this.template(templateObject_3 || (templateObject_3 = __makeTemplateObject(["/collect/v1beta1/jobs/", "/executions/", ""], ["/collect/v1beta1/jobs/", "/executions/", ""])), 'jobId', 'executionUid')(path_params);
            return _this.client.get(exports.COLLECT_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a job based on the job ID.
         * @param jobId The job ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return SingleJobResponse
         */
        _this.getJob = function (jobId, args, requestStatusCallback) {
            var path_params = {
                jobId: jobId
            };
            var path = _this.template(templateObject_4 || (templateObject_4 = __makeTemplateObject(["/collect/v1beta1/jobs/", ""], ["/collect/v1beta1/jobs/", ""])), 'jobId')(path_params);
            return _this.client.get(exports.COLLECT_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a list of all jobs that belong to a tenant.
         * @param args parameters to be sent with the request
         * @param args.connectorID Specifies the connector ID used to filter jobs. A tailing wildcard is supported for the connector ID tag. If no wildcard is used then an exact match is used. Examples: * `my-connector:v1.0.0` selects `my-connector` connector with an exact match with tag \"v1.0.0\" * `my-connector` selects `my-connector` connector with an exact match. Note as no tag is specified it actually refers to \"latest\". * `my-connector:v1.*` selects all `my-connector` connectors with tags starting with \"v1.\", e.g. \"v1.0\", \"v1.1.1\", \"v1.2-alpha\", etc. * `my-connector:*` selects all `my-connector` connectors with any tag.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return ListJobsResponse
         */
        _this.listJobs = function (args, requestStatusCallback) {
            var path = "/collect/v1beta1/jobs";
            return _this.client.get(exports.COLLECT_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Modifies an execution based on the job ID.
         * @param jobId The job ID.
         * @param executionUid The execution UID.
         * @param executionPatch The API request schema for patching an execution.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.patchExecution = function (jobId, executionUid, executionPatch, args, requestStatusCallback) {
            var path_params = {
                jobId: jobId,
                executionUid: executionUid
            };
            var path = _this.template(templateObject_5 || (templateObject_5 = __makeTemplateObject(["/collect/v1beta1/jobs/", "/executions/", ""], ["/collect/v1beta1/jobs/", "/executions/", ""])), 'jobId', 'executionUid')(path_params);
            return _this.client.patch(exports.COLLECT_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), executionPatch, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * This API returns `403` if the number of collect workers is over a certain limit.
         * Modifies a job based on the job ID.
         * @param jobId The job ID.
         * @param jobPatch The API request schema for patching a job.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return SingleJobResponse
         */
        _this.patchJob = function (jobId, jobPatch, args, requestStatusCallback) {
            var path_params = {
                jobId: jobId
            };
            var path = _this.template(templateObject_6 || (templateObject_6 = __makeTemplateObject(["/collect/v1beta1/jobs/", ""], ["/collect/v1beta1/jobs/", ""])), 'jobId')(path_params);
            return _this.client.patch(exports.COLLECT_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), jobPatch, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * This is a non-atomic operation and the results are returned as a list with each job patch result as its element. This API returns `200 OK` regardless of how many jobs were successfully patched. You must read the response body to find out if all jobs are patched. When the API is called, the `jobIDs` or `connectorID` must be specified. Do not specify more than one of them at the same time. This API returns `403` if the number of collect workers is over a certain limit.
         * Finds all jobs that match the query and modifies the with the changes specified in the request.
         * @param jobsPatch The API request schema for patching jobs.
         * @param args parameters to be sent with the request
         * @param args.connectorID Specifies the connector ID used to filter jobs. A tailing wildcard is supported for the connector ID tag. If no wildcard is used then an exact match is used. Examples: * `my-connector:v1.0.0` selects `my-connector` connector with an exact match with tag \"v1.0.0\" * `my-connector` selects `my-connector` connector with an exact match. Note as no tag is specified it actually refers to \"latest\". * `my-connector:v1.*` selects all `my-connector` connectors with tags starting with \"v1.\", e.g. \"v1.0\", \"v1.1.1\", \"v1.2-alpha\", etc. * `my-connector:*` selects all `my-connector` connectors with any tag.
         * @param args.jobIDs The job ID list.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return PatchJobsResponse
         */
        _this.patchJobs = function (jobsPatch, args, requestStatusCallback) {
            var path = "/collect/v1beta1/jobs";
            return _this.client.patch(exports.COLLECT_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), jobsPatch, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        return _this;
    }
    GeneratedCollectService.prototype.getServiceCluster = function () {
        return exports.COLLECT_SERVICE_CLUSTER;
    };
    GeneratedCollectService.prototype.getServicePrefix = function () {
        return exports.COLLECT_SERVICE_PREFIX;
    };
    return GeneratedCollectService;
}(baseapiservice_1["default"]));
exports.GeneratedCollectService = GeneratedCollectService;
exports.CollectService = collect_1.CollectServiceExtensions(GeneratedCollectService);
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6;
//# sourceMappingURL=GeneratedApis.js.map