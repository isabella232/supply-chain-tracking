"use strict";
// tslint:disable
/**
 * Copyright 2020 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Splunk Search service
 * Use the Search service in Splunk Cloud Services to dispatch, review, and manage searches and search jobs. You can finalize or cancel jobs, retrieve search results, and request search-related configurations from the Metadata Catalog service in Splunk Cloud Services.
 *
 * OpenAPI spec version: v2beta1.1 (recommended default)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var baseapiservice_1 = __importDefault(require("../../../../baseapiservice"));
var search_1 = require("../../../../service_extensions/search");
var client_1 = require("../../../../client");
exports.SEARCH_SERVICE_PREFIX = '/search/v2beta1';
exports.SEARCH_SERVICE_CLUSTER = 'api';
/**
 * Splunk Search service
 * Version: v2beta1.1
 * Use the Search service in Splunk Cloud Services to dispatch, review, and manage searches and search jobs. You can finalize or cancel jobs, retrieve search results, and request search-related configurations from the Metadata Catalog service in Splunk Cloud Services.
 */
var GeneratedSearchService = /** @class */ (function (_super) {
    __extends(GeneratedSearchService, _super);
    function GeneratedSearchService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Creates a search job.
         * @param searchJob
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return SearchJob
         */
        _this.createJob = function (searchJob, args, requestStatusCallback) {
            if (!searchJob) {
                throw new client_1.SplunkError({ message: "Bad Request: searchJob is empty or undefined" });
            }
            var path = "/search/v2beta1/jobs";
            return _this.client.post(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), searchJob, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Creates a search job that deletes events from an index. The events are deleted from the index in the specified module, based on the search criteria as specified by the predicate.
         * @param deleteSearchJob
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return DeleteSearchJob
         */
        _this.deleteJob = function (deleteSearchJob, args, requestStatusCallback) {
            if (!deleteSearchJob) {
                throw new client_1.SplunkError({ message: "Bad Request: deleteSearchJob is empty or undefined" });
            }
            var path = "/search/v2beta1/jobs/delete";
            return _this.client.post(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), deleteSearchJob, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return the search job with the specified search ID (SID).
         * @param sid The search ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return SearchJob
         */
        _this.getJob = function (sid, args, requestStatusCallback) {
            var path_params = {
                sid: sid
            };
            var path = _this.template(templateObject_1 || (templateObject_1 = __makeTemplateObject(["/search/v2beta1/jobs/", ""], ["/search/v2beta1/jobs/", ""])), 'sid')(path_params);
            return _this.client.get(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return events summary, for search ID (SID) search.
         * @param sid The search ID.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of entries to return. Set to 0 to return all available entries.
         * @param args.earliest The earliest time filter, in absolute time. When specifying an absolute time specify either UNIX time, or UTC in seconds using the ISO-8601 (%FT%T.%Q) format. For example 2019-01-25T13:15:30Z. GMT is the default timezone. You must specify GMT when you specify UTC. Any offset specified is ignored.
         * @param args.field A field to return for the result set. You can specify multiple fields of comma-separated values if multiple fields are required.
         * @param args.latest The latest time filter in absolute time. When specifying an absolute time specify either UNIX time, or UTC in seconds using the ISO-8601 (%FT%T.%Q) format. For example 2019-01-25T13:15:30Z. GMT is the default timezone. You must specify GMT when you specify UTC. Any offset specified is ignored.
         * @param args.offset Index of first item to return.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return ListSearchResultsResponse
         */
        _this.listEventsSummary = function (sid, args, requestStatusCallback) {
            var path_params = {
                sid: sid
            };
            var path = _this.template(templateObject_2 || (templateObject_2 = __makeTemplateObject(["/search/v2beta1/jobs/", "/timeline-metadata/auto/events-summary"], ["/search/v2beta1/jobs/", "/timeline-metadata/auto/events-summary"])), 'sid')(path_params);
            return _this.client.get(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return fields stats summary of the events to-date, for search ID (SID) search.
         * @param sid The search ID.
         * @param args parameters to be sent with the request
         * @param args.earliest The earliest time filter, in absolute time. When specifying an absolute time specify either UNIX time, or UTC in seconds using the ISO-8601 (%FT%T.%Q) format. For example 2019-01-25T13:15:30Z. GMT is the default timezone. You must specify GMT when you specify UTC. Any offset specified is ignored.
         * @param args.latest The latest time filter in absolute time. When specifying an absolute time specify either UNIX time, or UTC in seconds using the ISO-8601 (%FT%T.%Q) format. For example 2019-01-25T13:15:30Z. GMT is the default timezone. You must specify GMT when you specify UTC. Any offset specified is ignored.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return FieldsSummary
         */
        _this.listFieldsSummary = function (sid, args, requestStatusCallback) {
            var path_params = {
                sid: sid
            };
            var path = _this.template(templateObject_3 || (templateObject_3 = __makeTemplateObject(["/search/v2beta1/jobs/", "/timeline-metadata/auto/fields-summary"], ["/search/v2beta1/jobs/", "/timeline-metadata/auto/fields-summary"])), 'sid')(path_params);
            return _this.client.get(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return the matching list of search jobs.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of jobs that you want to return the status entries for.
         * @param args.filter Filter the list of jobs by sid. Valid format is  `sid IN ({comma separated list of SIDs in quotes})`. A maximum of 50 SIDs can be specified in one query.
         * @param args.status Filter the list of jobs by status. Valid status values are 'running', 'done', 'canceled', or 'failed'.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<SearchJob>
         */
        _this.listJobs = function (args, requestStatusCallback) {
            var path = "/search/v2beta1/jobs";
            return _this.client.get(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return the preview search results for the job with the specified search ID (SID). Can be used when a job is running to return interim results.
         * @param sid The search ID.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of entries to return. Set to 0 to return all available entries.
         * @param args.offset Index of first item to return.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return ListPreviewResultsResponse
         */
        _this.listPreviewResults = function (sid, args, requestStatusCallback) {
            var path_params = {
                sid: sid
            };
            var path = _this.template(templateObject_4 || (templateObject_4 = __makeTemplateObject(["/search/v2beta1/jobs/", "/results-preview"], ["/search/v2beta1/jobs/", "/results-preview"])), 'sid')(path_params);
            return _this.client.get(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return the search results for the job with the specified search ID (SID).
         * @param sid The search ID.
         * @param args parameters to be sent with the request
         * @param args.count The maximum number of entries to return. Set to 0 to return all available entries.
         * @param args.field A field to return for the result set. You can specify multiple fields of comma-separated values if multiple fields are required.
         * @param args.offset Index of first item to return.
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return ListSearchResultsResponse
         */
        _this.listResults = function (sid, args, requestStatusCallback) {
            var path_params = {
                sid: sid
            };
            var path = _this.template(templateObject_5 || (templateObject_5 = __makeTemplateObject(["/search/v2beta1/jobs/", "/results"], ["/search/v2beta1/jobs/", "/results"])), 'sid')(path_params);
            return _this.client.get(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Return event distribution over time of the untransformed events read to-date, for search ID(SID) search.
         * @param sid The search ID.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return TimeBucketsSummary
         */
        _this.listTimeBuckets = function (sid, args, requestStatusCallback) {
            var path_params = {
                sid: sid
            };
            var path = _this.template(templateObject_6 || (templateObject_6 = __makeTemplateObject(["/search/v2beta1/jobs/", "/timeline-metadata/auto/time-buckets"], ["/search/v2beta1/jobs/", "/timeline-metadata/auto/time-buckets"])), 'sid')(path_params);
            return _this.client.get(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Update the search job with the specified search ID (SID) with an action.
         * @param sid The search ID.
         * @param updateJob
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return SearchJob
         */
        _this.updateJob = function (sid, updateJob, args, requestStatusCallback) {
            if (!updateJob) {
                throw new client_1.SplunkError({ message: "Bad Request: updateJob is empty or undefined" });
            }
            var path_params = {
                sid: sid
            };
            var path = _this.template(templateObject_7 || (templateObject_7 = __makeTemplateObject(["/search/v2beta1/jobs/", ""], ["/search/v2beta1/jobs/", ""])), 'sid')(path_params);
            return _this.client.patch(exports.SEARCH_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), updateJob, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        return _this;
    }
    GeneratedSearchService.prototype.getServiceCluster = function () {
        return exports.SEARCH_SERVICE_CLUSTER;
    };
    GeneratedSearchService.prototype.getServicePrefix = function () {
        return exports.SEARCH_SERVICE_PREFIX;
    };
    return GeneratedSearchService;
}(baseapiservice_1["default"]));
exports.GeneratedSearchService = GeneratedSearchService;
exports.SearchService = search_1.SearchServiceExtensions(GeneratedSearchService);
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7;
//# sourceMappingURL=GeneratedApis.js.map