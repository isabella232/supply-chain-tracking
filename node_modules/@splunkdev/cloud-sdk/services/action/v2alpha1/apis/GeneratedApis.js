"use strict";
// tslint:disable
/**
 * Copyright 2020 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Action Service
 * With the Splunk Cloud Action service, you can receive incoming trigger events and use pre-defined action templates to turn these events into meaningful actions.
 *
 * OpenAPI spec version: v2alpha1.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var baseapiservice_1 = __importDefault(require("../../../../baseapiservice"));
var action_1 = require("../../../../service_extensions/action");
exports.ACTION_SERVICE_PREFIX = '/action/v2alpha1';
exports.ACTION_SERVICE_CLUSTER = 'api';
/**
 * Action Service
 * Version: v2alpha1.12
 * With the Splunk Cloud Action service, you can receive incoming trigger events and use pre-defined action templates to turn these events into meaningful actions.
 */
var GeneratedActionService = /** @class */ (function (_super) {
    __extends(GeneratedActionService, _super);
    function GeneratedActionService() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Creates an action template.
         * @param action The action template to create.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Action
         */
        _this.createAction = function (action, args, requestStatusCallback) {
            var path = "/action/v2alpha1/actions";
            return _this.client.post(exports.ACTION_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), action, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Removes an action template.
         * @param actionName The name of the action as one or more identifier strings separated by periods. Each identifier string consists of lowercase letters, digits, and underscores, and cannot start with a digit.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         */
        _this.deleteAction = function (actionName, args, requestStatusCallback) {
            var path_params = {
                action_name: actionName
            };
            var path = _this.template(templateObject_1 || (templateObject_1 = __makeTemplateObject(["/action/v2alpha1/actions/", ""], ["/action/v2alpha1/actions/", ""])), 'action_name')(path_params);
            return _this.client["delete"](exports.ACTION_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns a specific action template.
         * @param actionName The name of the action as one or more identifier strings separated by periods. Each identifier string consists of lowercase letters, digits, and underscores, and cannot start with a digit.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Action
         */
        _this.getAction = function (actionName, args, requestStatusCallback) {
            var path_params = {
                action_name: actionName
            };
            var path = _this.template(templateObject_2 || (templateObject_2 = __makeTemplateObject(["/action/v2alpha1/actions/", ""], ["/action/v2alpha1/actions/", ""])), 'action_name')(path_params);
            return _this.client.get(exports.ACTION_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Get the current webhook key(s). If multiple keys were returned, one is active and one is expired.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<PublicWebhookKey>
         */
        _this.getPublicWebhookKeys = function (args, requestStatusCallback) {
            var path = "/system/action/v2alpha1/webhook/keys";
            return _this.client.get(exports.ACTION_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Returns the list of action templates.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Array<Action>
         */
        _this.listActions = function (args, requestStatusCallback) {
            var path = "/action/v2alpha1/actions";
            return _this.client.get(exports.ACTION_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        /**
         * Modifies an action template.
         * @param actionName The name of the action as one or more identifier strings separated by periods. Each identifier string consists of lowercase letters, digits, and underscores, and cannot start with a digit.
         * @param actionMutable Updates to the action template.
         * @param args parameters to be sent with the request
         * @param requestStatusCallback callback function to listen to the status of a request
         * @return Action
         */
        _this.updateAction = function (actionName, actionMutable, args, requestStatusCallback) {
            var path_params = {
                action_name: actionName
            };
            var path = _this.template(templateObject_3 || (templateObject_3 = __makeTemplateObject(["/action/v2alpha1/actions/", ""], ["/action/v2alpha1/actions/", ""])), 'action_name')(path_params);
            return _this.client.patch(exports.ACTION_SERVICE_CLUSTER, _this.client.buildPath('', path.split('/').slice(1)), actionMutable, { query: args, statusCallback: requestStatusCallback })
                .then(function (response) { return response.body; });
        };
        return _this;
    }
    GeneratedActionService.prototype.getServiceCluster = function () {
        return exports.ACTION_SERVICE_CLUSTER;
    };
    GeneratedActionService.prototype.getServicePrefix = function () {
        return exports.ACTION_SERVICE_PREFIX;
    };
    return GeneratedActionService;
}(baseapiservice_1["default"]));
exports.GeneratedActionService = GeneratedActionService;
exports.ActionService = action_1.ActionServiceExtensions(GeneratedActionService);
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=GeneratedApis.js.map