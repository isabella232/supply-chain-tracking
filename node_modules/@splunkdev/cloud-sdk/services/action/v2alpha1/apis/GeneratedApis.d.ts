/**
 * Copyright 2020 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Action Service
 * With the Splunk Cloud Action service, you can receive incoming trigger events and use pre-defined action templates to turn these events into meaningful actions.
 *
 * OpenAPI spec version: v2alpha1.12
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Action, ActionMutable, PublicWebhookKey } from '../models';
import BaseApiService from "../../../../baseapiservice";
import { ActionServiceExtensions } from "../../../../service_extensions/action";
import { RequestStatus } from '../../../../client';
export declare const ACTION_SERVICE_PREFIX: string;
export declare const ACTION_SERVICE_CLUSTER: string;
/**
 * Action Service
 * Version: v2alpha1.12
 * With the Splunk Cloud Action service, you can receive incoming trigger events and use pre-defined action templates to turn these events into meaningful actions.
 */
export declare class GeneratedActionService extends BaseApiService {
    getServiceCluster(): string;
    getServicePrefix(): string;
    /**
     * Creates an action template.
     * @param action The action template to create.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Action
     */
    createAction: (action: Action, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Action>;
    /**
     * Removes an action template.
     * @param actionName The name of the action as one or more identifier strings separated by periods. Each identifier string consists of lowercase letters, digits, and underscores, and cannot start with a digit.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     */
    deleteAction: (actionName: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<object>;
    /**
     * Returns a specific action template.
     * @param actionName The name of the action as one or more identifier strings separated by periods. Each identifier string consists of lowercase letters, digits, and underscores, and cannot start with a digit.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Action
     */
    getAction: (actionName: string, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Action>;
    /**
     * Get the current webhook key(s). If multiple keys were returned, one is active and one is expired.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<PublicWebhookKey>
     */
    getPublicWebhookKeys: (args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<PublicWebhookKey[]>;
    /**
     * Returns the list of action templates.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Array<Action>
     */
    listActions: (args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Action[]>;
    /**
     * Modifies an action template.
     * @param actionName The name of the action as one or more identifier strings separated by periods. Each identifier string consists of lowercase letters, digits, and underscores, and cannot start with a digit.
     * @param actionMutable Updates to the action template.
     * @param args parameters to be sent with the request
     * @param requestStatusCallback callback function to listen to the status of a request
     * @return Action
     */
    updateAction: (actionName: string, actionMutable: ActionMutable, args?: object | undefined, requestStatusCallback?: ((requestStatus: RequestStatus) => void) | undefined) => Promise<Action>;
}
export declare type ActionService = GeneratedActionService & ActionServiceExtensions;
export declare const ActionService: {
    new (...args: any[]): {
        triggerAction: (actionName: string, triggerEvent: import("../../../../service_extensions/action").TriggerEventInterface) => Promise<import("../../../../service_extensions/action").ActionTriggerResponse>;
        getServiceCluster(): string;
        getServicePrefix(): string;
        client: import("../../../../client").ServiceClient;
        template: (strings: TemplateStringsArray, ...keys: string[]) => (tlMap: {
            [key: string]: string;
        }) => string;
    };
} & typeof GeneratedActionService;
