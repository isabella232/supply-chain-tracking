import React from 'react';
import PropTypes from 'prop-types';
/** @public */
declare type NavigationProviderClickHandler = (event: React.MouseEvent<HTMLAnchorElement>, data: {
    openInNewContext?: boolean;
    to: string;
}) => void;
interface NavigationProviderProps {
    children?: React.ReactNode;
    /**
     * An `onClick` handler to use when a link is clicked if no other `onClick` handler is supplied.
     * The function takes the event and an options argument with `to` and `openInNewContext`
     */
    onClick?: NavigationProviderClickHandler;
}
declare const NavigationContext: React.Context<NavigationProviderClickHandler | undefined>;
/**
 * Used to provide an override for the `onClick` for links for single page applications so that
 * internal links can navigate without a page reload.
 */
declare function NavigationProvider({ children, onClick }: NavigationProviderProps): JSX.Element;
declare namespace NavigationProvider {
    var propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
    };
}
export { NavigationContext, NavigationProvider, NavigationProviderClickHandler };
