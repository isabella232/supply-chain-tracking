import React from 'react';
import PropTypes from 'prop-types';
import { ComponentProps } from '../utils/types';
declare type OptionClickHandler = (event: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>, data: {
    label?: string;
    value: any;
}) => void;
interface OptionPropsBase {
    /** @private */
    appearance?: 'default' | 'pill' | 'prisma';
    /** Add a disabled attribute and prevent clicking. */
    disabled?: boolean;
    /** Applies an icon to the button. See @splunk/react-icons documentation for
     * more information. */
    icon?: React.ReactNode;
    /** The text shown on the button. */
    label?: string;
    /** @private Set by `RadioBar`. */
    onClick?: OptionClickHandler;
    /** @private Set by `RadioBar`. */
    selected?: boolean;
    /** @private Set by `RadioBar`. */
    size?: 'small' | 'medium' | 'large';
    /** The value of the `Option`. */
    value: any;
    /** @private Set by `RadioBar`. */
    error?: boolean;
}
declare type OptionProps = ComponentProps<OptionPropsBase, 'button'>;
declare function Option({ appearance, disabled, label, icon, onClick, selected, value, ...otherProps }: OptionProps): JSX.Element;
declare namespace Option {
    var propTypes: {
        /** @private */
        appearance: PropTypes.Requireable<string>;
        disabled: PropTypes.Requireable<boolean>;
        icon: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        label: PropTypes.Requireable<string>;
        /** @private Set by `RadioBar`. */
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        /** @private Set by `RadioBar`. */
        selected: PropTypes.Requireable<boolean>;
        /** The value of the `Option`. */
        value: PropTypes.Validator<any>;
        /** @private Set by `RadioBar`. */
        error: PropTypes.Requireable<boolean>;
    };
}
export default Option;
export { OptionClickHandler };
