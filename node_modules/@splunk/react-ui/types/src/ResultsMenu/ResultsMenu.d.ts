import React, { Component } from 'react';
import { ClassComponentProps } from '../utils/types';
declare type ResultsMenuScrollBottomHandler = (event?: React.UIEvent<HTMLDivElement>) => void;
interface ResultsMenuPropsBase {
    animateLoading?: boolean;
    children?: React.ReactNode;
    /**
     * @private If set, the menu will never take focus and the active menu item will not have a focus-like appearance.
     */
    controlledExternally?: boolean;
    childrenStart?: React.ReactNode;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLDivElement>;
    isLoading?: boolean;
    loadingMessage?: React.ReactNode;
    maxHeight?: number;
    noOptionsMessage?: React.ReactNode;
    /**
     * A callback function when the list is scrolled to the bottom. Set to null when all items are loaded.
     */
    onScrollBottom?: ResultsMenuScrollBottomHandler;
    placement?: string;
    footerMessage?: React.ReactNode;
}
declare const defaultProps: Required<Pick<ResultsMenuPropsBase, 'animateLoading' | 'isLoading' | 'loadingMessage' | 'noOptionsMessage'>>;
declare type ResultsMenuProps = ClassComponentProps<ResultsMenuPropsBase, typeof defaultProps, 'div'>;
interface ResultsMenuState {
    childrenCount?: number;
    containerEl: HTMLDivElement | null;
    menuEl: HTMLDivElement | null;
    menuMaxHeight?: number;
    numberOfItemsLoaded: number;
    windowTop: number;
    scrollBottomTriggered: boolean;
}
declare class ResultsMenu extends Component<ResultsMenuProps, ResultsMenuState> {
    private scrollBottomOffset;
    private itemMinHeight;
    static propTypes: React.WeakValidationMap<ClassComponentProps<ResultsMenuPropsBase, Required<Pick<ResultsMenuPropsBase, "animateLoading" | "isLoading" | "loadingMessage" | "noOptionsMessage">>, "div", never>>;
    static defaultProps: Required<Pick<ResultsMenuPropsBase, "animateLoading" | "isLoading" | "loadingMessage" | "noOptionsMessage">>;
    constructor(props: Readonly<ResultsMenuProps>);
    componentDidUpdate(): void;
    private handleMenuMount;
    private handleMount;
    private handleMouseEnter;
    private handleMouseLeave;
    private handleScroll;
    private handleWheelMenu;
    private handleScrollBottomOnFullMenu;
    private handleScrollBottom;
    private renderFooterMessage;
    render(): JSX.Element;
}
export default ResultsMenu;
export { ResultsMenuScrollBottomHandler };
