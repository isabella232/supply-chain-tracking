import React from 'react';
import PropTypes from 'prop-types';
import { ComponentProps } from '../utils/types';
interface StepPropsBase {
    children?: React.ReactNode;
    /**
     * A React ref which is set to the DOM element when the component mounts and null when it unmounts.
     */
    elementRef?: React.Ref<HTMLLIElement>;
    /** Displays active step with alert icon.
     * @includeTheme prisma */
    error?: boolean;
    /** @private. */
    isFirst?: boolean;
    /** @private. */
    idCounter?: string;
    /** @private. */
    isLast?: boolean;
    /** @private. Is the tab active. */
    status?: 'prev' | 'active' | 'next' | 'error';
    /**
     * A unique `id` for this step and used by the `StepBar` to keep track of the open `Step`.
     * Defaults to a zero-based index matching the component's position in `StepBar`.
     */
    stepId?: any;
}
declare type StepProps = ComponentProps<StepPropsBase, 'li'>;
declare function Step({ children, elementRef, error, // eslint-disable-line @typescript-eslint/no-unused-vars
idCounter, isFirst, isLast, status, stepId, ...otherProps }: StepProps): JSX.Element;
declare namespace Step {
    var propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        elementRef: PropTypes.Requireable<object>;
        error: PropTypes.Requireable<boolean>;
        idCounter: PropTypes.Requireable<string>;
        isFirst: PropTypes.Requireable<boolean>;
        isLast: PropTypes.Requireable<boolean>;
        status: PropTypes.Requireable<string>;
        stepId: PropTypes.Requireable<any>;
    };
}
export default Step;
