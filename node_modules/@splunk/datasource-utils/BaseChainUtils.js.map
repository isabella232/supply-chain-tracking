{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/BaseChainUtils.ts","webpack:///external \"lodash\"","webpack:///external \"@splunk/dashboard-utils/search\""],"names":[],"mappings":"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","file":"BaseChainUtils.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","import { get, pickBy, some, each, uniq } from 'lodash';\nimport { MAX_CHAIN_LENGTH } from '@splunk/dashboard-utils/search';\nimport type { ExtendableDataSourceDefinition } from '@splunk/dashboard-types';\nimport type { DashboardDefinition } from '@splunk/dashboard-definition';\n\ntype RootDataSourcesDefinition = Record<string, ExtendableDataSourceDefinition>;\n\n/**\n *\n * @param {String} dataSourceId\n * @param {Object} definition data source definition\n * @returns {Boolean}\n */\nexport const isBaseDataSource = (\n    dataSourceId: string,\n    definition: RootDataSourcesDefinition = {}\n): boolean => {\n    const dataSourceDef = definition[dataSourceId];\n\n    if (!dataSourceDef || get(dataSourceDef, ['options', 'extend'])) {\n        return false;\n    }\n    return some(\n        Object.values(definition),\n        (dsDef) => get(dsDef, ['options', 'extend']) === dataSourceId\n    );\n};\n\n/**\n *\n * @param {String} dataSourceId\n * @param {Object} definition data source definition\n * @returns {Boolean}\n */\nexport const isChainDataSource = (\n    dataSourceId: string,\n    definition: RootDataSourcesDefinition = {}\n): boolean => {\n    const dataSourceDef = definition[dataSourceId];\n    if (!dataSourceDef) {\n        return false;\n    }\n\n    return !!get(dataSourceDef, ['options', 'extend']);\n};\n\n/**\n *\n * @param {String} dataSourceId\n * @param {Object} definition data source definition\n * @returns {Object} chain data sources\n */\nexport const getChainDataSources = (\n    dataSourceId: string,\n    definition: RootDataSourcesDefinition = {}\n): RootDataSourcesDefinition => {\n    return pickBy(\n        definition,\n        (dataSourceDef) =>\n            get(dataSourceDef, ['options', 'extend']) === dataSourceId\n    );\n};\n\n/**\n *\n * @param {String} dataSourceId\n * @param {Object} definition data source definition\n * @returns {Object} parent data source definition\n */\nexport const getParentDataSource = (\n    dataSourceId: string,\n    definition: RootDataSourcesDefinition = {}\n): ExtendableDataSourceDefinition => {\n    const extend = get(definition, [\n        dataSourceId,\n        'options',\n        'extend',\n    ]) as string;\n    return definition[extend];\n};\n\n/**\n * Merge base and sub searches with pipe '|'\n * @param {String} base\n * @param {String} sub\n */\nexport const mergeSearches = (base = '', sub = ''): string =>\n    [base.replace(/\\|\\s*$/g, ''), sub.replace(/^\\s*\\|/g, '')].join(' | ');\n\n/**\n *\n * @param {String} baseDataSourceId\n * @param {Object} definition data source definition\n * @param {Object} parentQuery used for function recursion\n * @returns {Array} Post Search query array\n */\nexport const createPostSearchQueryArray = (\n    baseDataSourceId: string,\n    definition: RootDataSourcesDefinition = {}, // NOSONAR\n    parentQuery = ''\n): string[] => {\n    const baseDataSourceDef = definition[baseDataSourceId];\n\n    if (!baseDataSourceDef) {\n        return [];\n    }\n    const results: string[] = [];\n    const chainDataSources = getChainDataSources(baseDataSourceId, definition);\n\n    each(chainDataSources, (chainDataSourceDef, chainDataSourceId) => {\n        const query = get(chainDataSourceDef, ['options', 'query']) as string;\n\n        const fullQuery = parentQuery\n            ? mergeSearches(parentQuery, query)\n            : query;\n\n        results.push(\n            fullQuery,\n            ...createPostSearchQueryArray(\n                chainDataSourceId,\n                definition,\n                fullQuery\n            )\n        );\n    });\n\n    return uniq(results);\n};\n\n/**\n *\n * @param {String} baseDataSourceId\n * @param {Object} definition data source definition\n * @returns {Object} baseChainModel\n */\nexport const createBaseChainModel = (\n    baseDataSourceId: string,\n    definition: RootDataSourcesDefinition = {}\n): RootDataSourcesDefinition => {\n    let result: RootDataSourcesDefinition = {};\n    result[baseDataSourceId] = definition[baseDataSourceId];\n\n    const chainDataSources = getChainDataSources(baseDataSourceId, definition);\n\n    each(chainDataSources, (chainDataSourceDef, chainDataSourceId) => {\n        result[chainDataSourceId] = chainDataSourceDef;\n        result = {\n            ...result,\n            ...createBaseChainModel(chainDataSourceId, definition),\n        };\n    });\n\n    return result;\n};\n\n/**\n *\n * @param {String} dataSourceId\n * @param {Object} definition ata source definition\n * @returns {String}\n */\nexport const getBaseDataSourceId = (\n    dataSourceId: string,\n    definition: RootDataSourcesDefinition = {}\n): string | null => {\n    if (isBaseDataSource(dataSourceId, definition)) {\n        return dataSourceId;\n    }\n\n    const extend = get(definition, [dataSourceId, 'options', 'extend']);\n\n    return extend ? getBaseDataSourceId(extend, definition) : null;\n};\n\ninterface DataSourceMeta {\n    savedSearchQuery?: string;\n    earliestTime?: string;\n    latestTime?: string;\n    [key: string]: unknown;\n}\n\ninterface GetCompleteSearchQueryProps {\n    definition: DashboardDefinition;\n    dataSourceId: string;\n    getMetaData: (dataSourceId: string) => DataSourceMeta;\n    count?: number;\n}\n\n/**\n * Fetch the complete SPL search of a datasource including its ancestors\n * @param {Object} definition DashboardDefinition\n * @param {String} dataSourceId\n * @param {Function} getMetaData A method used to get the query for a saved search\n * @param {Number} count\n * @returns {String} SPL search query of a data source and its ancestors\n */\nexport const getCompleteSearchQuery = ({\n    definition,\n    dataSourceId,\n    getMetaData,\n    count = 0,\n}: GetCompleteSearchQueryProps): string => {\n    const ds = definition.getDataSource(dataSourceId);\n    // if the base search is a saved search use getMetaData to get the query\n    const query =\n        get(ds, 'type', '') === 'ds.savedSearch' && getMetaData\n            ? get(getMetaData(dataSourceId), 'savedSearchQuery', '')\n            : get(ds, 'options.query', '');\n    const parentDsId = get(ds, 'options.extend', '') as string;\n    return parentDsId && count < MAX_CHAIN_LENGTH\n        ? `${getCompleteSearchQuery({\n              definition,\n              dataSourceId: parentDsId,\n              getMetaData,\n              count: count + 1,\n          })} \\n| ${query.trim().replace(/^\\|\\s*/g, '')}`\n        : query;\n};\n\ninterface GetBaseTimeProps {\n    definition: DashboardDefinition;\n    dataSourceId?: string;\n    getMetaData: (dataSourceId: string) => DataSourceMeta;\n}\n\n/**\n * Get earliest and latest query parameters of the highest ancestor in datasource chain\n * @param {Object} definition DashboardDefinition\n * @param {String} dataSourceId\n * @param {Function} getMetaData A method used to get the query for a saved search\n * @returns {Object} The search times of the base search of this datasource chain\n */\nexport const getBaseTime = ({\n    definition,\n    dataSourceId,\n    getMetaData,\n}: GetBaseTimeProps): { earliest: string; latest: string } => {\n    const defaultEarliest = '-24h@h';\n    const defaultLatest = 'now';\n\n    if (!dataSourceId) {\n        return {\n            earliest: defaultEarliest,\n            latest: defaultLatest,\n        };\n    }\n    let parentDsId = dataSourceId;\n    let highestAncestorDsId = dataSourceId;\n    let count = 0;\n    while (parentDsId && count <= MAX_CHAIN_LENGTH) {\n        highestAncestorDsId = parentDsId;\n        parentDsId = get(\n            definition.getDataSource(parentDsId),\n            'options.extend',\n            ''\n        );\n        count += 1;\n    }\n    const highestAncestorDs = definition.getDataSource(highestAncestorDsId);\n\n    // if the base search is a saved search use getMetaData to get the query\n    if (\n        highestAncestorDs &&\n        highestAncestorDs.type === 'ds.savedSearch' &&\n        getMetaData\n    ) {\n        const { earliestTime, latestTime } = getMetaData(highestAncestorDsId);\n        return {\n            earliest: earliestTime || defaultEarliest,\n            latest: latestTime || defaultLatest,\n        };\n    }\n\n    const baseSearchDefaultQueryParameters = (definition.getDataSourceDefaultOptions(\n        highestAncestorDsId\n    )?.queryParameters ?? {}) as Record<string, string>;\n    const baseSearchQueryParameters = (highestAncestorDs?.options\n        ?.queryParameters ?? {}) as Record<string, string>;\n    return {\n        earliest:\n            baseSearchQueryParameters.earliest ||\n            baseSearchDefaultQueryParameters.earliest ||\n            defaultEarliest,\n        latest:\n            baseSearchQueryParameters.latest ||\n            baseSearchDefaultQueryParameters.latest ||\n            defaultLatest,\n    };\n};\n\ntype GetCompleteSearchQueryAndParametersProps = GetBaseTimeProps;\n\n/**\n * Fetch the complete SPL search query and query parameters of a datasource including its ancestors\n * @param {Object} definition DashboardDefinition\n * @param {String} dataSourceId\n * @param {Function} getMetaData A method used to get the query for a saved search\n * @returns {Object} Search options including the query and query parameters\n */\nexport const getCompleteSearchQueryAndParameters = ({\n    definition,\n    dataSourceId,\n    getMetaData,\n}: GetCompleteSearchQueryAndParametersProps): {\n    query?: string;\n    queryParameters?: Record<string, unknown>;\n} => {\n    if (!dataSourceId) {\n        return {};\n    }\n    return {\n        query: getCompleteSearchQuery({\n            definition,\n            dataSourceId,\n            getMetaData,\n        }),\n        queryParameters: getBaseTime({ definition, dataSourceId, getMetaData }),\n    };\n};\n","module.exports = require(\"lodash\");","module.exports = require(\"@splunk/dashboard-utils/search\");"],"sourceRoot":""}