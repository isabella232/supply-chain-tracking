import type { ExtendableDataSourceDefinition } from '@splunk/dashboard-types';
import type { DashboardDefinition } from '@splunk/dashboard-definition';
declare type RootDataSourcesDefinition = Record<string, ExtendableDataSourceDefinition>;
/**
 *
 * @param {String} dataSourceId
 * @param {Object} definition data source definition
 * @returns {Boolean}
 */
export declare const isBaseDataSource: (dataSourceId: string, definition?: RootDataSourcesDefinition) => boolean;
/**
 *
 * @param {String} dataSourceId
 * @param {Object} definition data source definition
 * @returns {Boolean}
 */
export declare const isChainDataSource: (dataSourceId: string, definition?: RootDataSourcesDefinition) => boolean;
/**
 *
 * @param {String} dataSourceId
 * @param {Object} definition data source definition
 * @returns {Object} chain data sources
 */
export declare const getChainDataSources: (dataSourceId: string, definition?: RootDataSourcesDefinition) => RootDataSourcesDefinition;
/**
 *
 * @param {String} dataSourceId
 * @param {Object} definition data source definition
 * @returns {Object} parent data source definition
 */
export declare const getParentDataSource: (dataSourceId: string, definition?: RootDataSourcesDefinition) => ExtendableDataSourceDefinition;
/**
 * Merge base and sub searches with pipe '|'
 * @param {String} base
 * @param {String} sub
 */
export declare const mergeSearches: (base?: string, sub?: string) => string;
/**
 *
 * @param {String} baseDataSourceId
 * @param {Object} definition data source definition
 * @param {Object} parentQuery used for function recursion
 * @returns {Array} Post Search query array
 */
export declare const createPostSearchQueryArray: (baseDataSourceId: string, definition?: RootDataSourcesDefinition, parentQuery?: string) => string[];
/**
 *
 * @param {String} baseDataSourceId
 * @param {Object} definition data source definition
 * @returns {Object} baseChainModel
 */
export declare const createBaseChainModel: (baseDataSourceId: string, definition?: RootDataSourcesDefinition) => RootDataSourcesDefinition;
/**
 *
 * @param {String} dataSourceId
 * @param {Object} definition ata source definition
 * @returns {String}
 */
export declare const getBaseDataSourceId: (dataSourceId: string, definition?: RootDataSourcesDefinition) => string | null;
interface DataSourceMeta {
    savedSearchQuery?: string;
    earliestTime?: string;
    latestTime?: string;
    [key: string]: unknown;
}
interface GetCompleteSearchQueryProps {
    definition: DashboardDefinition;
    dataSourceId: string;
    getMetaData: (dataSourceId: string) => DataSourceMeta;
    count?: number;
}
/**
 * Fetch the complete SPL search of a datasource including its ancestors
 * @param {Object} definition DashboardDefinition
 * @param {String} dataSourceId
 * @param {Function} getMetaData A method used to get the query for a saved search
 * @param {Number} count
 * @returns {String} SPL search query of a data source and its ancestors
 */
export declare const getCompleteSearchQuery: ({ definition, dataSourceId, getMetaData, count, }: GetCompleteSearchQueryProps) => string;
interface GetBaseTimeProps {
    definition: DashboardDefinition;
    dataSourceId?: string;
    getMetaData: (dataSourceId: string) => DataSourceMeta;
}
/**
 * Get earliest and latest query parameters of the highest ancestor in datasource chain
 * @param {Object} definition DashboardDefinition
 * @param {String} dataSourceId
 * @param {Function} getMetaData A method used to get the query for a saved search
 * @returns {Object} The search times of the base search of this datasource chain
 */
export declare const getBaseTime: ({ definition, dataSourceId, getMetaData, }: GetBaseTimeProps) => {
    earliest: string;
    latest: string;
};
declare type GetCompleteSearchQueryAndParametersProps = GetBaseTimeProps;
/**
 * Fetch the complete SPL search query and query parameters of a datasource including its ancestors
 * @param {Object} definition DashboardDefinition
 * @param {String} dataSourceId
 * @param {Function} getMetaData A method used to get the query for a saved search
 * @returns {Object} Search options including the query and query parameters
 */
export declare const getCompleteSearchQueryAndParameters: ({ definition, dataSourceId, getMetaData, }: GetCompleteSearchQueryAndParametersProps) => {
    query?: string;
    queryParameters?: Record<string, unknown>;
};
export {};
//# sourceMappingURL=BaseChainUtils.d.ts.map