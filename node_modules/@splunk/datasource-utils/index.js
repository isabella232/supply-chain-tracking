/*!
 * Copyright © 2020 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 9);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var isEqual_1 = __importDefault(__webpack_require__(4));
var isString_1 = __importDefault(__webpack_require__(5));
var zip_1 = __importDefault(__webpack_require__(6));
var zipObject_1 = __importDefault(__webpack_require__(7));
var findIndex_1 = __importDefault(__webpack_require__(8));
/**
 * @class
 * DataSet represent a set of 2 dimensional data
 */
var DataSet = /** @class */ (function () {
    /**
     * @constructor
     * @param {Field[]} [fields= []] List of field name or field objects
     * @param {ColumnValue[][]} [columns=[]] List of column values related to fields
     * @returns DataSet
     */
    function DataSet(fields, columns) {
        if (fields === void 0) { fields = []; }
        if (columns === void 0) { columns = []; }
        this.fields = fields.map(function (field) {
            if (isString_1.default(field)) {
                return {
                    name: field,
                };
            }
            return field;
        });
        this.columns = columns;
    }
    /**
     * Returns a empty Dataset
     *
     * Examples:
     * ```js
     * const empty = DataSet.empty();
     * ```
     * @returns {DataSet} DataSet
     * @public
     */
    DataSet.empty = function () {
        return new DataSet();
    };
    /**
     * Construct a Dataset with data in json array format
     *
     * Examples:
     * ```js
     *  const dataset = DataSet.fromJSONArray(
     *     [{ name: 'x' }, { name: 'y' }, { name: 'z' }],
     *     [{ x: 'a', y: 4, z: 70 }, { x: 'b', y: 5, z: 80 }, { x: 'c', y: 6, z: 90 }]
     *  );
     * ```
     * @param {FieldObj[]} [fields=[]] List of objects containing field names
     * @param {RowItem[]} [results=[]] List of objects containing results for each field
     * @returns {DataSet}
     * @public
     */
    DataSet.fromJSONArray = function (fields, results) {
        if (fields === void 0) { fields = []; }
        if (results === void 0) { results = []; }
        var fieldList = fields;
        if (fieldList == null || fieldList.length === 0) {
            if (results.length > 0) {
                var rowSample = results[0];
                fieldList = Object.keys(rowSample).map(function (field) { return ({
                    name: field,
                }); });
            }
            else {
                fieldList = [];
            }
        }
        var columns = fieldList.map(function (_a) {
            var name = _a.name;
            return results.reduce(function (col, row) {
                // if a field is not present on a result entry we set it to null
                col.push(row[name] === undefined ? null : row[name]);
                return col;
            }, []);
        });
        return new DataSet(fieldList, columns);
    };
    /**
     * Construct a Dataset with data in json columns format
     *
     * Examples:
     * ```js
     *  const dataset = DataSet.fromJSONCols(
     *     [{ name: 'x' }, { name: 'y' }, { name: 'z' }],
     *     [['a', 'b', 'c'], [4, 5, 6], [70, 80, 90]];
     *  );
     * ```
     * @param {Field[]} [fields=[]] List of fields
     * @param {ColumnValue[][]} [columns=[]] list of column values
     * @returns {DataSet}
     * @public
     */
    DataSet.fromJSONCols = function (fields, columns) {
        if (fields === void 0) { fields = []; }
        if (columns === void 0) { columns = []; }
        return new DataSet(fields, columns);
    };
    /**
     * Construct a Dataset with data in json rows format
     *
     * Examples:
     * ```js
     *  const dataset = DataSet.fromJSONRows(
     *     [{ name: 'x' }, { name: 'y' }, { name: 'z' }],
     *     [['a', 4, 70], ['b', 5, 80], ['c', 6, 90]];
     *  );
     * ```
     * @param {Field[]} [fields=[]] List of fields
     * @param {ColumnValue[][]} [columns=[]] list of column values
     * @returns {DataSet}
     * @public
     */
    DataSet.fromJSONRows = function (fields, rows) {
        if (fields === void 0) { fields = []; }
        if (rows === void 0) { rows = []; }
        return new DataSet(fields, zip_1.default.apply(void 0, __spread(rows)));
    };
    /**
     * Convert data to json array
     * @return {JSONArray} data in json array format
     * @public
     */
    DataSet.prototype.toJSONArray = function () {
        var _this = this;
        return {
            fields: this.fields,
            results: zip_1.default.apply(void 0, __spread(this.columns)).map(function (row) {
                return zipObject_1.default(_this.fields.map(function (field) { return field.name; }), row);
            }),
        };
    };
    /**
     * Convert data to json columns
     * @return {JSONCols} data in json columns format
     * @public
     */
    DataSet.prototype.toJSONCols = function () {
        var _a = this, fields = _a.fields, columns = _a.columns;
        return { fields: fields, columns: columns };
    };
    /**
     * Convert data to json rows
     * @return {JSONRows} data in json rows format
     * @public
     */
    DataSet.prototype.toJSONRows = function () {
        return {
            fields: this.fields,
            rows: zip_1.default.apply(void 0, __spread(this.columns)),
        };
    };
    /**
     * List all fields
     * @return {FieldObj[]} fields array
     * @public
     */
    DataSet.prototype.getFields = function () {
        return this.fields;
    };
    /**
     * List data columns
     * @return {Object} columns array
     * @public
     */
    DataSet.prototype.getColumns = function () {
        return this.columns;
    };
    /**
     *
     * @param {String} fieldName
     * @return {ColumnValue[]} column data
     * @public
     */
    DataSet.prototype.getColumnByField = function (fieldName) {
        var index = findIndex_1.default(this.fields, function (_a) {
            var name = _a.name;
            return name === fieldName;
        });
        return this.columns[index];
    };
    /**
     *
     * @param {String} fieldName
     * @return {Boolean}
     * @public
     */
    DataSet.prototype.hasField = function (fieldName) {
        return findIndex_1.default(this.fields, function (_a) {
            var name = _a.name;
            return name === fieldName;
        }) !== -1;
    };
    /**
     * @return {Boolean} true if DataSet has no data
     * @public
     */
    DataSet.prototype.isEmpty = function () {
        return this.columns.length === 0;
    };
    /**
     *
     * @param {DataSet} dataSet DataSet to compare
     * @return {Boolean} true if another dataset is equals to current one
     * @public
     */
    DataSet.prototype.equals = function (dataSet) {
        return (isEqual_1.default(this.fields, dataSet.fields) &&
            isEqual_1.default(this.columns, dataSet.columns));
    };
    /**
     * Returns a slice of the dataset, useful for pagination.
     * @param options {Object}
     * @param options.count {Number} number of rows
     * @param options.offset {Number} starting row index
     * @returns {DataSet}
     */
    DataSet.prototype.getPage = function (_a) {
        var _b = _a.count, count = _b === void 0 ? 0 : _b, _c = _a.offset, offset = _c === void 0 ? 0 : _c;
        var end = count <= 0 ? undefined : offset + count;
        return DataSet.fromJSONCols(this.getFields(), this.getColumns().map(function (column) { return column.slice(offset, end); }));
    };
    /**
     * Get total number of rows, note this is not affected by the pagination.
     */
    DataSet.prototype.getTotalCount = function () {
        var _a, _b;
        return (_b = (_a = this.columns[0]) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;
    };
    return DataSet;
}());
exports.default = DataSet;


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCompleteSearchQueryAndParameters = exports.getBaseTime = exports.getCompleteSearchQuery = exports.getBaseDataSourceId = exports.createBaseChainModel = exports.createPostSearchQueryArray = exports.mergeSearches = exports.getParentDataSource = exports.getChainDataSources = exports.isChainDataSource = exports.isBaseDataSource = void 0;
var lodash_1 = __webpack_require__(2);
var search_1 = __webpack_require__(3);
/**
 *
 * @param {String} dataSourceId
 * @param {Object} definition data source definition
 * @returns {Boolean}
 */
var isBaseDataSource = function (dataSourceId, definition) {
    if (definition === void 0) { definition = {}; }
    var dataSourceDef = definition[dataSourceId];
    if (!dataSourceDef || lodash_1.get(dataSourceDef, ['options', 'extend'])) {
        return false;
    }
    return lodash_1.some(Object.values(definition), function (dsDef) { return lodash_1.get(dsDef, ['options', 'extend']) === dataSourceId; });
};
exports.isBaseDataSource = isBaseDataSource;
/**
 *
 * @param {String} dataSourceId
 * @param {Object} definition data source definition
 * @returns {Boolean}
 */
var isChainDataSource = function (dataSourceId, definition) {
    if (definition === void 0) { definition = {}; }
    var dataSourceDef = definition[dataSourceId];
    if (!dataSourceDef) {
        return false;
    }
    return !!lodash_1.get(dataSourceDef, ['options', 'extend']);
};
exports.isChainDataSource = isChainDataSource;
/**
 *
 * @param {String} dataSourceId
 * @param {Object} definition data source definition
 * @returns {Object} chain data sources
 */
var getChainDataSources = function (dataSourceId, definition) {
    if (definition === void 0) { definition = {}; }
    return lodash_1.pickBy(definition, function (dataSourceDef) {
        return lodash_1.get(dataSourceDef, ['options', 'extend']) === dataSourceId;
    });
};
exports.getChainDataSources = getChainDataSources;
/**
 *
 * @param {String} dataSourceId
 * @param {Object} definition data source definition
 * @returns {Object} parent data source definition
 */
var getParentDataSource = function (dataSourceId, definition) {
    if (definition === void 0) { definition = {}; }
    var extend = lodash_1.get(definition, [
        dataSourceId,
        'options',
        'extend',
    ]);
    return definition[extend];
};
exports.getParentDataSource = getParentDataSource;
/**
 * Merge base and sub searches with pipe '|'
 * @param {String} base
 * @param {String} sub
 */
var mergeSearches = function (base, sub) {
    if (base === void 0) { base = ''; }
    if (sub === void 0) { sub = ''; }
    return [base.replace(/\|\s*$/g, ''), sub.replace(/^\s*\|/g, '')].join(' | ');
};
exports.mergeSearches = mergeSearches;
/**
 *
 * @param {String} baseDataSourceId
 * @param {Object} definition data source definition
 * @param {Object} parentQuery used for function recursion
 * @returns {Array} Post Search query array
 */
var createPostSearchQueryArray = function (baseDataSourceId, definition, // NOSONAR
parentQuery) {
    if (definition === void 0) { definition = {}; }
    if (parentQuery === void 0) { parentQuery = ''; }
    var baseDataSourceDef = definition[baseDataSourceId];
    if (!baseDataSourceDef) {
        return [];
    }
    var results = [];
    var chainDataSources = exports.getChainDataSources(baseDataSourceId, definition);
    lodash_1.each(chainDataSources, function (chainDataSourceDef, chainDataSourceId) {
        var query = lodash_1.get(chainDataSourceDef, ['options', 'query']);
        var fullQuery = parentQuery
            ? exports.mergeSearches(parentQuery, query)
            : query;
        results.push.apply(results, __spread([fullQuery], exports.createPostSearchQueryArray(chainDataSourceId, definition, fullQuery)));
    });
    return lodash_1.uniq(results);
};
exports.createPostSearchQueryArray = createPostSearchQueryArray;
/**
 *
 * @param {String} baseDataSourceId
 * @param {Object} definition data source definition
 * @returns {Object} baseChainModel
 */
var createBaseChainModel = function (baseDataSourceId, definition) {
    if (definition === void 0) { definition = {}; }
    var result = {};
    result[baseDataSourceId] = definition[baseDataSourceId];
    var chainDataSources = exports.getChainDataSources(baseDataSourceId, definition);
    lodash_1.each(chainDataSources, function (chainDataSourceDef, chainDataSourceId) {
        result[chainDataSourceId] = chainDataSourceDef;
        result = __assign(__assign({}, result), exports.createBaseChainModel(chainDataSourceId, definition));
    });
    return result;
};
exports.createBaseChainModel = createBaseChainModel;
/**
 *
 * @param {String} dataSourceId
 * @param {Object} definition ata source definition
 * @returns {String}
 */
var getBaseDataSourceId = function (dataSourceId, definition) {
    if (definition === void 0) { definition = {}; }
    if (exports.isBaseDataSource(dataSourceId, definition)) {
        return dataSourceId;
    }
    var extend = lodash_1.get(definition, [dataSourceId, 'options', 'extend']);
    return extend ? exports.getBaseDataSourceId(extend, definition) : null;
};
exports.getBaseDataSourceId = getBaseDataSourceId;
/**
 * Fetch the complete SPL search of a datasource including its ancestors
 * @param {Object} definition DashboardDefinition
 * @param {String} dataSourceId
 * @param {Function} getMetaData A method used to get the query for a saved search
 * @param {Number} count
 * @returns {String} SPL search query of a data source and its ancestors
 */
var getCompleteSearchQuery = function (_a) {
    var definition = _a.definition, dataSourceId = _a.dataSourceId, getMetaData = _a.getMetaData, _b = _a.count, count = _b === void 0 ? 0 : _b;
    var ds = definition.getDataSource(dataSourceId);
    // if the base search is a saved search use getMetaData to get the query
    var query = lodash_1.get(ds, 'type', '') === 'ds.savedSearch' && getMetaData
        ? lodash_1.get(getMetaData(dataSourceId), 'savedSearchQuery', '')
        : lodash_1.get(ds, 'options.query', '');
    var parentDsId = lodash_1.get(ds, 'options.extend', '');
    return parentDsId && count < search_1.MAX_CHAIN_LENGTH
        ? exports.getCompleteSearchQuery({
            definition: definition,
            dataSourceId: parentDsId,
            getMetaData: getMetaData,
            count: count + 1,
        }) + " \n| " + query.trim().replace(/^\|\s*/g, '')
        : query;
};
exports.getCompleteSearchQuery = getCompleteSearchQuery;
/**
 * Get earliest and latest query parameters of the highest ancestor in datasource chain
 * @param {Object} definition DashboardDefinition
 * @param {String} dataSourceId
 * @param {Function} getMetaData A method used to get the query for a saved search
 * @returns {Object} The search times of the base search of this datasource chain
 */
var getBaseTime = function (_a) {
    var _b, _c, _d, _e;
    var definition = _a.definition, dataSourceId = _a.dataSourceId, getMetaData = _a.getMetaData;
    var defaultEarliest = '-24h@h';
    var defaultLatest = 'now';
    if (!dataSourceId) {
        return {
            earliest: defaultEarliest,
            latest: defaultLatest,
        };
    }
    var parentDsId = dataSourceId;
    var highestAncestorDsId = dataSourceId;
    var count = 0;
    while (parentDsId && count <= search_1.MAX_CHAIN_LENGTH) {
        highestAncestorDsId = parentDsId;
        parentDsId = lodash_1.get(definition.getDataSource(parentDsId), 'options.extend', '');
        count += 1;
    }
    var highestAncestorDs = definition.getDataSource(highestAncestorDsId);
    // if the base search is a saved search use getMetaData to get the query
    if (highestAncestorDs &&
        highestAncestorDs.type === 'ds.savedSearch' &&
        getMetaData) {
        var _f = getMetaData(highestAncestorDsId), earliestTime = _f.earliestTime, latestTime = _f.latestTime;
        return {
            earliest: earliestTime || defaultEarliest,
            latest: latestTime || defaultLatest,
        };
    }
    var baseSearchDefaultQueryParameters = ((_c = (_b = definition.getDataSourceDefaultOptions(highestAncestorDsId)) === null || _b === void 0 ? void 0 : _b.queryParameters) !== null && _c !== void 0 ? _c : {});
    var baseSearchQueryParameters = ((_e = (_d = highestAncestorDs === null || highestAncestorDs === void 0 ? void 0 : highestAncestorDs.options) === null || _d === void 0 ? void 0 : _d.queryParameters) !== null && _e !== void 0 ? _e : {});
    return {
        earliest: baseSearchQueryParameters.earliest ||
            baseSearchDefaultQueryParameters.earliest ||
            defaultEarliest,
        latest: baseSearchQueryParameters.latest ||
            baseSearchDefaultQueryParameters.latest ||
            defaultLatest,
    };
};
exports.getBaseTime = getBaseTime;
/**
 * Fetch the complete SPL search query and query parameters of a datasource including its ancestors
 * @param {Object} definition DashboardDefinition
 * @param {String} dataSourceId
 * @param {Function} getMetaData A method used to get the query for a saved search
 * @returns {Object} Search options including the query and query parameters
 */
var getCompleteSearchQueryAndParameters = function (_a) {
    var definition = _a.definition, dataSourceId = _a.dataSourceId, getMetaData = _a.getMetaData;
    if (!dataSourceId) {
        return {};
    }
    return {
        query: exports.getCompleteSearchQuery({
            definition: definition,
            dataSourceId: dataSourceId,
            getMetaData: getMetaData,
        }),
        queryParameters: exports.getBaseTime({ definition: definition, dataSourceId: dataSourceId, getMetaData: getMetaData }),
    };
};
exports.getCompleteSearchQueryAndParameters = getCompleteSearchQueryAndParameters;


/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-utils/search");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("lodash/isEqual");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("lodash/isString");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("lodash/zip");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("lodash/zipObject");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = require("lodash/findIndex");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataSet = void 0;
__exportStar(__webpack_require__(0), exports);
var DataSet_1 = __webpack_require__(0);
Object.defineProperty(exports, "DataSet", { enumerable: true, get: function () { return __importDefault(DataSet_1).default; } });
__exportStar(__webpack_require__(1), exports);


/***/ })
/******/ ]);
//# sourceMappingURL=index.js.map