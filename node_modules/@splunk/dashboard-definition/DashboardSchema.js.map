{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash/cloneDeep\"","webpack:///external \"lodash/each\"","webpack:///external \"lodash/isEmpty\"","webpack:///./src/DashboardSchema.ts","webpack:///external \"lodash/set\""],"names":[],"mappings":"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","file":"DashboardSchema.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"lodash/cloneDeep\");","module.exports = require(\"lodash/each\");","module.exports = require(\"lodash/isEmpty\");","import each from 'lodash/each';\nimport isEmpty from 'lodash/isEmpty';\nimport cloneDeep from 'lodash/cloneDeep';\nimport set from 'lodash/set';\nimport type { JSONSchemaType } from 'ajv';\nimport type {\n    Preset,\n    DashboardJSON,\n    EventHandlerDefinition,\n    RootDataSourcesDefinition,\n    RootVisualizationsDefinition,\n    RootInputsDefinition,\n    LayoutDefinition,\n    DashboardDefaultsDefinition,\n} from '@splunk/dashboard-types';\n\nconst keyPattern = '^[a-zA-Z0-9_-]*$';\n\ntype NullableSchema<T> = JSONSchemaType<T> & {\n    nullable: true;\n};\n\nconst eventHandlerSchema: NullableSchema<EventHandlerDefinition[]> = {\n    type: 'array',\n    items: {\n        type: 'object',\n        properties: {\n            type: {\n                type: 'string',\n            },\n            options: {\n                type: 'object',\n                nullable: true,\n                properties: {\n                    url: { type: 'string', nullable: true },\n                    newTab: { type: 'boolean', nullable: true },\n                    key: { type: 'string', nullable: true },\n                    value: { type: 'string', nullable: true },\n                    tokens: {\n                        type: 'array',\n                        nullable: true,\n                        items: {\n                            type: 'object',\n                            properties: {\n                                token: { type: 'string' },\n                                key: {\n                                    type: 'string',\n                                    nullable: true,\n                                    description:\n                                        'Fetches the data from the event using this key.',\n                                },\n                                value: {\n                                    type: 'string',\n                                    nullable: true,\n                                    description: 'Specify a static value.',\n                                },\n                            },\n                            required: ['token'],\n                            oneOf: [\n                                { required: ['key'] },\n                                { required: ['value'] },\n                            ],\n                        },\n                    },\n                    tokenNamespace: { type: 'string', nullable: true },\n                    events: {\n                        type: 'array',\n                        items: {\n                            type: 'string',\n                        },\n                        nullable: true,\n                    },\n                },\n            },\n        },\n        required: ['type'],\n        additionalProperties: false,\n    },\n    nullable: true,\n};\n\nconst dataSourcesSchema: NullableSchema<RootDataSourcesDefinition> = {\n    type: 'object',\n    nullable: true,\n    required: [],\n    additionalProperties: false,\n    patternProperties: {\n        [keyPattern]: {\n            type: 'object',\n            properties: {\n                type: {\n                    type: 'string',\n                },\n                options: {\n                    type: 'object',\n                    nullable: true,\n                },\n                // datasource name\n                name: {\n                    type: 'string',\n                    nullable: true,\n                },\n                // some metadata for this data source\n                meta: {\n                    type: 'object',\n                },\n                extend: {\n                    type: 'string',\n                },\n                eventHandlers: eventHandlerSchema,\n            },\n            required: ['type'],\n            additionalProperties: false,\n        },\n    },\n};\n\nconst visualizationsSchema: NullableSchema<RootVisualizationsDefinition> = {\n    type: 'object',\n    required: [],\n    nullable: true,\n    additionalProperties: false,\n    patternProperties: {\n        [keyPattern]: {\n            type: 'object',\n            properties: {\n                context: { type: 'object', nullable: true },\n                type: {\n                    type: 'string',\n                },\n                options: {\n                    type: 'object',\n                    nullable: true,\n                },\n                encoding: {\n                    type: 'object',\n                    nullable: true,\n                },\n                dataSources: {\n                    type: 'object',\n                    patternProperties: {\n                        [keyPattern]: { type: 'string' },\n                    },\n                    required: [],\n                    nullable: true,\n                },\n                eventHandlers: eventHandlerSchema,\n                title: {\n                    type: 'string',\n                    nullable: true,\n                },\n                description: {\n                    type: 'string',\n                    nullable: true,\n                },\n                showProgressBar: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                showLastUpdated: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n            },\n            required: ['type'],\n            additionalProperties: false,\n        },\n    },\n};\n\nconst inputsSchema: NullableSchema<RootInputsDefinition> = {\n    type: 'object',\n    nullable: true,\n    required: [],\n    additionalProperties: false,\n    patternProperties: {\n        [keyPattern]: {\n            type: 'object',\n            properties: {\n                context: { type: 'object', nullable: true },\n                type: {\n                    type: 'string',\n                },\n                options: {\n                    type: 'object',\n                    nullable: true,\n                },\n                encoding: {\n                    type: 'object',\n                    nullable: true,\n                },\n                dataSources: {\n                    type: 'object',\n                    nullable: true,\n                    required: [],\n                    patternProperties: {\n                        [keyPattern]: { type: 'string' },\n                    },\n                },\n                title: {\n                    type: 'string',\n                    nullable: true,\n                },\n                eventHandlers: eventHandlerSchema,\n            },\n            required: ['type'],\n            additionalProperties: false,\n        },\n    },\n};\n\nconst layoutSchema: NullableSchema<LayoutDefinition> = {\n    type: 'object',\n    nullable: true,\n    required: ['type'],\n    additionalProperties: false,\n    properties: {\n        type: {\n            type: 'string',\n        },\n        options: {\n            type: 'object',\n            nullable: true,\n        },\n        globalInputs: {\n            type: 'array',\n            items: {\n                type: 'string',\n            },\n            nullable: true,\n        },\n        structure: {\n            type: 'array',\n            items: {\n                type: 'object',\n                nullable: true,\n                required: [],\n            },\n            nullable: true,\n        },\n    },\n};\n\nconst defaultsSchema: NullableSchema<DashboardDefaultsDefinition> = {\n    type: 'object',\n    nullable: true,\n    properties: {\n        inputs: {\n            type: 'object',\n            nullable: true,\n            required: [],\n        },\n        visualizations: {\n            type: 'object',\n            nullable: true,\n            required: [],\n            additionalProperties: false,\n        },\n        dataSources: {\n            type: 'object',\n            nullable: true,\n            required: [],\n            properties: {\n                global: {\n                    type: 'object',\n                    nullable: true,\n                },\n            },\n            patternProperties: {\n                [keyPattern]: {\n                    type: 'object',\n                    nullable: true,\n                },\n            },\n        },\n        tokens: {\n            type: 'object',\n            nullable: true,\n            required: [],\n            patternProperties: {\n                // namespaces\n                [keyPattern]: {\n                    type: 'object',\n                    required: [],\n                    patternProperties: {\n                        // tokens\n                        [keyPattern]: {\n                            type: 'object',\n                            required: ['value'],\n                            properties: {\n                                value: {\n                                    type: 'string',\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\n\n// note, this alone doesn't provide precise schema validation, it is best to use the createSchemaBasedOnPresets().\nconst defaultDashboardSchema: JSONSchemaType<DashboardJSON> = {\n    $id: 'http://www.splunk.com/dashboard.schema.json',\n    title: 'Dashboard Definition',\n    description: 'Dashboard Definition',\n    type: 'object',\n    properties: {\n        version: {\n            type: 'string',\n            nullable: true,\n        },\n        title: {\n            type: 'string',\n            nullable: true,\n        },\n        description: {\n            type: 'string',\n            nullable: true,\n        },\n        dataSources: dataSourcesSchema,\n        visualizations: visualizationsSchema,\n        inputs: inputsSchema,\n        defaults: defaultsSchema,\n        layout: layoutSchema,\n    },\n    required: [],\n};\n\n/**\n * create new schema\n * @method createMonacoSchema\n * @param {Object} config\n * @param {Object} config.newSchema\n * @param {String} config.modelUri\n * @returns {Object} monaco schema\n */\nexport const createMonacoSchema = ({\n    newSchema = {},\n    modelUri,\n}: {\n    newSchema?: Record<string, unknown>;\n    modelUri: string;\n}): Record<string, unknown>[] => {\n    const finalSchema = isEmpty(newSchema) ? defaultDashboardSchema : newSchema;\n    return [\n        {\n            // made up fake uri\n            uri: 'http://splunk/json-schema.json',\n            fileMatch: [modelUri],\n            schema: finalSchema,\n        },\n    ];\n};\n\ntype ComponentDictionary = Record<string, Record<string, unknown> | undefined>;\n\n/**\n * combine schemas for the same type\n * @method combineSchema\n * @param {Object} componentDict {type : optionSchema}\n * @param {Boolean} [additionalProperties=true] allow extra properties in options object\n * @returns {array} allOf statement of if else statements\n */\nexport const combineSchema = (\n    componentDict: ComponentDictionary,\n    additionalProperties = true\n): Record<string, unknown>[] => {\n    const allOfStatement: Record<string, unknown>[] = [];\n    each(componentDict, (optionSchema, type) => {\n        if (!isEmpty(optionSchema)) {\n            const statement = {\n                if: {\n                    properties: { type: { const: type } },\n                },\n                then: {\n                    properties: {\n                        // if the schema is extended beyond just a list of properties, use it instead\n                        options: optionSchema?.extend\n                            ? optionSchema.extend\n                            : {\n                                  type: 'object',\n                                  properties: optionSchema,\n                                  // TODO: Revisit additionalProperties to disallow unknown keys as a warning\n                                  additionalProperties,\n                              },\n                    },\n                },\n            };\n            allOfStatement.push(statement);\n        }\n    });\n    return allOfStatement;\n};\n\n/**\n * @method createSchemaBasedOnDicts\n * @param {Object} config\n * @param {Object} layoutDict {type : optionSchema}\n * @param {Object} dataSourceDict {type : optionSchema}\n * @param {Object} visualizationDict {type : optionSchema}\n * @param {Object} inputDict {type : optionSchema}\n * @returns {Object} schema\n */\nexport const createSchemaBasedOnDicts = ({\n    layoutDict = {},\n    dataSourceDict = {},\n    visualizationDict = {},\n    inputDict = {},\n}: {\n    layoutDict?: ComponentDictionary;\n    dataSourceDict?: ComponentDictionary;\n    visualizationDict?: ComponentDictionary;\n    inputDict?: ComponentDictionary;\n}): JSONSchemaType<DashboardJSON> => {\n    const layoutAllOfStatement = combineSchema(layoutDict);\n    const dataSourceAllOfStatement = combineSchema(dataSourceDict);\n    const visualizationAllOfStatement = combineSchema(visualizationDict);\n    const inputAllOfStatement = combineSchema(inputDict, false);\n    const newSchema = cloneDeep(defaultDashboardSchema);\n    if (!isEmpty(layoutDict)) {\n        set(\n            newSchema,\n            'properties.layout.properties.type.enum',\n            Object.keys(layoutDict)\n        );\n    }\n    if (!isEmpty(layoutAllOfStatement)) {\n        set(newSchema, 'properties.layout.allOf', layoutAllOfStatement);\n    }\n\n    if (!isEmpty(inputDict)) {\n        set(\n            newSchema,\n            [\n                'properties',\n                'inputs',\n                'patternProperties',\n                keyPattern,\n                'properties',\n                'type',\n                'enum',\n            ],\n            Object.keys(inputDict)\n        );\n    }\n    if (!isEmpty(inputAllOfStatement)) {\n        set(\n            newSchema,\n            ['properties', 'inputs', 'patternProperties', keyPattern, 'allOf'],\n            inputAllOfStatement\n        );\n    }\n\n    if (!isEmpty(visualizationDict)) {\n        set(\n            newSchema,\n            [\n                'properties',\n                'visualizations',\n                'patternProperties',\n                keyPattern,\n                'properties',\n                'type',\n                'enum',\n            ],\n            Object.keys(visualizationDict)\n        );\n\n        // caveat1: preset is provided at runtime, thus there's no way to let it perfectly match DashboardJSON at compile time. So we put a vague schema into /defaults/visualizations in the defaultDashboardSchema, and modify it at runtime based on the preset.\n        // caveat2: `global` cannot be specified at compile time because of AJV limitation https://github.com/ajv-validator/ajv/issues/1588\n        // caveat3: use lodash get/set to workaround the typechecking\n        set(\n            newSchema,\n            [\n                'properties',\n                'defaults',\n                'properties',\n                'visualizations',\n                'properties',\n                'global',\n            ],\n            {\n                type: 'object',\n                nullable: true,\n                additionalProperties: false,\n                properties: {\n                    context: {\n                        type: 'object',\n                        nullable: true,\n                    },\n                    showLastUpdated: {\n                        type: 'boolean',\n                        default: false,\n                        nullable: true,\n                    },\n                    showProgressBar: {\n                        type: 'boolean',\n                        default: false,\n                        nullable: true,\n                    },\n                },\n            }\n        );\n        Object.entries(visualizationDict).forEach(([key, optionsSchema]) =>\n            set(\n                newSchema,\n                [\n                    'properties',\n                    'defaults',\n                    'properties',\n                    'visualizations',\n                    'properties',\n                    key,\n                ],\n                {\n                    type: 'object',\n                    nullable: true,\n                    additionalProperties: false,\n                    properties: {\n                        context: {\n                            type: 'object',\n                            nullable: true,\n                        },\n                        showLastUpdated: {\n                            type: 'boolean',\n                            default: false,\n                            nullable: true,\n                        },\n                        showProgressBar: {\n                            type: 'boolean',\n                            default: false,\n                            nullable: true,\n                        },\n                        options: {\n                            type: 'object',\n                            properties: optionsSchema,\n                            nullable: true,\n                            additionalProperties: false,\n                        },\n                    },\n                }\n            )\n        );\n    }\n    if (!isEmpty(visualizationAllOfStatement)) {\n        set(\n            newSchema,\n            [\n                'properties',\n                'visualizations',\n                'patternProperties',\n                keyPattern,\n                'allOf',\n            ],\n            visualizationAllOfStatement\n        );\n    }\n\n    if (!isEmpty(dataSourceDict)) {\n        set(\n            newSchema,\n            [\n                'properties',\n                'dataSources',\n                'patternProperties',\n                keyPattern,\n                'properties',\n                'type',\n                'enum',\n            ],\n            Object.keys(dataSourceDict)\n        );\n    }\n    if (!isEmpty(dataSourceAllOfStatement)) {\n        set(\n            newSchema,\n            [\n                'properties',\n                'dataSources',\n                'patternProperties',\n                keyPattern,\n                'allOf',\n            ],\n            dataSourceAllOfStatement\n        );\n    }\n    return newSchema;\n};\n\n/**\n * create component dictionary based on preset\n * @method createComponentDict\n * @param {Object} preset\n * @returns {Object} component object {type : optionSchema}\n */\nexport const createComponentDict = (preset: Preset): ComponentDictionary => {\n    const componentDict: ComponentDictionary = {};\n    each(preset, (component, type) => {\n        componentDict[type] =\n            component?.config?.optionsSchema || component?.schema;\n    });\n    return componentDict;\n};\n\n/**\n * create schema based on presets\n * @method createSchemaBasedOnPresets\n * @param {Object} presets combined with all custom presets\n * @returns {Object} schema\n */\nexport const createSchemaBasedOnPresets = (\n    presets: Record<string, Preset>\n): ReturnType<typeof createSchemaBasedOnDicts> => {\n    const layoutDict = createComponentDict(presets.layouts);\n    const dataSourceDict = createComponentDict(presets.dataSources);\n    const visualizationDict = createComponentDict(presets.visualizations);\n    const inputDict = createComponentDict(presets.inputs);\n    return createSchemaBasedOnDicts({\n        layoutDict,\n        dataSourceDict,\n        visualizationDict,\n        inputDict,\n    });\n};\nexport default defaultDashboardSchema;\n","module.exports = require(\"lodash/set\");"],"sourceRoot":""}