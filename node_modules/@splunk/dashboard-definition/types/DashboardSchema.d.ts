import type { JSONSchemaType } from 'ajv';
import type { Preset, DashboardJSON } from '@splunk/dashboard-types';
declare const defaultDashboardSchema: JSONSchemaType<DashboardJSON>;
/**
 * create new schema
 * @method createMonacoSchema
 * @param {Object} config
 * @param {Object} config.newSchema
 * @param {String} config.modelUri
 * @returns {Object} monaco schema
 */
export declare const createMonacoSchema: ({ newSchema, modelUri, }: {
    newSchema?: Record<string, unknown> | undefined;
    modelUri: string;
}) => Record<string, unknown>[];
declare type ComponentDictionary = Record<string, Record<string, unknown> | undefined>;
/**
 * combine schemas for the same type
 * @method combineSchema
 * @param {Object} componentDict {type : optionSchema}
 * @param {Boolean} [additionalProperties=true] allow extra properties in options object
 * @returns {array} allOf statement of if else statements
 */
export declare const combineSchema: (componentDict: ComponentDictionary, additionalProperties?: boolean) => Record<string, unknown>[];
/**
 * @method createSchemaBasedOnDicts
 * @param {Object} config
 * @param {Object} layoutDict {type : optionSchema}
 * @param {Object} dataSourceDict {type : optionSchema}
 * @param {Object} visualizationDict {type : optionSchema}
 * @param {Object} inputDict {type : optionSchema}
 * @returns {Object} schema
 */
export declare const createSchemaBasedOnDicts: ({ layoutDict, dataSourceDict, visualizationDict, inputDict, }: {
    layoutDict?: Record<string, Record<string, unknown> | undefined> | undefined;
    dataSourceDict?: Record<string, Record<string, unknown> | undefined> | undefined;
    visualizationDict?: Record<string, Record<string, unknown> | undefined> | undefined;
    inputDict?: Record<string, Record<string, unknown> | undefined> | undefined;
}) => JSONSchemaType<DashboardJSON>;
/**
 * create component dictionary based on preset
 * @method createComponentDict
 * @param {Object} preset
 * @returns {Object} component object {type : optionSchema}
 */
export declare const createComponentDict: (preset: Preset) => ComponentDictionary;
/**
 * create schema based on presets
 * @method createSchemaBasedOnPresets
 * @param {Object} presets combined with all custom presets
 * @returns {Object} schema
 */
export declare const createSchemaBasedOnPresets: (presets: Record<string, Preset>) => ReturnType<typeof createSchemaBasedOnDicts>;
export default defaultDashboardSchema;
//# sourceMappingURL=DashboardSchema.d.ts.map