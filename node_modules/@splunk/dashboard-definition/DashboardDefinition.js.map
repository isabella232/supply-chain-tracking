{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash/cloneDeep\"","webpack:///external \"lodash/each\"","webpack:///external \"lodash/isEmpty\"","webpack:///./src/DashboardSchema.ts","webpack:///external \"lodash/set\"","webpack:///./src/DashboardDefinition.ts","webpack:///external \"lodash/find\"","webpack:///external \"lodash/omit\"","webpack:///external \"lodash/get\"","webpack:///external \"lodash/isString\"","webpack:///external \"lodash/isPlainObject\"","webpack:///external \"lodash/isEqual\"","webpack:///external \"lodash/defaultsDeep\"","webpack:///external \"lodash/memoize\"","webpack:///external \"lodash/keyBy\"","webpack:///external \"lodash/pickBy\"","webpack:///external \"@splunk/dashboard-utils/uniqueId\"","webpack:///external \"@splunk/dashboard-utils/layout\"","webpack:///external \"@splunk/dashboard-utils/search\"","webpack:///external \"@splunk/dashboard-utils\"","webpack:///external \"@splunk/ui-utils/i18n\"","webpack:///external \"ajv\"","webpack:///external \"fast-json-patch\""],"names":[],"mappings":"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","file":"DashboardDefinition.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","module.exports = require(\"lodash/cloneDeep\");","module.exports = require(\"lodash/each\");","module.exports = require(\"lodash/isEmpty\");","import each from 'lodash/each';\nimport isEmpty from 'lodash/isEmpty';\nimport cloneDeep from 'lodash/cloneDeep';\nimport set from 'lodash/set';\nimport type { JSONSchemaType } from 'ajv';\nimport type {\n    Preset,\n    DashboardJSON,\n    EventHandlerDefinition,\n    RootDataSourcesDefinition,\n    RootVisualizationsDefinition,\n    RootInputsDefinition,\n    LayoutDefinition,\n    DashboardDefaultsDefinition,\n} from '@splunk/dashboard-types';\n\nconst keyPattern = '^[a-zA-Z0-9_-]*$';\n\ntype NullableSchema<T> = JSONSchemaType<T> & {\n    nullable: true;\n};\n\nconst eventHandlerSchema: NullableSchema<EventHandlerDefinition[]> = {\n    type: 'array',\n    items: {\n        type: 'object',\n        properties: {\n            type: {\n                type: 'string',\n            },\n            options: {\n                type: 'object',\n                nullable: true,\n                properties: {\n                    url: { type: 'string', nullable: true },\n                    newTab: { type: 'boolean', nullable: true },\n                    key: { type: 'string', nullable: true },\n                    value: { type: 'string', nullable: true },\n                    tokens: {\n                        type: 'array',\n                        nullable: true,\n                        items: {\n                            type: 'object',\n                            properties: {\n                                token: { type: 'string' },\n                                key: {\n                                    type: 'string',\n                                    nullable: true,\n                                    description:\n                                        'Fetches the data from the event using this key.',\n                                },\n                                value: {\n                                    type: 'string',\n                                    nullable: true,\n                                    description: 'Specify a static value.',\n                                },\n                            },\n                            required: ['token'],\n                            oneOf: [\n                                { required: ['key'] },\n                                { required: ['value'] },\n                            ],\n                        },\n                    },\n                    tokenNamespace: { type: 'string', nullable: true },\n                    events: {\n                        type: 'array',\n                        items: {\n                            type: 'string',\n                        },\n                        nullable: true,\n                    },\n                },\n            },\n        },\n        required: ['type'],\n        additionalProperties: false,\n    },\n    nullable: true,\n};\n\nconst dataSourcesSchema: NullableSchema<RootDataSourcesDefinition> = {\n    type: 'object',\n    nullable: true,\n    required: [],\n    additionalProperties: false,\n    patternProperties: {\n        [keyPattern]: {\n            type: 'object',\n            properties: {\n                type: {\n                    type: 'string',\n                },\n                options: {\n                    type: 'object',\n                    nullable: true,\n                },\n                // datasource name\n                name: {\n                    type: 'string',\n                    nullable: true,\n                },\n                // some metadata for this data source\n                meta: {\n                    type: 'object',\n                },\n                extend: {\n                    type: 'string',\n                },\n                eventHandlers: eventHandlerSchema,\n            },\n            required: ['type'],\n            additionalProperties: false,\n        },\n    },\n};\n\nconst visualizationsSchema: NullableSchema<RootVisualizationsDefinition> = {\n    type: 'object',\n    required: [],\n    nullable: true,\n    additionalProperties: false,\n    patternProperties: {\n        [keyPattern]: {\n            type: 'object',\n            properties: {\n                context: { type: 'object', nullable: true },\n                type: {\n                    type: 'string',\n                },\n                options: {\n                    type: 'object',\n                    nullable: true,\n                },\n                encoding: {\n                    type: 'object',\n                    nullable: true,\n                },\n                dataSources: {\n                    type: 'object',\n                    patternProperties: {\n                        [keyPattern]: { type: 'string' },\n                    },\n                    required: [],\n                    nullable: true,\n                },\n                eventHandlers: eventHandlerSchema,\n                title: {\n                    type: 'string',\n                    nullable: true,\n                },\n                description: {\n                    type: 'string',\n                    nullable: true,\n                },\n                showProgressBar: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n                showLastUpdated: {\n                    type: 'boolean',\n                    nullable: true,\n                },\n            },\n            required: ['type'],\n            additionalProperties: false,\n        },\n    },\n};\n\nconst inputsSchema: NullableSchema<RootInputsDefinition> = {\n    type: 'object',\n    nullable: true,\n    required: [],\n    additionalProperties: false,\n    patternProperties: {\n        [keyPattern]: {\n            type: 'object',\n            properties: {\n                context: { type: 'object', nullable: true },\n                type: {\n                    type: 'string',\n                },\n                options: {\n                    type: 'object',\n                    nullable: true,\n                },\n                encoding: {\n                    type: 'object',\n                    nullable: true,\n                },\n                dataSources: {\n                    type: 'object',\n                    nullable: true,\n                    required: [],\n                    patternProperties: {\n                        [keyPattern]: { type: 'string' },\n                    },\n                },\n                title: {\n                    type: 'string',\n                    nullable: true,\n                },\n                eventHandlers: eventHandlerSchema,\n            },\n            required: ['type'],\n            additionalProperties: false,\n        },\n    },\n};\n\nconst layoutSchema: NullableSchema<LayoutDefinition> = {\n    type: 'object',\n    nullable: true,\n    required: ['type'],\n    additionalProperties: false,\n    properties: {\n        type: {\n            type: 'string',\n        },\n        options: {\n            type: 'object',\n            nullable: true,\n        },\n        globalInputs: {\n            type: 'array',\n            items: {\n                type: 'string',\n            },\n            nullable: true,\n        },\n        structure: {\n            type: 'array',\n            items: {\n                type: 'object',\n                nullable: true,\n                required: [],\n            },\n            nullable: true,\n        },\n    },\n};\n\nconst defaultsSchema: NullableSchema<DashboardDefaultsDefinition> = {\n    type: 'object',\n    nullable: true,\n    properties: {\n        inputs: {\n            type: 'object',\n            nullable: true,\n            required: [],\n        },\n        visualizations: {\n            type: 'object',\n            nullable: true,\n            required: [],\n            additionalProperties: false,\n        },\n        dataSources: {\n            type: 'object',\n            nullable: true,\n            required: [],\n            properties: {\n                global: {\n                    type: 'object',\n                    nullable: true,\n                },\n            },\n            patternProperties: {\n                [keyPattern]: {\n                    type: 'object',\n                    nullable: true,\n                },\n            },\n        },\n        tokens: {\n            type: 'object',\n            nullable: true,\n            required: [],\n            patternProperties: {\n                // namespaces\n                [keyPattern]: {\n                    type: 'object',\n                    required: [],\n                    patternProperties: {\n                        // tokens\n                        [keyPattern]: {\n                            type: 'object',\n                            required: ['value'],\n                            properties: {\n                                value: {\n                                    type: 'string',\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\n\n// note, this alone doesn't provide precise schema validation, it is best to use the createSchemaBasedOnPresets().\nconst defaultDashboardSchema: JSONSchemaType<DashboardJSON> = {\n    $id: 'http://www.splunk.com/dashboard.schema.json',\n    title: 'Dashboard Definition',\n    description: 'Dashboard Definition',\n    type: 'object',\n    properties: {\n        version: {\n            type: 'string',\n            nullable: true,\n        },\n        title: {\n            type: 'string',\n            nullable: true,\n        },\n        description: {\n            type: 'string',\n            nullable: true,\n        },\n        dataSources: dataSourcesSchema,\n        visualizations: visualizationsSchema,\n        inputs: inputsSchema,\n        defaults: defaultsSchema,\n        layout: layoutSchema,\n    },\n    required: [],\n};\n\n/**\n * create new schema\n * @method createMonacoSchema\n * @param {Object} config\n * @param {Object} config.newSchema\n * @param {String} config.modelUri\n * @returns {Object} monaco schema\n */\nexport const createMonacoSchema = ({\n    newSchema = {},\n    modelUri,\n}: {\n    newSchema?: Record<string, unknown>;\n    modelUri: string;\n}): Record<string, unknown>[] => {\n    const finalSchema = isEmpty(newSchema) ? defaultDashboardSchema : newSchema;\n    return [\n        {\n            // made up fake uri\n            uri: 'http://splunk/json-schema.json',\n            fileMatch: [modelUri],\n            schema: finalSchema,\n        },\n    ];\n};\n\ntype ComponentDictionary = Record<string, Record<string, unknown> | undefined>;\n\n/**\n * combine schemas for the same type\n * @method combineSchema\n * @param {Object} componentDict {type : optionSchema}\n * @param {Boolean} [additionalProperties=true] allow extra properties in options object\n * @returns {array} allOf statement of if else statements\n */\nexport const combineSchema = (\n    componentDict: ComponentDictionary,\n    additionalProperties = true\n): Record<string, unknown>[] => {\n    const allOfStatement: Record<string, unknown>[] = [];\n    each(componentDict, (optionSchema, type) => {\n        if (!isEmpty(optionSchema)) {\n            const statement = {\n                if: {\n                    properties: { type: { const: type } },\n                },\n                then: {\n                    properties: {\n                        // if the schema is extended beyond just a list of properties, use it instead\n                        options: optionSchema?.extend\n                            ? optionSchema.extend\n                            : {\n                                  type: 'object',\n                                  properties: optionSchema,\n                                  // TODO: Revisit additionalProperties to disallow unknown keys as a warning\n                                  additionalProperties,\n                              },\n                    },\n                },\n            };\n            allOfStatement.push(statement);\n        }\n    });\n    return allOfStatement;\n};\n\n/**\n * @method createSchemaBasedOnDicts\n * @param {Object} config\n * @param {Object} layoutDict {type : optionSchema}\n * @param {Object} dataSourceDict {type : optionSchema}\n * @param {Object} visualizationDict {type : optionSchema}\n * @param {Object} inputDict {type : optionSchema}\n * @returns {Object} schema\n */\nexport const createSchemaBasedOnDicts = ({\n    layoutDict = {},\n    dataSourceDict = {},\n    visualizationDict = {},\n    inputDict = {},\n}: {\n    layoutDict?: ComponentDictionary;\n    dataSourceDict?: ComponentDictionary;\n    visualizationDict?: ComponentDictionary;\n    inputDict?: ComponentDictionary;\n}): JSONSchemaType<DashboardJSON> => {\n    const layoutAllOfStatement = combineSchema(layoutDict);\n    const dataSourceAllOfStatement = combineSchema(dataSourceDict);\n    const visualizationAllOfStatement = combineSchema(visualizationDict);\n    const inputAllOfStatement = combineSchema(inputDict, false);\n    const newSchema = cloneDeep(defaultDashboardSchema);\n    if (!isEmpty(layoutDict)) {\n        set(\n            newSchema,\n            'properties.layout.properties.type.enum',\n            Object.keys(layoutDict)\n        );\n    }\n    if (!isEmpty(layoutAllOfStatement)) {\n        set(newSchema, 'properties.layout.allOf', layoutAllOfStatement);\n    }\n\n    if (!isEmpty(inputDict)) {\n        set(\n            newSchema,\n            [\n                'properties',\n                'inputs',\n                'patternProperties',\n                keyPattern,\n                'properties',\n                'type',\n                'enum',\n            ],\n            Object.keys(inputDict)\n        );\n    }\n    if (!isEmpty(inputAllOfStatement)) {\n        set(\n            newSchema,\n            ['properties', 'inputs', 'patternProperties', keyPattern, 'allOf'],\n            inputAllOfStatement\n        );\n    }\n\n    if (!isEmpty(visualizationDict)) {\n        set(\n            newSchema,\n            [\n                'properties',\n                'visualizations',\n                'patternProperties',\n                keyPattern,\n                'properties',\n                'type',\n                'enum',\n            ],\n            Object.keys(visualizationDict)\n        );\n\n        // caveat1: preset is provided at runtime, thus there's no way to let it perfectly match DashboardJSON at compile time. So we put a vague schema into /defaults/visualizations in the defaultDashboardSchema, and modify it at runtime based on the preset.\n        // caveat2: `global` cannot be specified at compile time because of AJV limitation https://github.com/ajv-validator/ajv/issues/1588\n        // caveat3: use lodash get/set to workaround the typechecking\n        set(\n            newSchema,\n            [\n                'properties',\n                'defaults',\n                'properties',\n                'visualizations',\n                'properties',\n                'global',\n            ],\n            {\n                type: 'object',\n                nullable: true,\n                additionalProperties: false,\n                properties: {\n                    context: {\n                        type: 'object',\n                        nullable: true,\n                    },\n                    showLastUpdated: {\n                        type: 'boolean',\n                        default: false,\n                        nullable: true,\n                    },\n                    showProgressBar: {\n                        type: 'boolean',\n                        default: false,\n                        nullable: true,\n                    },\n                },\n            }\n        );\n        Object.entries(visualizationDict).forEach(([key, optionsSchema]) =>\n            set(\n                newSchema,\n                [\n                    'properties',\n                    'defaults',\n                    'properties',\n                    'visualizations',\n                    'properties',\n                    key,\n                ],\n                {\n                    type: 'object',\n                    nullable: true,\n                    additionalProperties: false,\n                    properties: {\n                        context: {\n                            type: 'object',\n                            nullable: true,\n                        },\n                        showLastUpdated: {\n                            type: 'boolean',\n                            default: false,\n                            nullable: true,\n                        },\n                        showProgressBar: {\n                            type: 'boolean',\n                            default: false,\n                            nullable: true,\n                        },\n                        options: {\n                            type: 'object',\n                            properties: optionsSchema,\n                            nullable: true,\n                            additionalProperties: false,\n                        },\n                    },\n                }\n            )\n        );\n    }\n    if (!isEmpty(visualizationAllOfStatement)) {\n        set(\n            newSchema,\n            [\n                'properties',\n                'visualizations',\n                'patternProperties',\n                keyPattern,\n                'allOf',\n            ],\n            visualizationAllOfStatement\n        );\n    }\n\n    if (!isEmpty(dataSourceDict)) {\n        set(\n            newSchema,\n            [\n                'properties',\n                'dataSources',\n                'patternProperties',\n                keyPattern,\n                'properties',\n                'type',\n                'enum',\n            ],\n            Object.keys(dataSourceDict)\n        );\n    }\n    if (!isEmpty(dataSourceAllOfStatement)) {\n        set(\n            newSchema,\n            [\n                'properties',\n                'dataSources',\n                'patternProperties',\n                keyPattern,\n                'allOf',\n            ],\n            dataSourceAllOfStatement\n        );\n    }\n    return newSchema;\n};\n\n/**\n * create component dictionary based on preset\n * @method createComponentDict\n * @param {Object} preset\n * @returns {Object} component object {type : optionSchema}\n */\nexport const createComponentDict = (preset: Preset): ComponentDictionary => {\n    const componentDict: ComponentDictionary = {};\n    each(preset, (component, type) => {\n        componentDict[type] =\n            component?.config?.optionsSchema || component?.schema;\n    });\n    return componentDict;\n};\n\n/**\n * create schema based on presets\n * @method createSchemaBasedOnPresets\n * @param {Object} presets combined with all custom presets\n * @returns {Object} schema\n */\nexport const createSchemaBasedOnPresets = (\n    presets: Record<string, Preset>\n): ReturnType<typeof createSchemaBasedOnDicts> => {\n    const layoutDict = createComponentDict(presets.layouts);\n    const dataSourceDict = createComponentDict(presets.dataSources);\n    const visualizationDict = createComponentDict(presets.visualizations);\n    const inputDict = createComponentDict(presets.inputs);\n    return createSchemaBasedOnDicts({\n        layoutDict,\n        dataSourceDict,\n        visualizationDict,\n        inputDict,\n    });\n};\nexport default defaultDashboardSchema;\n","module.exports = require(\"lodash/set\");","import cloneDeep from 'lodash/cloneDeep';\nimport each from 'lodash/each';\nimport find from 'lodash/find';\nimport omit from 'lodash/omit';\nimport get from 'lodash/get';\nimport isString from 'lodash/isString';\nimport isEmpty from 'lodash/isEmpty';\nimport isPlainObject from 'lodash/isPlainObject';\nimport isEqual from 'lodash/isEqual';\nimport defaultsDeep from 'lodash/defaultsDeep';\nimport memoize from 'lodash/memoize';\nimport keyBy from 'lodash/keyBy';\nimport pickBy from 'lodash/pickBy';\nimport { uniqueId } from '@splunk/dashboard-utils/uniqueId';\nimport {\n    computeNewAbsoluteStructureItem,\n    computeNewGridStructureItem,\n    DEFAULT_CANVAS_HEIGHT,\n    DEFAULT_CANVAS_WIDTH,\n} from '@splunk/dashboard-utils/layout';\nimport { MAX_CHAIN_LENGTH } from '@splunk/dashboard-utils/search';\nimport { hashString, deepMergeWithDefaults } from '@splunk/dashboard-utils';\nimport { _ } from '@splunk/ui-utils/i18n';\nimport type {\n    AbsoluteBlockItem,\n    ConnectedLineItem,\n    DashboardDefaultsDefinition,\n    DashboardJSON,\n    DataSourceBindingMap,\n    DataSourceDefinition,\n    DataSourceOptions,\n    EventHandlerDefinition,\n    InputDefinition,\n    InputOptions,\n    LayoutDefinition,\n    LayoutOptions,\n    ResolvedTokenNamespaces,\n    RootDataSourcesDefinition,\n    RootVisualizationsDefinition,\n    StructureItem,\n    TimeRange,\n    VisualizationDefinition,\n    VizContract,\n} from '@splunk/dashboard-types';\nimport Ajv from 'ajv';\nimport type { ErrorObject, ValidateFunction, JSONSchemaType } from 'ajv';\nimport { compare } from 'fast-json-patch';\nimport schema from './DashboardSchema';\n\ntype ValidationErrors = Partial<ErrorObject>[];\n\ninterface UpdateDashboardArgs {\n    title?: string;\n    desc?: string;\n}\ntype CollectionType = 'visualizations' | 'dataSources' | 'inputs';\ninterface NewDataSourceConnectionArgs {\n    dataSourceType: string;\n    dataSourceDefinition: DataSourceDefinition;\n}\ninterface ConnectNewDataSourceToVisualizationArgs\n    extends NewDataSourceConnectionArgs {\n    vizId: string;\n}\ninterface ConnectNewDataSourceToInputArgs extends NewDataSourceConnectionArgs {\n    inputId: string;\n}\ninterface ConnectNewDataSourceToItemArgs extends NewDataSourceConnectionArgs {\n    itemId: string;\n}\ninterface ExistingDataSourceConnectionArgs {\n    dataSourceType: string;\n    dataSourceId: string;\n}\ninterface DataSourceToVisualizationArgs\n    extends ExistingDataSourceConnectionArgs {\n    vizId: string;\n}\ninterface DataSourceToInputArgs extends ExistingDataSourceConnectionArgs {\n    inputId: string;\n}\ninterface DataSourceToItemArgs extends ExistingDataSourceConnectionArgs {\n    itemId: string;\n    type?: 'input' | 'block';\n}\ntype ChainSearchDefinitionList = {\n    id: string;\n    config: DataSourceDefinition | null;\n}[];\ninterface AddLayoutItemArgs {\n    visualizationId?: string;\n    vizContract?: VizContract;\n}\n\nconst generateUniqueId = (prefix: string) => `${prefix}_${uniqueId()}`;\nconst ajv = new Ajv({\n    allErrors: true,\n    // This is to make sure the definition `defaults` can have both `properties` and `patternProperties`\n    allowMatchingProperties: true,\n    // todo: lots of viz schemas violate this rule, will fix them later\n    allowUnionTypes: true,\n});\n\n// We hash the string representation of the the schema to use as the memoize resolver.\nconst memoizedCompile = memoize(\n    (newSchema) => {\n        // Prevent warnings when adding a new schema with the same id\n        if (ajv.getSchema(newSchema.$id)) {\n            ajv.removeSchema(newSchema.$id);\n        }\n        return ajv.compile(newSchema);\n    },\n    (newSchema) => hashString(JSON.stringify(newSchema))\n);\n\n/**\n * A utility module to convert layout structure from array to object in dashboard definition.\n * This module is needed when generating meaningful json patches.\n * @private\n * @param {Object} def dashboard definition json object\n */\nexport const normalizeLayoutStructure = (\n    def: DashboardJSON\n): Omit<DashboardJSON, 'layout'> & {\n    layout: { structure: Record<string, StructureItem> };\n} => {\n    const layout: LayoutDefinition = get(def, 'layout', {} as LayoutDefinition);\n    const structure: StructureItem[] = get(def, 'layout.structure', []);\n\n    // in absolute layout the layer is decided by the order in the array, so we need a temporary solution to reflect this info.\n    const structureWithExplicitLayers = structure.map((viz, index) => ({\n        ...viz,\n        layer: index,\n    }));\n\n    return {\n        ...def,\n        layout: {\n            ...layout,\n            structure: keyBy(structureWithExplicitLayers, 'item'),\n        },\n    };\n};\n\nexport const GLOBAL_TRP_TOKEN_NAME = 'global_time';\n\nexport const DEFAULT_DEFINITION: DashboardJSON = {\n    visualizations: {},\n    dataSources: {},\n    defaults: {\n        dataSources: {\n            global: {\n                options: {\n                    queryParameters: {\n                        latest: `$${GLOBAL_TRP_TOKEN_NAME}.latest$`,\n                        earliest: `$${GLOBAL_TRP_TOKEN_NAME}.earliest$`,\n                    },\n                },\n            },\n        },\n    },\n    inputs: {\n        input_global_trp: {\n            type: 'input.timerange',\n            options: {\n                token: `${GLOBAL_TRP_TOKEN_NAME}`,\n                defaultValue: '-24h@h,now',\n            },\n            title: _('Global Time Range'),\n        },\n    },\n    layout: {\n        type: 'absolute',\n        options: {},\n        structure: [],\n        globalInputs: ['input_global_trp'],\n    },\n};\n\n/**\n * Fetch a flattened set of global defaults for the given type\n * @param {Object} defaults The object containing default configurations\n * @param {String} type The type of dataSource to search for specific configurations\n * @returns {Object} Result of flattening global and specific configurations\n * @private\n */\nexport const getDefaultOptionsForDataSourceType = (\n    defaults?: DashboardDefaultsDefinition,\n    type?: string\n): DataSourceOptions => {\n    if (!defaults || !type) {\n        return {};\n    }\n\n    // Get the options that apply to all datasources\n    const globalOptions: DataSourceOptions = get(\n        defaults,\n        'dataSources.global.options',\n        {}\n    );\n\n    // Get type specific options\n    const typeSpecificOptions: DataSourceOptions = get(\n        defaults,\n        ['dataSources', type, 'options'],\n        {}\n    );\n\n    // merge global options onto specific options\n    const flattenedOptions: DataSourceOptions = defaultsDeep(\n        typeSpecificOptions,\n        globalOptions\n    );\n\n    // Don't include \"query\"\n    return omit(flattenedOptions, ['query']);\n};\n\n/**\n * Generate a unique id given a prefix and a search function to verify uniqueness\n * @param {String} prefix The prefix of the id (viz, ds, input, etc)\n * @param {Function} searchFn A function that can search the definition to detect if an id is used, default return first id\n * @returns {String} A \"guaranteed\" unique id\n */\nexport const generateId = (\n    prefix: string,\n    searchFn: (nextId: string) => unknown | null = () => false\n): string => {\n    let nextId = generateUniqueId(prefix);\n    while (searchFn(nextId)) {\n        nextId = generateUniqueId(prefix);\n    }\n    return nextId;\n};\n\n/**\n * Search for a key or string that matches the provided key\n * @param {Object} definition The haystack to search for an id in\n * @param {String} newId The key to search for\n * @returns {Boolean}\n */\nexport const hasDuplicateId = (\n    definition: DashboardJSON,\n    newId: string\n): boolean =>\n    // Wrap in quotes to look for keys and not substrings\n    JSON.stringify(definition).indexOf(`\"${newId}\"`) !== -1;\n\ntype VisualizationDefaults = Pick<\n    VisualizationDefinition,\n    'showLastUpdated' | 'showProgressBar' | 'context'\n>;\n\n/**\n * Obtain the global defaults for all visualizations\n * @param {DefinitionJSON.defaults} defaults The defaults configuration for the dashboard\n * @returns {Object} Shared context and flags\n */\nexport const getGlobalDefaultsForVisualizations = (\n    defaults: DashboardDefaultsDefinition\n): VisualizationDefaults => {\n    const { showProgressBar = false, showLastUpdated = false, context = {} } =\n        defaults?.visualizations?.global ?? {};\n\n    // Intentionally not allowing a shared options object for visualizations\n    return {\n        showProgressBar,\n        showLastUpdated,\n        context,\n    };\n};\n\ntype VisualizationTypeDefaults = Partial<VisualizationDefaults> & {\n    options?: Record<string, unknown>;\n};\n\n/**\n * Fetch the defaults for the given viz type. Note: this does not flatten with global defaults for all viz\n * @param {DashboardJSON.defaults} defaults Default configuration\n * @param {String} type The type of visualization\n * @return {Object} Shared context, options, and flags\n */\nexport const getDefaultsForVisualizationType = (\n    defaults: DashboardDefaultsDefinition,\n    type: string\n): VisualizationTypeDefaults => {\n    const { showProgressBar, showLastUpdated, context = {}, options = {} } =\n        defaults?.visualizations?.[type] ?? {};\n\n    const result: VisualizationTypeDefaults = { options, context };\n    // Do not add these flags to the viz defaults unless they are defined,\n    // we don't want to override the global defaults unless explicitly defined here\n    if (typeof showProgressBar === 'boolean') {\n        result.showProgressBar = showProgressBar;\n    }\n    if (typeof showLastUpdated === 'boolean') {\n        result.showLastUpdated = showLastUpdated;\n    }\n\n    return result;\n};\n\n/**\n * A dashboard definition helper class\n * @class DashboardDefinition\n */\nclass DashboardDefinition {\n    private definition: DashboardJSON;\n\n    // we initialize the property in the constructor by calling setSchema but obviously TypeScript doesn't understand it.\n    validateDefinition!: ValidateFunction;\n\n    /**\n     * Creates a new DashboardDefinition based on input def\n     * @method fromJSON\n     * @param {Object} [def] A dashboard definition\n     * @returns {DashboardDefinition}\n     * @static\n     */\n    static fromJSON(def: DashboardJSON = {}): DashboardDefinition {\n        return new DashboardDefinition(def);\n    }\n\n    /**\n     * @param {Object} dataSources Datasources from dashboard definition\n     * @param {Object} defaults Defaults from dashboard definition\n     * @return {Object} Flattened data sources with the default options.\n     */\n    static flattenDataSources(\n        dataSources: RootDataSourcesDefinition,\n        defaults: DashboardDefaultsDefinition\n    ): RootDataSourcesDefinition {\n        const flattenedGlobalOptions: DataSourceOptions = {};\n        const dataSourcesWithDefaults: RootDataSourcesDefinition = {};\n\n        // Loop through all datasources\n        each(dataSources, (dataSourceDef, dsId) => {\n            const dataSourceType = get(dataSourceDef, 'type');\n            const optionsCopy = cloneDeep(get(dataSourceDef, 'options'));\n\n            // memoize calculation of the defaults for a given type\n            if (!flattenedGlobalOptions[dataSourceType]) {\n                flattenedGlobalOptions[\n                    dataSourceType\n                ] = getDefaultOptionsForDataSourceType(\n                    defaults,\n                    dataSourceType\n                );\n            }\n\n            const defaultOptions = flattenedGlobalOptions[dataSourceType];\n\n            // Merge specific options with flattened global defaults\n            dataSourcesWithDefaults[dsId] = {\n                ...dataSourceDef,\n                options: defaultsDeep(optionsCopy, defaultOptions),\n            };\n        });\n\n        return dataSourcesWithDefaults;\n    }\n\n    /**\n     * Returns a configuration for all visualizations with global defaults flattened in\n     * @param {Object} visualizations Visualizations from dashboard definition\n     * @param {Object} defaults Defaults from the dashboard definition\n     * @return {Object} Flattened visualizations with the global context, options, and flags\n     */\n    static flattenVisualizations(\n        visualizations: RootVisualizationsDefinition,\n        defaults: DashboardDefaultsDefinition\n    ): RootVisualizationsDefinition {\n        const vizTypeDefaults = new Map<string, VisualizationTypeDefaults>();\n        const globalDefaults = getGlobalDefaultsForVisualizations(defaults);\n        const flattenedVisualizations: RootVisualizationsDefinition = {};\n\n        each(visualizations, (vizDef, vizId) => {\n            if (!vizTypeDefaults.has(vizDef.type)) {\n                const typeDefaults = getDefaultsForVisualizationType(\n                    defaults,\n                    vizDef.type\n                );\n                vizTypeDefaults.set(vizDef.type, typeDefaults);\n            }\n            const vizDefaults = vizTypeDefaults.get(vizDef.type);\n            // deeply cascade settings with the precedent order highest to lowest of vizDef, vizTypeDefault, vizGlobalDefault\n            flattenedVisualizations[vizId] = defaultsDeep(\n                {},\n                vizDef,\n                vizDefaults,\n                globalDefaults\n            );\n        });\n\n        return flattenedVisualizations;\n    }\n\n    /**\n     * Creates a new DashboardDefinition based on input def\n     * @param {Object} [def] A dashboard definition\n     * @returns {DashboardDefinition}\n     * @constructor\n     */\n    constructor(def: DashboardJSON = {}) {\n        this.definition = def;\n        this.setSchema(schema);\n    }\n\n    /**\n     * set up customized schema\n     * @method setSchema\n     * @param {Object} newSchema\n     * @returns {Object} error\n     */\n    setSchema(newSchema: JSONSchemaType<DashboardJSON>): Error | null {\n        if (!newSchema.$id) {\n            return null;\n        }\n\n        try {\n            this.validateDefinition = memoizedCompile(newSchema);\n        } catch (error) {\n            return error as Error;\n        }\n        return null;\n    }\n\n    /**\n     * check duplication of inputs tokens\n     * @method checkDuplicateTokens\n     * @returns {Array} errors\n     */\n    checkDuplicateTokens(): ValidationErrors {\n        const cache: Record<string, string[]> = {};\n        const { inputs } = this.definition;\n        const errors: ValidationErrors = [];\n        each(inputs, (input, key) => {\n            const { token } = input.options || ({} as InputOptions);\n            if (token === undefined) {\n                // if there is no token provided\n                return;\n            }\n            if (token in cache) {\n                cache[token].push(key);\n            } else {\n                cache[token] = [key];\n            }\n        });\n        each(cache, (keys, token) => {\n            if (keys.length > 1) {\n                const lastKey = keys[keys.length - 1];\n                const msg = keys.slice(0, -1).join(', ');\n                errors.push({\n                    instancePath: _(\n                        'Error: Token duplicated across multiple inputs'\n                    ),\n                    message: _(\n                        `${msg} and ${lastKey} have the same token (${token})`\n                    ),\n                });\n            }\n        });\n\n        return errors;\n    }\n\n    checkVisualizationsInStructure(): ValidationErrors {\n        const seen = new Set<StructureItem['item']>();\n        const {\n            visualizations = {},\n            layout: { structure = [] } = {},\n        } = this.definition;\n\n        const errors: ValidationErrors = [];\n\n        each(structure as StructureItem[], (item, idx) => {\n            if (seen.has(item.item)) {\n                errors.push({\n                    instancePath: _(\n                        'Error: Visualization duplicated in layout structure'\n                    ),\n                    message: _(\n                        `Structure item ${idx} has the same key \"${item.item}\" as another structure item`\n                    ),\n                });\n            }\n            if (!isPlainObject(visualizations[item.item])) {\n                errors.push({\n                    instancePath: _(\n                        'Error: Visualization in layout structure does not exist'\n                    ),\n                    message: _(\n                        `Structure item ${idx} references a visualization \"${item.item}\" that does not exist`\n                    ),\n                });\n            }\n            seen.add(item.item);\n        });\n\n        Object.keys(visualizations).forEach((vizId) => {\n            if (!seen.has(vizId)) {\n                errors.push({\n                    instancePath: _(\n                        'Error: Visualization is not present in layout structure'\n                    ),\n                    message: _(\n                        `Visualization \"${vizId}\" is not present in Layout Structure`\n                    ),\n                });\n            }\n        });\n        return errors;\n    }\n\n    checkInputsInStructure(): ValidationErrors {\n        const {\n            inputs = {},\n            layout: { globalInputs = [] } = {},\n        } = this.definition;\n\n        const errors: ValidationErrors = [];\n\n        Object.keys(inputs).forEach((inputId) => {\n            if (!globalInputs.includes(inputId)) {\n                errors.push({\n                    instancePath: _(\n                        'Error: Input is not present in the global inputs structure'\n                    ),\n                    message: _(\n                        `Input \"${inputId}\" is defined but not used in the Global Inputs Structure`\n                    ),\n                });\n            }\n        });\n\n        each(globalInputs, (inputId, idx) => {\n            if (isEmpty(inputs[inputId])) {\n                errors.push({\n                    instancePath: _(\n                        'Error: Input in global input structure does not exist'\n                    ),\n                    message: _(\n                        `Input item ${idx} references an input \"${inputId}\" that does not exist`\n                    ),\n                });\n            }\n        });\n\n        return errors;\n    }\n\n    /**\n     * Validates the current definition\n     * @method validate\n     * @returns {Array} list of errors, or null\n     */\n    validate(): ErrorObject[] | ValidationErrors | null {\n        const valid = this.validateDefinition(this.definition);\n\n        if (!valid && this.validateDefinition?.errors?.length) {\n            return cloneDeep(this.validateDefinition.errors);\n        }\n\n        const res = [\n            ...this.checkDuplicateTokens(),\n            ...this.checkVisualizationsInStructure(),\n            ...this.checkInputsInStructure(),\n        ];\n\n        if (!isEmpty(res)) {\n            return res;\n        }\n\n        return null;\n    }\n\n    /**\n     * Update the dashboard title or description\n     * @method updateDashboard\n     * @param {String} title The new title\n     * @param {String} desc The new description\n     * @returns {DashboardDefinition}\n     */\n    updateDashboard({ title, desc }: UpdateDashboardArgs): DashboardDefinition {\n        if (isString(title)) {\n            this.definition = {\n                ...this.definition,\n                title: (title && title.trim()) || '',\n            };\n        }\n        if (desc) {\n            this.definition = {\n                ...this.definition,\n                description: desc,\n            };\n        }\n        return this;\n    }\n\n    /**\n     * Add a new datasource configuration\n     * @method addDataSource\n     * @param {String} dsId     The key to identify the datasource\n     * @param {Object} dsDef    The configuration\n     * @returns {DashboardDefinition}\n     */\n    addDataSource(\n        dsId: string,\n        dsDef?: DataSourceDefinition\n    ): DashboardDefinition {\n        if (!dsDef) {\n            return this;\n        }\n\n        this.definition = {\n            ...this.definition,\n            dataSources: {\n                ...this.definition.dataSources,\n                [dsId]: dsDef,\n            },\n        };\n        return this;\n    }\n\n    /**\n     * Add a visualization configuration to the definition\n     * @method addVisualization\n     * @param {String} vizId    The key to identify the vis\n     * @param {Object} vizDef   The configuration of the vis\n     * @returns {DashboardDefinition}\n     */\n    addVisualization(\n        vizId: string,\n        vizDef?: VisualizationDefinition\n    ): DashboardDefinition {\n        return this.updateVisualization(vizId, vizDef);\n    }\n\n    /**\n     * Add an input config to the definition\n     * @method addInput\n     * @param {String} inputId      Key to identify the input\n     * @param {Object} [inputDef]     The input config\n     * @returns {DashboardDefinition}\n     */\n    addInput(inputId: string, inputDef?: InputDefinition): DashboardDefinition {\n        // All inputs require type and options.token, set these if not provided\n        const token = get(inputDef, 'options.token', this.nextTokenId());\n        const type = get(inputDef, 'type', 'input.text');\n\n        this.definition = {\n            ...this.definition,\n            inputs: {\n                ...this.definition.inputs,\n                [inputId]: {\n                    ...inputDef,\n                    type,\n                    options: {\n                        ...inputDef?.options,\n                        token,\n                    },\n                },\n            },\n        };\n\n        return this;\n    }\n\n    /**\n     * Adds a new input to the global inputs array\n     * @param {String} inputId The id for the input\n     * @returns {DashboardDefinition}\n     */\n    addInputToLayout(inputId: string): DashboardDefinition {\n        const globalInputs = this.getGlobalInputs();\n        return this.updateGlobalInputs([...globalInputs, inputId]);\n    }\n\n    /**\n     * removes the input from the global inputs array\n     * @param {String} inputId The inputId to remove\n     * @returns {DashboardDefinition}\n     */\n    removeInputFromLayout(inputId: string): DashboardDefinition {\n        const filteredGlobalInputs = this.getGlobalInputs().filter(\n            (id) => id !== inputId\n        );\n        return this.updateGlobalInputs(filteredGlobalInputs);\n    }\n\n    /**\n     * Sets global inputs to passed array\n     * @param {String[]} newGlobalInputs Array of input ids\n     * @returns {DashboardDefinition}\n     */\n    updateGlobalInputs(newGlobalInputs: string[] = []): DashboardDefinition {\n        this.definition = {\n            ...this.definition,\n            layout: {\n                type: 'absolute', // overwritten by next line unless not defined\n                ...this.definition.layout,\n                globalInputs: newGlobalInputs,\n            },\n        };\n\n        return this;\n    }\n\n    /**\n     * Clones a datasource configuration\n     * @method cloneDataSource\n     * @param {String} dsId     Key to identify datasource\n     * @returns {String} The newly created DatasourceId\n     */\n    cloneDataSource(dsId: string): string | null {\n        let dsDefinition = this.getDataSource(dsId);\n\n        if (!dsDefinition) {\n            return null;\n        }\n\n        if (dsDefinition.name) {\n            dsDefinition = {\n                ...dsDefinition,\n                name: `Copy of ${dsDefinition.name}`,\n            };\n        }\n\n        const newDatasourceId = `${this.nextDataSourceId()}_${dsId}`;\n\n        this.addDataSource(newDatasourceId, dsDefinition);\n\n        return newDatasourceId;\n    }\n\n    /**\n     * Clones a Visualization configuration\n     * @method cloneVisualization\n     * @param {String} vizId     Key to identify Viz\n     * @param {String} newVizId  Key for new cloned Viz\n     * @returns {String} The newly created VizId\n     */\n    cloneVisualization(vizId: string, newVizId?: string): string | null {\n        if (!newVizId) {\n            return null;\n        }\n\n        const vizDef = this.getVisualization(vizId);\n\n        if (!vizDef) {\n            return null;\n        }\n\n        const newVizDef = {\n            ...vizDef,\n        };\n\n        if (!isEmpty(vizDef.dataSources)) {\n            const dataSources: DataSourceBindingMap = {};\n            each(vizDef.dataSources, (dataSourceId, dataSourceType) => {\n                if (this.getDataSource(dataSourceId)) {\n                    const newDatasourceId = this.cloneDataSource(\n                        dataSourceId\n                    ) as string;\n                    dataSources[dataSourceType] = newDatasourceId;\n                }\n            });\n            newVizDef.dataSources = dataSources;\n        }\n\n        this.addVisualization(newVizId, newVizDef);\n\n        return newVizId;\n    }\n\n    /**\n     * Removes a datasource configuration\n     * @method removeDataSource\n     * @param {String} dsId     Key to identify datasource\n     * @returns {DashboardDefinition}\n     */\n    removeDataSource(dsId: string): DashboardDefinition {\n        this.definition = {\n            ...this.definition,\n            dataSources: omit(this.definition.dataSources, [dsId]),\n        };\n        return this;\n    }\n\n    /**\n     * Removes a visualization configuration\n     * @method removeVisualization\n     * @param {String} vizId key to identify visualization\n     * @returns {DashboardDefinition}\n     */\n    removeVisualization(vizId: string): DashboardDefinition {\n        // TODO: also remove from structure?\n        this.definition = {\n            ...this.definition,\n            visualizations: omit(this.definition.visualizations, [vizId]),\n        };\n        return this;\n    }\n\n    /**\n     * Removes an input configuration\n     * @method removeInput\n     * @param {String} inputId key to identify input\n     * @returns {DashboardDefinition}\n     */\n    removeInput(inputId: string): DashboardDefinition {\n        this.definition = {\n            ...this.definition,\n            inputs: omit(this.definition.inputs, [inputId]),\n        };\n        return this;\n    }\n\n    /**\n     * Update the layout to a different type\n     * @method updateLayoutType\n     * @param {String} type     Layout type, e.g. grid, absolute\n     * @returns {DashboardDefinition}\n     */\n    updateLayoutType(type: string): DashboardDefinition {\n        this.definition = {\n            ...this.definition,\n            layout: {\n                ...this.definition.layout,\n                type,\n            },\n        };\n        return this;\n    }\n\n    /**\n     * Replaces current layout options config\n     * @method updateLayoutOptions\n     * @param {Object} layoutOptions Options object to replace existing def\n     * @returns {DashboardDefinition}\n     */\n    updateLayoutOptions(layoutOptions: LayoutOptions): DashboardDefinition {\n        this.definition = {\n            ...this.definition,\n            layout: {\n                type: 'absolute', // overwritten by next line if defined\n                ...this.definition.layout,\n                options: layoutOptions,\n            },\n        };\n        return this;\n    }\n\n    /**\n     * Replace current structure with a new one\n     * @method updateLayoutStructure\n     * @param {Array} newStructure List of vis layout item position data\n     * @returns {DashboardDefinition}\n     */\n    updateLayoutStructure(newStructure: unknown): DashboardDefinition {\n        this.definition = {\n            ...this.definition,\n            layout: {\n                type: 'absolute',\n                ...this.definition.layout,\n                structure: newStructure,\n            },\n        };\n        return this;\n    }\n\n    /**\n     * Replace a visualization config\n     * @method updateVisualization\n     * @param {String} vizId  key to identify vis\n     * @param {Object} vizDef Visualization definition\n     * @returns {DashboardDefinition}\n     */\n    updateVisualization(\n        vizId: string,\n        vizDef?: VisualizationDefinition\n    ): DashboardDefinition {\n        if (!vizDef) {\n            return this;\n        }\n\n        this.definition = {\n            ...this.definition,\n            visualizations: {\n                ...this.definition.visualizations,\n                [vizId]: vizDef,\n            },\n        };\n        return this;\n    }\n\n    /**\n     * Replaces existing datasource config\n     * @method updateDataSource\n     * @param {String} dsId     key to identify datasource\n     * @param {Object} [dsDef]    The datasource definition\n     * @returns {DashboardDefinition}\n     */\n    updateDataSource(\n        dsId: string,\n        dsDef?: DataSourceDefinition\n    ): DashboardDefinition {\n        if (\n            !dsDef ||\n            isEqual(dsDef, get(this.definition, ['dataSources', dsId]))\n        ) {\n            // if the config is the same, don't create a new definition\n            return this;\n        }\n        this.definition = {\n            ...this.definition,\n            dataSources: {\n                ...this.definition.dataSources,\n                [dsId]: dsDef,\n            },\n        };\n        return this;\n    }\n\n    /**\n     * Replaces existing input config\n     * @method updateInput\n     * @param {String} inputId key to identify input\n     * @param {Object} inputDef New input config\n     * @returns {DashboardDefinition}\n     */\n    updateInput(\n        inputId: string,\n        inputDef?: InputDefinition\n    ): DashboardDefinition {\n        if (!inputDef) {\n            return this;\n        }\n\n        this.definition = {\n            ...this.definition,\n            inputs: {\n                ...this.definition.inputs,\n                [inputId]: inputDef,\n            },\n        };\n        return this;\n    }\n\n    /**\n     * Return the JSON representation of the dashboard\n     * @method toJSON\n     * @returns {Object}\n     */\n    toJSON(): DashboardJSON {\n        return this.definition;\n    }\n\n    /**\n     * Get the current layout structure\n     * @method getLayoutStructure\n     * @returns {Array} The current structure\n     */\n    getLayoutStructure(): unknown[] {\n        const structure = get(this.definition, 'layout.structure');\n\n        return Array.isArray(structure) ? structure : [];\n    }\n\n    /**\n     * return current layout type\n     */\n    getLayoutType(): string {\n        return get(this.definition, 'layout.type');\n    }\n\n    /**\n     * Return the current options for the layout\n     * @method getLayoutOptions\n     * @returns {Object}\n     */\n    getLayoutOptions(): LayoutOptions {\n        return get(this.definition, 'layout.options') || {};\n    }\n\n    /**\n     * Fetch the current definition for a visualization by id\n     * @method getVisualization\n     * @param {String} visId    The identifier for the vis\n     * @returns {Object} The vis definition, or null if not found\n     */\n    getVisualization(visId: string): VisualizationDefinition | null {\n        return get(this.definition, `visualizations[\"${visId}\"]`, null);\n    }\n\n    /**\n     * Fetch the current definition for a visualization by id with all the global defaults flattened in\n     * @param {String} vizId The identifier for the visualization\n     * @returns {Object} The viz definition, or null if not found.\n     */\n    getVisualizationWithFlattenedDefaults(\n        vizId: string\n    ): VisualizationDefinition | null {\n        const vizDef = this.getVisualization(vizId);\n        if (!vizDef) {\n            return null;\n        }\n        const defaults = this.getDefaults();\n        const globalDefaults = getGlobalDefaultsForVisualizations(defaults);\n        const typeDefaults = getDefaultsForVisualizationType(\n            defaults,\n            vizDef.type\n        );\n\n        return deepMergeWithDefaults(vizDef, typeDefaults, globalDefaults);\n    }\n\n    /**\n     * Fetch all the visualization ids\n     * @method getVisualizationIds\n     * @returns {Array} All the Viz Ids\n     */\n    getVisualizationIds(): string[] {\n        return Object.keys(get(this.definition, 'visualizations', {}));\n    }\n\n    /**\n     * Fetch the current definition for a datasource by id\n     * @param {String} dsId\n     * @returns {Object} The datasource definition, or null if not found\n     */\n    getDataSource(dsId: string): DataSourceDefinition | null {\n        return get(this.definition, `dataSources[\"${dsId}\"]`, null);\n    }\n\n    /**\n     * Returns true if datasource can be a base datasource for a chain datasource\n     * @param {String} dsId\n     * @param {Number} count\n     * @returns {Boolean}\n     */\n    canBeBaseDataSource(dsId: string, count = 0): boolean {\n        const parentDsId = get(this.getDataSource(dsId), 'options.extend', '');\n        const isValidLength = count < MAX_CHAIN_LENGTH;\n        return parentDsId && isValidLength\n            ? this.canBeBaseDataSource(parentDsId, count + 1)\n            : isValidLength;\n    }\n\n    /**\n     * Returns datasources which can be a base datasource for a chain datasource\n     * @returns {Object} Map of objects of form { dataSourceId: dataSourceDefinition }\n     */\n    getBaseDataSources(): RootDataSourcesDefinition {\n        const dataSources = get(this.definition, 'dataSources', {});\n        return pickBy(dataSources, (dsDef, dsId) =>\n            this.canBeBaseDataSource(dsId)\n        );\n    }\n\n    /**\n     * Fetch the default options for a datasource by id\n     * @param {String} dsId\n     * @returns {Object} The datasource default options\n     */\n    getDataSourceDefaultOptions(dsId: string): DataSourceOptions | null {\n        const dataSourceType = get(this.getDataSource(dsId), 'type');\n\n        return dataSourceType\n            ? getDefaultOptionsForDataSourceType(\n                  this.getDefaults(),\n                  dataSourceType\n              )\n            : null;\n    }\n\n    /**\n     * Get an input configuration for the provided id\n     * @param {String} inputId The id for the desired input\n     * @returns {Object} Returns config or null if not found\n     */\n    getInput(inputId: string): InputDefinition | null {\n        return get(this.definition, ['inputs', inputId], null);\n    }\n\n    /**\n     * Get the list of displayed inputs in the global input area\n     * @returns {String[]}\n     */\n    getGlobalInputs(): string[] {\n        // Return a copy of the array, so it can't be accidentally mutated\n        return get(this.definition, 'layout.globalInputs', []).slice();\n    }\n\n    /**\n     * Get an input that uses the provided token\n     * @param {String} tokenId The token to look for\n     * @returns {Object} The config for the first input that sets data with the provided token\n     */\n    getInputByToken(tokenId?: string): InputDefinition | null {\n        if (!tokenId) {\n            return null;\n        }\n\n        const inputs = get(this.definition, 'inputs');\n\n        return (\n            find(\n                inputs,\n                (config) => get(config, 'options.token') === tokenId\n            ) || null\n        );\n    }\n\n    /**\n     * Get the type for the given visualization\n     * @method getVisualizationType\n     * @param {String} visId key to identify visualization\n     * @returns {String}\n     */\n    getVisualizationType(visId: string): VisualizationDefinition | null {\n        return get(this.definition, `visualizations[\"${visId}\"].type`) || null;\n    }\n\n    /**\n     * return event handler array\n     * @param {String} hostId node id, can be searchId, vizId or inputId\n     * @param {String} [type='visualizations'] can be visualizations, dataSources or inputs\n     */\n    getEventHandlers(\n        hostId?: string,\n        type: CollectionType = 'visualizations'\n    ): EventHandlerDefinition[] {\n        if (!hostId) {\n            return [];\n        }\n\n        const host = get(this.definition, [type, hostId], null);\n        return (\n            (host && Array.isArray(host.eventHandlers) && host.eventHandlers) ||\n            []\n        );\n    }\n\n    /**\n     *\n     * @param {String} hostId node id, can be search id, viz id or input id\n     * @param {Object} handler eventhandler\n     * @param {String} [type='visualizations'] can be visualizations, dataSources or inputs\n     */\n    createEventHandler(\n        hostId: string,\n        handler: EventHandlerDefinition,\n        type: CollectionType = 'visualizations'\n    ): DashboardDefinition {\n        const host = get(this.definition, [type, hostId], null);\n        if (host == null) {\n            return this;\n        }\n        const eventHandlers = [...this.getEventHandlers(hostId, type), handler];\n        this.definition = {\n            ...this.definition,\n            [type]: {\n                ...this.definition[type],\n                [hostId]: {\n                    ...this.definition[type]?.[hostId],\n                    eventHandlers,\n                },\n            },\n        };\n        return this;\n    }\n\n    /**\n     *\n     * @param {String} hostId node id, can be search id, viz id or input id\n     * @param {Number} handlerIdx handler index\n     * @param {String} [type='visualizations'] can be visualizations, dataSources or inputs\n     */\n    removeEventHandler(\n        hostId: string,\n        handlerIdx = 0,\n        type: CollectionType = 'visualizations'\n    ): DashboardDefinition {\n        const host = get(this.definition, [type, hostId], null);\n        if (host == null) {\n            return this;\n        }\n        const eventHandlers = [...this.getEventHandlers(hostId, type)];\n        // delete 1 element at handlerIdx\n        eventHandlers.splice(handlerIdx, 1);\n        this.definition = {\n            ...this.definition,\n            [type]: {\n                ...this.definition[type],\n                [hostId]: {\n                    ...this.definition[type]?.[hostId],\n                    eventHandlers,\n                },\n            },\n        };\n        return this;\n    }\n\n    /**\n     *\n     * @param {String} hostId node id, can be search id, viz id or input id\n     * @param {Number} [handlerIdx=0] handler index\n     * @param {Object} [handler={}] new handler\n     * @param {String} [type='visualizations'] can be visualizations, dataSources or inputs\n     */\n    editEventHandler(\n        hostId: string,\n        handlerIdx = 0,\n        handler: EventHandlerDefinition = {} as EventHandlerDefinition,\n        type: CollectionType = 'visualizations'\n    ): DashboardDefinition {\n        const host = get(this.definition, [type, hostId], null);\n        if (host == null) {\n            return this;\n        }\n        const eventHandlers = [...this.getEventHandlers(hostId, type)];\n        if (handlerIdx >= 0 && handlerIdx <= eventHandlers.length - 1) {\n            eventHandlers[handlerIdx] = handler;\n            this.definition = {\n                ...this.definition,\n                [type]: {\n                    ...this.definition[type],\n                    [hostId]: {\n                        ...this.definition[type]?.[hostId],\n                        eventHandlers,\n                    },\n                },\n            };\n        }\n        return this;\n    }\n\n    /**\n     * connect a visualization with new datasource\n     * @param {Object} params\n     * @param {String} params.vizId visualization id\n     * @param {String} params.dataSourceType dataSource binding type such as primary, annotation\n     * @param {Object} params.dataSourceDefinition dataSource definition\n     */\n    connectNewDataSourceToVisualization({\n        vizId,\n        dataSourceType,\n        dataSourceDefinition,\n    }: ConnectNewDataSourceToVisualizationArgs): DashboardDefinition {\n        const dataSourceId = this.nextDataSourceId();\n        this.addDataSource(dataSourceId, dataSourceDefinition);\n        this.connectDataSourceToVisualization({\n            vizId,\n            dataSourceType,\n            dataSourceId,\n        });\n        return this;\n    }\n\n    /**\n     * connect an input with new datasource\n     * @param {Object} params\n     * @param {String} params.inputId inputId id\n     * @param {String} params.dataSourceType dataSource binding type such as primary, annotation\n     * @param {Object} params.dataSourceDefinition dataSource definition\n     */\n    connectNewDataSourceToInput({\n        inputId,\n        dataSourceType,\n        dataSourceDefinition,\n    }: ConnectNewDataSourceToInputArgs): DashboardDefinition {\n        const dataSourceId = this.nextDataSourceId();\n        this.addDataSource(dataSourceId, dataSourceDefinition);\n        this.connectDataSourceToInput({\n            inputId,\n            dataSourceType,\n            dataSourceId,\n        });\n        return this;\n    }\n\n    /**\n     * connect an item with a new datasource\n     * @param {Object} params\n     * @param {String} params.itemId item id\n     * @param {String} params.dataSourceType dataSource binding type such as primary, annotation\n     * @param {Object} params.dataSourceDefinition dataSource definition\n     */\n    connectNewDataSourceToItem({\n        itemId,\n        dataSourceType,\n        dataSourceDefinition,\n    }: ConnectNewDataSourceToItemArgs): DashboardDefinition {\n        const itemType = this.getItemType(itemId);\n        return itemType === 'input'\n            ? this.connectNewDataSourceToInput({\n                  inputId: itemId,\n                  dataSourceType,\n                  dataSourceDefinition,\n              })\n            : this.connectNewDataSourceToVisualization({\n                  vizId: itemId,\n                  dataSourceType,\n                  dataSourceDefinition,\n              });\n    }\n\n    /**\n     * connect a visualization with existing datasource\n     * @param {Object} params\n     * @param {String} params.vizId visualization id\n     * @param {String} params.dataSourceType dataSource binding type such as primary, annotation\n     * @param {String} params.dataSourceId existing datasource id\n     */\n    connectDataSourceToVisualization({\n        vizId,\n        dataSourceType,\n        dataSourceId,\n    }: DataSourceToVisualizationArgs): DashboardDefinition {\n        const visualization = this.getVisualization(vizId);\n        const dataSource = this.getDataSource(dataSourceId);\n        if (visualization && dataSource) {\n            this.updateVisualization(vizId, {\n                ...visualization,\n                dataSources: {\n                    ...visualization.dataSources,\n                    [dataSourceType]: dataSourceId,\n                },\n            });\n        }\n\n        return this;\n    }\n\n    /**\n     * connect an input with existing datasource\n     * @param {Object} params\n     * @param {String} params.inputId input id\n     * @param {String} params.dataSourceType dataSource binding type such as primary, annotation\n     * @param {String} params.dataSourceId existing datasource id\n     */\n    connectDataSourceToInput({\n        inputId,\n        dataSourceType,\n        dataSourceId,\n    }: DataSourceToInputArgs): DashboardDefinition {\n        const input = this.getInput(inputId);\n        const dataSource = this.getDataSource(dataSourceId);\n        if (input && dataSource) {\n            this.updateInput(inputId, {\n                ...input,\n                dataSources: {\n                    ...input.dataSources,\n                    [dataSourceType]: dataSourceId,\n                },\n            });\n        }\n\n        return this;\n    }\n\n    /**\n     * connect an item with existing datasource\n     * @param {Object} params\n     * @param {String} params.itemId item id\n     * @param {String} params.dataSourceType dataSource binding type such as primary, annotation\n     * @param {String} params.dataSourceId existing datasource id\n     * @param {String} [params.type=block] type of item such as 'block', 'input'\n     */\n    connectDataSourceToItem({\n        itemId,\n        dataSourceType,\n        dataSourceId,\n        type = 'block',\n    }: DataSourceToItemArgs): DashboardDefinition {\n        return type === 'input'\n            ? this.connectDataSourceToInput({\n                  inputId: itemId,\n                  dataSourceType,\n                  dataSourceId,\n              })\n            : this.connectDataSourceToVisualization({\n                  vizId: itemId,\n                  dataSourceType,\n                  dataSourceId,\n              });\n    }\n\n    /**\n     * disconnect a visualization from existing datasource\n     * @param {Object} params\n     * @param {String} params.vizId visualization id\n     * @param {String} params.dataSourceType dataSource binding type such as primary, annotation\n     * @param {String} params.dataSourceId existing datasource id\n     */\n    disconnectDataSourceFromVisualization({\n        vizId,\n        dataSourceType,\n        dataSourceId,\n    }: DataSourceToVisualizationArgs): DashboardDefinition {\n        const visualization = this.getVisualization(vizId);\n        if (visualization && visualization.dataSources) {\n            if (visualization.dataSources[dataSourceType] === dataSourceId) {\n                this.updateVisualization(vizId, {\n                    ...visualization,\n                    dataSources: omit(\n                        visualization.dataSources,\n                        dataSourceType\n                    ),\n                });\n            }\n        }\n        return this;\n    }\n\n    /**\n     * disconnect an input from existing datasource\n     * @param {Object} params\n     * @param {String} params.inputId input id\n     * @param {String} params.dataSourceType dataSource binding type such as primary, annotation\n     * @param {String} params.dataSourceId existing datasource id\n     */\n    disconnectDataSourceFromInput({\n        inputId,\n        dataSourceType,\n        dataSourceId,\n    }: DataSourceToInputArgs): DashboardDefinition {\n        const input = this.getInput(inputId);\n        if (input && input.dataSources) {\n            if (input.dataSources[dataSourceType] === dataSourceId) {\n                this.updateInput(inputId, {\n                    ...input,\n                    dataSources: omit(input.dataSources, dataSourceType),\n                });\n            }\n        }\n        return this;\n    }\n\n    /**\n     * disconnect item from an existing datasource\n     * @param {Object} params\n     * @param {String} params.itemId item id\n     * @param {String} params.dataSourceType dataSource binding type such as primary, annotation\n     * @param {String} params.dataSourceId existing datasource id\n     */\n    disconnectDataSourceFromItem({\n        itemId,\n        dataSourceType,\n        dataSourceId,\n    }: DataSourceToItemArgs): DashboardDefinition {\n        const itemType = this.getItemType(itemId);\n        return itemType === 'input'\n            ? this.disconnectDataSourceFromInput({\n                  inputId: itemId,\n                  dataSourceType,\n                  dataSourceId,\n              })\n            : this.disconnectDataSourceFromVisualization({\n                  vizId: itemId,\n                  dataSourceType,\n                  dataSourceId,\n              });\n    }\n\n    /**\n     * generate visualization id\n     */\n    nextVisualizationId(): string {\n        return generateId('viz', (id) => this.getVisualization(id));\n    }\n\n    /**\n     * generate datasource id\n     */\n    nextDataSourceId(): string {\n        return generateId('ds', (id) => this.getDataSource(id));\n    }\n\n    /**\n     * generate input id\n     */\n    nextInputId(): string {\n        return generateId('input', (id) => this.getInput(id));\n    }\n\n    /**\n     * generate token id\n     */\n    nextTokenId(prefix = 'token'): string {\n        return generateId(prefix, (id) => this.getInputByToken(id));\n    }\n\n    /**\n     * Returns the number of Visualizations using the Data Source with passed in dsId\n     * @method countVisualizationsUsingDataSource\n     * @param {String} dsId     Key to identify datasource\n     * @returns {Number}\n     */\n    countVisualizationsUsingDataSource(dsId: string): number {\n        const { visualizations = {} } = this.definition;\n        let visualizationUseCount = 0;\n        Object.keys(visualizations).forEach((vizId) => {\n            const dataSources: DataSourceBindingMap = get(\n                visualizations,\n                [vizId, 'dataSources'],\n                {}\n            );\n            Object.keys(dataSources).forEach((dataSourceType) => {\n                if (dataSources[dataSourceType] === dsId) {\n                    visualizationUseCount += 1;\n                }\n            });\n        });\n        return visualizationUseCount;\n    }\n\n    /**\n     * Returns the number of Inputs using the Data Source with passed in dsId\n     * @method countInputsUsingDataSource\n     * @param {String} dsId     Key to identify datasource\n     * @returns {Number}\n     */\n    countInputsUsingDataSource(dsId: string): number {\n        const { inputs = {} } = this.definition;\n        let inputUseCount = 0;\n        Object.keys(inputs).forEach((inputId) => {\n            const dataSources: DataSourceBindingMap = get(\n                inputs,\n                [inputId, 'dataSources'],\n                {}\n            );\n            Object.keys(dataSources).forEach((dataSourceType) => {\n                if (dataSources[dataSourceType] === dsId) {\n                    inputUseCount += 1;\n                }\n            });\n        });\n        return inputUseCount;\n    }\n\n    /**\n     * Returns the Data Sources of chain searches using the Data Source with passed in dsId\n     * @method getChainSearchesUsingDataSource\n     * @param {String} dsId     Key to identify datasource\n     * @param {Number} count     running count of current chain length\n     * @returns {Array} List of object of form { id: dsId, config: ds} which are descendants of Data Source with dsId with max length of MAX_CHAIN_LENGTH\n     */\n    getChainSearchesUsingDataSource(\n        dsId: string,\n        count = 0\n    ): ChainSearchDefinitionList {\n        const dataSources: RootDataSourcesDefinition = get(\n            this.definition,\n            'dataSources',\n            {}\n        );\n        const chainSearches: ChainSearchDefinitionList = [];\n        each(dataSources, (ds, id) => {\n            const parentId = get(ds, 'options.extend', '');\n            if (parentId === dsId && count < MAX_CHAIN_LENGTH) {\n                chainSearches.push(\n                    { id, config: this.getDataSource(id) },\n                    ...this.getChainSearchesUsingDataSource(id, count + 1)\n                );\n            }\n        });\n        return chainSearches;\n    }\n\n    /**\n     * Disconnects a dataSource from all visualizations and inputs in the definition\n     * @method disconnectDataSource\n     * @param {String} dataSourceId     Key to identify datasource\n     * @returns {DashboardDefinition}\n     */\n    disconnectDataSource(dataSourceId: string): DashboardDefinition {\n        const { visualizations = {}, inputs = {} } = this.definition;\n        Object.keys(visualizations).forEach((vizId) => {\n            const dataSources: DataSourceBindingMap = get(\n                visualizations,\n                [vizId, 'dataSources'],\n                {}\n            );\n            Object.keys(dataSources).forEach((dataSourceType) => {\n                this.disconnectDataSourceFromVisualization({\n                    vizId,\n                    dataSourceType,\n                    dataSourceId,\n                });\n            });\n        });\n        Object.keys(inputs).forEach((inputId) => {\n            const dataSources: DataSourceBindingMap = get(\n                inputs,\n                [inputId, 'dataSources'],\n                {}\n            );\n            Object.keys(dataSources).forEach((dataSourceType) => {\n                this.disconnectDataSourceFromInput({\n                    inputId,\n                    dataSourceType,\n                    dataSourceId,\n                });\n            });\n        });\n        return this;\n    }\n\n    /**\n     * Search for a key or string that matches the provided key\n     * @param {String} newId The key to search for\n     * @returns {Boolean}\n     */\n    hasDuplicateId(newId: string): boolean {\n        // Wrap in quotes to look for keys and not substrings\n        return hasDuplicateId(this.definition, newId);\n    }\n\n    /**\n     * Converts all instances of an old id to a new id\n     * @param {String} oldId The original string to replace\n     * @param {String} newId The new string to add\n     * @return {Boolean} To show success/fail\n     */\n    updateComponentId(oldId: string, newId: string): boolean {\n        if (\n            oldId === newId ||\n            !/^(viz|input|ds)_[a-zA-Z0-9-_]+$/.test(newId) ||\n            this.hasDuplicateId(newId) ||\n            !this.hasDuplicateId(oldId)\n        ) {\n            return false;\n        }\n\n        const stringDef = JSON.stringify(this.definition);\n        // Wrapping quotes around the dsId to make sure we target entire keys and not substrings\n        const re = new RegExp(`\"${oldId}\"`, 'g');\n        // Wrap newId with quotes to make sure we replace the ones we remove\n        this.definition = JSON.parse(stringDef.replace(re, `\"${newId}\"`));\n        return true;\n    }\n\n    /**\n     * Compare two definitions to generate json patches.\n     * @param {DashboardDefinition} other another instance of DashboardDefinition\n     * @returns {object[]}\n     */\n    compare(other: DashboardDefinition): ReturnType<typeof compare> {\n        return compare(\n            normalizeLayoutStructure(this.toJSON()),\n            normalizeLayoutStructure(other.toJSON())\n        );\n    }\n\n    /**\n     * Get the id of first time range input\n     * @public\n     */\n    getFirstTimeRangeInputId(): string {\n        return find(\n            get(this.definition, ['layout', 'globalInputs'], []),\n            // note: `input.timerange` is hardcoded, I can't think of a better way to determine what is a time range input\n            (inputId) =>\n                get(this.getInput(inputId), 'type') === 'input.timerange'\n        );\n    }\n\n    /**\n     * Get defaults\n     * @returns {Object} dashboard defaults\n     * @public\n     */\n    getDefaults(): DashboardDefaultsDefinition {\n        return get(this.definition, 'defaults', {});\n    }\n\n    /**\n     * Get default time range when create a new `ds.search` data source. The rule is:\n     * 1. use `defaults` section from the definition if available.\n     * 2. use the first time range input token if available\n     * 3. use static time range `Last 24 hours`\n     * @returns {Object} earliest and latest\n     */\n    getDefaultTimeRangeForNewSearch(): TimeRange {\n        const defaultOptions = getDefaultOptionsForDataSourceType(\n            this.getDefaults(),\n            'ds.search'\n        );\n        const defaultQueryParameters = get(\n            defaultOptions,\n            'queryParameters',\n            {}\n        ) as TimeRange;\n\n        // prefer definition defaults over hardcoded time range values\n        if (defaultQueryParameters.earliest || defaultQueryParameters.latest) {\n            return {} as TimeRange;\n        }\n\n        const timeRangeInputToken = get(\n            this.getInput(this.getFirstTimeRangeInputId()),\n            ['options', 'token']\n        );\n        // if there's at least one time range input, use it\n        if (timeRangeInputToken) {\n            return {\n                earliest: `$${timeRangeInputToken}.earliest$`,\n                latest: `$${timeRangeInputToken}.latest$`,\n            };\n        }\n\n        return {\n            earliest: '-24h@h',\n            latest: 'now',\n        };\n    }\n\n    /**\n     * Get the visualization layout type - block/line\n     * @method getVisualizationLayoutType\n     * @param {String} vizId Key to identify visualization\n     * @returns {String} The viz layout type - line/block, or block if type is not found\n     */\n    getVisualizationLayoutType(vizId: string): string {\n        const layoutStructure = this.getLayoutStructure() as StructureItem[];\n        const { type = 'block' } =\n            layoutStructure.find((viz) => viz.item === vizId) || {};\n        return type;\n    }\n\n    /**\n     * Get the item type - visualizations are of type 'block' and inputs are of type 'input'\n     * @method getItemType\n     * @param {String} itemId item id\n     * @returns {String} 'block' or 'input'\n     */\n    getItemType(itemId: string): 'input' | 'block' {\n        return this.getInput(itemId) ? 'input' : 'block';\n    }\n\n    /**\n     * Makes a best guess try to determine a good position for a new item in absolute/grid layouts\n     * @method addLayoutItem\n     * @param {Object} config\n     * @param {String} config.visualizationId The id for a visualization which already has a configuration in the definition\n     * @param {Object} config.vizContract Metadata defining the default size properties for a viz. Usually defined by presets.\n     */\n    addLayoutItem({\n        visualizationId,\n        vizContract,\n    }: AddLayoutItemArgs = {}): DashboardDefinition {\n        // Tell us what we are adding!\n        if (!visualizationId) {\n            throw new SyntaxError('No visualization id supplied');\n        }\n\n        // Check that this exists\n        const viz = this.getVisualization(visualizationId);\n        if (!viz) {\n            throw new ReferenceError('Visualization does not exist');\n        }\n\n        // Make sure we support this layout structure\n        const layoutType = this.getLayoutType();\n        if (layoutType !== 'grid' && layoutType !== 'absolute') {\n            throw new TypeError(`${layoutType} is not supported by this api`);\n        }\n\n        // Don't add the same thing to the structure twice\n        const layoutItems = this.getLayoutStructure() as AbsoluteBlockItem[];\n        if (layoutItems.find((li) => li.item === visualizationId)) {\n            throw new Error(\n                `${visualizationId} is already in the layout structure`\n            );\n        }\n\n        const layoutOptions = this.getLayoutOptions();\n        const canvasWidth = get(layoutOptions, 'width', DEFAULT_CANVAS_WIDTH);\n        let item: AbsoluteBlockItem | ConnectedLineItem | null = null;\n\n        if (layoutType === 'grid') {\n            item = computeNewGridStructureItem({\n                canvasWidth,\n                layoutItems,\n                itemId: visualizationId,\n            });\n        } else {\n            // No way around fetching the preset type for this. Lines are special.\n            const isLine = get(viz, 'type') === 'abslayout.line';\n            const canvasHeight = get(\n                layoutOptions,\n                'height',\n                DEFAULT_CANVAS_HEIGHT\n            );\n            item = computeNewAbsoluteStructureItem({\n                itemId: visualizationId,\n                type: isLine ? 'line' : 'block',\n                canvasWidth,\n                canvasHeight,\n                vizContract,\n                layoutItems,\n            });\n        }\n\n        this.updateLayoutStructure([...layoutItems, item]);\n\n        return this;\n    }\n\n    /**\n     * Parses out all static tokens defined in defaults, and removes any in reserved namespaces\n     * @param {Set} reservedNamespaces The list of namespaces the user may NOT override\n     * @returns {ResolvedTokenNamespaces} a tokenBinding\n     */\n    getDefaultStaticTokens(\n        reservedNamespaces = new Set<string>()\n    ): ResolvedTokenNamespaces {\n        const tokenDefaults = this.getDefaults()?.tokens;\n        const tokens: Record<string, Record<string, string>> = {};\n        if (!tokenDefaults) {\n            return tokens;\n        }\n\n        Object.keys(tokenDefaults).forEach((namespace) => {\n            if (!reservedNamespaces.has(namespace)) {\n                tokens[namespace] ??= {};\n                Object.keys(tokenDefaults[namespace]).forEach((token) => {\n                    if (\n                        typeof tokenDefaults[namespace][token].value ===\n                        'string'\n                    ) {\n                        // TODO: typescript is not figuring out types correctly here\n                        tokens[namespace][token] = tokenDefaults[namespace][\n                            token\n                        ].value as string;\n                    }\n                });\n            }\n        });\n\n        return tokens;\n    }\n}\n\nexport default DashboardDefinition;\n","module.exports = require(\"lodash/find\");","module.exports = require(\"lodash/omit\");","module.exports = require(\"lodash/get\");","module.exports = require(\"lodash/isString\");","module.exports = require(\"lodash/isPlainObject\");","module.exports = require(\"lodash/isEqual\");","module.exports = require(\"lodash/defaultsDeep\");","module.exports = require(\"lodash/memoize\");","module.exports = require(\"lodash/keyBy\");","module.exports = require(\"lodash/pickBy\");","module.exports = require(\"@splunk/dashboard-utils/uniqueId\");","module.exports = require(\"@splunk/dashboard-utils/layout\");","module.exports = require(\"@splunk/dashboard-utils/search\");","module.exports = require(\"@splunk/dashboard-utils\");","module.exports = require(\"@splunk/ui-utils/i18n\");","module.exports = require(\"ajv\");","module.exports = require(\"fast-json-patch\");"],"sourceRoot":""}