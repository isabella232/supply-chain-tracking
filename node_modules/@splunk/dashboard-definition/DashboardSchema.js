/*!
 * Copyright © 2020 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("lodash/cloneDeep");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("lodash/each");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("lodash/isEmpty");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSchemaBasedOnPresets = exports.createComponentDict = exports.createSchemaBasedOnDicts = exports.combineSchema = exports.createMonacoSchema = void 0;
var each_1 = __importDefault(__webpack_require__(1));
var isEmpty_1 = __importDefault(__webpack_require__(2));
var cloneDeep_1 = __importDefault(__webpack_require__(0));
var set_1 = __importDefault(__webpack_require__(4));
var keyPattern = '^[a-zA-Z0-9_-]*$';
var eventHandlerSchema = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            type: {
                type: 'string',
            },
            options: {
                type: 'object',
                nullable: true,
                properties: {
                    url: { type: 'string', nullable: true },
                    newTab: { type: 'boolean', nullable: true },
                    key: { type: 'string', nullable: true },
                    value: { type: 'string', nullable: true },
                    tokens: {
                        type: 'array',
                        nullable: true,
                        items: {
                            type: 'object',
                            properties: {
                                token: { type: 'string' },
                                key: {
                                    type: 'string',
                                    nullable: true,
                                    description: 'Fetches the data from the event using this key.',
                                },
                                value: {
                                    type: 'string',
                                    nullable: true,
                                    description: 'Specify a static value.',
                                },
                            },
                            required: ['token'],
                            oneOf: [
                                { required: ['key'] },
                                { required: ['value'] },
                            ],
                        },
                    },
                    tokenNamespace: { type: 'string', nullable: true },
                    events: {
                        type: 'array',
                        items: {
                            type: 'string',
                        },
                        nullable: true,
                    },
                },
            },
        },
        required: ['type'],
        additionalProperties: false,
    },
    nullable: true,
};
var dataSourcesSchema = {
    type: 'object',
    nullable: true,
    required: [],
    additionalProperties: false,
    patternProperties: (_a = {},
        _a[keyPattern] = {
            type: 'object',
            properties: {
                type: {
                    type: 'string',
                },
                options: {
                    type: 'object',
                    nullable: true,
                },
                // datasource name
                name: {
                    type: 'string',
                    nullable: true,
                },
                // some metadata for this data source
                meta: {
                    type: 'object',
                },
                extend: {
                    type: 'string',
                },
                eventHandlers: eventHandlerSchema,
            },
            required: ['type'],
            additionalProperties: false,
        },
        _a),
};
var visualizationsSchema = {
    type: 'object',
    required: [],
    nullable: true,
    additionalProperties: false,
    patternProperties: (_b = {},
        _b[keyPattern] = {
            type: 'object',
            properties: {
                context: { type: 'object', nullable: true },
                type: {
                    type: 'string',
                },
                options: {
                    type: 'object',
                    nullable: true,
                },
                encoding: {
                    type: 'object',
                    nullable: true,
                },
                dataSources: {
                    type: 'object',
                    patternProperties: (_c = {},
                        _c[keyPattern] = { type: 'string' },
                        _c),
                    required: [],
                    nullable: true,
                },
                eventHandlers: eventHandlerSchema,
                title: {
                    type: 'string',
                    nullable: true,
                },
                description: {
                    type: 'string',
                    nullable: true,
                },
                showProgressBar: {
                    type: 'boolean',
                    nullable: true,
                },
                showLastUpdated: {
                    type: 'boolean',
                    nullable: true,
                },
            },
            required: ['type'],
            additionalProperties: false,
        },
        _b),
};
var inputsSchema = {
    type: 'object',
    nullable: true,
    required: [],
    additionalProperties: false,
    patternProperties: (_d = {},
        _d[keyPattern] = {
            type: 'object',
            properties: {
                context: { type: 'object', nullable: true },
                type: {
                    type: 'string',
                },
                options: {
                    type: 'object',
                    nullable: true,
                },
                encoding: {
                    type: 'object',
                    nullable: true,
                },
                dataSources: {
                    type: 'object',
                    nullable: true,
                    required: [],
                    patternProperties: (_e = {},
                        _e[keyPattern] = { type: 'string' },
                        _e),
                },
                title: {
                    type: 'string',
                    nullable: true,
                },
                eventHandlers: eventHandlerSchema,
            },
            required: ['type'],
            additionalProperties: false,
        },
        _d),
};
var layoutSchema = {
    type: 'object',
    nullable: true,
    required: ['type'],
    additionalProperties: false,
    properties: {
        type: {
            type: 'string',
        },
        options: {
            type: 'object',
            nullable: true,
        },
        globalInputs: {
            type: 'array',
            items: {
                type: 'string',
            },
            nullable: true,
        },
        structure: {
            type: 'array',
            items: {
                type: 'object',
                nullable: true,
                required: [],
            },
            nullable: true,
        },
    },
};
var defaultsSchema = {
    type: 'object',
    nullable: true,
    properties: {
        inputs: {
            type: 'object',
            nullable: true,
            required: [],
        },
        visualizations: {
            type: 'object',
            nullable: true,
            required: [],
            additionalProperties: false,
        },
        dataSources: {
            type: 'object',
            nullable: true,
            required: [],
            properties: {
                global: {
                    type: 'object',
                    nullable: true,
                },
            },
            patternProperties: (_f = {},
                _f[keyPattern] = {
                    type: 'object',
                    nullable: true,
                },
                _f),
        },
        tokens: {
            type: 'object',
            nullable: true,
            required: [],
            patternProperties: (_g = {},
                // namespaces
                _g[keyPattern] = {
                    type: 'object',
                    required: [],
                    patternProperties: (_h = {},
                        // tokens
                        _h[keyPattern] = {
                            type: 'object',
                            required: ['value'],
                            properties: {
                                value: {
                                    type: 'string',
                                },
                            },
                        },
                        _h),
                },
                _g),
        },
    },
};
// note, this alone doesn't provide precise schema validation, it is best to use the createSchemaBasedOnPresets().
var defaultDashboardSchema = {
    $id: 'http://www.splunk.com/dashboard.schema.json',
    title: 'Dashboard Definition',
    description: 'Dashboard Definition',
    type: 'object',
    properties: {
        version: {
            type: 'string',
            nullable: true,
        },
        title: {
            type: 'string',
            nullable: true,
        },
        description: {
            type: 'string',
            nullable: true,
        },
        dataSources: dataSourcesSchema,
        visualizations: visualizationsSchema,
        inputs: inputsSchema,
        defaults: defaultsSchema,
        layout: layoutSchema,
    },
    required: [],
};
/**
 * create new schema
 * @method createMonacoSchema
 * @param {Object} config
 * @param {Object} config.newSchema
 * @param {String} config.modelUri
 * @returns {Object} monaco schema
 */
var createMonacoSchema = function (_a) {
    var _b = _a.newSchema, newSchema = _b === void 0 ? {} : _b, modelUri = _a.modelUri;
    var finalSchema = isEmpty_1.default(newSchema) ? defaultDashboardSchema : newSchema;
    return [
        {
            // made up fake uri
            uri: 'http://splunk/json-schema.json',
            fileMatch: [modelUri],
            schema: finalSchema,
        },
    ];
};
exports.createMonacoSchema = createMonacoSchema;
/**
 * combine schemas for the same type
 * @method combineSchema
 * @param {Object} componentDict {type : optionSchema}
 * @param {Boolean} [additionalProperties=true] allow extra properties in options object
 * @returns {array} allOf statement of if else statements
 */
var combineSchema = function (componentDict, additionalProperties) {
    if (additionalProperties === void 0) { additionalProperties = true; }
    var allOfStatement = [];
    each_1.default(componentDict, function (optionSchema, type) {
        if (!isEmpty_1.default(optionSchema)) {
            var statement = {
                if: {
                    properties: { type: { const: type } },
                },
                then: {
                    properties: {
                        // if the schema is extended beyond just a list of properties, use it instead
                        options: (optionSchema === null || optionSchema === void 0 ? void 0 : optionSchema.extend) ? optionSchema.extend
                            : {
                                type: 'object',
                                properties: optionSchema,
                                // TODO: Revisit additionalProperties to disallow unknown keys as a warning
                                additionalProperties: additionalProperties,
                            },
                    },
                },
            };
            allOfStatement.push(statement);
        }
    });
    return allOfStatement;
};
exports.combineSchema = combineSchema;
/**
 * @method createSchemaBasedOnDicts
 * @param {Object} config
 * @param {Object} layoutDict {type : optionSchema}
 * @param {Object} dataSourceDict {type : optionSchema}
 * @param {Object} visualizationDict {type : optionSchema}
 * @param {Object} inputDict {type : optionSchema}
 * @returns {Object} schema
 */
var createSchemaBasedOnDicts = function (_a) {
    var _b = _a.layoutDict, layoutDict = _b === void 0 ? {} : _b, _c = _a.dataSourceDict, dataSourceDict = _c === void 0 ? {} : _c, _d = _a.visualizationDict, visualizationDict = _d === void 0 ? {} : _d, _e = _a.inputDict, inputDict = _e === void 0 ? {} : _e;
    var layoutAllOfStatement = exports.combineSchema(layoutDict);
    var dataSourceAllOfStatement = exports.combineSchema(dataSourceDict);
    var visualizationAllOfStatement = exports.combineSchema(visualizationDict);
    var inputAllOfStatement = exports.combineSchema(inputDict, false);
    var newSchema = cloneDeep_1.default(defaultDashboardSchema);
    if (!isEmpty_1.default(layoutDict)) {
        set_1.default(newSchema, 'properties.layout.properties.type.enum', Object.keys(layoutDict));
    }
    if (!isEmpty_1.default(layoutAllOfStatement)) {
        set_1.default(newSchema, 'properties.layout.allOf', layoutAllOfStatement);
    }
    if (!isEmpty_1.default(inputDict)) {
        set_1.default(newSchema, [
            'properties',
            'inputs',
            'patternProperties',
            keyPattern,
            'properties',
            'type',
            'enum',
        ], Object.keys(inputDict));
    }
    if (!isEmpty_1.default(inputAllOfStatement)) {
        set_1.default(newSchema, ['properties', 'inputs', 'patternProperties', keyPattern, 'allOf'], inputAllOfStatement);
    }
    if (!isEmpty_1.default(visualizationDict)) {
        set_1.default(newSchema, [
            'properties',
            'visualizations',
            'patternProperties',
            keyPattern,
            'properties',
            'type',
            'enum',
        ], Object.keys(visualizationDict));
        // caveat1: preset is provided at runtime, thus there's no way to let it perfectly match DashboardJSON at compile time. So we put a vague schema into /defaults/visualizations in the defaultDashboardSchema, and modify it at runtime based on the preset.
        // caveat2: `global` cannot be specified at compile time because of AJV limitation https://github.com/ajv-validator/ajv/issues/1588
        // caveat3: use lodash get/set to workaround the typechecking
        set_1.default(newSchema, [
            'properties',
            'defaults',
            'properties',
            'visualizations',
            'properties',
            'global',
        ], {
            type: 'object',
            nullable: true,
            additionalProperties: false,
            properties: {
                context: {
                    type: 'object',
                    nullable: true,
                },
                showLastUpdated: {
                    type: 'boolean',
                    default: false,
                    nullable: true,
                },
                showProgressBar: {
                    type: 'boolean',
                    default: false,
                    nullable: true,
                },
            },
        });
        Object.entries(visualizationDict).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], optionsSchema = _b[1];
            return set_1.default(newSchema, [
                'properties',
                'defaults',
                'properties',
                'visualizations',
                'properties',
                key,
            ], {
                type: 'object',
                nullable: true,
                additionalProperties: false,
                properties: {
                    context: {
                        type: 'object',
                        nullable: true,
                    },
                    showLastUpdated: {
                        type: 'boolean',
                        default: false,
                        nullable: true,
                    },
                    showProgressBar: {
                        type: 'boolean',
                        default: false,
                        nullable: true,
                    },
                    options: {
                        type: 'object',
                        properties: optionsSchema,
                        nullable: true,
                        additionalProperties: false,
                    },
                },
            });
        });
    }
    if (!isEmpty_1.default(visualizationAllOfStatement)) {
        set_1.default(newSchema, [
            'properties',
            'visualizations',
            'patternProperties',
            keyPattern,
            'allOf',
        ], visualizationAllOfStatement);
    }
    if (!isEmpty_1.default(dataSourceDict)) {
        set_1.default(newSchema, [
            'properties',
            'dataSources',
            'patternProperties',
            keyPattern,
            'properties',
            'type',
            'enum',
        ], Object.keys(dataSourceDict));
    }
    if (!isEmpty_1.default(dataSourceAllOfStatement)) {
        set_1.default(newSchema, [
            'properties',
            'dataSources',
            'patternProperties',
            keyPattern,
            'allOf',
        ], dataSourceAllOfStatement);
    }
    return newSchema;
};
exports.createSchemaBasedOnDicts = createSchemaBasedOnDicts;
/**
 * create component dictionary based on preset
 * @method createComponentDict
 * @param {Object} preset
 * @returns {Object} component object {type : optionSchema}
 */
var createComponentDict = function (preset) {
    var componentDict = {};
    each_1.default(preset, function (component, type) {
        var _a;
        componentDict[type] =
            ((_a = component === null || component === void 0 ? void 0 : component.config) === null || _a === void 0 ? void 0 : _a.optionsSchema) || (component === null || component === void 0 ? void 0 : component.schema);
    });
    return componentDict;
};
exports.createComponentDict = createComponentDict;
/**
 * create schema based on presets
 * @method createSchemaBasedOnPresets
 * @param {Object} presets combined with all custom presets
 * @returns {Object} schema
 */
var createSchemaBasedOnPresets = function (presets) {
    var layoutDict = exports.createComponentDict(presets.layouts);
    var dataSourceDict = exports.createComponentDict(presets.dataSources);
    var visualizationDict = exports.createComponentDict(presets.visualizations);
    var inputDict = exports.createComponentDict(presets.inputs);
    return exports.createSchemaBasedOnDicts({
        layoutDict: layoutDict,
        dataSourceDict: dataSourceDict,
        visualizationDict: visualizationDict,
        inputDict: inputDict,
    });
};
exports.createSchemaBasedOnPresets = createSchemaBasedOnPresets;
exports.default = defaultDashboardSchema;


/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("lodash/set");

/***/ })
/******/ ]);
//# sourceMappingURL=DashboardSchema.js.map