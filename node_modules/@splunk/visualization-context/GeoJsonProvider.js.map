{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@splunk/ui-utils/i18n\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@splunk/visualization-context/Provider\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///./src/GeoJsonProvider.js"],"names":["GeoJsonProvider","mapId","_","offset","count","lists","id","url","Provider"],"mappings":";;;;;;;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;AClFA,kD;;;;;;;ACAA,kE;;;;;;ACAA,+D;;;;;;;ACAA,kE;;;;;;ACAA,mE;;;;;;ACAA,4D;;;;;;ACAA,6E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;AACA;AACA;AACA;AACA;;IAEMA,e;;;;;AACF,6BAAc;AAAA;;AAAA;AAEb;AAED;AACJ;AACA;AACA;;;;;WACI,mBAAU;AACN;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;;WACI,uBAAmB;AAAA,UAATC,KAAS,QAATA,KAAS;;AACf,UAAI,CAAJ,OAAY;AACR,cAAM,UAAUC,+DAAC,CAAjB,gBAAiB,CAAX,CAAN;AACH;;AAED,UAAID,KAAK,CAALA,kBAAJ,MAAkC;AAC9B;AACH;;AACD,UAAIA,KAAK,CAALA,kBAAJ,SAAqC;AACjC;AACH;;AAED,YAAM,UAAUC,+DAAC,CAAjB,2BAAiB,CAAX,CAAN;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,wBAAqC;AAAA,+BAA3BC,MAA2B;AAAA,UAA3BA,MAA2B,6BAAlB,CAAkB;AAAA,8BAAfC,KAAe;AAAA,UAAfA,KAAe,4BAAP,GAAO;AACjC,UAAMC,KAAK,GAAG,CACV;AACIC,UAAE,EADN;AAEIC,WAAG,EAAE;AAFT,OADU,EAKV;AACID,UAAE,EADN;AAEIC,WAAG,EAAE;AAFT,OALU,CAAd;AAWA,aAAOF,KAAK,CAALA,cAAoBF,MAAM,GAAjC,KAAOE,CAAP;MAGJ;;;;WACA,kBAAS,C,EAET;;;;WACA,sBAAa,CAAE;;;;EA5DWG,6E;;AA+D9B,gF","file":"GeoJsonProvider.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n","module.exports = require(\"@splunk/ui-utils/i18n\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@splunk/visualization-context/Provider\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","/* eslint-disable class-methods-use-this,no-useless-constructor */\nimport { _ } from '@splunk/ui-utils/i18n';\nimport Provider from '@splunk/visualization-context/Provider';\nimport USGeoJson from './geoAssets/us.geo.json';\nimport WorldGeoJson from './geoAssets/world.geo.json';\n\nclass GeoJsonProvider extends Provider {\n    constructor() {\n        super();\n    }\n\n    /*\n     * return provider type\n     * @return {String} 'geo'\n     */\n    getType() {\n        return 'geo';\n    }\n\n    /*\n     * getById\n     * Todo: if storageType === 'default', fetch geoJson from s3, else fetch from kvstore in scp provider\n     * @params {Object} config.mapId  'us' or 'world'\n     * @return {Json} USGeoJson or WorldGeoJson\n     */\n    getById({ mapId }) {\n        if (!mapId) {\n            throw new Error(_('Invalid mapId.'));\n        }\n\n        if (mapId.toLowerCase() === 'us') {\n            return USGeoJson;\n        }\n        if (mapId.toLowerCase() === 'world') {\n            return WorldGeoJson;\n        }\n\n        throw new Error(_('The geoJson is not found.'));\n    }\n\n    /*\n     * Todo: link to storage service in the future\n     * @params {Object} config\n     * @params {Number} offset\n     * @params {Number} count\n     * @params {Array} [{id: \"us\", url: 'geo://default/us'}, {id: 'world', url: 'geo://default/world'}]\n     */\n    listIds({ offset = 0, count = 100 }) {\n        const lists = [\n            {\n                id: 'world',\n                url: 'geo://default/world',\n            },\n            {\n                id: 'us',\n                url: 'geo://default/us',\n            },\n        ];\n\n        return lists.slice(offset, offset + count);\n    }\n\n    // Todo: be able to upload geoJson in the future\n    upload() {}\n\n    // Todo: be able to delete geoJson in the future\n    deleteById() {}\n}\n\nexport default GeoJsonProvider;\n"],"sourceRoot":""}