{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/visualizations/ConnectedLineOptionsSchema.js","webpack:///external \"@splunk/visualizations-shared/schemaUtils\""],"names":[],"mappings":";;;;;;;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;AClFA,2CAAmF;AAEnF,kBAAe;IACX,OAAO,EAAE;QACL,IAAI,EAAE,SAAS;QACf,OAAO,EAAE,KAAK;QACd,WAAW,EAAE,gDAAgD;KAChE;IACD,SAAS,EAAE;QACP,IAAI,EAAE,SAAS;QACf,OAAO,EAAE,KAAK;QACd,WAAW,EAAE,4CAA4C;KAC5D;IACD,WAAW,EAAE;QACT,KAAK,EAAE;YACH;gBACI,IAAI,EAAE,QAAQ;gBACd,OAAO,EAAE,oCAAsB;gBAC/B,WAAW,EACP,gHAAgH;aACvH;YACD;gBACI,IAAI,EAAE,QAAQ;gBACd,OAAO,EAAE,MAAM;aAClB;SACJ;KACJ;IACD,gBAAgB,EAAE;QACd,IAAI,EAAE,QAAQ;QACd,OAAO,EAAE,MAAM;QACf,WAAW,EAAE,wCAAwC;QACrD,OAAO,EAAE,oCAAoC;KAChD;IACD,eAAe,EAAE;QACb,IAAI,EAAE,QAAQ;QACd,OAAO,EAAE,MAAM;QACf,WAAW,EAAE,6CAA6C;QAC1D,OAAO,EAAE,kCAAkC;KAC9C;IACD,eAAe,EAAE;QACb,IAAI,EAAE,QAAQ;QACd,OAAO,EAAE,CAAC;QACV,WAAW,EACP,4JAA4J;KACnK;IACD,WAAW,EAAE;QACT,IAAI,EAAE,QAAQ;QACd,OAAO,EAAE,CAAC;QACV,WAAW,EAAE,gDAAgD;KAChE;IACD,aAAa,EAAE;QACX,IAAI,EAAE,QAAQ;QACd,OAAO,EAAE,CAAC;QACV,WAAW,EACP,sKAAsK;KAC7K;CACJ,CAAC;;;;;;;ACxDF,sE","file":"ConnectedLineOptionsSchema.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { COLOR_OR_TOKEN_PATTERN } from '@splunk/visualizations-shared/schemaUtils';\n\nexport default {\n    toArrow: {\n        type: 'boolean',\n        default: false,\n        description: 'Specify whether the line begins with an arrow.',\n    },\n    fromArrow: {\n        type: 'boolean',\n        default: false,\n        description: 'Specify whether the line ends in an arrow.',\n    },\n    strokeColor: {\n        anyOf: [\n            {\n                type: 'string',\n                pattern: COLOR_OR_TOKEN_PATTERN,\n                description:\n                    'Specify the color of the line. The default for light mode is \"#000000\". The default for dark mode is \"#FFFFFF\"',\n            },\n            {\n                type: 'string',\n                pattern: '^>.*',\n            },\n        ],\n    },\n    strokeDataSeries: {\n        type: 'string',\n        pattern: '^>.*',\n        description: 'Data series for dynamic line coloring.',\n        default: '> primary | seriesByType(\"number\")',\n    },\n    strokeDataPoint: {\n        type: 'string',\n        pattern: '^>.*',\n        description: 'Data point that will map to the line color.',\n        default: '> strokeDataSeries | lastPoint()',\n    },\n    strokeDasharray: {\n        type: 'number',\n        default: 0,\n        description:\n            'Specify the length, in pixels, of both the line segments and the spaces between the line segments when you choose break up a line so that it is not solid.',\n    },\n    strokeWidth: {\n        type: 'number',\n        default: 1,\n        description: 'Specify the thickness, in pixels, of the line.',\n    },\n    strokeOpacity: {\n        type: 'number',\n        default: 1,\n        description:\n            'Specify a number less than one to increase the opacity of the line. For example, if you specify 0.50, the line will have an opacity that is half that of no opacity.',\n    },\n};\n","module.exports = require(\"@splunk/visualizations-shared/schemaUtils\");"],"sourceRoot":""}