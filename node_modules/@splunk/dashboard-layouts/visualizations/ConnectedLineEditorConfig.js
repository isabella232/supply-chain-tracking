/*!
 * Copyright © 2020 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */,
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var i18n_1 = __webpack_require__(3);
var PresetPalettes_1 = __webpack_require__(4);
var configUtils_1 = __webpack_require__(5);
var defaultContext = {
    defaultRangeValue: [
        { to: 20, value: '#D41F1F' },
        { from: 20, to: 40, value: '#D94E17' },
        { from: 40, to: 60, value: '#CBA700' },
        { from: 60, to: 80, value: '#669922' },
        { from: 80, value: '#118832' },
    ],
};
var basePresetContext = {
    strokeColorEditorConfig: undefined,
};
var basePresetOptions = {
    strokeColor: undefined,
};
var presets = [
    {
        label: i18n_1._('Static'),
        name: 'lineColor.static',
        value: {
            context: __assign({}, basePresetContext),
            options: __assign({}, basePresetOptions),
        },
    },
    {
        label: i18n_1._('Dynamic'),
        name: 'lineColor.dynamic',
        value: {
            context: __assign(__assign({}, basePresetContext), { strokeColorEditorConfig: defaultContext.defaultRangeValue }),
            options: __assign(__assign({}, basePresetOptions), { strokeColor: '> strokeDataPoint | rangeValue(strokeColorEditorConfig)' }),
        },
    },
];
var StaticColorEditor = {
    label: i18n_1._('Color Value'),
    option: 'strokeColor',
    editor: 'editor.color',
    showEditor: function (_a) {
        var options = _a.options;
        return !configUtils_1.isDynamicOption(options.strokeColor);
    },
    editorProps: {
        labelPosition: 'left',
        themeVariable: '@splunk/dashboard-layouts/ConnectedLine.strokeColor',
    },
};
var DynamicColorEditor = {
    label: i18n_1._('Color Range'),
    option: 'strokeColor',
    context: 'defaultContext',
    editor: 'editor.dynamicColor',
    showEditor: function (_a) {
        var options = _a.options;
        return configUtils_1.isDynamicOption(options.strokeColor);
    },
    editorProps: {
        labelPosition: 'left',
        flyoutTitle: i18n_1._('Dynamic Line Color'),
        formatters: [
            {
                label: i18n_1._('Ranges'),
                value: 'rangeValue',
                isDefault: true,
                defaults: {
                    strokeDataPoint: defaultContext.defaultRangeValue,
                },
            },
        ],
        dataSelectors: [
            {
                label: i18n_1._('Color Field'),
                value: 'strokeDataPoint',
            },
        ],
        defaultPalettesConfig: PresetPalettes_1.defaultPalettesConfig,
    },
};
var editorConfig = [
    {
        label: i18n_1._('Stroke'),
        layout: [
            [
                {
                    label: i18n_1._('Opacity'),
                    option: 'strokeOpacity',
                    editor: 'editor.percent',
                },
                {
                    label: i18n_1._('Thickness (px)'),
                    option: 'strokeWidth',
                    editor: 'editor.number',
                    editorProps: {
                        min: 1,
                    },
                },
                {
                    label: i18n_1._('Dash Style'),
                    option: 'strokeDasharray',
                    editor: 'editor.number',
                    editorProps: {
                        min: 0,
                    },
                },
            ],
        ],
    },
    {
        label: i18n_1._('Arrows'),
        layout: [
            [
                {
                    label: i18n_1._('Starting Point'),
                    option: 'fromArrow',
                    editor: 'editor.toggle',
                    editorProps: {
                        labelPosition: 'right',
                    },
                },
                {
                    label: i18n_1._('Ending Point'),
                    option: 'toArrow',
                    editor: 'editor.toggle',
                    editorProps: {
                        labelPosition: 'right',
                    },
                },
            ],
        ],
    },
    {
        label: i18n_1._('Selected Data Field'),
        layout: [
            [
                {
                    label: '',
                    editor: 'editor.columnSelector',
                    option: 'strokeDataSeries',
                    context: 'strokeDataContext',
                    editorProps: {
                        dataSourceKey: 'primary',
                        prepareValue: function (definition) {
                            var strokeDataSeries = definition.options.strokeDataSeries;
                            return {
                                context: {},
                                options: {
                                    strokeDataPoint: "> strokeDataSeries | lastPoint()",
                                    strokeDataSeries: strokeDataSeries,
                                },
                            };
                        },
                    },
                },
            ],
        ],
    },
    {
        label: i18n_1._('Coloring'),
        layout: [
            [
                {
                    label: i18n_1._('Mode'),
                    key: 'presetSelector',
                    editor: 'editor.presetSelector',
                    editorProps: {
                        presets: presets,
                        value: function (_a) {
                            var context = _a.context, options = _a.options;
                            var initialPreset = configUtils_1.getInitialPreset(context, options, presets);
                            return ((initialPreset && initialPreset.label) || null);
                        },
                    },
                },
            ],
            [
                __assign({}, StaticColorEditor),
            ],
            [
                __assign({}, DynamicColorEditor),
            ],
        ],
    },
];
exports.default = editorConfig;


/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("@splunk/ui-utils/i18n");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualization-color-palettes/editors/PresetPalettes");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations/common/utils/configUtils");

/***/ })
/******/ ]);
//# sourceMappingURL=ConnectedLineEditorConfig.js.map