/*!
 * Copyright © 2020 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 86);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),

/***/ 12:
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-utils/uniqueId");

/***/ }),

/***/ 27:
/***/ (function(module, exports) {

module.exports = require("@splunk/ui-utils/i18n");

/***/ }),

/***/ 3:
/***/ (function(module, exports) {

module.exports = require("prop-types");

/***/ }),

/***/ 5:
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-utils/console");

/***/ }),

/***/ 86:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ConnectedLine_1 = __importDefault(__webpack_require__(87));
exports.default = ConnectedLine_1.default;


/***/ }),

/***/ 87:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(__webpack_require__(0));
var uniqueId_1 = __webpack_require__(12);
var prop_types_1 = __importDefault(__webpack_require__(3));
var Options_1 = __webpack_require__(88);
var console_1 = __importDefault(__webpack_require__(5));
var withSplunkTheme_1 = __importDefault(__webpack_require__(89));
var ConnectedLineOptionsSchema_1 = __importDefault(__webpack_require__(90));
var ConnectedLineEditorConfig_1 = __importDefault(__webpack_require__(92));
var lineUtils_1 = __webpack_require__(95);
var rootSvgStyle = {
    pointerEvents: 'none',
    overflow: 'visible',
};
var lineStyle = {
    pointerEvents: 'auto',
};
var dataContract = {
    requiredDataSources: ['primary'],
    initialRequestParams: {},
};
var vizConfig = {
    optionsSchema: ConnectedLineOptionsSchema_1.default,
    editorConfig: ConnectedLineEditorConfig_1.default,
    dataContract: dataContract,
};
var ConnectedLine = /** @class */ (function (_super) {
    __extends(ConnectedLine, _super);
    function ConnectedLine() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ConnectedLine.prototype.render = function () {
        var _a = this.props, from = _a.from, to = _a.to, onLineSelect = _a.onLineSelect, options = _a.options, dataSources = _a.dataSources, _b = _a.context, context = _b === void 0 ? {} : _b, splunkTheme = _a.splunkTheme;
        var renderOptions = {};
        try {
            renderOptions = Options_1.Options.evaluate({
                context: context,
                options: __assign(__assign({}, ConnectedLine.defaultProps.options), options),
            }, dataSources);
        }
        catch (e) {
            console_1.default.error("Unexpected error evaluating line options: " + e.message);
        }
        var themeStrokeColor = splunkTheme.colorScheme === 'light' ? '#000000' : '#ffffff';
        var _c = lineUtils_1.computePathTriangle(from, to), w = _c.w, h = _c.h, l = _c.l;
        var arrowL = 5 * renderOptions.strokeWidth;
        var _d = lineUtils_1.computeArrowTriangle(w, h, l, arrowL), arrowW = _d.arrowW, arrowH = _d.arrowH;
        var squashedArrows = arrowL > l && renderOptions.fromArrow && renderOptions.toArrow;
        var fromArrowAngle = lineUtils_1.computeFromArrowAngle(from, to);
        var toArrowAngle = lineUtils_1.computeToArrowAngle(from, to);
        var fromArrowId = uniqueId_1.uniqueId();
        var toArrowId = uniqueId_1.uniqueId();
        var newW = w + arrowL;
        var newH = h + 2 * arrowL + 10;
        var newFrom = lineUtils_1.getNewFrom(from, to, arrowW, arrowH, renderOptions.fromArrow).newFrom;
        var newTo = lineUtils_1.getNewTo(from, to, arrowW, arrowH, renderOptions.toArrow).newTo;
        return (react_1.default.createElement("svg", { width: newW, height: newH, style: rootSvgStyle },
            react_1.default.createElement("path", { "data-test": "arrows", d: squashedArrows
                    ? "M" + newTo.x + " " + newTo.y + " L" + newFrom.x + " " + newFrom.y
                    : "M" + newFrom.x + " " + newFrom.y + " L" + newTo.x + " " + newTo.y, stroke: renderOptions.strokeColor || themeStrokeColor, strokeOpacity: "" + renderOptions.strokeOpacity, strokeWidth: "" + renderOptions.strokeWidth, strokeDasharray: "" + renderOptions.strokeDasharray, fill: "none", markerStart: renderOptions.fromArrow ? "url(#" + fromArrowId + ")" : '', markerEnd: renderOptions.toArrow ? "url(#" + toArrowId + ")" : '' }),
            react_1.default.createElement("path", { "data-test": "line", onMouseDown: onLineSelect, d: "M" + from.x + " " + from.y + " L" + to.x + " " + to.y, strokeWidth: "" + (renderOptions.strokeWidth + 20), fill: "none", stroke: "white", strokeOpacity: 0, style: lineStyle }),
            react_1.default.createElement("defs", null,
                react_1.default.createElement("marker", { id: "" + fromArrowId, markerWidth: "10", markerHeight: "10", refX: squashedArrows ? '5' : '0', refY: "2", orient: fromArrowAngle + "deg", markerUnits: "strokeWidth" },
                    react_1.default.createElement("path", { d: "M0,0 L0,4 L5,2 z", fill: renderOptions.strokeColor || themeStrokeColor, fillOpacity: "" + renderOptions.strokeOpacity })),
                react_1.default.createElement("marker", { id: "" + toArrowId, markerWidth: "10", markerHeight: "10", refX: squashedArrows ? '5' : '0', refY: "2", orient: toArrowAngle + "deg", markerUnits: "strokeWidth" },
                    react_1.default.createElement("path", { d: "M0,0 L0,4 L5,2 z", fill: renderOptions.strokeColor || themeStrokeColor, fillOpacity: "" + renderOptions.strokeOpacity })))));
    };
    ConnectedLine.propTypes = {
        /**
         * Starting Coordinates of the Line
         */
        from: prop_types_1.default.shape({
            x: prop_types_1.default.number,
            y: prop_types_1.default.number,
        }),
        /**
         * Ending Coordinates of the Line
         */
        to: prop_types_1.default.shape({
            x: prop_types_1.default.number,
            y: prop_types_1.default.number,
        }),
        /**
         * Visualization formatting options
         */
        options: prop_types_1.default.shape({
            strokeColor: prop_types_1.default.string,
            strokeDataSeries: prop_types_1.default.string,
            strokeDataPoint: prop_types_1.default.string,
            strokeOpacity: prop_types_1.default.number,
            strokeWidth: prop_types_1.default.number,
            strokeDasharray: prop_types_1.default.number,
            fromArrow: prop_types_1.default.bool,
            toArrow: prop_types_1.default.bool,
        }),
        /**
         * on line select callback
         */
        onLineSelect: prop_types_1.default.func,
        dataSources: prop_types_1.default.object,
        context: prop_types_1.default.object,
        splunkTheme: prop_types_1.default.object,
    };
    ConnectedLine.defaultProps = {
        options: {
            strokeOpacity: 1,
            strokeWidth: 1,
            strokeDasharray: 0,
            strokeDataSeries: '> primary | seriesByType("number")',
            strokeDataPoint: '> strokeDataSeries | lastPoint()',
            fromArrow: false,
            toArrow: false,
        },
        from: {
            x: 0,
            y: 0,
        },
        to: {
            x: 150,
            y: 0,
        },
        onLineSelect: function () { },
        dataSources: [],
        context: {},
    };
    ConnectedLine.config = vizConfig;
    // deprecated
    ConnectedLine.schema = ConnectedLineOptionsSchema_1.default;
    // deprecated
    ConnectedLine.dataContract = dataContract;
    // deprecated
    ConnectedLine.editor = ConnectedLineEditorConfig_1.default;
    return ConnectedLine;
}(react_1.PureComponent));
var ConnectedLineWithTheme = withSplunkTheme_1.default(ConnectedLine);
ConnectedLineWithTheme.propTypes = ConnectedLine.propTypes;
ConnectedLineWithTheme.defaultProps = ConnectedLine.defaultProps;
ConnectedLineWithTheme.config = ConnectedLine.config;
ConnectedLineWithTheme.schema = ConnectedLineOptionsSchema_1.default;
ConnectedLineWithTheme.editor = ConnectedLineEditorConfig_1.default;
exports.default = ConnectedLineWithTheme;


/***/ }),

/***/ 88:
/***/ (function(module, exports) {

module.exports = require("@splunk/visualization-encoding/Options");

/***/ }),

/***/ 89:
/***/ (function(module, exports) {

module.exports = require("@splunk/themes/withSplunkTheme");

/***/ }),

/***/ 90:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var schemaUtils_1 = __webpack_require__(91);
exports.default = {
    toArrow: {
        type: 'boolean',
        default: false,
        description: 'Specify whether the line begins with an arrow.',
    },
    fromArrow: {
        type: 'boolean',
        default: false,
        description: 'Specify whether the line ends in an arrow.',
    },
    strokeColor: {
        anyOf: [
            {
                type: 'string',
                pattern: schemaUtils_1.COLOR_OR_TOKEN_PATTERN,
                description: 'Specify the color of the line. The default for light mode is "#000000". The default for dark mode is "#FFFFFF"',
            },
            {
                type: 'string',
                pattern: '^>.*',
            },
        ],
    },
    strokeDataSeries: {
        type: 'string',
        pattern: '^>.*',
        description: 'Data series for dynamic line coloring.',
        default: '> primary | seriesByType("number")',
    },
    strokeDataPoint: {
        type: 'string',
        pattern: '^>.*',
        description: 'Data point that will map to the line color.',
        default: '> strokeDataSeries | lastPoint()',
    },
    strokeDasharray: {
        type: 'number',
        default: 0,
        description: 'Specify the length, in pixels, of both the line segments and the spaces between the line segments when you choose break up a line so that it is not solid.',
    },
    strokeWidth: {
        type: 'number',
        default: 1,
        description: 'Specify the thickness, in pixels, of the line.',
    },
    strokeOpacity: {
        type: 'number',
        default: 1,
        description: 'Specify a number less than one to increase the opacity of the line. For example, if you specify 0.50, the line will have an opacity that is half that of no opacity.',
    },
};


/***/ }),

/***/ 91:
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/schemaUtils");

/***/ }),

/***/ 92:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var i18n_1 = __webpack_require__(27);
var PresetPalettes_1 = __webpack_require__(93);
var configUtils_1 = __webpack_require__(94);
var defaultContext = {
    defaultRangeValue: [
        { to: 20, value: '#D41F1F' },
        { from: 20, to: 40, value: '#D94E17' },
        { from: 40, to: 60, value: '#CBA700' },
        { from: 60, to: 80, value: '#669922' },
        { from: 80, value: '#118832' },
    ],
};
var basePresetContext = {
    strokeColorEditorConfig: undefined,
};
var basePresetOptions = {
    strokeColor: undefined,
};
var presets = [
    {
        label: i18n_1._('Static'),
        name: 'lineColor.static',
        value: {
            context: __assign({}, basePresetContext),
            options: __assign({}, basePresetOptions),
        },
    },
    {
        label: i18n_1._('Dynamic'),
        name: 'lineColor.dynamic',
        value: {
            context: __assign(__assign({}, basePresetContext), { strokeColorEditorConfig: defaultContext.defaultRangeValue }),
            options: __assign(__assign({}, basePresetOptions), { strokeColor: '> strokeDataPoint | rangeValue(strokeColorEditorConfig)' }),
        },
    },
];
var StaticColorEditor = {
    label: i18n_1._('Color Value'),
    option: 'strokeColor',
    editor: 'editor.color',
    showEditor: function (_a) {
        var options = _a.options;
        return !configUtils_1.isDynamicOption(options.strokeColor);
    },
    editorProps: {
        labelPosition: 'left',
        themeVariable: '@splunk/dashboard-layouts/ConnectedLine.strokeColor',
    },
};
var DynamicColorEditor = {
    label: i18n_1._('Color Range'),
    option: 'strokeColor',
    context: 'defaultContext',
    editor: 'editor.dynamicColor',
    showEditor: function (_a) {
        var options = _a.options;
        return configUtils_1.isDynamicOption(options.strokeColor);
    },
    editorProps: {
        labelPosition: 'left',
        flyoutTitle: i18n_1._('Dynamic Line Color'),
        formatters: [
            {
                label: i18n_1._('Ranges'),
                value: 'rangeValue',
                isDefault: true,
                defaults: {
                    strokeDataPoint: defaultContext.defaultRangeValue,
                },
            },
        ],
        dataSelectors: [
            {
                label: i18n_1._('Color Field'),
                value: 'strokeDataPoint',
            },
        ],
        defaultPalettesConfig: PresetPalettes_1.defaultPalettesConfig,
    },
};
var editorConfig = [
    {
        label: i18n_1._('Stroke'),
        layout: [
            [
                {
                    label: i18n_1._('Opacity'),
                    option: 'strokeOpacity',
                    editor: 'editor.percent',
                },
                {
                    label: i18n_1._('Thickness (px)'),
                    option: 'strokeWidth',
                    editor: 'editor.number',
                    editorProps: {
                        min: 1,
                    },
                },
                {
                    label: i18n_1._('Dash Style'),
                    option: 'strokeDasharray',
                    editor: 'editor.number',
                    editorProps: {
                        min: 0,
                    },
                },
            ],
        ],
    },
    {
        label: i18n_1._('Arrows'),
        layout: [
            [
                {
                    label: i18n_1._('Starting Point'),
                    option: 'fromArrow',
                    editor: 'editor.toggle',
                    editorProps: {
                        labelPosition: 'right',
                    },
                },
                {
                    label: i18n_1._('Ending Point'),
                    option: 'toArrow',
                    editor: 'editor.toggle',
                    editorProps: {
                        labelPosition: 'right',
                    },
                },
            ],
        ],
    },
    {
        label: i18n_1._('Selected Data Field'),
        layout: [
            [
                {
                    label: '',
                    editor: 'editor.columnSelector',
                    option: 'strokeDataSeries',
                    context: 'strokeDataContext',
                    editorProps: {
                        dataSourceKey: 'primary',
                        prepareValue: function (definition) {
                            var strokeDataSeries = definition.options.strokeDataSeries;
                            return {
                                context: {},
                                options: {
                                    strokeDataPoint: "> strokeDataSeries | lastPoint()",
                                    strokeDataSeries: strokeDataSeries,
                                },
                            };
                        },
                    },
                },
            ],
        ],
    },
    {
        label: i18n_1._('Coloring'),
        layout: [
            [
                {
                    label: i18n_1._('Mode'),
                    key: 'presetSelector',
                    editor: 'editor.presetSelector',
                    editorProps: {
                        presets: presets,
                        value: function (_a) {
                            var context = _a.context, options = _a.options;
                            var initialPreset = configUtils_1.getInitialPreset(context, options, presets);
                            return ((initialPreset && initialPreset.label) || null);
                        },
                    },
                },
            ],
            [
                __assign({}, StaticColorEditor),
            ],
            [
                __assign({}, DynamicColorEditor),
            ],
        ],
    },
];
exports.default = editorConfig;


/***/ }),

/***/ 93:
/***/ (function(module, exports) {

module.exports = require("@splunk/visualization-color-palettes/editors/PresetPalettes");

/***/ }),

/***/ 94:
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations/common/utils/configUtils");

/***/ }),

/***/ 95:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.computePathTriangle = exports.getNewTo = exports.getNewFrom = exports.computeToArrowAngle = exports.computeFromArrowAngle = exports.computeArrowTriangle = void 0;
/**
 * Computes the Arrow's triangle dimensions
 * @param {Number} w
 * @param {Number} h
 * @param {Number} l
 * @param {Number} L
 */
var computeArrowTriangle = function (w, h, l, L) {
    if (l === 0) {
        return { arrowW: 0, arrowH: 0, arrowL: 0 };
    }
    var arrowW = (w * L) / l;
    var arrowH = (h * L) / l;
    return { arrowW: arrowW, arrowH: arrowH, arrowL: L };
};
exports.computeArrowTriangle = computeArrowTriangle;
/**
 * Computes the To Arrow Angle to place at the From position of the line that is drawn
 * @param {Object} from x and y coordinate
 * @param {Object} to x and y coordinate
 */
var computeFromArrowAngle = function (from, to) {
    if (to.x - from.x === 0) {
        return from.y > to.y ? 90 : 270;
    }
    var angle = Math.atan((to.y - from.y) / (to.x - from.x)) * (180 / Math.PI);
    return from.x > to.x ? angle : 180 + angle;
};
exports.computeFromArrowAngle = computeFromArrowAngle;
/**
 * Computes the To Arrow Angle to place at the To position of the line that is drawn
 * @param {Object} from x and y coordinate
 * @param {Object} to x and y coordinate
 */
var computeToArrowAngle = function (from, to) {
    if (to.x - from.x === 0) {
        return from.y > to.y ? 270 : 90;
    }
    var angle = Math.atan((to.y - from.y) / (to.x - from.x)) * (180 / Math.PI);
    return from.x > to.x ? 180 + angle : angle;
};
exports.computeToArrowAngle = computeToArrowAngle;
/**
 * Computes the modified From coordinates depending on whether an arrow is present or not
 * @param {Object} from x and y coordinate
 * @param {Object} to x and y coordinate
 * @param {Number} arrowW the width of the drawn arrow, adjusted to the angle
 * @param {Number} arrowH the height of the drawn arrow, adjusted to the angle
 * @param {Boolean} fromArrow whether the From Arrow is present or not
 */
var getNewFrom = function (from, to, arrowW, arrowH, fromArrow) {
    var newFromX;
    var newFromY;
    if (fromArrow) {
        newFromX = from.x > to.x ? from.x - arrowW : from.x + arrowW;
        newFromY = from.y > to.y ? from.y - arrowH : from.y + arrowH;
    }
    else {
        newFromX = from.x;
        newFromY = from.y;
    }
    return { newFrom: { x: newFromX, y: newFromY } };
};
exports.getNewFrom = getNewFrom;
/**
 * Computes the modified To coordinates depending on whether an arrow is present or not
 * @param {Object} from x and y coordinate
 * @param {Object} to x and y coordinate
 * @param {Number} arrowW the width of the drawn arrow, adjusted to the angle
 * @param {Number} arrowH the height of the drawn arrow, adjusted to the angle
 * @param {Boolean} toArrow whether the From Arrow is present or not
 */
var getNewTo = function (from, to, arrowW, arrowH, toArrow) {
    var newToX;
    var newToY;
    if (toArrow) {
        newToX = from.x > to.x ? to.x + arrowW : to.x - arrowW;
        newToY = from.y > to.y ? to.y + arrowH : to.y - arrowH;
    }
    else {
        newToX = to.x;
        newToY = to.y;
    }
    return { newTo: { x: newToX, y: newToY } };
};
exports.getNewTo = getNewTo;
/**
 * Computes the Path's (Line drawn) triangle dimensions
 * @param {Object} from x and y coordinate
 * @param {Object} to x and y coordinate
 */
var computePathTriangle = function (from, to) {
    var w = Math.abs(from.x - to.x);
    var h = Math.abs(from.y - to.y);
    var l = Math.sqrt(w * w + h * h);
    return { w: w, h: h, l: l };
};
exports.computePathTriangle = computePathTriangle;


/***/ })

/******/ });
//# sourceMappingURL=Line.js.map