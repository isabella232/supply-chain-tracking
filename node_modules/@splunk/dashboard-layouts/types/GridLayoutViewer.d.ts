import type { GridLayoutStructure, GridLayoutOptions } from '@splunk/dashboard-types';
import type { RenderLayoutItem } from './types';
interface GridLayoutViewerProps {
    layoutStructure: GridLayoutStructure;
    renderLayoutItem: RenderLayoutItem;
    options: GridLayoutOptions;
}
declare const GridLayoutViewer: {
    ({ layoutStructure, renderLayoutItem, options, }: GridLayoutViewerProps): JSX.Element;
    propTypes: {
        mode: import("prop-types").Requireable<string>;
        showGrid: import("prop-types").Requireable<boolean>;
        options: import("prop-types").Requireable<object>;
        layoutStructure: import("prop-types").Requireable<any[]>;
        containerWidth: import("prop-types").Requireable<number>;
        containerHeight: import("prop-types").Requireable<number>;
        selectedItems: import("prop-types").Requireable<(import("prop-types").InferProps<{
            id: import("prop-types").Requireable<string>;
            type: import("prop-types").Requireable<string>;
        }> | null)[]>;
        renderLayoutItem: import("prop-types").Requireable<(...args: any[]) => any>;
        onLayoutItemsSelect: import("prop-types").Requireable<(...args: any[]) => any>;
        onEventTrigger: import("prop-types").Requireable<(...args: any[]) => any>;
        onLayoutStructureChange: import("prop-types").Requireable<(...args: any[]) => any>;
        layoutApiRef: import("prop-types").Requireable<(...args: any[]) => any>;
    };
    defaultProps: {
        mode: string;
        options: {};
        showGrid: boolean;
        layoutStructure: never[];
        selectedItems: never[];
        renderLayoutItem: () => void;
        onEventTrigger: () => void;
        onLayoutStructureChange: () => void;
        onLayoutItemsSelect: () => void;
        layoutApiRef: () => void;
    };
};
export default GridLayoutViewer;
//# sourceMappingURL=GridLayoutViewer.d.ts.map