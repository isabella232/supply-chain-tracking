import type { MouseEvent as ReactMouseEvent } from 'react';
import type { Port, SelectedItem } from '@splunk/dashboard-types';
import { getOffset } from '../utils/layoutUtils';
import type { RenderLayoutItem } from '../types';
declare type HandleMouseMove = (e: MouseEvent, offset: ReturnType<typeof getOffset>) => void;
export interface ResponsiveLineProps {
    fromX: number;
    fromY: number;
    fromItem?: string;
    fromPort?: Port;
    toX: number;
    toY: number;
    toItem?: string;
    toPort?: Port;
    lineId: string;
    scale?: number;
    selectable?: boolean;
    editable?: boolean;
    renderLayoutItem: RenderLayoutItem;
    onItemSelected?: (e: ReactMouseEvent, items: SelectedItem[]) => void;
    onLineDragStart?: (e: ReactMouseEvent, dir: 'from' | 'to') => void;
    onLineMove?: HandleMouseMove;
    onLineMoved?: HandleMouseMove;
    onLineDrag?: HandleMouseMove;
    onLineDragged?: HandleMouseMove;
}
declare const ResponsiveLine: ({ fromX, fromY, fromItem, fromPort, toX, toY, toItem, toPort, lineId, scale, selectable, editable, renderLayoutItem, onItemSelected, onLineDragStart, onLineMove, onLineMoved, onLineDrag, onLineDragged, }: ResponsiveLineProps) => JSX.Element;
export default ResponsiveLine;
//# sourceMappingURL=ResponsiveLine.d.ts.map