import type { MouseEvent, ReactNode } from 'react';
import type { Coordinate, SelectedItem, AbsoluteLayoutItem, AbsoluteBlockItem } from '@splunk/dashboard-types';
export interface Dimension {
    width: number | string;
    height: number | string;
}
export interface ShouldRenderActionMenuBelowVizProps {
    y: number;
    canvasHeight: number;
}
export interface RenderResponsiveLineProps {
    from: Coordinate;
    to: Coordinate;
    onLineSelect: (e: MouseEvent) => void;
}
export declare type OnItemSelected = (e: MouseEvent, visualizationIds: SelectedItem[]) => void;
export declare type RenderLayoutItem = (itemId: string, props: Dimension | (Dimension & ShouldRenderActionMenuBelowVizProps) | RenderResponsiveLineProps, type: 'block' | 'line', onSelected?: OnItemSelected) => JSX.Element;
export interface Offset {
    offsetX: number;
    offsetY: number;
}
export declare type LineDirection = 'from' | 'to';
export declare type HandleDirection = 'n' | 'ne' | 'e' | 'se' | 's' | 'sw' | 'w' | 'nw';
export interface LayoutStructureState {
    [key: string]: AbsoluteLayoutItem;
}
export interface CanvasProps {
    width: number;
    height: number;
    scale?: number;
    backgroundColor?: string;
    backgroundImageSrc?: string;
    backgroundImageSizeType?: string;
    backgroundImageWidth?: number;
    backgroundImageHeight?: number;
    backgroundImagePositionX?: number;
    backgroundImagePositionY?: number;
    showGrid?: boolean;
    gridLineColor?: string;
    gridPadding?: number;
    gridLineWidth?: number;
    gridWidth?: number;
    gridHeight?: number;
    showOverflowContent?: boolean;
    userSelect?: boolean;
    gridLineOpacity?: number;
    showBorder?: boolean;
    cssScaling?: boolean;
    children: ReactNode;
    onMouseDown?: (e: React.MouseEvent) => void;
    onContextMenu?: (e: React.MouseEvent) => void;
}
export interface EdgeItem {
    item: string;
    orientation: 'horizontal' | 'vertical';
    edgeStart: Coordinate;
    edgeEnd: Coordinate;
    visualizations: AbsoluteBlockItem[];
    isCanvasEdge?: boolean;
}
export declare type Quadrant = 'w' | 's' | 'n' | 'e';
export declare type LayoutError = {
    itemId: string;
    messages: string[];
};
export declare type HorizontalBoundaries = {
    leftBoundary: number;
    rightBoundary: number;
};
export declare type VerticalBoundaries = {
    upperBoundary: number;
    lowerBoundary: number;
};
export declare type EdgeBoundaries = HorizontalBoundaries | VerticalBoundaries;
export declare type EdgeAppearance = 'invalid' | 'dropTarget' | 'normal' | 'hidden';
//# sourceMappingURL=index.d.ts.map