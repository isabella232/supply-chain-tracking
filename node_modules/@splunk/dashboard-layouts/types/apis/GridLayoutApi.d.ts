import type { MutableRefObject } from 'react';
import type TelemetryAPI from '@splunk/dashboard-telemetry/TelemetryAPI';
import type { EmittableEvent } from '@splunk/dashboard-telemetry/EventTypes';
import type { GridLayoutStructure, GridLayoutOptions } from '@splunk/dashboard-types';
import { LegacyLayoutApiArgs } from '../utils/layoutApiUtils';
import type { NormalizedAddLayoutItemArgs } from '../utils/layoutApiUtils';
import BaseLayoutApi from '../BaseLayoutApi';
interface LayoutApiArgs {
    layoutStructureRef: MutableRefObject<GridLayoutStructure>;
    options?: GridLayoutOptions;
    userMessage: (args: {
        message: string;
        level: string;
    }) => void;
    onVizAdded: () => void;
    getCanvasDomElement: () => HTMLElement;
    telemetry?: TelemetryAPI;
}
declare class GridLayoutApi extends BaseLayoutApi {
    private layoutStructureRef;
    private options;
    private userMessage;
    private onVizAdded;
    getCanvasDomElement: () => HTMLElement;
    constructor({ layoutStructureRef, options, userMessage, onVizAdded, getCanvasDomElement, telemetry, }: LayoutApiArgs);
    /**
     * Add a new item to grid layout
     * @method
     * @param {Object} options
     * @param {String} options.itemId visualization id
     * @returns {Object[]} updated layout structure
     * @public
     */
    addLayoutItem: (...args: [NormalizedAddLayoutItemArgs] | LegacyLayoutApiArgs) => GridLayoutStructure;
    /**
     * Remove item specified in itemIds list.
     * Note: Only removes one item even though it accepts a list of item ids.
     * @method
     * @param {string[]} item ids to remove.
     * @returns {object[]} updated layout structure
     * @public
     */
    removeLayoutItems: (itemIds?: string[], metadata?: EmittableEvent['metadata']) => GridLayoutStructure;
    /**
     * There are 3 actors in this cloning algorithm:
     * 1. Clone Ancestor
     * 2. Left-side Descendant
     * 3. Right-side Descendant
     * @method
     * @param {Object} options
     * @param {String[]} options.from List of original viz ids (ancestors). These id's will be re-used to produce left-side descendants.
     * @param {String[]} options.to List of new viz ids. Has the id's of right-side descendants.
     * @returns {Object[]} Layout structure of all known items
     * @public
     */
    cloneLayoutItems: ({ from, to, metadata, }: {
        from: string[];
        to: string[];
        metadata?: EmittableEvent['metadata'];
    }) => GridLayoutStructure;
    /**
     * Return snapshot as an empty object for the time being
     * @method
     */
    snapshot: () => Record<string, never>;
    /**
     * Return zoom level as null for now
     * @method
     */
    getZoomLevel: () => null;
}
export default GridLayoutApi;
//# sourceMappingURL=GridLayoutApi.d.ts.map