import type { BehaviorSubject } from 'rxjs';
import type { MutableRefObject } from 'react';
import type { TelemetryAPI } from '@splunk/dashboard-telemetry';
import type { EmittableEvent } from '@splunk/dashboard-telemetry/EventTypes';
import type { AbsoluteLayoutOptions, AbsoluteLayoutStructure } from '@splunk/dashboard-types';
import BaseLayoutApi from '../BaseLayoutApi';
import type { NormalizedAddLayoutItemArgs, LegacyLayoutApiArgs } from '../utils/layoutApiUtils';
interface LayoutApiArgs {
    getZoomObserver: () => BehaviorSubject<number>;
    setFitToWidthAndScrollToTopLeft: () => void;
    layoutStructureRef: MutableRefObject<AbsoluteLayoutStructure>;
    options?: AbsoluteLayoutOptions;
    getCanvasDomElement: () => HTMLElement;
    setScale: (scale: number) => void;
    zoomIn: () => void;
    zoomOut: () => void;
    telemetry?: TelemetryAPI;
}
declare class AbsoluteLayoutApi extends BaseLayoutApi {
    private layout;
    constructor({ telemetry, ...layout }: LayoutApiArgs);
    /**
     * Get layout items in order
     * @method
     * @returns {String} ordered item ids
     * @public
     */
    getLayoutItemOrder: () => string[];
    /**
     * Adjust layout item order
     * @method
     * @param {Number} currentOrder
     * @param {Number} newOrder
     * @returns {Promise<Object[]>} updated layout structure
     * @public
     */
    adjustLayoutItemOrder: (currentOrder: number, newOrder: number, metadata?: EmittableEvent['metadata']) => Promise<AbsoluteLayoutStructure>;
    /**
     * Add a new layout item to the structure
     * @method
     * @param {Object} options
     * @param {String} options.itemId
     * @param {Object} options.vizContract
     * @param {String} [options.type='block']
     * @param {Object} options.config
     * @returns {Promise<Object[]>} updated layout structure
     * @public
     */
    addLayoutItem: (...args: [NormalizedAddLayoutItemArgs] | LegacyLayoutApiArgs) => Promise<AbsoluteLayoutStructure>;
    /**
     * Remove items from layout structure
     * @method
     * @param {Promise<String[]>} itemIds
     * @public
     */
    removeLayoutItems: (itemIds?: string[], metadata?: EmittableEvent['metadata']) => Promise<AbsoluteLayoutStructure>;
    /**
     * Copies a layout item position and size and offsets by 2 * GRID_SIZE
     * @method
     * @param {Object} config
     * @param {Array} config.from List of original viz ids
     * @param {Array} config.to List of new viz ids
     * @param {Number} [config.offsetMultiplier=1] Number of grids to offset
     * @returns {Promise<Object[]>} Layout structure of all known items
     * @public
     */
    cloneLayoutItems: ({ from, to, offsetMultiplier, metadata, }: {
        from: string[];
        to: string[];
        offsetMultiplier?: number | undefined;
        metadata?: EmittableEvent['metadata'];
    }) => Promise<AbsoluteLayoutStructure>;
    /**
     * get dashboard canvas dom element
     */
    getCanvasDomElement: () => HTMLElement;
    /**
     * return snapshot of that includes inlined background image
     * @method
     * @returns {Object} Updated Layout options with encoded background image
     * @public
     */
    snapshot: () => AbsoluteLayoutOptions;
    /**
     * Sets dashboard scale
     * @param {Number} scale New scale as floating point number
     */
    setScale: (scale: number) => void;
    /**
     * Increases dashboard zoom level for one step
     */
    zoomIn: () => void;
    /**
     * Decreases dashboard zoom level for one step
     */
    zoomOut: () => void;
    /**
     * Adjust dashboard's scale to fit the width of the container
     */
    fitToWidth: () => void;
    /**
     * @returns {Object} Observable that tracks zoom level changes or null if zoom is unsupported
     */
    getZoomLevel: LayoutApiArgs['getZoomObserver'];
}
export default AbsoluteLayoutApi;
//# sourceMappingURL=AbsoluteLayoutApi.d.ts.map