import type { AbsoluteLayoutStructure, ConnectedLineItem, Port, AbsoluteBlockItem, Coordinate } from '@splunk/dashboard-types';
import type { LineDirection, LayoutStructureState, HandleDirection } from '../types';
declare type Action = {
    type: 'lineMove';
    payload: ConnectedLineItem;
} | {
    type: 'lineDragStart';
    payload: ConnectedLineItem;
} | {
    type: 'lineDrag';
    payload: {
        id: string;
        dir: LineDirection;
        absPos: Coordinate;
    };
} | {
    type: 'lineConnect';
    payload: {
        lineId: string;
        lineDir: LineDirection;
        itemId: string;
        port: Port;
    };
} | {
    type: 'lineDisconnect';
    payload: {
        lineId: string;
        lineDir: LineDirection;
    };
} | {
    type: 'blockResize';
    payload: AbsoluteBlockItem;
} | {
    type: 'blocksMove';
    payload: AbsoluteBlockItem[];
} | {
    type: 'reset';
    payload: AbsoluteLayoutStructure;
};
export declare const initializeLayoutStructureState: (layoutStructure: AbsoluteLayoutStructure) => LayoutStructureState;
export declare const reducer: (state: LayoutStructureState, action: Action) => LayoutStructureState;
interface UpdateLayoutStructureOnKeyboardMoveArgs {
    selectedLineItems: ConnectedLineItem[];
    selectedBlockItems: AbsoluteBlockItem[];
    layoutStructure: AbsoluteLayoutStructure;
    dir: HandleDirection;
    snap: boolean;
    gridSize: number;
}
export declare const updateLayoutStructureOnKeyboardMove: ({ selectedLineItems, selectedBlockItems, layoutStructure, dir, snap, gridSize, }: UpdateLayoutStructureOnKeyboardMoveArgs) => AbsoluteLayoutStructure;
export {};
//# sourceMappingURL=absoluteLayoutUtils.d.ts.map