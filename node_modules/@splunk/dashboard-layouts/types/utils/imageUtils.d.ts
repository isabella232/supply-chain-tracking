import type { BackgroundImageOptions } from '@splunk/dashboard-types';
/**
 * check if an image is from Image Registry
 * @param {*} src
 */
export declare const isFromImageRegistry: (src?: string) => boolean;
interface ValidImagePosArgs {
    x?: number;
    y?: number;
    canvasWidth: number;
    canvasHeight: number;
}
/**
 * Check whether image position is valid or not
 * @method validImagePos
 * @param {Number} x
 * @param {Number} y
 * @param {Number} canvasWidth
 * @param {Number} canvasHeight
 * @returns {Boolean}
 */
export declare const validImagePos: ({ x, y, canvasWidth, canvasHeight, }: ValidImagePosArgs) => boolean;
/**
 * Check whether image width and height is valid or not
 * @method validImageWidthHeight
 * @param {Number} imageWidth //Defaulted to 1 because w can't be undefined
 * @param {Number} imageHeight //Defaulted to 1 because h can't be undefined
 * @param {Number} canvasWidth
 * @param {Number} canvasHeight
 * @returns {Boolean}
 */
export declare const validImageWidthHeight: (imageWidth?: number, imageHeight?: number) => boolean;
/**
 * Check whether image size type is valid or not (cover/auto/contain/undefined)
 * @method invalidImageSizeType
 * @param {String} sizeType
 * @returns {Boolean}
 */
export declare const invalidImageSizeType: (sizeType: string) => boolean;
/**
 * Return the original width and height of a valid image
 * @method getImageWidthHeight
 * @param {String} imgSrc
 * @returns {Number. Number} Image width and height
 */
export declare const getImageDimension: (imgSrc: string) => {
    width: number;
    height: number;
};
interface ValidateBackgroundImageArgs {
    backgroundImage: BackgroundImageOptions;
    canvasWidth: number;
    canvasHeight: number;
}
/**
 * Check whether background image options are valid or not. Default to x:0, y:0, w:0, h:0 and sizeType:'auto'
 * @method validateBackgroundImage
 * @param {Object} backgroundImage
 * @param {String} backgroundImage.src
 * @param {Number} backgroundImage.x
 * @param {Number} backgroundImage.y
 * @param {Number} backgroundImage.w
 * @param {Number} backgroundImage.h
 * @param {String} backgroundImage.sizeType
 * @param {Number} width
 * @param {Number} height
 * @returns {Object}
 */
export declare const validateBackgroundImage: ({ backgroundImage, canvasWidth, canvasHeight, }: ValidateBackgroundImageArgs) => BackgroundImageOptions;
export {};
//# sourceMappingURL=imageUtils.d.ts.map