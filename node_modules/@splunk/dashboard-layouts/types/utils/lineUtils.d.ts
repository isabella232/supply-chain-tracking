import type { AbsoluteLayoutStructure, ConnectedLineItem, Coordinate, ConnectedLinePosition, SelectedItem } from '@splunk/dashboard-types';
import type { Offset, LineDirection, LayoutStructureState } from '../types';
interface ComputeLineAbsPositionArgs {
    layoutStructure: AbsoluteLayoutStructure;
    position: ConnectedLinePosition;
}
export declare const computeLineAbsPosition: ({ layoutStructure, position, }: ComputeLineAbsPositionArgs) => {
    from: Coordinate;
    to: Coordinate;
};
interface FindSelectedLineItemsArgs {
    layoutStructure: AbsoluteLayoutStructure;
    selectedItems: SelectedItem[];
}
export declare const findSelectedLineItems: ({ layoutStructure, selectedItems, }: FindSelectedLineItemsArgs) => ConnectedLineItem[];
export interface HandleSingleLineMoveArgs {
    offset: Offset;
    lineId: string;
    layoutStructure: AbsoluteLayoutStructure;
}
export declare const handleSingleLineMove: ({ lineId, offset, layoutStructure, }: HandleSingleLineMoveArgs) => ConnectedLineItem;
export interface HandleSingleLineDragStartArgs {
    lineId: string;
    layoutStructure: AbsoluteLayoutStructure;
    lineDir: LineDirection;
}
export declare const handleSingleLineDragStart: ({ lineId, layoutStructure, lineDir, }: HandleSingleLineDragStartArgs) => ConnectedLineItem;
interface GetAllLineItemsArgs {
    layoutStructure: AbsoluteLayoutStructure;
    layoutStructureState?: LayoutStructureState;
}
export declare const getAllLineItems: ({ layoutStructure, layoutStructureState, }: GetAllLineItemsArgs) => ConnectedLineItem[];
export {};
//# sourceMappingURL=lineUtils.d.ts.map