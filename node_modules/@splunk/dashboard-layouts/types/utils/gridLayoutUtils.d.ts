import type { AbsoluteBlockItem, GridLayoutStructure, SelectedItem } from '@splunk/dashboard-types';
export declare type MappedGridLayout = Record<string, AbsoluteBlockItem>;
declare type ResetStructureAction = {
    type: 'structure/reset';
    payload: GridLayoutStructure;
};
declare type UpdateItemAction = {
    type: 'structure/update';
    payload: AbsoluteBlockItem;
};
export declare const resetLayoutAction: (payload: GridLayoutStructure) => ResetStructureAction;
export declare const updateItemAction: (payload: AbsoluteBlockItem) => UpdateItemAction;
export declare type GridActions = ResetStructureAction | UpdateItemAction;
export declare const getBlockItems: (state: MappedGridLayout) => GridLayoutStructure;
export declare const filterSelectedItems: (state: GridLayoutStructure, selectedItems?: SelectedItem[]) => SelectedItem[];
export declare const getItemKeys: (state: MappedGridLayout) => string[];
export declare const getStructureItem: (state: GridLayoutStructure, itemId: string) => AbsoluteBlockItem;
export declare const getItem: (state: MappedGridLayout, itemId: string) => AbsoluteBlockItem;
export declare const hasPreviewItem: (state: MappedGridLayout, itemId?: string) => boolean;
/**
 * Filter out any items not appearing in layoutStructure as they are currently unknown
 * Add any new items in layoutStructure, keep preview items
 * @param {MappedGridLayout} state reducer state
 * @param {GridLayoutStructure} layoutStructure current known state
 * @returns {GridLayoutStructure} filtered state
 */
export declare const getFilteredStructure: (state: MappedGridLayout, layoutStructure: GridLayoutStructure) => GridLayoutStructure;
export declare const initializeGridReducer: (layoutStructure?: GridLayoutStructure) => MappedGridLayout;
export declare const gridReducer: (state: MappedGridLayout, action: GridActions) => MappedGridLayout;
export {};
//# sourceMappingURL=gridLayoutUtils.d.ts.map