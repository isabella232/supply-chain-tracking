import type { AbsoluteBlockItem } from '@splunk/dashboard-types';
/**
 * @param {Object} item
 * @param {Object} viz
 * @returns {boolean} whether viz is left neighbor of item
 */
export declare const isLeftNeighbor: (item: AbsoluteBlockItem, viz: AbsoluteBlockItem) => boolean;
/**
 * @param {Object} item
 * @param {Object} viz
 * @returns {boolean} whether viz is right neighbor of item
 */
export declare const isRightNeighbor: (item: AbsoluteBlockItem, viz: AbsoluteBlockItem) => boolean;
/**
 * @param {Object} item
 * @param {Object} viz
 * @returns {boolean} whether viz is top neighbor of item
 */
export declare const isTopNeighbor: (item: AbsoluteBlockItem, viz: AbsoluteBlockItem) => boolean;
/**
 * @param {Object} item
 * @param {Object} viz
 * @returns {boolean} whether viz is bottom neighbor of item
 */
export declare const isBottomNeighbor: (item: AbsoluteBlockItem, viz: AbsoluteBlockItem) => boolean;
/**
 * Finds left and right neighbors of the given item and list of visualizations.
 * Note: This is *not* a generic function to find all neighbors. It is customized for remove
 * items and only returns neighbors that are contained with the y bounds of item.
 * @param {Object} item
 * @param {object[]} visualizations
 * @returns {{leftNeighbors: object[], rightNeighbors: object[]}}} list of horizontal neighbors that are within the y bounds of item
 */
export declare const findHorizontalNeighbors: ({ item, visualizations, }: {
    item: AbsoluteBlockItem;
    visualizations: AbsoluteBlockItem[];
}) => {
    leftNeighbors: AbsoluteBlockItem[];
    rightNeighbors: AbsoluteBlockItem[];
};
/**
 * Finds top and bottom neighbors of the given item and list of visualizations.
 * Note: This is *not* a generic function to find all neighbors. It is customized for remove
 * items and only returns neighbors that are contained with the x bounds of item.
 * @param {Object} item
 * @param {object[]} visualizations
 * @returns {{topNeighbors: object[], bottomNeighbors: object[]}} list of vertical neighbors that are within the y bounds of item
 */
export declare const findVerticalNeighbors: ({ item, visualizations, }: {
    item: AbsoluteBlockItem;
    visualizations: AbsoluteBlockItem[];
}) => {
    topNeighbors: AbsoluteBlockItem[];
    bottomNeighbors: AbsoluteBlockItem[];
};
/**
 * Returns the updated positions of visualizations when an item that spans an entire row is deleted.
 * Essentially all visualizations are shifted up.
 * @param {Object} obj
 * @param {Object} obj.itemToRemove
 * @param {object[]} obj.visualizations
 * @returns {object[]} visualizations with updated positions
 */
export declare const getItemsWithUpdatedPositions: ({ itemToRemove, visualizations, }: {
    itemToRemove: AbsoluteBlockItem;
    visualizations: AbsoluteBlockItem[];
}) => AbsoluteBlockItem[];
/**
 * Update the items around the item that is removed to fill the space
 * @param {Object} params
 * @param {Object} params.itemToRemove - The item that is being removed
 * @param {object[]} params.items - All the items on the canvas
 * @param {Number} params.width - The width of the entire canvas
 * @returns {object[]} - Array of updated items, filling the space of itemToRemove
 */
export declare const updateRemovedVizNeighbors: ({ itemToRemove, items, width, }: {
    itemToRemove: AbsoluteBlockItem;
    items: AbsoluteBlockItem[];
    width: number;
}) => AbsoluteBlockItem[];
//# sourceMappingURL=gridLayoutApiUtils.d.ts.map