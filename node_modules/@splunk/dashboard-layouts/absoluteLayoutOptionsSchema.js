/*!
 * Copyright © 2020 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 50);
/******/ })
/************************************************************************/
/******/ ({

/***/ 13:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    showTitleAndDescription: {
        type: 'boolean',
        default: true,
        description: 'A Boolean value to determine whether to display the Canvas Title and Description or not.',
    },
    submitButton: {
        type: 'boolean',
        description: 'You can also specify the layout option "submitButton". When set to true, a user must click a Submit button in order for the change in input selection to take effect (e.g. rerun searches with new dropdown values). If set to false, or if not specified at all, the dashboard will immediately refresh when a user makes a change in input selection.',
    },
    submitOnDashboardLoad: {
        type: 'boolean',
        default: false,
        description: 'A Boolean value to determine whether inputs should submit their default values (if they exist) on initial dashboard load in order to allow searches to run once before requiring submit button to be used. To be used when `submitButton` is set to true.',
    },
};


/***/ }),

/***/ 50:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var namedColors_1 = __importDefault(__webpack_require__(51));
var commonLayoutOptionsSchema_1 = __importDefault(__webpack_require__(13));
exports.default = __assign(__assign({}, commonLayoutOptionsSchema_1.default), { backgroundColor: {
        oneOf: [
            {
                pattern: '^#[0-9a-fA-F]{6}$',
                type: 'string',
                description: "Specify the color of the layout background color using a Hex code, such as \"#FF0000\".\n            The default for light mode is \"#F2F4f5\". The default for dark mode is \"#3C444D\". The default for SCP mode is \"#15161B\"",
            },
            {
                type: 'string',
                enum: namedColors_1.default,
                description: "Specify the color of the layout background color using a valid web color such as 'blue'",
            },
        ],
    }, display: {
        type: 'string',
        default: 'actual-size',
        enum: ['actual-size', 'auto-scale'],
        description: "Specify the display behavior.\n        If this property is set to actual-size, changing the size of your browser will not change the size of your dashboard or visualizations.\n        If this property is set to auto-scale, your dashboard and visualizations will automatically also change size.",
    }, backgroundImage: {
        type: 'object',
        properties: {
            w: {
                type: 'number',
                description: "Specify the image's h (height) and w (width) in pixels. These options should not be specified if you set the sizeType option. If they are, they will overrule that setting.",
            },
            h: {
                type: 'number',
                description: "Specify the image's h (height) and w (width) in pixels. These options should not be specified if you set the sizeType option. If they are, they will overrule that setting.",
            },
            x: {
                type: 'number',
                description: 'Specify, in pixels, the position of the background image on the x-axis and y-axis. These options should not be specified if you set the sizeType option. If they are, they will overrule that setting.',
            },
            y: {
                type: 'number',
                description: 'Specify, in pixels, the position of the background image on the x-axis and y-axis. These options should not be specified if you set the sizeType option. If they are, they will overrule that setting.',
            },
            src: {
                type: 'string',
                description: 'The url of background image.',
            },
            sizeType: {
                type: 'string',
                enum: ['auto', 'contain', 'cover'],
                default: 'contain',
                description: "Specify one of the following:\n                (auto | contain | cover).\n                auto : Scales the image while maintaining the image proportion.\n                contain: Increases the size of the of the image as much as possible without cropping or stretching it.\n                cover: Increases the size of the image without stretching it. The image may be cropped vertically and horizontally so that no empty space is shown.",
            },
        },
        description: "A background image must be one of the following types:\n        jpg, jpeg, png, svg, or gif.\n        Specify the location of a background image using the option src. For example: \"src\": \"https://www.myImageLocation.com/galleryX/image1.png",
        additionalProperties: false,
    }, width: {
        type: 'number',
        default: 1200,
        description: 'Canvas width in pixels.',
    }, height: {
        type: 'number',
        default: 900,
        description: 'Canvas height in pixels.',
    } });


/***/ }),

/***/ 51:
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-ui/utils/namedColors");

/***/ })

/******/ });
//# sourceMappingURL=absoluteLayoutOptionsSchema.js.map