/*!
 * Copyright © 2020 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.geoJsonOptions = void 0;
exports.geoJsonOptions = {
    us: {
        name: 'USA',
        source: 'geo://default/us',
        projection: 'mercator',
        sourceBounds: {
            lat: {
                min: 24,
                max: 50,
            },
            long: {
                min: -130,
                max: -60,
            },
        },
        logicalBounds: {
            x: {
                min: 0,
                max: 800,
            },
            y: {
                min: 0,
                max: 600,
            },
        },
        fillColor: '#EAEFF2',
        strokeColor: '#689C8D',
        selector: '.feature',
        geoFeatureGroups: [
            {
                name: 'lower48',
                featureMatcher: {
                    property: 'postal',
                    regex: '^(?!(AK|HI))',
                },
                sourceBounds: {
                    lat: { min: 24, max: 50 },
                    long: { min: -130, max: -60 },
                },
            },
            {
                name: 'Alaska',
                featureMatcher: {
                    property: 'postal',
                    regex: 'AK',
                },
                logicalBounds: {
                    x: { min: 100, max: 200 },
                    y: { min: 325, max: 425 },
                },
                sourceBounds: {
                    lat: { min: 45, max: 72 },
                    long: { min: -180, max: -120 },
                },
            },
            {
                name: 'Hawaii',
                featureMatcher: {
                    property: 'postal',
                    regex: 'HI',
                },
                logicalBounds: {
                    x: { min: 250, max: 350 },
                    y: { min: 375, max: 475 },
                },
                sourceBounds: {
                    lat: { min: 18.665677, max: 22.461292 },
                    long: { min: -160.921571, max: -154.242648 },
                },
            },
        ],
    },
    world: {
        name: 'WORLD',
        source: 'geo://default/world',
        projection: 'mercator',
        sourceBounds: {
            lat: { min: -60, max: 85 },
            long: { min: -180, max: 180 },
        },
        logicalBounds: { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } },
        fillColor: '#EAEFF2',
        strokeColor: '#689C8D',
        strokeHighlightColor: '#000000',
        selector: '.feature',
    },
};


/***/ }),
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var i18n_1 = __webpack_require__(5);
var visualization_icons_1 = __webpack_require__(6);
var ChartPie_1 = __importDefault(__webpack_require__(7));
var SingleValue_1 = __importDefault(__webpack_require__(8));
var Circle_1 = __importDefault(__webpack_require__(9));
var BoxUnchecked_1 = __importDefault(__webpack_require__(10));
var dashboard_icons_1 = __webpack_require__(11);
var get_1 = __importDefault(__webpack_require__(12));
var presetUtils_1 = __webpack_require__(13);
var initialGeoJsonOptions_1 = __webpack_require__(0);
var vizMap = {
    'viz.table': {
        label: i18n_1._('Table (deprecated)'),
        icon: visualization_icons_1.Table,
        category: presetUtils_1.vizCategories.get('table'),
        deprecated: true,
    },
    'viz.pie': {
        label: i18n_1._('Pie (deprecated)'),
        icon: ChartPie_1.default,
        category: presetUtils_1.vizCategories.get('comparisons'),
        deprecated: true,
    },
    'viz.punchcard': {
        label: i18n_1._('Punchcard (deprecated)'),
        icon: visualization_icons_1.Punchcard,
        category: presetUtils_1.vizCategories.get('distributions'),
        deprecated: true,
    },
    'viz.area': {
        label: i18n_1._('Area (deprecated)'),
        icon: visualization_icons_1.Area,
        category: presetUtils_1.vizCategories.get('trends'),
        deprecated: true,
    },
    'viz.bar': {
        label: i18n_1._('Bar (deprecated)'),
        icon: visualization_icons_1.Bar,
        category: presetUtils_1.vizCategories.get('comparisons'),
        deprecated: true,
    },
    'viz.bubble': {
        label: i18n_1._('Bubble (deprecated)'),
        icon: visualization_icons_1.Bubble,
        category: presetUtils_1.vizCategories.get('distributions'),
        deprecated: true,
    },
    'viz.column': {
        label: i18n_1._('Column (deprecated)'),
        icon: visualization_icons_1.Column,
        category: presetUtils_1.vizCategories.get('comparisons'),
        deprecated: true,
    },
    'viz.fillergauge': {
        label: i18n_1._('Filler Gauge (deprecated)'),
        icon: dashboard_icons_1.FillerGauge,
        category: presetUtils_1.vizCategories.get('gauge'),
        deprecated: true,
    },
    'viz.line': {
        label: i18n_1._('Line (deprecated)'),
        icon: visualization_icons_1.Line,
        category: presetUtils_1.vizCategories.get('trends'),
        deprecated: true,
    },
    'viz.markergauge': {
        label: i18n_1._('Marker Gauge (deprecated)'),
        icon: dashboard_icons_1.MarkerGauge,
        category: presetUtils_1.vizCategories.get('gauge'),
        deprecated: true,
    },
    'viz.scatter': {
        label: i18n_1._('Scatter (deprecated)'),
        icon: visualization_icons_1.Scatter,
        category: presetUtils_1.vizCategories.get('distributions'),
        deprecated: true,
    },
    'viz.radialgauge': {
        label: i18n_1._('Radial Gauge'),
        icon: dashboard_icons_1.RadialGauge,
        category: presetUtils_1.vizCategories.get('gauge'),
    },
    'viz.singlevalue': {
        label: i18n_1._('Single Value (deprecated)'),
        icon: visualization_icons_1.SingleValue,
        category: presetUtils_1.vizCategories.get('singleValue'),
        deprecated: true,
    },
    'viz.singlevalueicon': {
        label: i18n_1._('Single Value Icon (deprecated)'),
        icon: SingleValue_1.default,
        category: presetUtils_1.vizCategories.get('singleValue'),
        deprecated: true,
    },
    'viz.singlevalueradial': {
        label: i18n_1._('Single Value Radial'),
        icon: visualization_icons_1.SingleValueRadial,
        category: presetUtils_1.vizCategories.get('singleValue'),
    },
    'viz.markdown': {
        label: i18n_1._('Markdown (deprecated)'),
        category: presetUtils_1.vizCategories.get('text'),
        deprecated: true,
    },
    'viz.img': {
        label: i18n_1._('Image (deprecated)'),
        icon: visualization_icons_1.Image,
        category: presetUtils_1.vizCategories.get('image'),
        deprecated: true,
    },
    'viz.ellipse': {
        label: i18n_1._('Ellipse (deprecated)'),
        icon: Circle_1.default,
        category: presetUtils_1.vizCategories.get('shapes'),
        deprecated: true,
    },
    'viz.rectangle': {
        label: i18n_1._('Rectangle (deprecated)'),
        icon: BoxUnchecked_1.default,
        category: presetUtils_1.vizCategories.get('shapes'),
        deprecated: true,
    },
    'viz.text': {
        label: i18n_1._('Text'),
        category: presetUtils_1.vizCategories.get('text'),
    },
    'abslayout.line': {
        label: i18n_1._('Connected Line'),
        icon: visualization_icons_1.Line,
        category: presetUtils_1.vizCategories.get('shapes'),
    },
    'viz.geojson.us': {
        label: i18n_1._('Choropleth USA'),
        icon: dashboard_icons_1.USMap,
        category: presetUtils_1.vizCategories.get('choropleth'),
        initialOptions: initialGeoJsonOptions_1.geoJsonOptions.us,
    },
    'viz.geojson.world': {
        label: i18n_1._('Choropleth World'),
        icon: dashboard_icons_1.WorldMap,
        category: presetUtils_1.vizCategories.get('choropleth'),
        initialOptions: initialGeoJsonOptions_1.geoJsonOptions.world,
    },
    'viz.choropleth.svg': {
        label: i18n_1._('SVG (deprecated)'),
        icon: visualization_icons_1.ChoroplethSvg,
        category: presetUtils_1.vizCategories.get('choropleth'),
        initialOptions: {
            svg: '',
        },
        deprecated: true,
    },
};
/**
 * Add a `meta` property to legacy viz containing information such as key, name, and icon
 * @param {Visualization} Viz The visualization to enhance
 */
exports.default = (function (Viz, key) {
    if (key) {
        // eslint-disable-next-line no-param-reassign
        Viz.meta = __assign({ key: key }, get_1.default(vizMap, key, {}));
    }
    return Viz;
});


/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("@splunk/ui-utils/i18n");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualization-icons");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("@splunk/react-icons/ChartPie");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = require("@splunk/react-icons/SingleValue");

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = require("@splunk/react-icons/Circle");

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = require("@splunk/react-icons/BoxUnchecked");

/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-icons");

/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = require("lodash/get");

/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-ui/utils/presetUtils");

/***/ })
/******/ ]);
//# sourceMappingURL=withMeta.js.map