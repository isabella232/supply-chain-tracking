/*!
 * Copyright © 2020 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 47);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports) {

module.exports = require("@splunk/ui-utils/i18n");

/***/ }),

/***/ 1:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logfmt = void 0;
var hasWindowConsole = typeof window !== 'undefined' && 'console' in window;
var hasConsoleMethod = function (method) {
    return hasWindowConsole && typeof window.console[method] === 'function';
};
var noop = function () { return undefined; };
var console = {
    log: hasConsoleMethod('log')
        ? function () {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return (_a = window.console).log.apply(_a, __spread(args));
        }
        : noop,
    debug: hasConsoleMethod('debug')
        ? function () {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return (_a = window.console).debug.apply(_a, __spread(args));
        }
        : noop,
    info: hasConsoleMethod('info')
        ? function () {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return (_a = window.console).info.apply(_a, __spread(args));
        }
        : noop,
    warn: hasConsoleMethod('warn')
        ? function () {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return (_a = window.console).warn.apply(_a, __spread(args));
        }
        : noop,
    error: hasConsoleMethod('error')
        ? function () {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return (_a = window.console).error.apply(_a, __spread(args));
        }
        : noop,
    group: hasConsoleMethod('group')
        ? function () {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return (_a = window.console).group.apply(_a, __spread(args));
        }
        : noop,
    groupCollapsed: hasConsoleMethod('groupCollapsed')
        ? function () {
            var _a;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return (_a = window.console).groupCollapsed.apply(_a, __spread(args));
        }
        : noop,
    groupEnd: hasConsoleMethod('groupEnd')
        ? function () { return window.console.groupEnd(); }
        : noop,
    logWithDetails: function (message, lines) {
        console.groupCollapsed(message);
        lines.forEach(function (line) {
            return Array.isArray(line) ? console.log.apply(console, __spread(line)) : console.log(line);
        });
        console.groupEnd();
    },
};
exports.default = console;
function logfmt(strings) {
    var values = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        values[_i - 1] = arguments[_i];
    }
    return __spread([strings.join('%o')], (values || []));
}
exports.logfmt = logfmt;


/***/ }),

/***/ 4:
/***/ (function(module, exports) {

module.exports = require("lodash/get");

/***/ }),

/***/ 47:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.exportDashboardToFile = exports.exportVizAsPng = exports.applyCanvasEffects = exports.applyVizEffect = exports.processImages = exports.processImageNode = exports.processCanvasBackgroundImage = exports.createExportFileName = exports.drawImage = exports.cloneNodeWithStyles = exports.cloneNodeChildren = exports.cloneNodeStyles = exports.domNodeToSvgDataUri = exports.domNodeToSvg = exports.applyCanvasBackgroundColor = exports.replaceSvgChoroIframes = exports.replaceSvgChoroIframe = exports.applyTableScrolls = exports.applyTableScroll = exports.copyStyles = exports.getCssStyles = exports.fetchExternalResources = exports.blobToDataUri = exports.isDataUri = exports.exportPdf = exports.downloadPng = void 0;
var i18n_1 = __webpack_require__(0);
var get_1 = __importDefault(__webpack_require__(4));
var jspdf_1 = __importDefault(__webpack_require__(48));
var moment_1 = __importDefault(__webpack_require__(5));
var console_1 = __importDefault(__webpack_require__(1));
// export the following functions for test purpose only
/**
 * Trigger in-browser download action
 * @param {String} url
 * @param {String} name file name
 */
var downloadPng = function (url, name) {
    var evt = new MouseEvent('click', {
        view: window,
        bubbles: false,
        cancelable: true,
    });
    var link = document.createElement('a');
    link.setAttribute('download', name + ".png");
    link.setAttribute('target', '_blank');
    link.setAttribute('href', url);
    link.dispatchEvent(evt);
};
exports.downloadPng = downloadPng;
/**
 * Adds the given image to a new PDF and downloads it
 * @param {Number} clientWidth
 * @param {Number} clientHeight
 * @param {String} imageUri
 * @param {String} fileName
 */
var exportPdf = function (clientWidth, clientHeight, imageUri, fileName) { return __awaiter(void 0, void 0, void 0, function () {
    var orientation, pdf;
    return __generator(this, function (_a) {
        orientation = clientWidth > clientHeight ? 'landscape' : 'portrait';
        pdf = new jspdf_1.default({
            orientation: orientation,
            unit: 'px',
            format: [clientWidth, clientHeight],
        });
        pdf.addImage(imageUri, 'PNG', 0, 0, pdf.internal.pageSize.getWidth(), pdf.internal.pageSize.getHeight(), '', 'FAST');
        pdf.save(fileName + ".pdf");
        return [2 /*return*/];
    });
}); };
exports.exportPdf = exportPdf;
/**
 * Function to check if the Uri is data Uri
 * @param {String} uri
 * @returns {boolean}
 */
var isDataUri = function (uri) { return /^(data:)/.test(uri); };
exports.isDataUri = isDataUri;
/**
 * Convert response blob to data Uri
 * @param {blob} blob
 * @returns {Object} data Uri
 */
var blobToDataUri = function (blob) {
    return new Promise(function (resolve, reject) {
        var reader = new FileReader();
        reader.onloadend = function () {
            resolve(reader.result);
        };
        reader.onerror = reject;
        reader.readAsDataURL(blob);
    });
};
exports.blobToDataUri = blobToDataUri;
/**
 * Fetch same origin resources
 * @param {String} url
 * @returns {blob} data blob
 */
var fetchExternalResources = function (url) { return __awaiter(void 0, void 0, void 0, function () {
    var response, responseBodyBlob;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, fetch(url)];
            case 1:
                response = _a.sent();
                if (!response.ok) {
                    throw new Error("Unable to fetch resources at: " + url);
                }
                return [4 /*yield*/, response.blob()];
            case 2:
                responseBodyBlob = _a.sent();
                return [2 /*return*/, exports.blobToDataUri(responseBodyBlob)];
        }
    });
}); };
exports.fetchExternalResources = fetchExternalResources;
/**
 * Get all css styles as string for a given dom element
 * @param {HTMLElement} scaledDomNode
 * @returns {String} cssStrings
 */
var getCssStyles = function (scaledDomNode) { return __awaiter(void 0, void 0, void 0, function () {
    var FONTS_URL_REGEX, sheets, cssStylesString;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                FONTS_URL_REGEX = /url\(['"]?([^'"]+?)['"]?\)/g;
                sheets = Array.from(scaledDomNode.ownerDocument.styleSheets);
                cssStylesString = '';
                return [4 /*yield*/, Promise.all(sheets.map(function (sheet) { return __awaiter(void 0, void 0, void 0, function () {
                        var cssRules;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    cssRules = sheet.cssRules;
                                    return [4 /*yield*/, Promise.all(Array.from(cssRules).map(function (cssRule) { return __awaiter(void 0, void 0, void 0, function () {
                                            var fontFaces, fontFaceUrls, match;
                                            return __generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0:
                                                        if (!(cssRule.type === CSSRule.FONT_FACE_RULE)) return [3 /*break*/, 2];
                                                        fontFaces = cssRule.style.getPropertyValue('src');
                                                        fontFaceUrls = [];
                                                        match = null;
                                                        while (
                                                        // eslint-disable-next-line  no-cond-assign
                                                        (match = FONTS_URL_REGEX.exec(fontFaces)) !== null) {
                                                            fontFaceUrls.push(match[1]);
                                                        }
                                                        return [4 /*yield*/, Promise.all(fontFaceUrls
                                                                .filter(function (fontFaceUrl) { return !exports.isDataUri(fontFaceUrl); })
                                                                .map(function (fontFaceUrl) { return __awaiter(void 0, void 0, void 0, function () {
                                                                var fontData, e_1;
                                                                return __generator(this, function (_a) {
                                                                    switch (_a.label) {
                                                                        case 0:
                                                                            _a.trys.push([0, 2, , 3]);
                                                                            return [4 /*yield*/, exports.fetchExternalResources(fontFaceUrl)];
                                                                        case 1:
                                                                            fontData = _a.sent();
                                                                            cssStylesString += cssRule.cssText.replace(fontFaceUrl, fontData);
                                                                            return [3 /*break*/, 3];
                                                                        case 2:
                                                                            e_1 = _a.sent();
                                                                            console_1.default.error(e_1);
                                                                            return [3 /*break*/, 3];
                                                                        case 3: return [2 /*return*/];
                                                                    }
                                                                });
                                                            }); }))];
                                                    case 1:
                                                        _a.sent();
                                                        return [3 /*break*/, 3];
                                                    case 2:
                                                        cssStylesString += cssRule.cssText;
                                                        _a.label = 3;
                                                    case 3:
                                                        cssStylesString += '\n';
                                                        return [2 /*return*/];
                                                }
                                            });
                                        }); }))];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    }); }))];
            case 1:
                _a.sent();
                return [2 /*return*/, cssStylesString];
        }
    });
}); };
exports.getCssStyles = getCssStyles;
/**
 * Copy all css styles from given dom element to a <style> dom element
 * @param {HtmlElement} scaledDomNode
 * @returns {HtmlElement} style
 */
var copyStyles = function (scaledDomNode) { return __awaiter(void 0, void 0, void 0, function () {
    var style, cssStyles;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                style = document.createElementNS('http://www.w3.org/2000/svg', 'style');
                return [4 /*yield*/, exports.getCssStyles(scaledDomNode)];
            case 1:
                cssStyles = _a.sent();
                style.appendChild(document.createTextNode(cssStyles));
                return [2 /*return*/, style];
        }
    });
}); };
exports.copyStyles = copyStyles;
/**
 * Table is possibly scrolled, this calculation is to get the difference of scrolling table
 * And then use transform to shift the place of the table
 * @param {HtmlElement} vizNode
 * @param {HtmlElement} clonedNode
 * @param {String} type
 */
var applyTableScroll = function (vizNode, clonedNode, type) {
    if (type !== 'viz.table' || !vizNode.getElementsByTagName('tbody').length) {
        return;
    }
    // Using parentNode might not be safe because DOM structure can be possibly changed
    // Using html2canvas might be better to handle this https://jira.splunk.com/browse/SPL-188417
    var table = vizNode.querySelector('[data-test=main-table]').parentNode;
    var scrollLeft = table.scrollLeft, scrollTop = table.scrollTop;
    // correct the place based on scroll properties of the table
    var translateX = 0 - scrollLeft;
    var translateY = 0 - scrollTop;
    // eslint-disable-next-line no-param-reassign
    clonedNode.getElementsByTagName('tbody')[0].style.transform = "translate(" + translateX + "px, " + translateY + "px)";
    // clean-up: remove scroll bars for downloads since they can show incorrect scroll position
    var clonedTableBody = clonedNode.querySelector('[data-test=main-table]')
        .parentNode;
    var clonedTable = clonedNode.querySelector('[data-test=table]');
    clonedTableBody.style.overflow = 'hidden';
    clonedTable.style.width = '100%';
    clonedTable.style.height = '100%';
};
exports.applyTableScroll = applyTableScroll;
/**
 * Calls applyTableScroll on each table viz in the dashboard
 * @param {HtmlElement} canvasDomNode
 * @param {HtmlElement} clonedCanvasNode
 */
var applyTableScrolls = function (canvasDomNode, clonedCanvasNode) {
    var tables = canvasDomNode.querySelectorAll('div[data-viz-type="viz.table"]');
    var clonedTables = clonedCanvasNode.querySelectorAll('div[data-viz-type="viz.table"]');
    tables.forEach(function (table, index) {
        exports.applyTableScroll(table, clonedTables[index], 'viz.table');
    });
};
exports.applyTableScrolls = applyTableScrolls;
var replaceSvgChoroIframe = function (clonedNode, type) {
    if (!type.includes('choropleth') ||
        !clonedNode.getElementsByTagName('iframe').length) {
        return;
    }
    var parser = new DOMParser();
    var serializer = new XMLSerializer();
    var iframeNode = clonedNode.getElementsByTagName('iframe')[0];
    var parentNode = iframeNode.parentNode;
    // Decode the dataURI used in the SvgChoro <iframe> and extract just the <svg>
    var b64Regex = /data:[^;]+;base64,(.*)$/;
    var b64 = b64Regex.exec(iframeNode.src)[1];
    var decodedContent = atob(b64);
    var htmlNode = parser.parseFromString(decodedContent, 'application/xml');
    var svgNode = htmlNode.getElementsByTagName('svg')[0];
    // encode the SVG and put it in an <img> node
    var svg = serializer.serializeToString(svgNode);
    var imageNode = new Image();
    imageNode.src = "data:image/svg+xml;base64," + btoa(svg);
    // replace the <iframe> with the <img>
    parentNode.replaceChild(imageNode, iframeNode);
};
exports.replaceSvgChoroIframe = replaceSvgChoroIframe;
var replaceSvgChoroIframes = function (clonedCanvasNode) {
    var svgChoros = clonedCanvasNode.querySelectorAll('div[data-viz-type="viz.choropleth.svg"]');
    svgChoros.forEach(function (svgChoro) {
        exports.replaceSvgChoroIframe(svgChoro, 'viz.choropleth.svg');
    });
    svgChoros = clonedCanvasNode.querySelectorAll('div[data-viz-type="splunk.choropleth.svg"]');
    svgChoros.forEach(function (svgChoro) {
        exports.replaceSvgChoroIframe(svgChoro, 'splunk.choropleth.svg');
    });
};
exports.replaceSvgChoroIframes = replaceSvgChoroIframes;
/**
 * search for the canvas element and apply it's backgroundColor to domNode
 * @param {HtmlElement} domNode
 */
var applyCanvasBackgroundColor = function (domNode) {
    var canvasNode = document.querySelector('[data-test="canvas"]');
    if (canvasNode) {
        // eslint-disable-next-line no-param-reassign
        domNode.style.backgroundColor = window.getComputedStyle(canvasNode).backgroundColor;
    }
};
exports.applyCanvasBackgroundColor = applyCanvasBackgroundColor;
/**
 * Convert the given dom element string to a Svg foreignObject string
 * @param {String} vizDomString
 * @param {integer} width
 * @param {integer} height
 * @returns {String} svg
 */
var domNodeToSvg = function (vizDomString, width, height) {
    return "<svg xmlns='http://www.w3.org/2000/svg' width='" + width + "' height='" + height + "'><foreignObject width='100%' height='100%' externalResourcesRequired ='true'> " + vizDomString + " </foreignObject></svg>";
};
exports.domNodeToSvg = domNodeToSvg;
/**
 * Convert the given element to Svg data Uri
 * @param {HtmlElement} scaledDomNode
 * @param {integer} scaledWidth
 * @param {integer} scaledHeight
 * @returns {String} SvgDataUri
 */
var domNodeToSvgDataUri = function (scaledDomNode, scaledWidth, scaledHeight) { return __awaiter(void 0, void 0, void 0, function () {
    var styleNode, svg;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, exports.copyStyles(scaledDomNode)];
            case 1:
                styleNode = _a.sent();
                scaledDomNode.insertBefore(styleNode, scaledDomNode.firstChild);
                svg = new XMLSerializer().serializeToString(scaledDomNode);
                return [2 /*return*/, "data:image/svg+xml;charset=utf-8," + encodeURIComponent(exports.domNodeToSvg(svg, scaledWidth, scaledHeight))];
        }
    });
}); };
exports.domNodeToSvgDataUri = domNodeToSvgDataUri;
/**
 * Copy dom element css styles from source to target
 * @param {HtmlElement} clonedDomNode
 * @param {HtmlElement} originalDomNode
 */
var cloneNodeStyles = function (clonedDomNode, originalDomNode) {
    if (!(clonedDomNode instanceof HTMLElement)) {
        return;
    }
    var sourceStyles = window.getComputedStyle(originalDomNode);
    var targetStyles = clonedDomNode.style;
    if (sourceStyles.cssText) {
        targetStyles.cssText = sourceStyles.cssText;
    }
    else {
        Array.from(sourceStyles).forEach(function (name) {
            targetStyles.setProperty(name, sourceStyles.getPropertyValue(name), sourceStyles.getPropertyPriority(name));
        });
    }
};
exports.cloneNodeStyles = cloneNodeStyles;
/**
 * Recursively clone dom element children from original
 * @param {HtmlElement} clonedParentDomNode
 * @param {HtmlElement} originalParentDomNode
 */
var cloneNodeChildren = function (clonedParentDomNode, originalParentDomNode) {
    var childNodes = originalParentDomNode.childNodes;
    childNodes.forEach(function (childNode) {
        var clonedChildNode = childNode.cloneNode();
        exports.cloneNodeStyles(clonedChildNode, childNode);
        clonedParentDomNode.appendChild(clonedChildNode);
        exports.cloneNodeChildren(clonedChildNode, childNode);
    });
};
exports.cloneNodeChildren = cloneNodeChildren;
/**
 * Create a cloned dom element and copy all the styles and children
 * @param {HtmlElement} vizDomNode
 * @returns {HtmlElement} clonedDomNode
 */
var cloneNodeWithStyles = function (vizDomNode) {
    var clonedDomNode = vizDomNode.cloneNode();
    exports.cloneNodeStyles(clonedDomNode, vizDomNode);
    exports.cloneNodeChildren(clonedDomNode, vizDomNode);
    return clonedDomNode;
};
exports.cloneNodeWithStyles = cloneNodeWithStyles;
var delay = function (ms) { return new Promise(function (resolve) { return setTimeout(resolve, ms); }); };
/**
 * Draw the svgUrl on the html canvas and export as DataUrl
 * scaledWidth and scaledHeight are used for scale the exported image size
 * @param {String} imageUrl
 * @param {integer} width original dom element width
 * @param {integer} height original dom element height
 * @param {integer} scaledWidth
 * @param {integer} scaledHeight
 */
var drawImage = function (imageUrl, width, height, scaledWidth, scaledHeight) {
    return new Promise(function (resolve, reject) {
        var canvas = document.createElement('canvas');
        if (!canvas.getContext) {
            reject(i18n_1._('Canvas is not supported'));
        }
        var img = new Image();
        img.crossOrigin = 'anonymous';
        var canvasScaledWidth = scaledWidth || width;
        var canvasScaledHeight = scaledHeight || height;
        canvas.width = canvasScaledWidth;
        canvas.height = canvasScaledHeight;
        img.addEventListener('load', function () { return __awaiter(void 0, void 0, void 0, function () {
            var context, dataUrl, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        // On first export in Safari, the fonts in the image will
                        // not be rendered yet, so we should wait until the image
                        // is fully rendered before adding it to the canvas.
                        return [4 /*yield*/, delay(0)];
                    case 1:
                        // On first export in Safari, the fonts in the image will
                        // not be rendered yet, so we should wait until the image
                        // is fully rendered before adding it to the canvas.
                        _a.sent();
                        context = canvas.getContext('2d');
                        context.drawImage(img, 0, 0, img.width, img.height, 0, 0, canvasScaledWidth, canvasScaledHeight);
                        context.imageSmoothingQuality = 'high';
                        dataUrl = canvas.toDataURL('image/png');
                        resolve(dataUrl);
                        return [3 /*break*/, 3];
                    case 2:
                        e_2 = _a.sent();
                        // canvas is tainted
                        reject(e_2);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
        img.addEventListener('error', reject);
        img.src = imageUrl;
    });
};
exports.drawImage = drawImage;
/**
 * Util function to create download file name
 * @param {String} name
 * @returns {String}
 */
var createExportFileName = function (name) {
    var formattedDateTime = moment_1.default().format('YYYY-MM-DD [at] hh.mm.ssZZ');
    return name + "_" + formattedDateTime + "_Splunk";
};
exports.createExportFileName = createExportFileName;
/**
 * Replaces the backgroundImage URL with dataUri
 * @param {HtmlElement} clonedCanvasNode
 */
var processCanvasBackgroundImage = function (clonedCanvasNode) { return __awaiter(void 0, void 0, void 0, function () {
    var canvasNode, canvasBackgroundImage, urlRegex, url, dataUri, e_3;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                canvasNode = clonedCanvasNode.querySelector('div[data-test=canvas]');
                canvasBackgroundImage = get_1.default(canvasNode, ['style', 'backgroundImage']);
                urlRegex = /url\(['"]?([^'"]+?)['"]?\)/g;
                url = urlRegex.exec(canvasBackgroundImage);
                if (!url) return [3 /*break*/, 4];
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4 /*yield*/, exports.fetchExternalResources(url[1])];
            case 2:
                dataUri = _a.sent();
                canvasNode.style.backgroundImage = "url(" + dataUri + ")";
                return [3 /*break*/, 4];
            case 3:
                e_3 = _a.sent();
                console_1.default.error(e_3);
                return [3 /*break*/, 4];
            case 4: return [2 /*return*/];
        }
    });
}); };
exports.processCanvasBackgroundImage = processCanvasBackgroundImage;
/**
 * Convert all external same origin image to image data Uri.
 * During drawing on html canvas, it does not allow to fetch external images,
 * This function helps to fetch those images and embedded as inline data Url image
 * @param {*} imageNode
 */
var processImageNode = function (imageNode) { return __awaiter(void 0, void 0, void 0, function () {
    var src, dataUri;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                src = imageNode.src;
                dataUri = '';
                if (!!exports.isDataUri(src)) return [3 /*break*/, 2];
                return [4 /*yield*/, exports.fetchExternalResources(src)];
            case 1:
                dataUri = _a.sent();
                // eslint-disable-next-line no-param-reassign
                imageNode.src = dataUri;
                _a.label = 2;
            case 2: return [2 /*return*/];
        }
    });
}); };
exports.processImageNode = processImageNode;
/**
 * Convert all external same origin images to image data Uris.
 * @param {HtmlElement} domNode
 */
var processImages = function (domNode, vizType) { return __awaiter(void 0, void 0, void 0, function () {
    var imageNodes, imageErrors;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                imageNodes = domNode.getElementsByTagName('img');
                imageErrors = 0;
                if (!(imageNodes.length > 0)) return [3 /*break*/, 2];
                return [4 /*yield*/, Promise.all(Array.from(imageNodes).map(function (imageNode) { return __awaiter(void 0, void 0, void 0, function () {
                        var error_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    return [4 /*yield*/, exports.processImageNode(imageNode)];
                                case 1:
                                    _a.sent();
                                    return [3 /*break*/, 3];
                                case 2:
                                    error_1 = _a.sent();
                                    imageErrors += 1;
                                    if (vizType === 'viz.img') {
                                        throw error_1;
                                    }
                                    return [3 /*break*/, 3];
                                case 3: return [2 /*return*/];
                            }
                        });
                    }); }))];
            case 1:
                _a.sent();
                _a.label = 2;
            case 2:
                if (imageErrors > 0) {
                    throw new Error(i18n_1._('Some external images can not be downloaded.'));
                }
                return [2 /*return*/];
        }
    });
}); };
exports.processImages = processImages;
/**
 * Apply special effects on viz dom element
 * @param {HtmlElement} vizNode
 * @param {HtmlElement} clonedNode
 * @param {String} type
 */
var applyVizEffect = function (vizNode, clonedNode, type) {
    exports.applyTableScroll(vizNode, clonedNode, type);
    exports.applyCanvasBackgroundColor(clonedNode);
    exports.replaceSvgChoroIframe(clonedNode, type);
};
exports.applyVizEffect = applyVizEffect;
/**
 * Apply special effects on canvas dom element
 * @param {HtmlElement} canvasNode
 * @param {HtmlElement} clonedCanvasNode
 */
var applyCanvasEffects = function (canvasNode, clonedCanvasNode) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, exports.processCanvasBackgroundImage(clonedCanvasNode)];
            case 1:
                _a.sent();
                exports.applyTableScrolls(canvasNode, clonedCanvasNode);
                exports.replaceSvgChoroIframes(clonedCanvasNode);
                return [2 /*return*/];
        }
    });
}); };
exports.applyCanvasEffects = applyCanvasEffects;
// export above functions for test purpose only
/**
 * Main function to export a viz dom element as png
 * @param {HtmlElement} vizDomNode
 * @param {String} vizId
 * @param {String} vizType
 * @param {Number} scale
 * @param {Object} config
 * @param {Function} showToast
 */
var exportVizAsPng = function (_a) {
    var vizDomNode = _a.vizDomNode, vizId = _a.vizId, vizType = _a.vizType, _b = _a.scale, scale = _b === void 0 ? 1 : _b, showToast = _a.showToast;
    return __awaiter(void 0, void 0, void 0, function () {
        var clientWidth, clientHeight, clonedDomNode, scaledDomNode, scaledWidth, scaledHeight, error_2, imageUri, downloadUri, e_4;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!vizDomNode) {
                        throw new Error(i18n_1._("Visualization " + vizType + " not found."));
                    }
                    clientWidth = vizDomNode.clientWidth, clientHeight = vizDomNode.clientHeight;
                    clonedDomNode = exports.cloneNodeWithStyles(vizDomNode);
                    scaledDomNode = clonedDomNode;
                    scaledWidth = clientWidth;
                    scaledHeight = clientHeight;
                    if (scale && scale !== 1) {
                        scaledDomNode.style.cssText = "transform: scale(" + scale + "); transform-origin: 0 0;";
                        scaledWidth = clientWidth * scale;
                        scaledHeight = clientHeight * scale;
                    }
                    exports.applyVizEffect(vizDomNode, scaledDomNode, vizType);
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, exports.processImages(scaledDomNode)];
                case 2:
                    _c.sent();
                    return [3 /*break*/, 4];
                case 3:
                    error_2 = _c.sent();
                    if (showToast) {
                        showToast('Images from external URLs cannot be downloaded.');
                    }
                    throw error_2;
                case 4:
                    _c.trys.push([4, 7, , 8]);
                    return [4 /*yield*/, exports.domNodeToSvgDataUri(scaledDomNode, scaledWidth, scaledHeight)];
                case 5:
                    imageUri = _c.sent();
                    return [4 /*yield*/, exports.drawImage(imageUri, clientWidth, clientHeight, scaledWidth, scaledHeight)];
                case 6:
                    downloadUri = _c.sent();
                    exports.downloadPng(downloadUri, exports.createExportFileName(vizType));
                    return [3 /*break*/, 8];
                case 7:
                    e_4 = _c.sent();
                    throw new Error(i18n_1._("Unable to export the visualization  id=" + vizId + " type=" + vizType + " as png."));
                case 8: return [2 /*return*/];
            }
        });
    });
};
exports.exportVizAsPng = exportVizAsPng;
/**
 * Main function to export a dashboard as png or pdf
 * @param {string} fileType
 * @param {HtmlElement} dashboardHeaderDomNode
 * @param {HtmlElement} dashboardInputsDomNode
 * @param {HtmlElement} dashboardCanvasDomNode
 * @param {Number} scale
 * @param {Function} showToast
 */
var exportDashboardToFile = function (_a) {
    var fileType = _a.fileType, dashboardTitle = _a.dashboardTitle, dashboardHeaderDomNode = _a.dashboardHeaderDomNode, dashboardInputsDomNode = _a.dashboardInputsDomNode, dashboardCanvasDomNode = _a.dashboardCanvasDomNode, _b = _a.scale, scale = _b === void 0 ? 1 : _b, showToast = _a.showToast;
    return __awaiter(void 0, void 0, void 0, function () {
        var nodeToExport, clientHeight, clientWidth, clonedHeaderNode, clonedInputsNode, clonedCanvasNode, scaledDomNode, scaledWidth, scaledHeight, error_3, imageUri, downloadUri, fileName, e_5;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    nodeToExport = document.createElement('div');
                    clientHeight = dashboardCanvasDomNode.clientHeight;
                    clientWidth = dashboardCanvasDomNode.clientWidth;
                    if (dashboardHeaderDomNode) {
                        clonedHeaderNode = exports.cloneNodeWithStyles(dashboardHeaderDomNode);
                        nodeToExport.appendChild(clonedHeaderNode);
                        clientHeight += dashboardHeaderDomNode.clientHeight;
                    }
                    if (dashboardInputsDomNode) {
                        clonedInputsNode = exports.cloneNodeWithStyles(dashboardInputsDomNode);
                        nodeToExport.appendChild(clonedInputsNode);
                        clientHeight += dashboardInputsDomNode.clientHeight;
                    }
                    clonedCanvasNode = exports.cloneNodeWithStyles(dashboardCanvasDomNode);
                    nodeToExport.appendChild(clonedCanvasNode);
                    scaledDomNode = nodeToExport;
                    scaledWidth = clientWidth;
                    scaledHeight = clientHeight;
                    if (scale && scale !== 1) {
                        scaledDomNode.style.cssText = "transform: scale(" + scale + "); transform-origin: 0 0;";
                        scaledWidth = clientWidth * scale;
                        scaledHeight = clientHeight * scale;
                    }
                    if (dashboardHeaderDomNode || dashboardInputsDomNode) {
                        scaledDomNode.style.backgroundColor = window.getComputedStyle(dashboardHeaderDomNode || dashboardInputsDomNode).backgroundColor;
                    }
                    return [4 /*yield*/, exports.applyCanvasEffects(dashboardCanvasDomNode, clonedCanvasNode)];
                case 1:
                    _c.sent();
                    _c.label = 2;
                case 2:
                    _c.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, exports.processImages(scaledDomNode)];
                case 3:
                    _c.sent();
                    return [3 /*break*/, 5];
                case 4:
                    error_3 = _c.sent();
                    if (showToast) {
                        showToast('Images from external URLs cannot be downloaded.');
                    }
                    return [3 /*break*/, 5];
                case 5:
                    _c.trys.push([5, 8, , 9]);
                    return [4 /*yield*/, exports.domNodeToSvgDataUri(scaledDomNode, scaledWidth, scaledHeight)];
                case 6:
                    imageUri = _c.sent();
                    return [4 /*yield*/, exports.drawImage(imageUri, clientWidth, clientHeight, scaledWidth, scaledHeight)];
                case 7:
                    downloadUri = _c.sent();
                    fileName = exports.createExportFileName(dashboardTitle || i18n_1._('My Dashboard'));
                    if (fileType.toLowerCase() === 'png') {
                        exports.downloadPng(downloadUri, fileName);
                    }
                    else {
                        exports.exportPdf(clientWidth, clientHeight, downloadUri, fileName);
                    }
                    return [3 /*break*/, 9];
                case 8:
                    e_5 = _c.sent();
                    throw new Error(i18n_1._("Unable to export the dashboard as " + fileType));
                case 9: return [2 /*return*/];
            }
        });
    });
};
exports.exportDashboardToFile = exportDashboardToFile;


/***/ }),

/***/ 48:
/***/ (function(module, exports) {

module.exports = require("jspdf");

/***/ }),

/***/ 5:
/***/ (function(module, exports) {

module.exports = require("@splunk/moment");

/***/ })

/******/ });
//# sourceMappingURL=ContentExporter.js.map