declare type StyleInput = number | string | null | undefined;
/**
 * convert number to px
 * @param {number | string | null | undefined} number
 * @param {Number} defaultNumber
 * @returns {String}
 */
export declare const toPx: (num: StyleInput, defaultNumber?: number | string) => string;
interface DimensionArg {
    width?: StyleInput;
    height?: StyleInput;
}
/**
 * generate width/height css properties
 * @param {Object} obj
 * @param {Number | String | null | undefined} obj.width
 * @param {Number | String | null | undefined} obj.height
 * @returns {String}
 */
export declare const toDimension: ({ width, height }: DimensionArg) => string;
/**
 * generate margin css property
 */
export declare const arrayToCSSProp: (prop: string, values?: StyleInput | StyleInput[]) => string;
/**
 * generate margin css property
 */
export declare const toMargin: (margins?: StyleInput | StyleInput[]) => ReturnType<typeof arrayToCSSProp>;
/**
 * generate padding css property
 */
export declare const toPadding: (paddings?: StyleInput | StyleInput[]) => ReturnType<typeof arrayToCSSProp>;
export {};
//# sourceMappingURL=style.d.ts.map