import moment from '@splunk/moment';
import { snapUnits } from './timeUnits';
declare type SplunkMoment = typeof moment;
declare type SnapUnitsKey = keyof typeof snapUnits;
/**
 * Returns a moment for the given time or the current time, if none is given
 * @method epochToMoment
 * @param {Number} [epoch] given time in seconds
 * @returns Moment
 */
export declare const epochToMoment: (epoch?: number | undefined) => SplunkMoment;
/**
 * Normalizes units to it's shortest version, such as `s` for `sec` and `mon` for `month`.
 * @name normalizeUnit
 * @function
 * @public
 * @param {String} unit - The unit, such as `s` or `quarter`.
 * @param {bool} [removeInvalid=true] - When true, returns an empty string for invalid units,
 * when false
 * returns 's' for invalid units.
 * @returns {String} Returns the normalized unit or empty string.
 */
export declare function normalizeUnit(abbr: string, removeInvalid?: boolean): string;
/**
 * Normalizes snap units to it's shortest version, this is the same as normalizeUnit, but also
 * supports weekdays, such as `w5`.
 * @public
 * @param {String} unit - The unit, such as `s`, `quarter` or `w0`.
 * @param {bool} [removeInvalid=true] - When true, returns an empty string for invalid units,
 * when false returns 's' for invalid units.
 * @returns {String} Returns the normalized unit or empty string.
 */
export declare function normalizeSnapUnit(abbr: string, removeInvalid?: boolean): string;
/**
 * Returns a label for a unit abbreviation, such as 'second' for 's' or 'sec'.
 * @public
 * @param {Object} unit -  The unit, such as `s`, `quarter` or `w0`.
 * @param {Object} [plural=false] - Whether the returned label should be plural.
 * @returns {String}
 */
export declare function getUnitLabel(unit: SnapUnitsKey, plural?: boolean): string;
/**
 * Strips rt from the beginning of a time string when found. This makes a time string compatible
 * with the time parser. To ensure capability with the time parser 'rt' returns 'now'.
 * @public
 * @param {String} time - The time string such as `47165491` or `rt-2h@m`.
 * @returns {String} Returns the time string.
 */
export declare function removeRealTime(time: string): string;
/**
 * Removes the timezone from an iso time string
 * @public
 * @param {String} time - The time string such as `47165491` or `-2h@m`.
 * @returns {String}
 */
export declare function removeISOTimezone(time: string): string;
/**
 * Validates that a string represents a unix epoch time.
 * @public
 * @param {String} time - The time string such as `47165491` or `-2h@m`.
 * @returns {bool}
 */
export declare function isEpoch(time: string | number): boolean;
/**
 * Validates that a string represents an ISO time.
 * @public
 * @param {String} time - The time string such as `47165491` or `-2h@m`.
 * @returns {bool}
 */
export declare function isISO(time: string): boolean;
/**
 * Validates that a string represents an ISO or unix epoch time.
 * @public
 * @param {String} time - The time string such as `47165491` or `-2h@m`.
 * @returns {bool}
 */
export declare function isAbsolute(time: string): boolean;
interface TimeASTModifier {
    string: string;
    isParsed: boolean;
    unit: string;
    amount: number;
    snap: string | false;
}
interface TimeAST {
    string: string;
    type: 'iso' | 'epoch' | 'realTime' | 'relative';
    isFullyParsed: boolean;
    modifiers: TimeASTModifier[];
}
/**
 * Parses a time string for inspection or form population.
 *
 * Example parse for a relative time string:
 * ```
 * {
 *     string: '-3d@qtr+2hr',
 *     type: ['relative'], // 'relative', 'realTime', 'iso', or 'epoch'
 *     isFullyParsed: true,
 *     modifiers: [
 *         {
 *             string: '-3d@qtr',
 *             isParsed: true,
 *             unit: 'd',
 *             amount: -3,
 *             snap: 'q',
 *         },
 *         {
 *             string: '+2hr',
 *             isParsed: true,
 *             unit: 'h',
 *             amount: +2,
 *             snap: false,
 *         },
 *     ],
 * }
 * ```
 * Example parse for a epoch time:
 * ```
 * {
 *     string: '89451357',
 *     type: ['epoch'],
 *     isFullyParsed: true,
 *     modifiers: [],
 * }
 *
 * @public
 * @param {String} time - The time string such as `47165491` or `-2h@m`.
 * @returns {Object}
 */
export declare function parseTimeString(timeString: string): TimeAST | false;
/**
 * Validates that a string is a valid time string.
 * @public
 * @param {String} time - The time string such as `rt` , `rtnow` or `-2h@m`.
 * @returns {bool}
 */
export declare function isValidTime(time: string): boolean;
/**
 * Validates that a string represents a real-time search.
 * @public
 * @param {String} time - The time string such as `rt` , `rtnow` or `-2h@m`.
 * @returns {bool}
 */
export declare function isRealTime(time: string): boolean;
/**
 * Validates that a iso time string is a whole day.
 * @public
 * @param {string|object} time - A time string (such as `2008-09-15T15:53:00+05:00`) or a
 * @splunk/moment time instance.
 * @returns {bool}
 */
export declare function isWholeDay(time: string | SplunkMoment): boolean;
/**
 * Validate that a time string acts is either empty or `0`.
 * @public
 * @param {String} time - The time string such as `rt` , `rtnow` or `-2h@m`.
 * @returns {bool}
 */
export declare function isEarliestEmpty(time: string): boolean;
/**
 * Validate that a time string acts is either empty or now
 * @public
 * @param {String} time - The time string such as `rt` , `rtnow` or `-2h@m`.
 * @returns {bool}
 */
export declare function isLatestNow(time: string): boolean;
/**
 * Validate that a time range acts is equivalent to all-time.
 * @public
 * @param {String} earliest - The time string such as `rt` , `rtnow` or `-2h@m`.
 * @param {String} latest - The time string such as `rt` , `rtnow` or `-2h@m`.
 * @returns {bool}
 */
export declare function isAllTime(earliest: string, latest: string): boolean;
interface TimeRange {
    earliest: string;
    latest: string;
}
/**
 * Validate that two time range are equivalent. This normalizes the two comparisons using
 * isEarliestEmpty() and isLatestNow().
 * @public
 * @param {Object} range1 - The time string range  such as `{ earliest: '-1d', latest: 'now' }`.
 * @param {Object} range2 -  The time string range such as `{ earliest: '0', latest: '-1d' }`.
 * @returns {bool}
 */
export declare function timeRangesAreEquivalent(range1: TimeRange, range2: TimeRange): boolean;
interface TimePreset extends TimeRange {
    label: string;
}
/**
 * Searches through an array of presets and returns any equivalent labels using
 * timeRangesAreEquivalent().
 * @public
 * @param {array} presets - An array of presents such as:
 * ```
 * [
 *     { label: '30 second window', earliest: 'rt-30s', latest: 'rt' },
 *     { label: 'Today', earliest: '@d', latest: 'now' },
 *     { label: 'Previous year', earliest: '-1y@y', latest: '@y' },
 *     { label: 'Last 15 minutes', earliest: '-15m', latest: 'now' },
 *     { label: 'All time', earliest: '0', latest: '' },
 * ]
 * ```
 * @param {String} earliest - The time string such as `rt` , `rtnow` or `-2h@m`.
 * @param {String} latest - The time string such as `rt` , `rtnow` or `-2h@m`.
 * @returns {string | false } The matched preset label.
 */
export declare function findPresetLabel(presets: TimePreset[], earliest: string, latest: string): string | false;
interface CreateRangeLabelOptions {
    presets?: TimePreset[];
    maxChars?: number;
}
/**
 * Creates an appropriate label for a time range, using a preset label if available.
 * @public
 * @param {String} earliest - The time string such as `rt` , `rtnow` or `-2h@m`.
 * @param {String} latest - The time string such as `rt` , `rtnow` or `-2h@m`.
 * @param {Object} [options] - An array of presents such as:
 * @param {Number} [options.maxChars = 0] - If the generated label is too long, it will abbreviate
 * to a more generic form, such as 'Between Date-times' instead of 'Feb 17, 2017 6:00 AM to Feb 18, 2017 12:20 AM'.
 * `Infinity` and `0` allow labels of any length.
 * @param {array} [options.presets] - An array of presents such as:
 * ```
 * [
 *     { label: '30 second window', earliest: 'rt-30s', latest: 'rt' },
 *     { label: 'Today', earliest: '@d', latest: 'now' },
 *     { label: 'Previous year', earliest: '-1y@y', latest: '@y' },
 *     { label: 'Last 15 minutes', earliest: '-15m', latest: 'now' },
 *     { label: 'All time', earliest: '0', latest: '' },
 * ]
 * ```
 * @returns {String} Returns `'Custom time'` if one cannot be made.
 */
export declare function createRangeLabel(earliest: string, latest: string, { presets, maxChars }?: CreateRangeLabelOptions): string;
/**
 * Takes a duration in milliseconds and returns a string describing the duration in terms of
 * years, months, days, hours, minutes, seconds and milliseconds.
 * If a unit isn't needed it's omitted, e.g. durations less than a year won't include '0 years'.
 * @public
 * @param {number} ms - The duration in milliseconds.
 * @returns {String} A formatted duration string, for example `27 days 16 hours 36 minutes 59 seconds`.
 * Durations <= 0 return `null`.
 */
export declare function formatDuration(ms: number): string | null;
export declare const parse: (time: string, baseTime?: any) => {
    error?: Error | null | undefined;
    time: string;
    iso?: string | undefined;
    momentTime?: SplunkMoment;
};
export declare const defaultTimePreset: {
    label: string;
    earliest: string;
    latest: string;
}[];
export declare const defaultRealTimePreset: {
    label: string;
    earliest: string;
    latest: string;
}[];
export {};
//# sourceMappingURL=time.d.ts.map