{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/migration.ts","webpack:///external \"@splunk/visualization-migrations\""],"names":[],"mappings":"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","file":"migration.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 50);\n","import type {\n    DashboardDefaultsDefinition,\n    DashboardJSON,\n    DashboardVizDefaultsDefinition,\n    RootVisualizationsDefinition,\n} from '@splunk/dashboard-types/types';\nimport { canMigrate, migrate } from '@splunk/visualization-migrations';\n\ninterface DeprecatedVisualization {\n    id: string;\n    type: string;\n}\n\ninterface MetaData {\n    meta?: {\n        deprecated?: boolean;\n    };\n}\n\ninterface VisualizationPreset {\n    visualizations: Record<string, MetaData>;\n}\n\ntype migrateUtilityCallSig<TDefinition> = ({\n    definition,\n    preset,\n}: {\n    definition: TDefinition;\n    preset: VisualizationPreset;\n}) => TDefinition;\n\ntype migrateDefaultsCallSig = migrateUtilityCallSig<DashboardDefaultsDefinition>;\ntype migrateDefinitionsCallSig = migrateUtilityCallSig<RootVisualizationsDefinition>;\ntype migrateDashboardDefinitionCallSig = migrateUtilityCallSig<DashboardJSON>;\n\n// =============================================================================\n//  TOOD: Remove declaration once inferToType has been exported by the viz team\n// =============================================================================\ntype inferToTypeCallSig = (type: string) => string;\nconst inferToType: inferToTypeCallSig = (from) => {\n    if (from === 'viz.img') {\n        return 'splunk.image';\n    }\n\n    return from.replace('viz.', 'splunk.');\n};\n// =============================================================================\n\n/**\n * Migrate the defaults configured for legacy viz types to defaults for newer splunk types\n * @param definition defaults configuration section definition\n * @returns Updated defaults configuration section with migrated visualization configurations.\n */\nconst migrateDefaults: migrateDefaultsCallSig = ({\n    definition: { visualizations: vizDefaults, ...defaults },\n    preset: { visualizations: vizPresets },\n}) => {\n    if (!vizDefaults) {\n        return defaults;\n    }\n\n    const migratedDefaults: DashboardVizDefaultsDefinition = {};\n    Object.keys(vizDefaults).forEach((type: string) => {\n        const toType = inferToType(type);\n\n        if (vizPresets[toType] && canMigrate({ fromType: type, toType })) {\n            // Full migration (canMigrate returns true, toType in preset)\n            const { type: migratedType, ...migratedDefinition } = migrate({\n                definition: { ...vizDefaults[type], type },\n            });\n\n            migratedDefaults[migratedType] = migratedDefinition;\n        } else if (vizPresets[toType]) {\n            // Assign non-options/encoding values to the migrated config\n            const migratedDefault: Record<string, unknown> = {};\n            Object.entries(vizDefaults[type]).forEach(([key, value]) => {\n                if (typeof value !== 'undefined' && key !== 'options') {\n                    migratedDefault[key] = value;\n                }\n            });\n\n            if (Object.keys(migratedDefault).length) {\n                migratedDefaults[toType] = migratedDefault;\n            }\n        } else {\n            // Migration not possible. Target type not in preset\n            migratedDefaults[type] = vizDefaults[type];\n        }\n    });\n\n    return { ...defaults, visualizations: migratedDefaults };\n};\n\n/**\n * Invokes a potentially-lossy migration for all deprecated items in the provided section.\n * @param definition visualizations definition section definition\n * @returns Updated section definition with migrated visualization configurations.\n */\nconst migrateDefinitions: migrateDefinitionsCallSig = ({\n    definition,\n    preset: { visualizations: vizPresets },\n}) => {\n    const migratedSection: RootVisualizationsDefinition = {};\n    Object.entries(definition).forEach(([vizId, def]) => {\n        const toType = inferToType(def.type);\n\n        if (vizPresets[toType] && canMigrate({ fromType: def.type, toType })) {\n            // Full migration (canMigrate returns true, toType in preset)\n            migratedSection[vizId] = migrate({ definition: def });\n        } else if (vizPresets[toType]) {\n            // Lossy migration (canMigrate returns false, toType in preset)\n            // Assign non-options values to the migrated config\n            migratedSection[vizId] = { ...def, type: toType };\n            delete migratedSection[vizId].encoding;\n            delete migratedSection[vizId].options;\n        } else {\n            // Migration not possible. Target type not in preset\n            migratedSection[vizId] = def;\n        }\n    });\n\n    return migratedSection;\n};\n\n// input: full dashboard definition and visualization preset\n// output: { type, id }[]\nexport const getDeprecatedVisualizations = ({\n    def,\n    preset,\n}: {\n    def: DashboardJSON;\n    preset: VisualizationPreset;\n}): DeprecatedVisualization[] => {\n    if (!def || !def.visualizations) return [];\n\n    const { visualizations } = def;\n    const result: DeprecatedVisualization[] = [];\n\n    Object.entries(visualizations).forEach(([id, { type }]) => {\n        if (preset.visualizations[type]?.meta?.deprecated) {\n            result.push({\n                id,\n                type,\n            });\n        }\n    });\n\n    return result;\n};\n\n/**\n * Executes visualization and defaults migrations from legacy viz types to newer splunk types.\n * @param dashboardDef Full dashboard definition to be migrated\n * @returns Migrated dashboard definition\n */\nexport const migrateDashboardDefinition: migrateDashboardDefinitionCallSig = ({\n    definition: { defaults = {}, visualizations = {}, ...dashboardDef },\n    preset,\n}) => ({\n    ...dashboardDef,\n    defaults: migrateDefaults({ definition: defaults, preset }),\n    visualizations: migrateDefinitions({ definition: visualizations, preset }),\n});\n","module.exports = require(\"@splunk/visualization-migrations\");"],"sourceRoot":""}