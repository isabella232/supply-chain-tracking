/*!
 * Copyright © 2020 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 50);
/******/ })
/************************************************************************/
/******/ ({

/***/ 50:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrateDashboardDefinition = exports.getDeprecatedVisualizations = void 0;
var visualization_migrations_1 = __webpack_require__(51);
var inferToType = function (from) {
    if (from === 'viz.img') {
        return 'splunk.image';
    }
    return from.replace('viz.', 'splunk.');
};
// =============================================================================
/**
 * Migrate the defaults configured for legacy viz types to defaults for newer splunk types
 * @param definition defaults configuration section definition
 * @returns Updated defaults configuration section with migrated visualization configurations.
 */
var migrateDefaults = function (_a) {
    var _b = _a.definition, vizDefaults = _b.visualizations, defaults = __rest(_b, ["visualizations"]), vizPresets = _a.preset.visualizations;
    if (!vizDefaults) {
        return defaults;
    }
    var migratedDefaults = {};
    Object.keys(vizDefaults).forEach(function (type) {
        var toType = inferToType(type);
        if (vizPresets[toType] && visualization_migrations_1.canMigrate({ fromType: type, toType: toType })) {
            // Full migration (canMigrate returns true, toType in preset)
            var _a = visualization_migrations_1.migrate({
                definition: __assign(__assign({}, vizDefaults[type]), { type: type }),
            }), migratedType = _a.type, migratedDefinition = __rest(_a, ["type"]);
            migratedDefaults[migratedType] = migratedDefinition;
        }
        else if (vizPresets[toType]) {
            // Assign non-options/encoding values to the migrated config
            var migratedDefault_1 = {};
            Object.entries(vizDefaults[type]).forEach(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                if (typeof value !== 'undefined' && key !== 'options') {
                    migratedDefault_1[key] = value;
                }
            });
            if (Object.keys(migratedDefault_1).length) {
                migratedDefaults[toType] = migratedDefault_1;
            }
        }
        else {
            // Migration not possible. Target type not in preset
            migratedDefaults[type] = vizDefaults[type];
        }
    });
    return __assign(__assign({}, defaults), { visualizations: migratedDefaults });
};
/**
 * Invokes a potentially-lossy migration for all deprecated items in the provided section.
 * @param definition visualizations definition section definition
 * @returns Updated section definition with migrated visualization configurations.
 */
var migrateDefinitions = function (_a) {
    var definition = _a.definition, vizPresets = _a.preset.visualizations;
    var migratedSection = {};
    Object.entries(definition).forEach(function (_a) {
        var _b = __read(_a, 2), vizId = _b[0], def = _b[1];
        var toType = inferToType(def.type);
        if (vizPresets[toType] && visualization_migrations_1.canMigrate({ fromType: def.type, toType: toType })) {
            // Full migration (canMigrate returns true, toType in preset)
            migratedSection[vizId] = visualization_migrations_1.migrate({ definition: def });
        }
        else if (vizPresets[toType]) {
            // Lossy migration (canMigrate returns false, toType in preset)
            // Assign non-options values to the migrated config
            migratedSection[vizId] = __assign(__assign({}, def), { type: toType });
            delete migratedSection[vizId].encoding;
            delete migratedSection[vizId].options;
        }
        else {
            // Migration not possible. Target type not in preset
            migratedSection[vizId] = def;
        }
    });
    return migratedSection;
};
// input: full dashboard definition and visualization preset
// output: { type, id }[]
var getDeprecatedVisualizations = function (_a) {
    var def = _a.def, preset = _a.preset;
    if (!def || !def.visualizations)
        return [];
    var visualizations = def.visualizations;
    var result = [];
    Object.entries(visualizations).forEach(function (_a) {
        var _b, _c;
        var _d = __read(_a, 2), id = _d[0], type = _d[1].type;
        if ((_c = (_b = preset.visualizations[type]) === null || _b === void 0 ? void 0 : _b.meta) === null || _c === void 0 ? void 0 : _c.deprecated) {
            result.push({
                id: id,
                type: type,
            });
        }
    });
    return result;
};
exports.getDeprecatedVisualizations = getDeprecatedVisualizations;
/**
 * Executes visualization and defaults migrations from legacy viz types to newer splunk types.
 * @param dashboardDef Full dashboard definition to be migrated
 * @returns Migrated dashboard definition
 */
var migrateDashboardDefinition = function (_a) {
    var _b = _a.definition, _c = _b.defaults, defaults = _c === void 0 ? {} : _c, _d = _b.visualizations, visualizations = _d === void 0 ? {} : _d, dashboardDef = __rest(_b, ["defaults", "visualizations"]), preset = _a.preset;
    return (__assign(__assign({}, dashboardDef), { defaults: migrateDefaults({ definition: defaults, preset: preset }), visualizations: migrateDefinitions({ definition: visualizations, preset: preset }) }));
};
exports.migrateDashboardDefinition = migrateDashboardDefinition;


/***/ }),

/***/ 51:
/***/ (function(module, exports) {

module.exports = require("@splunk/visualization-migrations");

/***/ })

/******/ });
//# sourceMappingURL=migration.js.map