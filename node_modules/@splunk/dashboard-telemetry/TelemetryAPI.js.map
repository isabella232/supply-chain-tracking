{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@splunk/dashboard-utils\"","webpack:///external \"lodash/mapValues\"","webpack:///external \"lodash/get\"","webpack:///external \"lodash/isPlainObject\"","webpack:///./src/filters/utils.ts","webpack:///external \"lodash/mapKeys\"","webpack:///external \"lodash/omit\"","webpack:///./src/TelemetryAPI.ts","webpack:///./src/filters/filterStrategies.ts","webpack:///./src/filters/filterDefinitionEdits.ts","webpack:///./src/filters/filterSearchMetrics.ts","webpack:///external \"lodash/cloneDeep\"","webpack:///./src/filters/filterDefinition.ts","webpack:///./src/filters/definitionSubFilters/filterTitleAndDescriptions.ts","webpack:///./src/filters/definitionSubFilters/filterIds.ts","webpack:///./src/filters/definitionSubFilters/filterEncodings.ts","webpack:///./src/filters/definitionSubFilters/filterOptions.ts","webpack:///./src/filters/definitionSubFilters/filterEventHandlers.ts","webpack:///./src/filters/definitionSubFilters/filterDataSources.ts","webpack:///./src/utils/extractDefinitionInfo.ts"],"names":[],"mappings":"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","file":"TelemetryAPI.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n","module.exports = require(\"@splunk/dashboard-utils\");","module.exports = require(\"lodash/mapValues\");","module.exports = require(\"lodash/get\");","module.exports = require(\"lodash/isPlainObject\");","import mapValues from 'lodash/mapValues';\nimport isPlainObject from 'lodash/isPlainObject';\nimport {\n    hashString,\n    isDynamicOption,\n    DYNAMIC_STRING_SUBSTITUTE,\n} from '@splunk/dashboard-utils';\nimport { PlainObject } from './FilterTypes';\n\ntype CategoryToPrefix = {\n    [index: string]: string;\n};\n\nexport const categoryToPrefix: CategoryToPrefix = {\n    inputs: 'input_',\n    visualizations: 'viz_',\n    dataSources: 'ds_',\n};\n\ntype HashStringOnObject = (\n    obj: PlainObject | string | PlainObject[],\n    k?: string\n) => unknown;\n\n/**\n * Recursively hash string values in a JSON object\n */\nexport const hashStringOnObject: HashStringOnObject = (\n    obj: PlainObject | string | PlainObject[],\n    k?: string\n) => {\n    if (typeof obj === 'string') {\n        if (isDynamicOption(obj)) {\n            return DYNAMIC_STRING_SUBSTITUTE;\n        }\n        return hashString(obj);\n    }\n\n    if (Array.isArray(obj)) {\n        return obj.map((v) => hashStringOnObject(v));\n    }\n\n    if (isPlainObject(obj)) {\n        if (k === 'context') {\n            return {};\n        }\n        return mapValues(obj, (value: PlainObject, key) =>\n            hashStringOnObject(value, key)\n        );\n    }\n\n    return obj;\n};\n","module.exports = require(\"lodash/mapKeys\");","module.exports = require(\"lodash/omit\");","/* eslint-disable  no-underscore-dangle */\nimport { console } from '@splunk/dashboard-utils';\nimport omit from 'lodash/omit';\nimport {\n    MetricsCollector,\n    CollectorData,\n    CollectorPayload,\n} from './MetricsCollector';\nimport { EmittableEvent, CountableEvent } from './EventTypes';\nimport {\n    filterStrategies,\n    FilterStrategyCollection,\n} from './filters/filterStrategies';\nimport { extractDefinitionInfo } from './utils/extractDefinitionInfo';\n\n// Global provided via webpack\ndeclare const __UDF_VERSION__: string;\n\n// a logging api, e.g. console\ntype Logger = {\n    error: (...value: unknown[]) => void;\n};\n\n/**\n * a collection of counted events, e.g. { canvasEvents: { edgeResize: 1 } }\n */\ntype EventCollection = Record<string, Record<string, number>>;\n\n// Data passed to constructor\ntype TelemetryAPIProps = {\n    metricsCollectors?: MetricsCollector[];\n    customFilters?: FilterStrategyCollection;\n    logger?: Logger;\n};\n\nexport const TELEMETRY_ERROR = 'Failed to send telemetry event to collector';\n\n/**\n * This class provides a common telemetry and filtering interface to UDF components,\n * and sends filtered data to MetricsCollectors\n *\n * Example:\n *\n * ```\n * const collector = new MyMetricsCollector();\n * const api = new TelemetryApi({ metricsCollectors: [collector] });\n *\n * // Send data immediately to the metrics service defined in the collector\n * api.emit({ pageAction: \"myPageAction\", metaData: { myData: 'foo' } });\n *\n * // Send data that should be collected and counted for later use\n * api.collect({ source: \"canvas\", event: \"edge_resize\" });\n *\n * // Send data immediately, and send all the collected event counts\n * api.flush({ pageAction: \"myFlushAction\" });\n * ```\n *\n * @class TelemetryAPI\n */\nexport class TelemetryAPI {\n    // A set of events that are retained until a \"flush\", e.g. { canvasEvents: { edgeResize: 1 }}\n    protected collectedEvents: EventCollection = {};\n\n    // The set of handlers that talk to a metrics backend\n    protected metricsCollectors: MetricsCollector[];\n\n    // A collection of payload filters\n    private filters: FilterStrategyCollection;\n\n    // A logging utility (e.g. console)\n    private logger: Logger;\n\n    /**\n     * TelemetryApi constructor\n     * @param {Object} config\n     * @param {MetricsCollector[]} [config.metricsCollectors=[]] A set of handlers that talk to backend services\n     * @param {FilterStrategyCollection} [config.customFilters={}] A set of functions that will process the contents of a key\n     * @param {Logger} [config.logger=console] A logging utility\n     * @method\n     * @constructor\n     */\n    constructor({\n        metricsCollectors = [],\n        customFilters = {},\n        logger = console,\n    }: TelemetryAPIProps = {}) {\n        this.metricsCollectors = metricsCollectors;\n        // Set up the filters we will use to process event data,\n        // omit udfVersion because we will always set version ourselves\n        this.filters = omit(\n            {\n                ...customFilters,\n                ...filterStrategies,\n            },\n            ['udfVersion']\n        );\n        this.logger = logger;\n        this.resetEvents();\n    }\n\n    /**\n     * Reset the counted event data\n     * @method\n     * @protected\n     */\n    protected resetEvents(): void {\n        this.collectedEvents = {};\n    }\n\n    /**\n     * Shared helper method to send data to MetricsCollector instances\n     * @param {CollectorData} payload Processed data sent by an event emitter\n     * @protected\n     */\n    protected sendEvent(payload: CollectorData): void {\n        this.metricsCollectors.forEach((collector: MetricsCollector) => {\n            try {\n                collector.sendEvent(<CollectorPayload>{\n                    eventType: 'udf.telemetry',\n                    level: 'info',\n                    data: {\n                        ...payload,\n                    },\n                });\n            } catch (err) {\n                this.logger.error(TELEMETRY_ERROR, err.message);\n            }\n        });\n    }\n\n    /**\n     * Filter all the payload information to prevent exposure of PII\n     * @param {EmittableEvent} payload The data that was sent by an event emitter\n     * @returns {CollectorData} Filtered data\n     * @private\n     */\n    private processEmittedEvent = (payload: EmittableEvent): CollectorData => {\n        const result: CollectorData = {\n            pageAction: 'unknown',\n            metadata: {},\n            udfVersion: __UDF_VERSION__,\n            definitionInfo:\n                payload.definition && extractDefinitionInfo(payload.definition),\n        };\n\n        Object.keys(payload).forEach((key: string) => {\n            const fn = this.filters[key];\n            if (fn) {\n                result[key] = fn(payload[key]);\n            }\n        });\n\n        return result;\n    };\n\n    /**\n     * Add any special handling to process the collected events.\n     * In our case, we want to ensure our selected groupings are always in the output (canvas, keyboard, actionMenu).\n     * We may add more groupings later\n     * @private\n     * @method\n     */\n    private processCountableEvents(): EventCollection {\n        return {\n            canvasEvents: this.collectedEvents.canvasEvents || {},\n            keyboardEvents: this.collectedEvents.keyboardEvents || {},\n            actionMenuEvents: this.collectedEvents.actionMenuEvents || {},\n        };\n    }\n\n    /**\n     * Send the current event data along with counts of other collected events\n     * @param {EmittableEvent} payload Data from an event emitter\n     */\n    flush(payload: EmittableEvent): void {\n        const processedPayload = this.processEmittedEvent(payload);\n\n        this.sendEvent({\n            ...this.processCountableEvents(),\n            metadata: processedPayload.metadata,\n            udfVersion: processedPayload.udfVersion,\n            definitionInfo: processedPayload.definitionInfo,\n        });\n        this.resetEvents();\n\n        this.sendEvent(processedPayload);\n    }\n\n    /**\n     * Immediately send the current event data\n     * @param {EmittableEvent} payload Data from an event emitter\n     */\n    emit(payload: EmittableEvent): void {\n        this.sendEvent(this.processEmittedEvent(payload));\n    }\n\n    /**\n     * Count the event amongst other counted events for later use\n     * @param {CountableEvent} payload Data from an event emitter\n     */\n    collect(payload: CountableEvent): void {\n        const sourceKey = `${payload.source}Events`;\n        if (!this.collectedEvents[sourceKey]) {\n            this.collectedEvents[sourceKey] = { [payload.event]: 0 };\n        }\n        if (this.collectedEvents[sourceKey][payload.event] === undefined) {\n            this.collectedEvents[sourceKey][payload.event] = 0;\n        }\n        this.collectedEvents[sourceKey][payload.event] += 1;\n    }\n}\n\nexport default TelemetryAPI;\n","import isPlainObject from 'lodash/isPlainObject';\nimport filterDefinitionEdits from './filterDefinitionEdits';\nimport filterSearchMetrics from './filterSearchMetrics';\nimport filterDefinition from './filterDefinition';\nimport { FilterFunction } from './FilterStrategyTypes';\n\n/**\n * A collection of filter functions\n */\nexport type FilterStrategyCollection = Record<string, FilterFunction>;\n\n// Placeholder function for just returning the input\nconst returnIt: FilterFunction = (value) => value;\n\nconst metaFilter: (value: unknown) => Record<string, unknown> = (metadata) =>\n    metadata && isPlainObject(metadata)\n        ? <Record<string, unknown>>metadata\n        : {};\n\nexport const filterStrategies: FilterStrategyCollection = {\n    definition: filterDefinition,\n    definitionEdits: filterDefinitionEdits,\n    searchMetrics: filterSearchMetrics,\n    pageAction: returnIt,\n    loadTime: returnIt,\n    error: returnIt,\n    source: returnIt,\n    event: returnIt,\n    metadata: metaFilter,\n    undoActions: returnIt,\n    redoActions: returnIt,\n};\n","import { hashString } from '@splunk/dashboard-utils';\nimport { FilterFunction } from './FilterStrategyTypes';\nimport { categoryToPrefix } from './utils';\n\ntype JsonPatch = {\n    op: string;\n    path: string;\n    // value is a serializable object, didn't bother to define its type, ref https://github.com/microsoft/TypeScript/issues/1897\n    value: unknown;\n};\n\n/**\n * Remove PII data from a json patch generated by diffing dashboard definitions. Refer to https://tools.ietf.org/html/rfc6902\n * @param {Object} patch\n * @param {String} patch.op\n * @param {String} patch.path\n * @param {String} patch.value\n */\nconst filterDefinitionEdit = ({ op, path }: JsonPatch) => {\n    // json patch always starts with / and uses / as delimiter.\n    const parts = path.split('/');\n\n    if (\n        ['inputs', 'visualizations', 'dataSources'].includes(parts[1]) &&\n        parts.length >= 3\n    ) {\n        parts[2] = hashString(parts[2], categoryToPrefix[parts[1]]);\n    } else if (\n        parts[1] === 'layout' &&\n        parts[2] === 'structure' &&\n        parts.length >= 4\n    ) {\n        parts[3] = hashString(parts[3], categoryToPrefix.visualizations);\n    }\n\n    return {\n        op,\n        path: parts.join('/'),\n        // left out `value` because `value` may contain PII\n    };\n};\n\ntype PatchWithoutPII = { op: string; path: string };\n\ninterface FilterDefinitionEdits extends FilterFunction {\n    (patches: JsonPatch[]): PatchWithoutPII[] | null;\n}\n\nconst filterDefinitionEdits: FilterDefinitionEdits = (patches: unknown) => {\n    return Array.isArray(patches)\n        ? patches.map((patch) => filterDefinitionEdit(patch))\n        : null;\n};\n\nexport default filterDefinitionEdits;\n","/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\nimport { hashString } from '@splunk/dashboard-utils';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport { FilterFunction } from './FilterStrategyTypes';\n\nexport type SearchMetric = {\n    consumerId?: string;\n    dataSourceId?: string;\n    sid?: string;\n    duration: number;\n    ttfr: number;\n};\n\ninterface FilterSearchMetrics extends FilterFunction {\n    (searchMetrics: SearchMetric[]): SearchMetric[];\n}\n\n/**\n * Filter datasource id & viz id (as consumer id) which can contain PII from search metrics.\n * @param {Array} searchMetrics\n */\nconst filterSearchMetrics: FilterSearchMetrics = (searchMetrics: unknown) => {\n    if (!Array.isArray(searchMetrics)) {\n        return [];\n    }\n\n    const clonedMetrics = cloneDeep(searchMetrics);\n    return clonedMetrics.map((metric: SearchMetric) => {\n        const consumerId = get(metric, 'consumerId');\n        if (consumerId) {\n            metric.consumerId = hashString(consumerId, 'viz_');\n        }\n\n        const dataSourceId = get(metric, 'dataSourceId');\n        if (dataSourceId) {\n            metric.dataSourceId = hashString(dataSourceId, 'ds_');\n        }\n        return metric;\n    });\n};\n\nexport default filterSearchMetrics;\n","module.exports = require(\"lodash/cloneDeep\");","import filterTitleAndDescriptions from './definitionSubFilters/filterTitleAndDescriptions';\nimport filterIds from './definitionSubFilters/filterIds';\nimport filterEncodings from './definitionSubFilters/filterEncodings';\nimport filterOptions from './definitionSubFilters/filterOptions';\nimport filterEventHandlers from './definitionSubFilters/filterEventHandlers';\nimport filterDataSources from './definitionSubFilters/filterDataSources';\nimport { Definition } from './FilterTypes';\nimport { FilterFunction } from './FilterStrategyTypes';\n\n// this is to make the type compatible with filterStrategies.ts\ninterface FilterDefinition extends FilterFunction {\n    (definition: Definition): Definition;\n}\n\nconst filterDefinition: FilterDefinition = (definition: unknown = {}) =>\n    filterDataSources(\n        filterEventHandlers(\n            filterEncodings(\n                filterOptions(\n                    filterIds(\n                        filterTitleAndDescriptions(definition as Definition)\n                    )\n                )\n            )\n        )\n    );\n\nexport default filterDefinition;\n","import mapKeys from 'lodash/mapKeys';\nimport mapValues from 'lodash/mapValues';\nimport { PlainObject, FilterDefinition } from '../FilterTypes';\n\ntype HashTitleOrDescription = (item: PlainObject) => PlainObject;\n\nconst titleDescriptionNameMapping = {\n    title: 'titleLength',\n    description: 'descriptionLength',\n    name: 'titleLength',\n};\n\n/**\n * A helper function designed to work with `lodash.mapValues` to hash title and description in a viz, dataSource or input.\n */\nconst hashTitleOrDescription: HashTitleOrDescription = (item) => {\n    const itemWithValueReplaced = mapValues(item, (value, key) => {\n        if (key === 'title' || key === 'description' || key === 'name') {\n            return typeof value === 'string' ? value.length : 0;\n        }\n        return value;\n    });\n\n    return mapKeys(itemWithValueReplaced, (value, key) => {\n        if (key === 'title' || key === 'description' || key === 'name') {\n            return titleDescriptionNameMapping[key];\n        }\n        return key;\n    });\n};\n\nconst filterTitleAndDescriptions: FilterDefinition = (definition) => {\n    const definitionWithValueReplaced = mapValues(\n        definition,\n        (value: PlainObject | string, key) => {\n            if (key === 'title' || key === 'description') {\n                return typeof value === 'string' ? value.length : 0;\n            }\n\n            if (['dataSources', 'visualizations', 'inputs'].includes(key)) {\n                return mapValues(value, hashTitleOrDescription);\n            }\n\n            if (key === 'defaults') {\n                return mapValues(value, (v: PlainObject) =>\n                    mapValues(v, hashTitleOrDescription)\n                );\n            }\n\n            return value;\n        }\n    );\n\n    return mapKeys(definitionWithValueReplaced, (_value, key: string) => {\n        if (key === 'title' || key === 'description') {\n            return titleDescriptionNameMapping[key];\n        }\n\n        return key;\n    });\n};\n\nexport default filterTitleAndDescriptions;\n","import mapKeys from 'lodash/mapKeys';\nimport mapValues from 'lodash/mapValues';\nimport { hashString } from '@splunk/dashboard-utils';\nimport { PlainObject, FilterDefinition } from '../FilterTypes';\nimport { categoryToPrefix } from '../utils';\n\nconst hashDataSourceIdInViz: FilterDefinition = (viz) =>\n    mapValues(viz, (optionValue: PlainObject, optionKey) =>\n        optionKey === 'dataSources'\n            ? mapValues(optionValue, (dsId: string) =>\n                  hashString(dsId, categoryToPrefix.dataSources)\n              )\n            : optionValue\n    );\n\nconst filterIds: FilterDefinition = (definition) =>\n    mapValues(definition, (value: PlainObject, category) => {\n        const hashKey = (_value: unknown, key: string) =>\n            hashString(key, categoryToPrefix[category]);\n\n        if (['visualizations', 'inputs'].includes(category)) {\n            return mapValues(mapKeys(value, hashKey), hashDataSourceIdInViz);\n        }\n\n        if (category === 'dataSources') {\n            return mapKeys(value, hashKey);\n        }\n\n        if (category === 'layout') {\n            return mapValues(value, (v: unknown[], k: string) => {\n                if (k === 'globalInputs' && Array.isArray(v)) {\n                    return (v as string[]).map((inputId: string) =>\n                        hashString(inputId, categoryToPrefix.inputs)\n                    );\n                }\n\n                if (k === 'structure') {\n                    return (v as PlainObject[]).map((item: PlainObject) => ({\n                        ...item,\n                        item: hashString(\n                            item.item as string,\n                            categoryToPrefix.visualizations\n                        ),\n                    }));\n                }\n\n                return v;\n            });\n        }\n\n        return value;\n    });\n\nexport default filterIds;\n","import mapValues from 'lodash/mapValues';\nimport get from 'lodash/get';\nimport { hashString } from '@splunk/dashboard-utils';\nimport { PlainObject, FilterDefinition } from '../FilterTypes';\n\nconst MAX_ENCODING_RECURSION_LEVEL = 2;\n\ntype FilterEncodingHelper = (\n    encoding: PlainObject,\n    recursionLevel?: number\n) => PlainObject;\n\n/**\n * This is copied from previous implementation.\n */\nconst filterEncodingHelper: FilterEncodingHelper = (\n    encoding,\n    recursionLevel = 0\n) => {\n    // no valid encoding exists where the root value is an array\n    if (Array.isArray(encoding) && recursionLevel === 0) {\n        return encoding;\n    }\n    if (encoding && typeof encoding === 'object') {\n        return mapValues(\n            encoding,\n            (val: string | PlainObject[] | PlainObject) => {\n                if (recursionLevel < MAX_ENCODING_RECURSION_LEVEL) {\n                    if (typeof val === 'string') {\n                        return true;\n                    }\n                    if (Array.isArray(val)) {\n                        return val.length;\n                    }\n                    if (val && typeof val === 'object') {\n                        return filterEncodingHelper(val, recursionLevel + 1);\n                    }\n                }\n                return val;\n            }\n        );\n    }\n    return encoding;\n};\n\ntype FilterEncodingOnItem = (item: PlainObject) => PlainObject;\n\ntype filterMatchValues = (encoding: PlainObject) => PlainObject;\n\ntype MatchValueItem = { match: string; value: string };\n\n/**\n * anonymize field value while keeping the color settings.\n */\nconst filterMatchValues: filterMatchValues = (encoding) => {\n    if (get(encoding, ['majorColor', 'format', 'type']) !== 'matchvalue') {\n        return encoding;\n    }\n\n    const encodingCopy = JSON.parse(JSON.stringify(encoding));\n\n    encodingCopy.majorColor.format.matches = encodingCopy.majorColor.format.matches.map(\n        ({ match, value }: MatchValueItem) => ({\n            match: hashString(match, 'field_'),\n            value,\n        })\n    );\n\n    return encodingCopy;\n};\n\nconst filterEncodingOnItem: FilterEncodingOnItem = (item) =>\n    mapValues(item, (v: PlainObject, k: string) =>\n        k === 'encoding' ? filterMatchValues(filterEncodingHelper(v)) : v\n    );\n\nconst filterEncodings: FilterDefinition = (definition) =>\n    mapValues(definition, (value: PlainObject, key) => {\n        if (['visualizations', 'inputs'].includes(key)) {\n            return mapValues(value, filterEncodingOnItem);\n        }\n\n        if (key === 'defaults') {\n            return mapValues(value, filterEncodingOnItem);\n        }\n\n        return value;\n    });\n\nexport default filterEncodings;\n","import mapValues from 'lodash/mapValues';\nimport mapKeys from 'lodash/mapKeys';\nimport {\n    hashString,\n    DYNAMIC_STRING_SUBSTITUTE,\n    isDynamicOption,\n} from '@splunk/dashboard-utils';\nimport isPlainObject from 'lodash/isPlainObject';\nimport { PlainObject, FilterDefinition } from '../FilterTypes';\nimport { hashStringOnObject } from '../utils';\n\n// the following two lists are copied from previous implementation\n// NOTE: denyLists will have to be updated periodically if options change\n// TODO: figure out a better way to block options with confidential information\n// a more specific way to handle this is defining a denyList object with key-value pairs of option names and a boolean stating whether it should be removed\n// however, this comes with the caveat of having to update this list each time a new option is added\nconst denyListStrings = [\n    'src',\n    'content',\n    'markdown',\n    'unit',\n    'chart.overlayFields',\n    'icon',\n    'axisY2.fields',\n    'svg',\n];\n// NOTE: these substrings cover all the options that could hold confidential info, but will strip out additional options that otherwise do not hold confidential info\nconst denyListSubstrings = /(label|text)/i;\n\ntype FilterOptions = (options: PlainObject) => PlainObject;\n\ntype FilterOptionsOnItem = (\n    item: PlainObject,\n    filter: FilterOptions\n) => PlainObject;\n\nconst filterOptionsOnItem: FilterOptionsOnItem = (item, filter) =>\n    mapValues(item, (value: PlainObject, key: string) => {\n        if (key === 'options') {\n            return filter(value);\n        }\n        if (key === 'context') {\n            return {};\n        }\n        return value;\n    });\n\nconst filterVisualizationOptions: FilterOptions = (options: PlainObject) =>\n    mapValues(options, (value, key) => {\n        if (['fieldColors', 'annotation.categoryColors'].includes(key)) {\n            let obj: string | PlainObject;\n            if (typeof value === 'string') {\n                try {\n                    obj = JSON.parse(value);\n                } catch (e) {\n                    // anonymize the value to be extra safe\n                    return true;\n                }\n            } else {\n                obj = value as PlainObject;\n            }\n\n            return mapKeys(\n                obj as PlainObject,\n                (_fieldColor, fieldName: string) =>\n                    hashString(fieldName, 'field_')\n            );\n        }\n\n        if (denyListStrings.includes(key) || denyListSubstrings.test(key)) {\n            // return true instead of hash string, to be consistent with previous implementation\n            return true;\n        }\n\n        if (isDynamicOption(value as string)) {\n            return DYNAMIC_STRING_SUBSTITUTE;\n        }\n\n        if (isPlainObject(value)) {\n            const x = filterVisualizationOptions(value as PlainObject);\n            if (key === 'columnFormat') {\n                return mapKeys(x, (v, fieldName) =>\n                    hashString(fieldName, 'field_')\n                );\n            }\n            return x;\n        }\n        return value;\n    });\n\nconst filterInputOptions: FilterOptions = (options) =>\n    mapValues(options, (value, key) => {\n        if (key === 'defaultValue') {\n            return hashString(value as string);\n        }\n\n        if (key === 'token') {\n            return hashString(value as string, 'token_');\n        }\n\n        if (key === 'items') {\n            return Array.isArray(value) ? value.length : 0;\n        }\n\n        return value;\n    });\n\nconst filterDataSourceOptions: FilterOptions = (options) =>\n    mapValues(options, (value: PlainObject, key) => {\n        if (key === 'queryParameters') {\n            return mapValues(\n                value,\n                (queryParameterValue, queryParameterKey) => {\n                    if (\n                        ['earliest', 'latest', 'timezone'].includes(\n                            queryParameterKey\n                        )\n                    ) {\n                        return queryParameterValue;\n                    }\n\n                    return hashStringOnObject(value);\n                }\n            );\n        }\n\n        if (\n            key === 'refresh' ||\n            key === 'refreshType' ||\n            key === 'requiredFreshness'\n        ) {\n            return value;\n        }\n\n        return hashStringOnObject(value);\n    });\n\nconst filterLayoutOptions: FilterOptions = (options) =>\n    mapValues(options, (value, key) => {\n        if (key === 'backgroundImage') {\n            // previous implementation deleted this option. Here we use true to indicate the option is used.\n            return mapValues(\n                value as PlainObject,\n                (v: PlainObject, k: string) => {\n                    if (k === 'src') {\n                        return true;\n                    }\n                    return v;\n                }\n            );\n        }\n\n        return value;\n    });\n\nconst filterOptions: FilterDefinition = (definition) =>\n    mapValues(definition, (value: PlainObject, key) => {\n        if (key === 'visualizations') {\n            return mapValues(value, (viz: PlainObject) =>\n                filterOptionsOnItem(viz, filterVisualizationOptions)\n            );\n        }\n\n        if (key === 'dataSources') {\n            return mapValues(value, (ds: PlainObject) =>\n                filterOptionsOnItem(ds, filterDataSourceOptions)\n            );\n        }\n\n        if (key === 'inputs') {\n            return mapValues(value, (input: PlainObject) =>\n                filterOptionsOnItem(input, filterInputOptions)\n            );\n        }\n\n        if (key === 'defaults') {\n            return mapValues(value, (v: PlainObject) =>\n                mapValues(v, hashStringOnObject)\n            );\n        }\n\n        if (key === 'layout') {\n            return filterOptionsOnItem(value, filterLayoutOptions);\n        }\n\n        return value;\n    });\n\nexport default filterOptions;\n","import mapValues from 'lodash/mapValues';\nimport { hashString } from '@splunk/dashboard-utils';\nimport { PlainObject, FilterDefinition } from '../FilterTypes';\n\ntype FilterEventHandlerOptions = (eventHandler: PlainObject) => PlainObject;\n\nconst filterEventHandlerOptions: FilterEventHandlerOptions = (eventHandler) =>\n    mapValues(eventHandler, (value: PlainObject, key) => {\n        if (key === 'options') {\n            return mapValues(value, (v, k: string) => {\n                if (k === 'url') {\n                    return hashString(v as string, 'url_');\n                }\n\n                return v;\n            });\n        }\n\n        return value;\n    });\n\ntype FilterOptionsOnItem = (item: PlainObject) => PlainObject;\n\nconst filterEventHandlersOnItem: FilterOptionsOnItem = (item) =>\n    mapValues(item, (value: PlainObject[], key: string) =>\n        key === 'eventHandlers'\n            ? value.map((handler) => filterEventHandlerOptions(handler))\n            : value\n    );\n\nconst filterEventHandlers: FilterDefinition = (definition) =>\n    mapValues(definition, (value: PlainObject, key) => {\n        if (key === 'visualizations') {\n            return mapValues(value, filterEventHandlersOnItem);\n        }\n\n        return value;\n    });\n\nexport default filterEventHandlers;\n","import omit from 'lodash/omit';\nimport mapValues from 'lodash/mapValues';\nimport { PlainObject, FilterDefinition } from '../FilterTypes';\n\nconst filterDataSources: FilterDefinition = (definition) => {\n    const def = omit(definition, ['dataSources']);\n\n    return mapValues(def, (value: PlainObject, key) => {\n        if (['visualizations', 'inputs'].includes(key)) {\n            return mapValues(value, (item: PlainObject) => {\n                return omit(item, ['dataSources']);\n            });\n        }\n\n        if (key === 'defaults') {\n            return omit(value, ['dataSources']);\n        }\n\n        return value;\n    });\n};\n\nexport default filterDataSources;\n","import type { DashboardJSON } from '@splunk/dashboard-types';\n\ninterface DefinitionInfo {\n    componentCounts: {\n        dataSourceTypeCounts: Record<string, number>;\n        inputTypeCounts: Record<string, number>;\n        vizTypeCounts: Record<string, number>;\n    };\n    numDataSources: number;\n    numInputs: number;\n    numViz: number;\n}\n\ninterface DataObject {\n    [key: string]: { type?: string };\n}\n\ntype DataCount = {\n    [key: string]: number;\n};\n\nexport const getTypeCounts = (\n    dataObject: DataObject = {}\n): Record<string, number> => {\n    const dataCount: DataCount = {};\n    Object.keys(dataObject).forEach((data) => {\n        const dataType = dataObject[data] && dataObject[data].type;\n        if (!dataType) {\n            return;\n        }\n        if (!dataCount[dataType]) {\n            dataCount[dataType] = 0;\n        }\n        dataCount[dataType] += 1;\n    });\n    return dataCount;\n};\n\nexport const extractDefinitionInfo = (\n    definition: DashboardJSON = {}\n): DefinitionInfo => {\n    const visualizations = definition.visualizations || {};\n    const inputs = definition.inputs || {};\n    const dataSources = definition.dataSources || {};\n\n    const dataSourceTypeCounts = getTypeCounts(dataSources);\n    const inputTypeCounts = getTypeCounts(inputs);\n    const vizTypeCounts = getTypeCounts(visualizations);\n\n    return {\n        componentCounts: {\n            dataSourceTypeCounts,\n            inputTypeCounts,\n            vizTypeCounts,\n        },\n        numDataSources: Object.keys(dataSources).length,\n        numInputs: Object.keys(inputs).length,\n        numViz: Object.keys(visualizations).length,\n    };\n};\n"],"sourceRoot":""}