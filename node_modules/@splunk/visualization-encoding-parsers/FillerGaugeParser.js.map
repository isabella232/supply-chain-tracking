{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@splunk/ui-utils/i18n\"","webpack:///external \"@splunk/visualization-encoding-parsers/Base\"","webpack:///./src/errorMsgs.js","webpack:///./src/FillerGaugeParser.js","webpack:///external \"lodash/isEmpty\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\""],"names":["ErrorMsgs","NO_DATA_SOURCES","_","NO_ENCODING","ERROR_PARSE","dataContract","requiredDataSources","name","description","optionalDataSources","initialRequestParams","primary","offset","count","encoding","value","isRequired","type","default","gaugeColor","field","format","ranges","from","to","parse","isEmpty","mergeEncoding","parsedProps","baseParse","Object","encodingValue","valueIndex","min","Math","range","max","parseInt","valueFieldName","gaugeColorFieldName","valueType","gaugeColorType"],"mappings":"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","file":"FillerGaugeParser.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","module.exports = require(\"@splunk/ui-utils/i18n\");","module.exports = require(\"@splunk/visualization-encoding-parsers/Base\");","import { _ } from '@splunk/ui-utils/i18n';\n\nexport const ErrorMsgs = {\n    NO_DATA_SOURCES: _('No valid dataSources.'),\n    NO_ENCODING: _('No valid encoding.'),\n    ERROR_PARSE: _('Can not parse data correctly.'),\n};\n","import { parse as baseParse, mergeEncoding } from '@splunk/visualization-encoding-parsers/Base';\nimport isEmpty from 'lodash/isEmpty';\nimport { ErrorMsgs } from './errorMsgs';\n\nexport const dataContract = {\n    requiredDataSources: [\n        {\n            name: 'primary',\n            description: 'DataSource that powers the visualization',\n        },\n    ],\n    optionalDataSources: [],\n    initialRequestParams: {\n        primary: { offset: 0, count: 10000 },\n    },\n    encoding: {\n        value: {\n            isRequired: true,\n            type: 'number',\n            default: 'primary[0][-1]',\n        },\n        gaugeColor: {\n            isRequired: true,\n            type: 'string',\n            default: {\n                field: 'encoding.value',\n                format: {\n                    type: 'rangevalue',\n                    ranges: [\n                        {\n                            from: 70,\n                            to: 100,\n                            value: '#ff7152',\n                        },\n                        {\n                            from: 50,\n                            to: 70,\n                            value: '#fc9850',\n                        },\n                        {\n                            from: 30,\n                            to: 50,\n                            value: '#f4df7a',\n                        },\n                        {\n                            from: 10,\n                            to: 30,\n                            value: '#4beba8',\n                        },\n                        {\n                            from: 0,\n                            to: 10,\n                            value: '#5fbcff',\n                        },\n                    ],\n                },\n            },\n        },\n    },\n};\n\n/**\n * FillerGauge parse function\n * @param {object} dataSources\n * @param {object} userDefinedEncoding\n * @return {object} props that dashboard/react visualizations can be used.\n * @public\n */\nexport const parse = (dataSources, userDefinedEncoding) => {\n    if (isEmpty(dataSources)) {\n        throw new Error(ErrorMsgs.NO_DATA_SOURCES);\n    }\n\n    const encoding = mergeEncoding(dataContract.encoding, userDefinedEncoding);\n    const parsedProps = baseParse(dataSources, encoding);\n    Object.keys(encoding).forEach(encodingKey => {\n        const encodingValue = parsedProps[encodingKey];\n        const valueIndex = encodingValue.length - 1;\n        parsedProps[encodingKey] = parsedProps[encodingKey][valueIndex];\n    });\n    const ranges = (encoding.gaugeColor.format && encoding.gaugeColor.format.ranges) || [];\n    const min = ranges.length ? Math.min(...ranges.map(range => range.from)) : undefined;\n    const max = ranges.length ? Math.max(...ranges.map(range => range.to)) : undefined;\n\n    return {\n        value: parseInt(parsedProps.value, 10),\n        gaugeColor: parsedProps.gaugeColor,\n        min,\n        max,\n        valueFieldName: parsedProps['_meta'].fieldNames.value, // eslint-disable-line dot-notation\n        gaugeColorFieldName: parsedProps['_meta'].fieldNames.gaugeColor, // eslint-disable-line dot-notation\n        valueType: parsedProps['_meta'].types.value, // eslint-disable-line dot-notation\n        gaugeColorType: parsedProps['_meta'].types.gaugeColor, // eslint-disable-line dot-notation\n    };\n};\n","module.exports = require(\"lodash/isEmpty\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");"],"sourceRoot":""}