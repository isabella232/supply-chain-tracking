/*!
 * Copyright © 2020 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ({

/***/ 7:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.geoJsonOptions = void 0;
exports.geoJsonOptions = {
    us: {
        name: 'USA',
        source: 'geo://default/us',
        projection: 'mercator',
        sourceBounds: {
            lat: {
                min: 24,
                max: 50,
            },
            long: {
                min: -130,
                max: -60,
            },
        },
        logicalBounds: {
            x: {
                min: 0,
                max: 800,
            },
            y: {
                min: 0,
                max: 600,
            },
        },
        fillColor: '#EAEFF2',
        strokeColor: '#689C8D',
        selector: '.feature',
        geoFeatureGroups: [
            {
                name: 'lower48',
                featureMatcher: {
                    property: 'postal',
                    regex: '^(?!(AK|HI))',
                },
                sourceBounds: {
                    lat: { min: 24, max: 50 },
                    long: { min: -130, max: -60 },
                },
            },
            {
                name: 'Alaska',
                featureMatcher: {
                    property: 'postal',
                    regex: 'AK',
                },
                logicalBounds: {
                    x: { min: 100, max: 200 },
                    y: { min: 325, max: 425 },
                },
                sourceBounds: {
                    lat: { min: 45, max: 72 },
                    long: { min: -180, max: -120 },
                },
            },
            {
                name: 'Hawaii',
                featureMatcher: {
                    property: 'postal',
                    regex: 'HI',
                },
                logicalBounds: {
                    x: { min: 250, max: 350 },
                    y: { min: 375, max: 475 },
                },
                sourceBounds: {
                    lat: { min: 18.665677, max: 22.461292 },
                    long: { min: -160.921571, max: -154.242648 },
                },
            },
        ],
    },
    world: {
        name: 'WORLD',
        source: 'geo://default/world',
        projection: 'mercator',
        sourceBounds: {
            lat: { min: -60, max: 85 },
            long: { min: -180, max: 180 },
        },
        logicalBounds: { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } },
        fillColor: '#EAEFF2',
        strokeColor: '#689C8D',
        strokeHighlightColor: '#000000',
        selector: '.feature',
    },
};


/***/ })

/******/ });
//# sourceMappingURL=initialGeoJsonOptions.js.map