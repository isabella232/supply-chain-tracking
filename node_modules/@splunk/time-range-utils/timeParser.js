"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getISO = getISO;
exports.default = void 0;

var _querystring = _interopRequireDefault(require("querystring"));

var _lodash = require("lodash");

var _url = require("@splunk/splunk-utils/url");

var _fetch = require("@splunk/splunk-utils/fetch");

/**
 * This utility currently only has one function for parsing a time string on the server.
 * ```
 *  import { getISO } from '@splunk/time-range-utils/timeParser'
 * ```
 *
 * @file
 */

/**
 * Fetches the parsed time from splunkd with a browser fetch.
 * When the promise is resolved, a data object is returned with up to three properties:
 * * time (the original time provided for for validation and identification purposes)
 * * iso (the parsed time value)
 * * error.
 *
 * Example usage:
 * ```
 * getISO('-2d@h')
 *     .then(data => {
 *         this.setState({
 *             parseLatest: {error: data.error, iso: data.iso, time: data.time, },
 *         });
 *     })
 *     .catch(data => {
 *         this.setState({
 *             parseLatest: {error: data.error, iso: '', time: data.time, },
 *         });
 *     });
 * ```
 * @public
 * @function
 * @name getISO
 * @param {string} time - The time string such as `47165491` or `-2h@m`.
 * @returns {promise}
 */
function getISO(time) {
  const qs = _querystring.default.stringify({
    output_mode: 'json',
    time
  });

  const path = (0, _url.createRESTURL)('search/timeparser');
  return fetch(`${path}?${qs}`, _fetch.defaultFetchInit).then((0, _fetch.handleResponse)(200)).then(data => {
    // can get away with doing this below because only one timestamp will be returned
    const value = (0, _lodash.keys)(data)[0];
    return {
      error: null,
      iso: data[value],
      time
    };
  }).catch(error => ({
    error,
    time
  }));
}

var _default = {
  getISO
};
exports.default = _default;