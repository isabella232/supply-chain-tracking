"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeThemes = exports.createThemeRegistry = void 0;

var _construct2 = _interopRequireDefault(require("@babel/runtime/helpers/construct"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get = _interopRequireDefault(require("lodash/get"));

var _defaultsDeep = _interopRequireDefault(require("lodash/defaultsDeep"));

/**
 * A runtime theme registry
 */
var ThemeRegistry = /*#__PURE__*/function () {
  function ThemeRegistry() {
    (0, _classCallCheck2.default)(this, ThemeRegistry);

    for (var _len = arguments.length, modules = new Array(_len), _key = 0; _key < _len; _key++) {
      modules[_key] = arguments[_key];
    }

    this.module = modules.join('/');
    this.defaultTheme = 'enterprise';
    this.themes = {
      enterprise: {
        _name: 'enterprise' // theme name

      }
    };
  }
  /**
   * Add default theme definition
   * @param {*} theme theme name
   * @param {*} themeDefinition theme definition
   */


  (0, _createClass2.default)(ThemeRegistry, [{
    key: "addDefaultTheme",
    value: function addDefaultTheme(theme, themeDefinition) {
      this.addTheme(theme, themeDefinition);
      this.defaultTheme = theme;
    }
    /**
     * Add a new theme definition
     * @param {*} theme theme name
     * @param {*} themeDefinition theme definition
     */

  }, {
    key: "addTheme",
    value: function addTheme(theme, themeDefinition) {
      this.themes[theme] = (0, _defineProperty2.default)({
        _name: theme
      }, this.module, themeDefinition);
    }
    /**
     * retrieve a theming variable
     */

  }, {
    key: "themeVariable",
    value: function themeVariable(themeKey) {
      var _this = this;

      return function (props) {
        var val = (0, _get.default)(props, ['theme', _this.module, themeKey]);

        if (val == null) {
          return (0, _get.default)(_this.themes, [_this.defaultTheme, _this.module, themeKey], '');
        }

        return val;
      };
    }
    /**
     * export theme definition
     */

  }, {
    key: "toThemes",
    value: function toThemes() {
      return this.themes;
    }
  }]);
  return ThemeRegistry;
}();
/**
 * create a new theme registry
 * @param {*} packageName
 * @param  {...any} modules
 */


var createThemeRegistry = function createThemeRegistry(packageName) {
  for (var _len2 = arguments.length, modules = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    modules[_key2 - 1] = arguments[_key2];
  }

  return (0, _construct2.default)(ThemeRegistry, [packageName].concat(modules));
};
/**
 * merge multiple themes
 */


exports.createThemeRegistry = createThemeRegistry;

var mergeThemes = function mergeThemes() {
  for (var _len3 = arguments.length, themes = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    themes[_key3] = arguments[_key3];
  }

  return _defaultsDeep.default.apply(void 0, [{}].concat(themes));
};

exports.mergeThemes = mergeThemes;