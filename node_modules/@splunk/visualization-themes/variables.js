"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scp = exports.enterpriseDark = exports.enterprise = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _getTheme = _interopRequireDefault(require("@splunk/themes/getTheme"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var suiEnterprise = (0, _getTheme.default)({
  family: 'enterprise',
  colorScheme: 'light',
  density: 'comfortable'
});
var suiEnterpriseDark = (0, _getTheme.default)({
  family: 'enterprise',
  colorScheme: 'dark',
  density: 'comfortable'
});
var suiSCP = (0, _getTheme.default)({
  family: 'prisma',
  colorScheme: 'dark',
  density: 'comfortable'
}); // we may provide our dashboard specific variables here.
// NOTE: tooltip colors are taken from splunk-charting highcharts-themes
// https://git.splunk.com/projects/SCRD/repos/splunk-charting/browse/packages/highcharts-themes/src/constants.js

var enterprise = _objectSpread(_objectSpread({}, suiEnterprise), {}, {
  headerTextColor: '#171D21',
  // WAS: suiEnterprise.textColor fixme todo: push the new value into suiEnterprise.textColor
  textColor: '#000000',
  // WAS: suiEnterprise.textColor fixme todo: push the new value into SUI?
  defaultBackgroundColor: suiEnterprise.defaultBackgroundColor,
  descriptionOpacity: 0.6,
  sidebarBackgroundColor: suiEnterprise.defaultBackgroundColor,
  // tooltips
  defaultToolTipBackgroundColor: '#000000',
  defaultToolTipFontColor: '#ffffff',
  defaultToolTipFontColorSoft: '#cccccc',
  defaultToolTipBorderColor: '#ffffff'
});

exports.enterprise = enterprise;

var enterpriseDark = _objectSpread(_objectSpread({}, suiEnterpriseDark), {}, {
  headerTextColor: suiEnterpriseDark.textColor,
  textColor: suiEnterpriseDark.textColor,
  backgroundColor: suiEnterpriseDark.black,
  defaultBackgroundColor: suiEnterpriseDark.black,
  descriptionOpacity: 0.7,
  sidebarBackgroundColor: suiEnterpriseDark.gray25,
  // used to be suienterpriseDark.backgroundColor (see backgroundColor above)
  // tooltips
  defaultToolTipBackgroundColor: '#ffffff',
  defaultToolTipFontColor: suiEnterpriseDark.gray20,
  defaultToolTipFontColorSoft: suiEnterpriseDark.gray45,
  defaultToolTipBorderColor: 'none'
});

exports.enterpriseDark = enterpriseDark;

var scp = _objectSpread(_objectSpread({}, suiSCP), {}, {
  headerTextColor: suiEnterpriseDark.textColor,
  // use white 2 for heading
  textColor: suiEnterpriseDark.textColor,
  defaultBackgroundColor: suiSCP.backgroundColorSidebar,
  descriptionOpacity: 0.7,
  sidebarBackgroundColor: '#0B0C0E',
  // tooltips
  defaultToolTipBackgroundColor: '#2B2C33',
  defaultToolTipFontColor: '#ffffff',
  defaultToolTipFontColorSoft: '#cccccc',
  defaultToolTipBorderColor: '#ffffff'
});

exports.scp = scp;