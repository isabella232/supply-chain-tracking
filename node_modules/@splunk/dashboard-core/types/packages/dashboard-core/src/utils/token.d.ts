/// <reference types="lodash" />
import type { DataSourceDefinition } from '@splunk/dashboard-types';
export declare const ERROR_LEVEL_INFO = "info";
export declare const ERROR_LEVEL_ERROR = "error";
export declare const WAITING_FOR_INPUT_MSG: string;
export declare type Tokens = Record<string, Record<string, string>>;
/**
 * resolver that takes the memoized function arguments (def, token), extracts the tokens used in the def
 * and returns the stringified def + extracted tokens, which is used as a cache key
 * @param {Object} def Viz/Layout/Input/Datasources definition
 * @param {Object} tokens
 * @returns {String}
 */
export declare const memoizeResolver: (def: unknown, tokens?: Tokens) => string;
export declare const replaceTokenForDataSources: ((dataSourceDefs: Record<string, DataSourceDefinition>, tokens?: Tokens) => Record<string, unknown>) & import("lodash").MemoizedFunction;
export declare const replaceTokenForInput: ((inputDef: any, tokens?: any) => any) & import("lodash").MemoizedFunction;
export declare const replaceTokenForVisualization: ((vizDef: any, tokens?: any) => any) & import("lodash").MemoizedFunction;
export declare const replaceTokenForLayout: ((layout?: any, tokens?: any) => any) & import("lodash").MemoizedFunction;
export declare const contains: (tokens?: {}, subset?: {}) => boolean;
export declare const filterExisting: <T>(tokens?: {}, omitTokens?: {}) => Partial<T>;
//# sourceMappingURL=token.d.ts.map