import type { Store } from 'redux';
import type { BehaviorSubject } from 'rxjs';
import type { DashboardJSON, DashboardCoreApi as IDashboardCoreApi, DataSourceDefinition, VisualizationDefinition, InputDefinition, Snapshot, DataSourceExtendOptions } from '@splunk/dashboard-types';
import ApiRegistry from './ApiRegistry';
import DataSourceRegistry from '../datasources/DataSourceRegistry';
interface LayoutApi {
    getZoomLevel: () => Promise<BehaviorSubject<number> | null>;
}
export default class DashboardCoreApi implements IDashboardCoreApi {
    store: Store;
    apiRegistry: ApiRegistry;
    dataSourceRegistry: DataSourceRegistry;
    constructor({ store, apiRegistry, dataSourceRegistry, }: {
        store: Store;
        apiRegistry: ApiRegistry;
        dataSourceRegistry: DataSourceRegistry;
    });
    /**
     * Update dashboard definition
     * @param {Object} definition dashboard definition
     */
    updateDefinition(definition: DashboardJSON): void;
    /**
     * Set token bindings
     * @param {Object} tokenBindingsConfig
     * @param {Object} tokenBindingsConfig.tokenBindings token bindings
     * @param {String} [tokenBindingsConfig.namespace = 'default'] - namespace for token bindings
     * @public
     */
    setTokenBindings({ tokenBindings, namespace, }: {
        tokenBindings: Record<string, unknown>;
        namespace: string;
    }): void;
    /**
     * Unset token binding
     * @param {Object} tokenBindingConfig
     * @param {String} tokenBindingConfig.tokenName token name
     * @param {String} [tokenBindingConfig.namespace = 'default'] - namespace for token bindings
     * @public
     */
    unsetTokenBinding({ tokenName, namespace, }: {
        tokenName: string;
        namespace: string;
    }): void;
    /**
     * @returns {Promise} A Promise that resolves to layoutApi object
     */
    isLayoutApiReady(): Promise<LayoutApi>;
    /**
     * createVisualization
     * @param {*} param0
     */
    createVisualization({ visualizationId, visualizationDefinition, layoutItemType, dataSourceType, dataSourceDefinition, }: {
        visualizationId: string;
        visualizationDefinition: VisualizationDefinition;
        layoutItemType: string;
        dataSourceType: string | null;
        dataSourceDefinition: DataSourceDefinition | null;
    }): void;
    /**
     * clone one or more existing visualizations
     * @method cloneVisualization
     * @param {Object} config
     * @param {Array} config.from Original VizIds
     * @param {Array} config.to Ids for cloned viz
     * @param {Number} [config.offsetMultiplier=1] Multiplier to offset cloned vis
     */
    cloneVisualizations({ from, to, offsetMultiplier, }: {
        from: string[];
        to: string[];
        offsetMultiplier: number;
    }): void;
    /**
     * remove visualizations
     * @param {*} vizIds
     */
    removeVisualizations(vizIds: string[]): void;
    /**
     * Update a visualization definition
     * @param {Object} options
     * @param {String} options.id   visualization id
     * @param {Object} options.vizDefinition    visualization definition
     */
    updateVisualization({ id, vizDefinition, }: {
        id: string;
        vizDefinition: VisualizationDefinition;
    }): void;
    /**
     * Remove a dataSource from a visualization definition
     * @param {Object} options
     * @param {String} options.vizId    visualization id
     * @param {String} options.dsBindingType    dataSource binding type, such as 'primary' or 'annotation'
     */
    removeDataSourceFromVisualization({ vizId, dsBindingType, }: {
        vizId: string;
        dsBindingType: string;
    }): void;
    /**
     * get dashboard global inputs dom element
     */
    getInputsDomElement(): unknown | null;
    /**
     * get dashboard canvas dom element
     */
    getCanvasDomElement(): unknown | null;
    /**
     * get visualization dom element
     * @param {*} vizId
     */
    getVisualizationDomElement(vizId: string): unknown | null;
    /**
     * pause all data sources
     */
    pauseAllDataSources(): void;
    /**
     * get data source metadata
     * @param {*} dataSourceId data source id
     */
    getDataSourceMetaData(dataSourceId: string): Record<string, unknown>;
    /**
     * return visualization ids in order
     */
    getVisualizationOrder(): string[] | null;
    /**
     * adjust visualization order, this will produce a new definition
     */
    adjustVisualizationOrder(fromIdx: number, toIdx: number): void;
    /**
     * take snapshot of current dashboard.
     * @returns {Object} The dashboard snapshot object.
     */
    takeSnapshotSync(): Snapshot;
    /**
     * take snapshot of current dashboard.
     * Note: This is left in to be backwards compatible with the legacy async API.
     * @returns {Promise} A promise that resolves to a dashboard snapshot object.
     */
    takeSnapshot(): Promise<Snapshot>;
    /**
     * focus on a visualization
     * @param {String} vizId visualization id
     */
    focusOnVisualization(vizId: string): void;
    /**
     * refresh all searches associated with the given visualization
     * @param {String} vizId visualization id
     * @param {Boolean} checkRiskyCommand check_risky_command can be `false` to continue searches with risky commands
     */
    refreshVisualization(vizId: string, { checkRiskyCommand }?: {
        checkRiskyCommand?: boolean;
    }): void;
    /**
     * refresh all searches associated with the given input
     * @param {String} inputId input id
     * @param {Boolean} checkRiskyCommand check_risky_command can be `false` to continue searches with risky commands
     */
    refreshInput(inputId: string, { checkRiskyCommand }?: {
        checkRiskyCommand?: boolean;
    }): void;
    toggleVisualizationFullscreen(vizId: string): void;
    /**
     * @returns {boolean} Boolean indicating if at least one search is running
     * i.e. status is one of 'queued', 'parsing', 'running', 'paused' or 'finalizing'.
     * @public
     */
    hasRunningSearches(): boolean;
    /**
     * Applies new scale to the dashboard
     * @param {Number} scale scale factor as floating point number
     * @returns {Boolean} Boolean indicating if completed successfully.
     */
    setScale(scale: number): boolean | null;
    /**
     * Increases dashboard zoom level for one step
     * @public
     */
    zoomIn(): unknown | null;
    /**
     * Decreases dashboard zoom level for one step
     * @public
     */
    zoomOut(): unknown | null;
    /**
     * Adjusts dashboard's width to fit its parent element.
     * @public
     */
    fitToWidth(): unknown | null;
    /**
     * @public
     * @returns {Promise} Promise that resolves to an observable that yields zoom level
     */
    getZoomLevel(): Promise<BehaviorSubject<number> | null>;
    /**
     * Get input definition given a token id
     * @param {String} tokenId
     * @returns {Object}
     * @public
     */
    getInputByToken(tokenId: string): InputDefinition | null;
    /**
     * Add an input to the definition
     * @param {String} inputId The input id
     * @param {Object} inputDefinition The input configuration
     */
    addInput(inputId: string, inputDefinition: InputDefinition): void;
    /**
     * Moves input ids in the globalInputs array
     * @param {Number} from array index of the input to move
     * @param {Number} to array index of where the input should move to
     */
    moveInput(from: number, to: number): void;
    /**
     * remove input from definition
     * @param {String} inputId The input id to remove
     */
    removeInput(inputId: string): void;
    /**
     * Update an input definition
     * @param {Object} options
     * @param {String} options.id   input id
     * @param {Object} options.inputDefinition    input definition
     */
    updateInput({ id, inputDefinition, }: {
        id: string;
        inputDefinition: InputDefinition;
    }): void;
    /**
     * Update the layout.globalInputs section in the definition
     * @param {String[]} inputStructure input ids
     */
    updateInputStructure(inputStructure: string[]): void;
    /**
     * Fetch the complete SPL search query and query parameters of a datasource including its ancestors
     * @param {String} dataSourceId dataSource ID
     * @returns {Object} Search options including the query and query parameters
     */
    getCompleteSearchQueryAndParameters(dataSourceId: string): DataSourceExtendOptions;
    /**
     * Update dashboard layout structure
     * @param {Object} layoutStructure dashboard layout structure
     */
    updateLayoutStructure(layoutStructure: unknown): void;
    /**
     * Update layout options
     * @param {Object} options layout options
     */
    updateLayoutOptions(options: Record<string, unknown>): void;
    /**
     * Migrate deprecated  dashboard configuration
     */
    startDashboardMigration(): void;
}
export declare const createDashboardApi: (options: {
    store: Store;
    apiRegistry: ApiRegistry;
    dataSourceRegistry: DataSourceRegistry;
}) => DashboardCoreApi;
export {};
//# sourceMappingURL=DashboardCoreApi.d.ts.map