import type { Component } from 'react';

// todo: this type is defined in the @splunk/dashboard-types pacakge, but we don't want to expose that package publicly, so we copied it here for now. Should import from that package once we stopped creating the declaration file manually.
interface SelectedItem {
    id: string;
    type: 'block' | 'line' | 'input';
}

interface Event {
    // todo
}

interface InitializedEvent {
    // todo
}

interface TokenChangedEvent {
    tokenBinding: object;
}

interface CreateVisualizationRequest {
    visualizationId: string;
    visualizationDefinition: object;
    layoutItemType?: string;
    dataSourceType?: string;
    dataSourceDefinition?: object;
}

interface CloneVisualizationRequest {
    from?: string[];
    to?: string[];
    offsetMultiplier?: number;
}

interface DashboardCoreAPI {
    /**
     * Generate a dashboard snapshot
     */
    takeSnapshot(): object;
    /**
     * create new visualization
     * @param request
     */
    createVisualization(request: CreateVisualizationRequest): Promise<void>;
    /**
     * clone one or more existing visualizations
     * @param request
     */
    cloneVisualizations(request: CloneVisualizationRequest): Promise<void>;
    /**
     * remove visualizations
     * @param vizIds
     */
    removeVisualizations(vizIds: string[]): Promise<void>;
    /**
     * return visualization ids in order
     */
    getVisualizationOrder(): string[];
    /**
     * adjust visualization stack order
     * @param fromIdx from stack index
     * @param toIdx to stack index
     */
    adjustVisualizationOrder(fromIdx: number, toIdx: number): Promise<void>;
}

interface DashboardCorePlugin {
    /**
     * Called when the dashboard is initialized
     */
    onInitialize?: (e: InitializedEvent) => void;
    /**
     * Called every time the token binding changed.
     */
    onTokenBindingChange?: (e: TokenChangedEvent) => void;
    /**
     * Called when an event triggered
     */
    onEventTrigger?: (e: Event) => void;
    /**
     * Called when navigation will occur
     */
    onLinkToUrl?: (e: Event) => void;
}

export interface DashboardCoreProps {
    /**
     * dashboard core width
     */
    width: string | number;
    /**
     * dashboard core height
     */
    height: string | number;
    /**
     * dashboard mode
     */
    mode?: 'edit' | 'view';
    /**
     *  dashboard definition
     */
    definition: object;
    /**
     * callback when the dashboard definition changed
     * @param newDefinition
     */
    onDefinitionChange?(newDefinition: object): void;
    /**
     *  datasource context
     */
    dataSourceContext?: object;
    /**
     * Supply a custom token binding for the dashboard.
     */
    tokenBinding?: Record<string, Record<string, string>>;
    /**
     * Hook to retrieve a reference to the dashboard lifecycle API, which
     * allows programmatic interaction with the dashboard.
     */
    dashboardCoreApiRef?: (api: DashboardCoreAPI) => void;
    /**
     * Optionally add a dashboard lifecycle plugin which allows to hook
     * into certain lifecycle events of the dashboard by providing
     * callback functions.
     */
    dashboardCorePlugin?: DashboardCorePlugin;
    /**
     * A preset that include the definiton of dashboard components
     * consumer can supply their own preset
     */
    preset?: object;
    /**
     * selected visualizations or inputs
     */
    selectedItems?: SelectedItem[];
    /**
     * Callback when visualizations or inputs are selected
     */
    onItemSelect?: (selectedItems: SelectedItem[]) => void;
    /**
     * A callback for when the tokenBinding change
     */
    onTokenBindingChange?: (tokens: Record<string, unknown>) => void;
    /**
     * viz action menus
     */
    actionMenus?: JSX.Element[];
    /**
     * metadata for logging purposes
     */
    metadata?: Record<string, unknown>;
    /**
     * whether gridlines should be displayed in edit mode
     */
    showGrid?: boolean;
    /**
     * Called when validation fails
     */
    onValidationError?: (message: string) => void;
    /**
     * Set of readonly token namespaces. Tokens in these namespaces cannot be modified from their initial tokenBinding values.
     */
    readOnlyTokenNamespaces?: Set<string>;
}

export default class DashboardCore extends Component<DashboardCoreProps> {}
