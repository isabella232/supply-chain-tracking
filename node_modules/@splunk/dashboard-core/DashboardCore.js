/*!
 * Copyright © 2020 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 47);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("prop-types");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("lodash/get");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.objectDiff = exports.selectDataSourcesForInput = exports.selectDataSourcesForViz = exports.selectTitle = exports.selectInput = exports.selectInputs = exports.selectVisualization = exports.selectDataSource = exports.selectVisualizations = exports.selectDataSources = exports.selectDataSourceDefinitionForVizFactory = exports.selectVisualizationDefinitionFactory = exports.selectResolvedLayout = exports.selectLayout = exports.selectDefaults = exports.selectDefinition = exports.updateInput = exports.updateInputStructure = exports.updateLayoutStructure = exports.updateLayoutOptions = exports.updateVizDescription = exports.updateVizTitle = exports.updateVizOptions = exports.removeDataSourceFromVisualization = exports.updateVisualization = exports.addVisualization = exports.updateDefinition = void 0;
var values_1 = __importDefault(__webpack_require__(59));
var pick_1 = __importDefault(__webpack_require__(16));
var isEqual_1 = __importDefault(__webpack_require__(14));
var omit_1 = __importDefault(__webpack_require__(24));
var without_1 = __importDefault(__webpack_require__(60));
var isEmpty_1 = __importDefault(__webpack_require__(12));
var clone_1 = __importDefault(__webpack_require__(61));
var uniq_1 = __importDefault(__webpack_require__(62));
var redux_actions_1 = __webpack_require__(8);
var DashboardDefinition_1 = __importDefault(__webpack_require__(17));
var reselect_1 = __webpack_require__(29);
var tokens_1 = __webpack_require__(5);
var token_1 = __webpack_require__(9);
/**
 * Actions
 */
exports.updateDefinition = redux_actions_1.createAction('UPDATE_DEFINITION');
exports.addVisualization = redux_actions_1.createAction('ADD_VISUALIZATION', function (vizId, vizDef, dsId, dsDef) { return ({
    vizId: vizId,
    vizDef: vizDef,
    dsId: dsId,
    dsDef: dsDef,
}); });
exports.updateVisualization = redux_actions_1.createAction('UPDATE_VISUALIZATION');
exports.removeDataSourceFromVisualization = redux_actions_1.createAction('REMOVE_DATA_SOURCE_FROM_VISUALIZATION');
exports.updateVizOptions = redux_actions_1.createAction('UPDATE_VIZ_OPTIONS', function (id, options) { return ({
    id: id,
    options: options,
}); });
exports.updateVizTitle = redux_actions_1.createAction('UPDATE_VIZ_TITLE', function (id, title) { return ({
    id: id,
    title: title,
}); });
exports.updateVizDescription = redux_actions_1.createAction('UPDATE_VIZ_DESCRIPTION', function (id, description) { return ({
    id: id,
    description: description,
}); });
exports.updateLayoutOptions = redux_actions_1.createAction('UPDATE_LAYOUT_OPTIONS');
exports.updateLayoutStructure = redux_actions_1.createAction('UPDATE_LAYOUT_STRUCTURE');
exports.updateInputStructure = redux_actions_1.createAction('UPDATE_INPUT_STRUCTURE');
exports.updateInput = redux_actions_1.createAction('UPDATE_INPUT');
var empty = {};
/**
 * Selectors
 */
var selectDefinition = function (state) { return state.definition; };
exports.selectDefinition = selectDefinition;
exports.selectDefaults = reselect_1.createSelector([exports.selectDefinition], function (def) { return def.defaults; });
// Raw selectors retrieve parts of the definition without modifications
var selectLayoutRaw = reselect_1.createSelector([exports.selectDefinition], function (def) { return (def === null || def === void 0 ? void 0 : def.layout) || empty; });
var selectVisualizationsRaw = reselect_1.createSelector([exports.selectDefinition], function (def) { return def.visualizations; });
var selectDataSourcesRaw = reselect_1.createSelector([exports.selectDefinition], function (def) { return def.dataSources; });
var selectVisualizationRaw = function (state, id) {
    return selectVisualizationsRaw(state)[id];
};
exports.selectLayout = reselect_1.createSelector([selectLayoutRaw, selectVisualizationsRaw], function (layout, visualizations) {
    var _a = layout.structure, structure = _a === void 0 ? [] : _a;
    var items = new Set();
    var hasDuplicate = false;
    // Remove items that are duplicated, or do not appear in visualizations
    var updatedStructure = structure.filter(function (item) {
        if (!items.has(item.item) && visualizations[item.item]) {
            items.add(item.item);
            return true;
        }
        hasDuplicate = true;
        return false;
    });
    if (hasDuplicate) {
        return __assign(__assign({}, layout), { structure: updatedStructure });
    }
    // this is an optimization that avoids re-renders for components that use `layout` as prop
    return layout;
});
exports.selectResolvedLayout = reselect_1.createSelector([exports.selectLayout, tokens_1.selectSubmittedTokens], token_1.replaceTokenForLayout);
// Flatten only the viz you need instead of the entire definition
var selectFlattenedVisualization = reselect_1.createSelector([selectVisualizationRaw, exports.selectDefaults], function (vizDef, defaults) {
    var _a;
    return DashboardDefinition_1.default.flattenVisualizations((_a = {}, _a[vizDef.id] = vizDef, _a), defaults)[vizDef.id];
});
// dataSources configs aren't flattened in viz, so we don't need the flattened def
var selectDSIds = reselect_1.createSelector([selectVisualizationRaw], function (vizDef) {
    return values_1.default((vizDef === null || vizDef === void 0 ? void 0 : vizDef.dataSources) || {});
});
// Filter down to only the datasource definitions used by the visualization
var selectDataSourcesForVizRaw = reselect_1.createSelector([selectDataSourcesRaw, selectDSIds], function (dataSources, dsIds) { return pick_1.default(dataSources, dsIds); });
// Flatten only the datasources used by the visualization
var selectFlattenedDataSourcesForViz = reselect_1.createSelector([selectDataSourcesForVizRaw, exports.selectDefaults], DashboardDefinition_1.default.flattenDataSources);
/**
 * The following are factory methods to generate unique selectors for a visualization
 * Potential Improvement: selectSubmittedTokensUsedBy*
 * Note: replaceTokenFor* is memoized against used tokens already
 */
var selectVisualizationDefinitionFactory = function () {
    return reselect_1.createSelector([selectFlattenedVisualization, tokens_1.selectSubmittedTokens], token_1.replaceTokenForVisualization);
};
exports.selectVisualizationDefinitionFactory = selectVisualizationDefinitionFactory;
var selectDataSourceDefinitionForVizFactory = function () {
    return reselect_1.createSelector([selectFlattenedDataSourcesForViz, tokens_1.selectSubmittedTokens], token_1.replaceTokenForDataSources);
};
exports.selectDataSourceDefinitionForVizFactory = selectDataSourceDefinitionForVizFactory;
/**
 * The following are not optimized but are kept for backwards compatibility
 * until all usage of them can be removed
 */
// this is an optimization to avoid re-renders for components that use dataSources as props
var dataSourcesWithDefaultsCache;
var selectDataSources = function (state) {
    var dataSources = exports.selectDefinition(state).dataSources;
    var defaults = exports.selectDefaults(state);
    var dataSourcesWithDefaults = DashboardDefinition_1.default.flattenDataSources(dataSources, defaults);
    if (!isEqual_1.default(dataSourcesWithDefaults, dataSourcesWithDefaultsCache)) {
        dataSourcesWithDefaultsCache = dataSourcesWithDefaults;
    }
    return dataSourcesWithDefaultsCache;
};
exports.selectDataSources = selectDataSources;
var visualizationsWithDefaultsCache;
var selectVisualizations = function (state) {
    var visualizations = exports.selectDefinition(state).visualizations;
    var defaults = exports.selectDefaults(state);
    var visualizationsWithDefaults = DashboardDefinition_1.default.flattenVisualizations(visualizations, defaults);
    if (!isEqual_1.default(visualizationsWithDefaults, visualizationsWithDefaultsCache)) {
        visualizationsWithDefaultsCache = visualizationsWithDefaults;
    }
    return visualizationsWithDefaultsCache;
};
exports.selectVisualizations = selectVisualizations;
var selectDataSource = function (state, dsId) { return exports.selectDataSources(state)[dsId]; };
exports.selectDataSource = selectDataSource;
var selectVisualization = function (state, vizId) {
    return exports.selectVisualizations(state)[vizId];
};
exports.selectVisualization = selectVisualization;
var selectInputs = function (state) { return exports.selectDefinition(state).inputs; };
exports.selectInputs = selectInputs;
var selectInput = function (state, inputId) { return exports.selectInputs(state)[inputId]; };
exports.selectInput = selectInput;
var selectTitle = function (state) { return exports.selectDefinition(state).title; };
exports.selectTitle = selectTitle;
var selectDataSourcesForViz = function (state, id) {
    var viz = exports.selectVisualization(state, id);
    var dataSourceIds = values_1.default(viz.dataSources || {});
    return pick_1.default(exports.selectDataSources(state), dataSourceIds);
};
exports.selectDataSourcesForViz = selectDataSourcesForViz;
var selectDataSourcesForInput = function (state, id) {
    var input = exports.selectInput(state, id);
    var dataSourceIds = values_1.default(input.dataSources || {});
    return pick_1.default(exports.selectDataSources(state), dataSourceIds);
};
exports.selectDataSourcesForInput = selectDataSourcesForInput;
/**
 * Compares two objects for changed values, and replays changes onto a third object
 * @param {Object} obj
 * @param {Object} obj.obj1 The original unmodified object, e.g. the flattened def from state
 * @param {Object} obj.obj2 The new modified object, e.g. a flattened def with changes
 * @param {Object} [obj.rootObj={}] The configuration object that acts as the root definition, e.g. has not had defaults flattened on it
 * @param {String[]} [obj.omitKeys=[]] Keys to ignore when checking for changes
 */
var objectDiff = function (_a) {
    var _b = _a.obj1, obj1 = _b === void 0 ? {} : _b, // original obj
    _c = _a.obj2, // original obj
    obj2 = _c === void 0 ? {} : _c, // updated obj
    _d = _a.rootObj, // updated obj
    rootObj = _d === void 0 ? {} : _d, // non-flattened obj
    _e = _a.omitKeys, // non-flattened obj
    omitKeys = _e === void 0 ? [] : _e;
    // Find all keys in both objects, excluding some
    var keys = without_1.default.apply(void 0, __spread([uniq_1.default(Object.keys(obj1).concat(Object.keys(obj2)))], omitKeys));
    var result = clone_1.default(rootObj);
    keys.forEach(function (key) {
        if (!isEqual_1.default(obj1[key], obj2[key])) {
            // key was deleted
            if (!Object.prototype.hasOwnProperty.call(obj2, key)) {
                delete result[key];
            }
            else {
                result[key] = obj2[key];
            }
        }
    });
    return result;
};
exports.objectDiff = objectDiff;
/**
 * Reducer
 */
exports.default = redux_actions_1.handleActions((_a = {},
    _a[exports.updateDefinition] = function (state, _a) {
        var payload = _a.payload;
        return payload;
    },
    _a[exports.updateVisualization] = function (state, _a) {
        var _b, _c;
        var _d, _e;
        var _f = _a.payload, id = _f.id, vizDefinition = _f.vizDefinition;
        var def = DashboardDefinition_1.default.fromJSON(state);
        var flattenedDef = def.getVisualizationWithFlattenedDefaults(id);
        var updatedDef = vizDefinition;
        // if vizDefinition is callback, use it to to receive the updated definition
        if (typeof vizDefinition === 'function') {
            var updateVizDefinition = vizDefinition;
            updatedDef = updateVizDefinition(def.getVisualization(id));
        }
        // Since this viz changed type, we'll just pass it directly through
        // TODO: we may want to check against flattened defaults for the new viz type later
        if (flattenedDef.type !== updatedDef.type) {
            return __assign(__assign({}, state), { visualizations: __assign(__assign({}, state.visualizations), (_b = {}, _b[id] = updatedDef, _b)) });
        }
        // get root level changes
        var mergedDef = exports.objectDiff({
            obj1: flattenedDef,
            obj2: updatedDef,
            rootObj: def.getVisualization(id),
            omitKeys: ['options', 'context'],
        });
        // changed options
        mergedDef.options = exports.objectDiff({
            obj1: flattenedDef.options,
            obj2: updatedDef.options,
            rootObj: (_d = mergedDef.options) !== null && _d !== void 0 ? _d : {},
        });
        // changed context
        mergedDef.context = exports.objectDiff({
            obj1: flattenedDef.context,
            obj2: updatedDef.context,
            rootObj: (_e = mergedDef.context) !== null && _e !== void 0 ? _e : {},
        });
        // Remove empty objects
        if (isEmpty_1.default(mergedDef.options)) {
            delete mergedDef.options;
        }
        if (isEmpty_1.default(mergedDef.context)) {
            delete mergedDef.context;
        }
        return __assign(__assign({}, state), { visualizations: __assign(__assign({}, state.visualizations), (_c = {}, _c[id] = mergedDef, _c)) });
    },
    _a[exports.removeDataSourceFromVisualization] = function (state, _a) {
        var _b;
        var _c = _a.payload, vizId = _c.vizId, dsBindingType = _c.dsBindingType;
        return (__assign(__assign({}, state), { visualizations: __assign(__assign({}, state.visualizations), (_b = {}, _b[vizId] = __assign(__assign({}, state.visualizations[vizId]), { dataSources: omit_1.default(state.visualizations[vizId].dataSources, dsBindingType) }), _b)) }));
    },
    _a[exports.updateVizOptions] = function (state, _a) {
        var _b;
        var _c = _a.payload, id = _c.id, newOptions = _c.options;
        return (__assign(__assign({}, state), { visualizations: __assign(__assign({}, state.visualizations), (_b = {}, _b[id] = __assign(__assign({}, state.visualizations[id]), { options: __assign(__assign({}, state.visualizations[id].options), newOptions) }), _b)) }));
    },
    _a[exports.updateVizTitle] = function (state, _a) {
        var _b;
        var _c = _a.payload, id = _c.id, newTitle = _c.title;
        var trimmedTitle = newTitle && newTitle.trim();
        if (!trimmedTitle) {
            var nextDefinition = __assign({}, state);
            delete nextDefinition.visualizations[id].title;
            return nextDefinition;
        }
        return __assign(__assign({}, state), { visualizations: __assign(__assign({}, state.visualizations), (_b = {}, _b[id] = __assign(__assign({}, state.visualizations[id]), { title: trimmedTitle }), _b)) });
    },
    _a[exports.updateVizDescription] = function (state, _a) {
        var _b;
        var _c = _a.payload, id = _c.id, newDescription = _c.description;
        var trimmedDescription = newDescription && newDescription.trim();
        if (!trimmedDescription) {
            var nextDefinition = __assign({}, state);
            delete nextDefinition.visualizations[id].description;
            return nextDefinition;
        }
        return __assign(__assign({}, state), { visualizations: __assign(__assign({}, state.visualizations), (_b = {}, _b[id] = __assign(__assign({}, state.visualizations[id]), { description: trimmedDescription }), _b)) });
    },
    _a[exports.updateLayoutStructure] = function (state, _a) {
        var layoutStructure = _a.payload;
        return (__assign(__assign({}, state), { layout: __assign(__assign({}, state.layout), { structure: layoutStructure }) }));
    },
    _a[exports.updateInputStructure] = function (state, _a) {
        var inputStructure = _a.payload;
        return (__assign(__assign({}, state), { layout: __assign(__assign({}, state.layout), { globalInputs: inputStructure }) }));
    },
    _a[exports.updateInput] = function (state, _a) {
        var _b;
        var _c = _a.payload, id = _c.id, inputDefinition = _c.inputDefinition;
        var updatedInput = inputDefinition;
        // if inputDefinition is a callback, use it to get the updated definition
        if (typeof inputDefinition === 'function') {
            var def = DashboardDefinition_1.default.fromJSON(state);
            var updateInputDefinition = inputDefinition;
            updatedInput = updateInputDefinition(def.getInput(id));
        }
        return __assign(__assign({}, state), { inputs: __assign(__assign({}, state.inputs), (_b = {}, _b[id] = updatedInput, _b)) });
    },
    _a[exports.updateLayoutOptions] = function (state, _a) {
        var payload = _a.payload;
        return (__assign(__assign({}, state), { layout: __assign(__assign({}, state.layout), { options: payload }) }));
    },
    _a), {});


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.migrateDashboard = exports.selectedItemChanged = exports.inputChanged = exports.submittedTokenChanged = exports.definitionChanged = exports.removeInput = exports.inputValueChanged = exports.adjustInputOrder = exports.createInput = exports.triggerEvent = exports.updateVizRequestParams = exports.adjustVisualizationOrder = exports.cloneVisualizations = exports.createVisualization = exports.removeVisualizations = exports.teardown = exports.initialize = void 0;
/* eslint-disable import/prefer-default-export */
var redux_actions_1 = __webpack_require__(8);
/**
 * Actions that communicate with Saga, these actions will not update redux store directly (no reducer)
 */
exports.initialize = redux_actions_1.createAction('SAGA_INITIALIZE');
exports.teardown = redux_actions_1.createAction('SAGA_TEARDOWN');
exports.removeVisualizations = redux_actions_1.createAction('REMOVE_VISUALIZATIONS');
exports.createVisualization = redux_actions_1.createAction('CREATE_VISUALIZATIONS');
exports.cloneVisualizations = redux_actions_1.createAction('CLONE_VISUALIZATIONS');
exports.adjustVisualizationOrder = redux_actions_1.createAction('ADJUST_VIZ_ORDER', function (from, to) { return ({
    from: from,
    to: to,
}); });
exports.updateVizRequestParams = redux_actions_1.createAction('UPDATE_VIZ_REQUEST_PARAMS', function (vizId, dataSourceType, newRequestParams) { return ({
    vizId: vizId,
    dataSourceType: dataSourceType,
    newRequestParams: newRequestParams,
}); });
exports.triggerEvent = redux_actions_1.createAction('EVENT_TRIGGERED', function (targetId, eventType, eventPayload, eventId) { return ({
    targetId: targetId,
    eventType: eventType,
    eventPayload: eventPayload,
    eventId: eventId,
}); });
exports.createInput = redux_actions_1.createAction('CREATE_INPUT');
exports.adjustInputOrder = redux_actions_1.createAction('ADJUST_INPUT_ORDER');
exports.inputValueChanged = redux_actions_1.createAction('INPUT_VALUE_CHANGED', function (id, newValue, eventId) { return ({
    id: id,
    value: newValue,
    eventId: eventId,
}); });
exports.removeInput = redux_actions_1.createAction('REMOVE_INPUT');
exports.definitionChanged = redux_actions_1.createAction('DEFINITION_CHANGED');
exports.submittedTokenChanged = redux_actions_1.createAction('SUBMITTED_TOKEN_CHANGED');
exports.inputChanged = redux_actions_1.createAction('INPUT_CHANGED');
exports.selectedItemChanged = redux_actions_1.createAction('SELECTED_ITEM_CHANGED');
exports.migrateDashboard = redux_actions_1.createAction('MIGRATE_DASHBOARD');


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.selectStashedTokens = exports.selectSubmittedTokens = exports.selectTokens = exports.submitTokens = exports.updateTokens = exports.unsetToken = exports.setToken = void 0;
var get_1 = __importDefault(__webpack_require__(2));
var isEqual_1 = __importDefault(__webpack_require__(14));
var pick_1 = __importDefault(__webpack_require__(16));
var omit_1 = __importDefault(__webpack_require__(24));
var isEmpty_1 = __importDefault(__webpack_require__(12));
var reselect_1 = __webpack_require__(29);
var redux_actions_1 = __webpack_require__(8);
var isNullOrUndefined = function (val) { return val === null || val === undefined; };
/**
 * Actions
 */
exports.setToken = redux_actions_1.createAction('SET_TOKEN', function (tokens, namespace, submit) {
    if (namespace === void 0) { namespace = 'default'; }
    if (submit === void 0) { submit = true; }
    return ({
        tokens: tokens,
        namespace: namespace,
        submit: submit,
    });
});
exports.unsetToken = redux_actions_1.createAction('UNSET_TOKEN', function (tokenName, namespace, submit) {
    if (namespace === void 0) { namespace = 'default'; }
    if (submit === void 0) { submit = true; }
    return ({
        tokenName: tokenName,
        namespace: namespace,
        submit: submit,
    });
});
exports.updateTokens = redux_actions_1.createAction('UPDATE_TOKENS', function (tokens, submit) {
    if (submit === void 0) { submit = true; }
    return ({
        tokens: tokens,
        submit: submit,
    });
});
exports.submitTokens = redux_actions_1.createAction('SUBMIT_TOKENS', function (namespace) {
    if (namespace === void 0) { namespace = 'default'; }
    return ({
        namespace: namespace,
    });
});
// this is an optimization that avoid re-renders
var noTokens = {};
/**
 * Selectors
 */
var selectTokens = function (state) { return (state === null || state === void 0 ? void 0 : state.tokens) || noTokens; };
exports.selectTokens = selectTokens;
exports.selectSubmittedTokens = reselect_1.createSelector([exports.selectTokens], function (tokens) { return (tokens === null || tokens === void 0 ? void 0 : tokens.submitted) || noTokens; });
exports.selectStashedTokens = reselect_1.createSelector([exports.selectTokens], function (tokens) { return (tokens === null || tokens === void 0 ? void 0 : tokens.stashed) || noTokens; });
/**
 * Reducers
 */
exports.default = redux_actions_1.handleActions((_a = {},
    _a[exports.updateTokens] = function (state, _a) {
        var _b;
        var _c = _a.payload, payload = _c === void 0 ? {} : _c;
        var tokens = payload.tokens, submit = payload.submit;
        var space = submit ? 'submitted' : 'stashed';
        if (isEqual_1.default(state[space], tokens)) {
            return state;
        }
        var readOnlyTokenNamespacesArray = Array.from(state.readOnlyTokenNamespaces);
        var writableTokens = omit_1.default(tokens, readOnlyTokenNamespacesArray);
        var currentReadOnlyTokens = pick_1.default(state[space], readOnlyTokenNamespacesArray);
        return __assign(__assign({}, state), (_b = {}, _b[space] = __assign(__assign({}, currentReadOnlyTokens), writableTokens), _b));
    },
    _a[exports.setToken] = function (state, _a) {
        var _b, _c;
        var payload = _a.payload;
        var tokens = payload.tokens, namespace = payload.namespace, submit = payload.submit;
        var space = submit ? 'submitted' : 'stashed';
        var currentTokens = get_1.default(state, [space, namespace]);
        if (state.readOnlyTokenNamespaces.has(namespace) ||
            isEqual_1.default(pick_1.default(currentTokens, Object.keys(tokens)), tokens)) {
            return state;
        }
        return __assign(__assign({}, state), (_b = {}, _b[space] = __assign(__assign({}, state[space]), (_c = {}, _c[namespace] = __assign(__assign({}, currentTokens), tokens), _c)), _b));
    },
    _a[exports.unsetToken] = function (state, _a) {
        var _b, _c;
        var payload = _a.payload;
        var tokenName = payload.tokenName, namespace = payload.namespace, submit = payload.submit;
        var space = submit ? 'submitted' : 'stashed';
        var currentTokens = get_1.default(state, [space, namespace], {});
        var readOnlyTokenNamespaces = state.readOnlyTokenNamespaces;
        var tokensToUnset = {};
        if (typeof tokenName === 'string') {
            if (!isNullOrUndefined(currentTokens[tokenName])) {
                tokensToUnset[tokenName] = null;
            }
        }
        else if (Array.isArray(tokenName)) {
            tokenName.forEach(function (token) {
                if (!isNullOrUndefined(currentTokens[token])) {
                    tokensToUnset[token] = null;
                }
            });
        }
        if (isEmpty_1.default(tokensToUnset) ||
            readOnlyTokenNamespaces.has(namespace)) {
            return state;
        }
        return __assign(__assign({}, state), (_b = {}, _b[space] = __assign(__assign({}, state[space]), (_c = {}, _c[namespace] = __assign(__assign({}, currentTokens), tokensToUnset), _c)), _b));
    },
    _a[exports.submitTokens] = function (state, _a) {
        var _b, _c;
        var payload = _a.payload;
        // move tokens from stashed to submitted
        var namespace = payload.namespace;
        var tobeSubmit = get_1.default(state, ['stashed', namespace], {});
        if (state.readOnlyTokenNamespaces.has(namespace) ||
            isEmpty_1.default(tobeSubmit)) {
            // nothing to submit
            return state;
        }
        return __assign(__assign({}, state), { stashed: __assign(__assign({}, state.stashed), (_b = {}, _b[namespace] = {}, _b)), submitted: __assign(__assign({}, state.submitted), (_c = {}, _c[namespace] = __assign(__assign({}, get_1.default(state, ['submitted', namespace])), tobeSubmit), _c)) });
    },
    _a), {
    stashed: {},
    submitted: {},
});


/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("styled-components");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("react-redux");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = require("redux-actions");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.filterExisting = exports.contains = exports.replaceTokenForLayout = exports.replaceTokenForVisualization = exports.replaceTokenForInput = exports.replaceTokenForDataSources = exports.memoizeResolver = exports.WAITING_FOR_INPUT_MSG = exports.ERROR_LEVEL_ERROR = exports.ERROR_LEVEL_INFO = void 0;
/* eslint-disable no-unused-vars */
var each_1 = __importDefault(__webpack_require__(19));
var pick_1 = __importDefault(__webpack_require__(16));
var keys_1 = __importDefault(__webpack_require__(63));
var memoize_1 = __importDefault(__webpack_require__(36));
var i18n_1 = __webpack_require__(13);
var jsonEqual_1 = __importDefault(__webpack_require__(30));
var token_1 = __webpack_require__(37);
var omit_1 = __importDefault(__webpack_require__(24));
exports.ERROR_LEVEL_INFO = 'info';
exports.ERROR_LEVEL_ERROR = 'error';
exports.WAITING_FOR_INPUT_MSG = i18n_1._('Waiting for input...');
/**
 * resolver that takes the memoized function arguments (def, token), extracts the tokens used in the def
 * and returns the stringified def + extracted tokens, which is used as a cache key
 * @param {Object} def Viz/Layout/Input/Datasources definition
 * @param {Object} tokens
 * @returns {String}
 */
var memoizeResolver = function (def, tokens) {
    if (tokens === void 0) { tokens = {}; }
    var parsedTokens = {};
    token_1.extractTokensFromObject(def).forEach(function (_a) {
        var namespace = _a.namespace, name = _a.name;
        if (tokens[namespace] && tokens[namespace][name]) {
            if (!(namespace in parsedTokens)) {
                parsedTokens[namespace] = {};
            }
            parsedTokens[namespace][name] = tokens[namespace][name];
        }
    });
    return JSON.stringify([def, parsedTokens]);
};
exports.memoizeResolver = memoizeResolver;
exports.replaceTokenForDataSources = memoize_1.default(function (dataSourceDefs, tokens) {
    if (tokens === void 0) { tokens = {}; }
    var resolved = {};
    each_1.default(dataSourceDefs, function (def, id) {
        var rawOptions = dataSourceDefs[id].options;
        if (rawOptions == null) {
            return;
        }
        var resolvedOptions = token_1.replaceTokensForObject(rawOptions, tokens);
        if (token_1.hasTokensInObject(resolvedOptions)) {
            resolved[id] = {
                type: '_ds.snapshot_',
                options: {
                    errorLevel: exports.ERROR_LEVEL_INFO,
                    error: exports.WAITING_FOR_INPUT_MSG,
                },
            };
        }
        else {
            resolved[id] = __assign(__assign({}, dataSourceDefs[id]), { options: resolvedOptions });
        }
    });
    return resolved;
}, exports.memoizeResolver);
exports.replaceTokenForInput = memoize_1.default(function (inputDef, tokens) {
    if (tokens === void 0) { tokens = {}; }
    return __assign(__assign({}, inputDef), { title: token_1.replaceTokens(inputDef.title, tokens), options: token_1.replaceTokensForObject(inputDef.options, tokens) });
}, exports.memoizeResolver);
exports.replaceTokenForVisualization = memoize_1.default(function (vizDef, tokens) {
    if (tokens === void 0) { tokens = {}; }
    return __assign(__assign({}, vizDef), { title: token_1.replaceTokens(vizDef.title, tokens), description: token_1.replaceTokens(vizDef.description, tokens), options: token_1.replaceTokensForObject(vizDef.options, tokens), context: token_1.replaceTokensForObject(vizDef.context, tokens) });
}, exports.memoizeResolver);
exports.replaceTokenForLayout = memoize_1.default(function (layout, tokens) {
    if (layout === void 0) { layout = {}; }
    if (tokens === void 0) { tokens = {}; }
    return __assign(__assign({}, layout), { options: token_1.safeReplaceTokensForObject(layout.options, tokens, [
            'backgroundImage.src',
        ]) });
}, exports.memoizeResolver);
var contains = function (tokens, subset) {
    if (tokens === void 0) { tokens = {}; }
    if (subset === void 0) { subset = {}; }
    return jsonEqual_1.default(subset, pick_1.default(tokens, keys_1.default(subset)));
};
exports.contains = contains;
// Return the key/value pairs in tokens that are not in omitTokens
var filterExisting = function (tokens, omitTokens) {
    if (tokens === void 0) { tokens = {}; }
    if (omitTokens === void 0) { omitTokens = {}; }
    return omit_1.default(tokens, keys_1.default(omitTokens));
};
exports.filterExisting = filterExisting;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegistryContextProvider = exports.default = exports.useRegistry = void 0;
var react_1 = __importStar(__webpack_require__(0));
var RegistryContext = react_1.createContext(null);
exports.default = RegistryContext;
var RegistryContextProvider = function (_a) {
    var apiRegistry = _a.apiRegistry, eventRegistry = _a.eventRegistry, dataSourceRegistry = _a.dataSourceRegistry, preset = _a.preset, children = _a.children;
    var value = react_1.useMemo(function () { return ({
        apiRegistry: apiRegistry,
        eventRegistry: eventRegistry,
        dataSourceRegistry: dataSourceRegistry,
        preset: preset,
    }); }, [apiRegistry, eventRegistry, dataSourceRegistry, preset]);
    return (react_1.default.createElement(RegistryContext.Provider, { value: value }, children));
};
exports.RegistryContextProvider = RegistryContextProvider;
var useRegistry = function () {
    var ctx = react_1.useContext(RegistryContext);
    if (ctx === null) {
        throw new Error('useRegistry can only be used in a component that is a child of a RegistryContextProvider');
    }
    return ctx;
};
exports.useRegistry = useRegistry;


/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-utils/console");

/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = require("lodash/isEmpty");

/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = require("@splunk/ui-utils/i18n");

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = require("lodash/isEqual");

/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = require("redux-saga/effects");

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = require("lodash/pick");

/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-definition/DashboardDefinition");

/***/ }),
/* 18 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-utils");

/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports = require("lodash/each");

/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = require("lodash/isFunction");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.selectMode = exports.switchMode = void 0;
var redux_actions_1 = __webpack_require__(8);
/**
 * Actions
 */
exports.switchMode = redux_actions_1.createAction('SWITCH_MODE');
/**
 *
 */
var selectMode = function (state) { return state.mode; };
exports.selectMode = selectMode;
/**
 * Reducer
 */
exports.default = redux_actions_1.handleActions((_a = {},
    _a[exports.switchMode] = function (state, _a) {
        var payload = _a.payload;
        return payload;
    },
    _a), 'view');


/***/ }),
/* 22 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-ui/Message");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.selectInputValue = exports.selectInputState = exports.updateInputState = exports.setInputState = void 0;
var get_1 = __importDefault(__webpack_require__(2));
var redux_actions_1 = __webpack_require__(8);
exports.setInputState = redux_actions_1.createAction('SET_INPUT_STATE');
exports.updateInputState = redux_actions_1.createAction('UPDATE_INPUT_STATE', function (id, state) { return ({ id: id, state: state }); });
var selectInputState = function (state) { return state.inputState; };
exports.selectInputState = selectInputState;
var selectInputValue = function (state, inputId) {
    return get_1.default(state, ['inputState', inputId, 'value']);
};
exports.selectInputValue = selectInputValue;
/**
 * reducer
 */
exports.default = redux_actions_1.handleActions((_a = {},
    _a[exports.setInputState] = function (currentState, _a) {
        var payload = _a.payload;
        return payload;
    },
    _a[exports.updateInputState] = function (currentState, _a) {
        var _b;
        var _c = _a.payload, id = _c.id, state = _c.state;
        return (__assign(__assign({}, currentState), (_b = {}, _b[id] = state, _b)));
    },
    _a), {});


/***/ }),
/* 24 */
/***/ (function(module, exports) {

module.exports = require("lodash/omit");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeSelectIsSelected = exports.selectSelectedItems = exports.selectEditor = exports.updateSelectedItems = void 0;
var isEqual_1 = __importDefault(__webpack_require__(14));
var redux_actions_1 = __webpack_require__(8);
var reselect_1 = __webpack_require__(29);
exports.updateSelectedItems = redux_actions_1.createAction('UPDATE_SELECTED_ITEMS');
var selectEditor = function (state) { return state.editor; };
exports.selectEditor = selectEditor;
// this is an optimization to avoid re-renders for components that use selectedItems as prop
var noSelectedItems = [];
var selectSelectedItems = function (state) {
    return exports.selectEditor(state).selectedItems || noSelectedItems;
};
exports.selectSelectedItems = selectSelectedItems;
var selectVizId = function (_, vizId) { return vizId; };
var makeSelectIsSelected = function () {
    return reselect_1.createSelector([exports.selectSelectedItems, selectVizId], function (selectedItems, vizId) {
        return !!selectedItems.find(function (item) { return item.id === vizId; });
    });
};
exports.makeSelectIsSelected = makeSelectIsSelected;
exports.default = redux_actions_1.handleActions((_a = {},
    _a[exports.updateSelectedItems] = function (state, _a) {
        var selectItems = _a.payload;
        if (isEqual_1.default(state.selectedItems, selectItems)) {
            return state;
        }
        return __assign(__assign({}, state), { selectedItems: selectItems });
    },
    _a), {
    selectedItem: noSelectedItems,
});


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatData = exports.findInitialRequestParams = void 0;
/* eslint-disable no-param-reassign */
var get_1 = __importDefault(__webpack_require__(2));
var isFunction_1 = __importDefault(__webpack_require__(20));
var DataSet_1 = __importDefault(__webpack_require__(85));
var emptyInitialRequestParams = {};
/**
 * Compute initial request params for given visualization and dataSource
 * @param {Object} config
 * @param {String} config.bindingType dataSource binding type
 * @param {Object} config.consumerModule module from preset
 * @param {Object} config.options current visualization/input options
 * @private
 */
var findInitialRequestParams = function (_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.bindingType, bindingType = _c === void 0 ? 'primary' : _c, consumerModule = _b.consumerModule, _d = _b.options, options = _d === void 0 ? {} : _d;
    if (consumerModule == null) {
        return emptyInitialRequestParams;
    }
    var initialRequestParams = get_1.default(consumerModule, [
        'config',
        'dataContract',
        'initialRequestParams',
        bindingType,
    ]) ||
        get_1.default(consumerModule, 'initialRequestParams', emptyInitialRequestParams);
    if (isFunction_1.default(initialRequestParams)) {
        return initialRequestParams(options);
    }
    return initialRequestParams;
};
exports.findInitialRequestParams = findInitialRequestParams;
var formatData = function (data) {
    if (data == null) {
        return DataSet_1.default.empty().toJSONCols();
    }
    if (data.constructor === DataSet_1.default) {
        return data.toJSONCols(); // we use json cols by default
    }
    if (data.fields && data.columns) {
        return data;
    }
    return null; // return null as invalid data
};
exports.formatData = formatData;


/***/ }),
/* 27 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-ui/customThemeVariables");

/***/ }),
/* 28 */
/***/ (function(module, exports) {

module.exports = require("lodash/cloneDeep");

/***/ }),
/* 29 */
/***/ (function(module, exports) {

module.exports = require("reselect");

/***/ }),
/* 30 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-utils/jsonEqual");

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.selectFullscreenElement = exports.toggleFullscreen = void 0;
var redux_actions_1 = __webpack_require__(8);
/**
 * Actions
 */
exports.toggleFullscreen = redux_actions_1.createAction('TOGGLE_FULLSCREEN');
/**
 *
 */
var selectFullscreenElement = function (state) { return state.fullscreenElement; };
exports.selectFullscreenElement = selectFullscreenElement;
/**
 * Reducer
 */
exports.default = redux_actions_1.handleActions((_a = {},
    _a[exports.toggleFullscreen] = function (state, _a) {
        var payload = _a.payload;
        return payload;
    },
    _a), null);


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __webpack_require__(0);
var prop_types_1 = __importDefault(__webpack_require__(1));
var jsonEqual_1 = __importDefault(__webpack_require__(30));
var RegistryContext_1 = __importDefault(__webpack_require__(10));
var INITIAL_STATE = {
    error: null,
    requestParams: null,
    data: null,
    meta: null,
};
/**
 * A DataSource Consumer react component, data/error will be exposed via a render prop
 */
var DataSourceConsumer = /** @class */ (function (_super) {
    __extends(DataSourceConsumer, _super);
    function DataSourceConsumer(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.componentDidUpdate = function (prevProps) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.shouldResetSubscription(prevProps)) return [3 /*break*/, 2];
                        // eslint-disable-next-line react/no-did-update-set-state
                        this.setState(INITIAL_STATE);
                        if (this.sub) {
                            this.sub.cancel();
                        }
                        if (this.statusSub) {
                            this.statusSub.unsubscribe();
                        }
                        return [4 /*yield*/, this.createSubscription()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        }); };
        /**
         * create DataSource subscription. This creates a Consumer - DataSource binding.
         */
        _this.createSubscription = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, consumerId, dataSourceId, initialRequestParams, _b, ex_1;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 2, , 3]);
                        _a = this.props, consumerId = _a.consumerId, dataSourceId = _a.dataSourceId, initialRequestParams = _a.initialRequestParams;
                        this.dsController = this.dataSourceRegistry.allocate({
                            dataSourceId: dataSourceId,
                        });
                        _b = this;
                        return [4 /*yield*/, this.dsController.subscribe({
                                consumerId: consumerId,
                                initialRequestParams: initialRequestParams,
                            })];
                    case 1:
                        _b.sub = _c.sent();
                        this.sub.subscribeToData({
                            onData: this.handleData,
                            onError: this.handleError,
                        });
                        this.statusSub = this.dsController
                            .getStatusObservable()
                            .subscribe(function (_a) {
                            var meta = _a.meta, error = _a.error;
                            if (error) {
                                _this.handleError(__assign({ meta: meta }, error));
                            }
                            else {
                                _this.setState({ meta: meta });
                            }
                        });
                        return [3 /*break*/, 3];
                    case 2:
                        ex_1 = _c.sent();
                        this.handleError({
                            level: 'error',
                            message: ex_1.message,
                        });
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); };
        /**
         * Basically if DataSource definition changes, we need to reset the subscription
         */
        _this.shouldResetSubscription = function (prevProps) {
            var _a = _this.props, dataSource = _a.dataSource, dataSourceId = _a.dataSourceId;
            if (dataSourceId !== prevProps.dataSourceId) {
                return true;
            }
            if (!jsonEqual_1.default(dataSource, prevProps.dataSource)) {
                return true;
            }
            return false;
        };
        /**
         * set data
         */
        _this.handleData = function (_a) {
            var requestParams = _a.requestParams, data = _a.data, meta = _a.meta;
            _this.setState({
                error: null,
                requestParams: requestParams,
                data: data,
                meta: meta,
            });
        };
        /**
         * set error
         */
        _this.handleError = function (_a) {
            var level = _a.level, message = _a.message, meta = _a.meta;
            _this.setState({
                error: {
                    level: level,
                    message: message,
                },
                meta: meta,
            });
        };
        /**
         * update request params via subscription
         */
        _this.updateRequestParams = function (newRequestParams) {
            if (_this.sub) {
                _this.sub.updateRequestParams(newRequestParams);
            }
        };
        _this.componentDidMount = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createSubscription()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        /**
         * Refresh data source controller.
         *
         * Note this is different from refreshing subscription.
         * - refresh data source controller will create a new search job.
         * - refresh subscription will only fetch the search results of current search job.
         */
        _this.refreshDataSourceController = function (payload) {
            if (_this.dsController) {
                _this.setState(INITIAL_STATE);
                _this.dsController.refresh(payload);
            }
        };
        _this.dataSourceRegistry = context.dataSourceRegistry;
        _this.state = INITIAL_STATE;
        return _this;
    }
    DataSourceConsumer.prototype.componentWillUnmount = function () {
        // cancel existing subscriptions
        if (this.sub) {
            this.sub.cancel();
        }
    };
    DataSourceConsumer.prototype.render = function () {
        var _a = this.state, error = _a.error, requestParams = _a.requestParams, data = _a.data, meta = _a.meta;
        var _b = this.props, bindingType = _b.bindingType, children = _b.children;
        // set loading = true when no error and data
        var loading = error == null && data == null;
        return children({
            loading: loading,
            requestParams: requestParams,
            updateRequestParams: this.updateRequestParams,
            refresh: this.refreshDataSourceController,
            data: data,
            meta: meta,
            bindingType: bindingType,
            error: error,
        });
    };
    DataSourceConsumer.propTypes = {
        /**
         * Consumer Id, should either be viz id or input id
         */
        consumerId: prop_types_1.default.string.isRequired,
        /**
         * initial request params.
         */
        initialRequestParams: prop_types_1.default.object,
        /**
         * binding type such as `primary`, `annotation`
         */
        bindingType: prop_types_1.default.string.isRequired,
        /**
         * DataSource definition
         */
        dataSource: prop_types_1.default.object.isRequired,
        /**
         * DataSource id
         */
        dataSourceId: prop_types_1.default.string.isRequired,
        /**
         * render prop
         */
        children: prop_types_1.default.func,
    };
    DataSourceConsumer.contextType = RegistryContext_1.default;
    DataSourceConsumer.defaultProps = {
        initialRequestParams: {
            offset: 0,
            count: 1000,
        },
        children: function () { },
    };
    return DataSourceConsumer;
}(react_1.Component));
exports.default = DataSourceConsumer;


/***/ }),
/* 33 */
/***/ (function(module, exports) {

module.exports = require("@splunk/themes");

/***/ }),
/* 34 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-context");

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNextState = exports.createInputState = exports.isInputEmpty = void 0;
var each_1 = __importDefault(__webpack_require__(19));
var get_1 = __importDefault(__webpack_require__(2));
var isInputEmpty = function (value) { return value == null || value === ''; };
exports.isInputEmpty = isInputEmpty;
/**
 * compute new input state given the new input definition, for input has no changes, this is a noop.
 * removed input will be removed from state.
 * newly added input will be add to state with initial value computed.
 * @param {*} currentInputState
 * @param {Object[]} inputDefs
 * @param {Object} submittedTokens object containing namespaces with their respective set tokens
 * @param {Preset} preset
 */
var createInputState = function (_a) {
    var currentInputState = _a.currentInputState, inputDefs = _a.inputDefs, submittedTokens = _a.submittedTokens, preset = _a.preset, _b = _a.isReset, isReset = _b === void 0 ? false : _b;
    var newState = {};
    each_1.default(inputDefs, function (_a, k) {
        var _b = _a.options, options = _b === void 0 ? {} : _b, type = _a.type;
        var input = preset ? preset.findInput(type) : null;
        var inputValue = get_1.default(currentInputState, [k, 'value']);
        var defaultValue = options.defaultValue;
        // If there is a token binding present, set input value from that binding
        var tokenNamespace = get_1.default(options, 'tokenNamespace', 'default');
        var tokenName = get_1.default(options, 'token');
        var tokenValue = input && input.tokensToValue
            ? input.tokensToValue({
                tokens: submittedTokens,
                tokenName: tokenName,
                tokenNamespace: tokenNamespace,
            })
            : get_1.default(submittedTokens, [tokenNamespace, tokenName]);
        if ((exports.isInputEmpty(inputValue) || isReset) && tokenValue) {
            // if input is empty or we're resetting AND there is a token binding for the input's token
            inputValue = tokenValue;
        }
        else if (exports.isInputEmpty(inputValue) && defaultValue) {
            // if there is no token binding, use default if it exists
            inputValue = defaultValue;
        }
        newState[k] = {
            value: inputValue,
        };
    });
    return newState;
};
exports.createInputState = createInputState;
/**
 * Compute the new state given a new value triggered from input
 * @method createNextState
 * @param {*} currentState
 * @param {*} value
 * @param {Object} [inputDef={}]
 * @param {Object} [inputDef.options={}]
 */
var createNextState = function (_a) {
    var value = _a.value, _b = _a.inputDef.options, options = _b === void 0 ? {} : _b;
    var nextvalue = value;
    if (exports.isInputEmpty(nextvalue) && options.defaultValue != null) {
        nextvalue = options.defaultValue;
    }
    return {
        value: nextvalue,
    };
};
exports.createNextState = createNextState;


/***/ }),
/* 36 */
/***/ (function(module, exports) {

module.exports = require("lodash/memoize");

/***/ }),
/* 37 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-utils/token");

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resetStore = void 0;
/* eslint-disable no-underscore-dangle */
var redux_1 = __webpack_require__(64);
var redux_saga_1 = __importDefault(__webpack_require__(39));
var changeMonitor_1 = __importDefault(__webpack_require__(65));
var actionListener_1 = __importDefault(__webpack_require__(66));
var definition_1 = __importDefault(__webpack_require__(3));
var tokens_1 = __importDefault(__webpack_require__(5));
var mode_1 = __importDefault(__webpack_require__(21));
var fullscreen_1 = __importDefault(__webpack_require__(31));
var editor_1 = __importDefault(__webpack_require__(25));
var global_1 = __importDefault(__webpack_require__(67));
var input_1 = __importDefault(__webpack_require__(23));
var resetStore_1 = __importDefault(__webpack_require__(40));
exports.resetStore = resetStore_1.default;
var rootReducer = redux_1.combineReducers({
    message: global_1.default,
    mode: mode_1.default,
    fullscreenElement: fullscreen_1.default,
    definition: definition_1.default,
    tokens: tokens_1.default,
    editor: editor_1.default,
    inputState: input_1.default,
});
var reducer = function (state, action) {
    if (action.type === resetStore_1.default.toString()) {
        return action.payload;
    }
    return rootReducer(state, action);
};
function createStore(_a) {
    var _b = _a.initialState, initialState = _b === void 0 ? {} : _b, _c = _a.actionListenerDefs, actionListenerDefs = _c === void 0 ? {} : _c, rootSaga = _a.rootSaga;
    var sagaMiddleware = redux_saga_1.default();
    var middlewares = [
        changeMonitor_1.default,
        actionListener_1.default(actionListenerDefs),
        sagaMiddleware,
    ];
    var composeEnhancers = redux_1.compose;
    // eslint-disable-next-line no-undef
    if (false) {}
    var enhancers = [redux_1.applyMiddleware.apply(void 0, __spread(middlewares))];
    var store = redux_1.createStore(reducer, initialState, composeEnhancers.apply(void 0, __spread(enhancers)));
    sagaMiddleware.run(rootSaga);
    return store;
}
exports.default = createStore;


/***/ }),
/* 39 */
/***/ (function(module, exports) {

module.exports = require("redux-saga");

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var redux_actions_1 = __webpack_require__(8);
exports.default = redux_actions_1.createAction('RESET');


/***/ }),
/* 41 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-utils/search");

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DashboardCoreApiConsumer = exports.DashboardCoreApiProvider = void 0;
var react_1 = __webpack_require__(0);
var DashboardCoreApiContext = react_1.createContext();
exports.DashboardCoreApiProvider = DashboardCoreApiContext.Provider;
exports.DashboardCoreApiConsumer = DashboardCoreApiContext.Consumer;
exports.default = DashboardCoreApiContext;


/***/ }),
/* 43 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-ui/ErrorBoundary");

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.STATUSBAR_HEIGHT = void 0;
var react_1 = __importDefault(__webpack_require__(0));
var prop_types_1 = __importDefault(__webpack_require__(1));
var styled_components_1 = __importDefault(__webpack_require__(6));
var i18n_1 = __webpack_require__(13);
var customThemeVariables_1 = __webpack_require__(27);
exports.STATUSBAR_HEIGHT = 20;
var StatusBarContainer = styled_components_1.default.div.attrs(function () { return ({
    'data-test': 'status-bar-container',
}); })(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    height: ", "px;\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    padding-left: 12px;\n    padding-right: 36px;\n    background-color: ", ";\n    /* Fix sub-pixel gaps between elements when scaled */\n    box-shadow: 0 -1px 1px 0 ", ";\n    overflow: hidden;\n"], ["\n    height: ", "px;\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    padding-left: 12px;\n    padding-right: 36px;\n    background-color: ",
    ";\n    /* Fix sub-pixel gaps between elements when scaled */\n    box-shadow: 0 -1px 1px 0 ", ";\n    overflow: hidden;\n"])), exports.STATUSBAR_HEIGHT, function (props) {
    return props.backgroundColor || customThemeVariables_1.customThemeVariables.vizPanelBackgroundColor;
}, function (props) { return props.backgroundColor || customThemeVariables_1.customThemeVariables.vizPanelBackgroundColor; });
var RiskyWarningStatusContainer = styled_components_1.default.div.attrs(function () { return ({
    'data-test': 'risky-command-status-container',
}); })(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n    text-align: right;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n"], ["\n    text-align: right;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n"])));
var ActionRequiredText = styled_components_1.default.span(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n    font-weight: 500;\n    padding-right: 6px;\n"], ["\n    font-weight: 500;\n    padding-right: 6px;\n"])));
var VizStatusBar = function (_a) {
    var backgroundColor = _a.backgroundColor, hasRiskyCommand = _a.hasRiskyCommand;
    if (!hasRiskyCommand) {
        return react_1.default.createElement(StatusBarContainer, { backgroundColor: backgroundColor });
    }
    return (react_1.default.createElement(StatusBarContainer, { backgroundColor: backgroundColor },
        react_1.default.createElement(RiskyWarningStatusContainer, null,
            react_1.default.createElement(ActionRequiredText, null, i18n_1._('Action Required:')),
            react_1.default.createElement("span", null, i18n_1._('Click here to review the query before running')))));
};
VizStatusBar.propTypes = {
    backgroundColor: prop_types_1.default.string,
    hasRiskyCommand: prop_types_1.default.bool,
};
VizStatusBar.defaultProps = {
    hasRiskyCommand: false,
};
exports.default = VizStatusBar;
var templateObject_1, templateObject_2, templateObject_3;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.useActionMenus = exports.ActionMenusContextProvider = void 0;
var react_1 = __webpack_require__(0);
var ActionMenusContext = react_1.createContext(null);
exports.ActionMenusContextProvider = ActionMenusContext.Provider;
var useActionMenus = function () {
    var ctx = react_1.useContext(ActionMenusContext);
    if (ctx === null) {
        throw new Error('useActionMenus can only be used in a component that is a child of a ActionMenusContextProvider');
    }
    return ctx;
};
exports.useActionMenus = useActionMenus;
exports.default = ActionMenusContext;


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Base event
 */
var DashboardLifecycleEvent = /** @class */ (function () {
    function DashboardLifecycleEvent(payload) {
        Object.assign(this, payload);
    }
    return DashboardLifecycleEvent;
}());
exports.default = DashboardLifecycleEvent;


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DashboardCore = void 0;
/* eslint-disable react/no-unused-prop-types,class-methods-use-this */
var isEmpty_1 = __importDefault(__webpack_require__(12));
var isEqual_1 = __importDefault(__webpack_require__(14));
var cloneDeep_1 = __importDefault(__webpack_require__(28));
var merge_1 = __importDefault(__webpack_require__(48));
var react_1 = __importStar(__webpack_require__(0));
var prop_types_1 = __importDefault(__webpack_require__(1));
var dashboard_context_1 = __importDefault(__webpack_require__(34));
var DashboardDefinition_1 = __importDefault(__webpack_require__(17));
var DashboardSchema_1 = __webpack_require__(49);
var presetUtils_1 = __webpack_require__(50);
var console_1 = __importDefault(__webpack_require__(11));
var dashboard_utils_1 = __webpack_require__(18);
var react_redux_1 = __webpack_require__(7);
var memoize_one_1 = __importDefault(__webpack_require__(51));
var Preset_1 = __importDefault(__webpack_require__(52));
var sagas_1 = __importDefault(__webpack_require__(56));
var redux_1 = __importStar(__webpack_require__(38));
var EventRegistry_1 = __importDefault(__webpack_require__(75));
var ApiRegistry_1 = __importDefault(__webpack_require__(76));
var DataSourceRegistry_1 = __importDefault(__webpack_require__(77));
var RegistryContext_1 = __webpack_require__(10);
var DashboardCoreApiContext_1 = __webpack_require__(42);
var ConnectedDashboardContainer_1 = __importDefault(__webpack_require__(91));
var DashboardCorePlugin_1 = __webpack_require__(130);
var DashboardCoreApi_1 = __webpack_require__(132);
var sagaActions_1 = __webpack_require__(4);
var useTokensWithUrl_1 = __webpack_require__(137);
var ActionMenusContext_1 = __webpack_require__(45);
var formatValidateError = function (_a) {
    var instancePath = _a.instancePath, message = _a.message;
    return instancePath + ": " + message;
};
var noop = function () { return undefined; };
var empty = {};
var DashboardCore = /** @class */ (function (_super) {
    __extends(DashboardCore, _super);
    function DashboardCore(props) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var _a;
        var _this = _super.apply(this, __spread([props], args)) || this;
        // reference DashboardContext
        /**
         * inject dashboard api if it's missing
         */
        _this.cloneActionMenus = memoize_one_1.default(function (menus) {
            return menus.map(function (item) {
                if (!item.props.dashboardApi) {
                    return react_1.default.cloneElement(item, {
                        dashboardApi: _this.dashboardCoreApi,
                    });
                }
                return item;
            });
        }, dashboard_utils_1.shallowEqual);
        var preset = props.preset, dashboardCorePlugin = props.dashboardCorePlugin, dataSourceContext = props.dataSourceContext, definition = props.definition, readOnlyTokenNamespaces = props.readOnlyTokenNamespaces, tokenBinding = props.tokenBinding, onTokenBindingChange = props.onTokenBindingChange, onMigrationDone = props.onMigrationDone;
        // instantiate event registry and preset
        _this.eventRegistry = new EventRegistry_1.default();
        _this.apiRegistry = new ApiRegistry_1.default();
        _this.preset = new Preset_1.default(preset);
        _this.dashboardPlugin = DashboardCorePlugin_1.createDashboardPlugin(dashboardCorePlugin);
        _this.dataSourceRegistry = new DataSourceRegistry_1.default({
            preset: _this.preset,
            dataSourceContext: dataSourceContext || ((_a = _this.context) === null || _a === void 0 ? void 0 : _a.dataSourceContext) || {},
        });
        // bootstrap store and saga
        var rootSaga = sagas_1.default({
            dashboardPlugin: _this.dashboardPlugin,
            preset: _this.preset,
            eventRegistry: _this.eventRegistry,
            apiRegistry: _this.apiRegistry,
            dataSourceRegistry: _this.dataSourceRegistry,
            onMigrationDone: onMigrationDone,
        });
        // Lowest priority
        var originalBinding = tokenBinding !== null && tokenBinding !== void 0 ? tokenBinding : {};
        // Middle priority
        var defaultTokens = DashboardDefinition_1.default.fromJSON(definition).getDefaultStaticTokens(readOnlyTokenNamespaces);
        // High priority
        // TODO: if we ever support non-"default" namespaces in the URL, ensure that readOnlyTokenNamespaces are not read
        var urlTokens = dashboard_utils_1.mapURLToTokens({
            search: dashboard_utils_1.getWindowLocationSearch(),
        });
        var mergedTokens = {};
        // merge up all the tokens. mutates mergedTokens
        merge_1.default(mergedTokens, originalBinding, defaultTokens, urlTokens);
        // Prevent default from being an empty object, screwing up the following comparison on initial load (see mapURLToTokens)
        if (isEmpty_1.default(mergedTokens.default)) {
            delete mergedTokens.default;
        }
        // If there are tokens in the url and they don't match what is already set we need to fix that
        if (!isEmpty_1.default(mergedTokens) && !isEqual_1.default(originalBinding, mergedTokens)) {
            onTokenBindingChange(mergedTokens);
        }
        _this.store = redux_1.default({
            initialState: _this.getInitialStoreState(__assign(__assign({}, props), { tokenBinding: mergedTokens })),
            actionListenerDefs: _this.getActionListeners(),
            rootSaga: rootSaga,
        });
        _this.dashboardCoreApi = DashboardCoreApi_1.createDashboardApi({
            store: _this.store,
            apiRegistry: _this.apiRegistry,
            dataSourceRegistry: _this.dataSourceRegistry,
        });
        _this.dataSourceRegistry.subscribeToStore(_this.store);
        // kickoff the data source update loop
        _this.store.dispatch(sagaActions_1.initialize());
        return _this;
    }
    DashboardCore.prototype.componentDidMount = function () {
        // passing out the dashboard api so that consumer can use it to control dashboard core.
        this.props.dashboardCoreApiRef(this.dashboardCoreApi);
        this.dashboardPlugin.invokePluginCallback('onInitialize', {});
    };
    DashboardCore.prototype.componentDidUpdate = function (prevProps) {
        var didDefinitionChange = this.props.definition !== prevProps.definition;
        var newStore = __assign(__assign({}, this.store.getState()), this.getInitialStoreState(__assign(__assign({}, this.props), { didDefinitionChange: didDefinitionChange })));
        this.store.dispatch(redux_1.resetStore(newStore));
    };
    DashboardCore.prototype.componentWillUnmount = function () {
        this.apiRegistry.teardown();
        this.eventRegistry.teardown();
        // signal saga to be teardown
        this.store.dispatch(sagaActions_1.teardown());
        // remove the reference to dashboardApi
        this.props.dashboardCoreApiRef(null);
        this.dataSourceRegistry.teardown();
    };
    DashboardCore.prototype.handleSchemaErrors = function (_a) {
        var _b;
        var preset = _a.preset, definition = _a.definition, didDefinitionChange = _a.didDefinitionChange, onValidationError = _a.onValidationError, metadata = _a.metadata;
        try {
            var schema = DashboardSchema_1.createSchemaBasedOnPresets(preset);
            var setSchemaErrors = definition.setSchema(schema);
            if (setSchemaErrors) {
                if (didDefinitionChange) {
                    if (typeof onValidationError === 'function') {
                        onValidationError(setSchemaErrors.message);
                    }
                    else {
                        console_1.default.error(setSchemaErrors.message);
                    }
                }
                var logger = (_b = this.context) === null || _b === void 0 ? void 0 : _b.logger;
                if (logger && typeof logger.error === 'function') {
                    logger.error({
                        message: setSchemaErrors.message,
                        metadata: metadata,
                    });
                }
                return true;
            }
        }
        catch (e) {
            console_1.default.error('Schema Error:', e);
            return true;
        }
        return false;
    };
    DashboardCore.prototype.handleValidationErrors = function (_a) {
        var _b;
        var definition = _a.definition, didDefinitionChange = _a.didDefinitionChange, onValidationError = _a.onValidationError, metadata = _a.metadata;
        try {
            var validationErrors = definition.validate();
            if (Array.isArray(validationErrors) && validationErrors.length) {
                if (didDefinitionChange) {
                    var handleError_1 = typeof onValidationError === 'function'
                        ? onValidationError
                        : console_1.default.error;
                    validationErrors.forEach(function (e) {
                        handleError_1(formatValidateError(e));
                    });
                }
                var logger_1 = (_b = this.context) === null || _b === void 0 ? void 0 : _b.logger;
                if (logger_1 && typeof logger_1.error === 'function') {
                    validationErrors.forEach(function (e) {
                        return logger_1.error({
                            message: formatValidateError(e),
                            metadata: metadata,
                        });
                    });
                }
            }
        }
        catch (e) {
            console_1.default.error('Validation Error:', e);
        }
    };
    DashboardCore.prototype.getInitialStoreState = function (_a) {
        var rawDefinition = _a.definition, selectedItems = _a.selectedItems, onValidationError = _a.onValidationError, preset = _a.preset, metadata = _a.metadata, mode = _a.mode, tokenBinding = _a.tokenBinding, readOnlyTokenNamespaces = _a.readOnlyTokenNamespaces, _b = _a.didDefinitionChange, didDefinitionChange = _b === void 0 ? true : _b;
        var definition = DashboardDefinition_1.default.fromJSON(rawDefinition);
        var submittedTokenBinding = cloneDeep_1.default(tokenBinding) || empty;
        var state = {
            mode: mode,
            definition: definition.toJSON(),
            tokens: {
                readOnlyTokenNamespaces: new Set(readOnlyTokenNamespaces),
                submitted: submittedTokenBinding,
            },
            editor: {
                selectedItems: selectedItems,
            },
        };
        var validationProps = {
            preset: preset,
            definition: definition,
            didDefinitionChange: didDefinitionChange,
            onValidationError: onValidationError,
            metadata: metadata,
        };
        if (!this.handleSchemaErrors(validationProps)) {
            this.handleValidationErrors(validationProps);
        }
        return state;
    };
    DashboardCore.prototype.getActionListeners = function () {
        var _a;
        var _this = this;
        return _a = {},
            _a[sagaActions_1.submittedTokenChanged] = function () {
                var _a = _this.store.getState().tokens, tokens = _a === void 0 ? {} : _a;
                _this.props.onTokenBindingChange(cloneDeep_1.default(tokens.submitted) || {});
            },
            _a[sagaActions_1.definitionChanged] = function () {
                var definition = _this.store.getState().definition;
                _this.props.onDefinitionChange(definition);
            },
            _a[sagaActions_1.selectedItemChanged] = function () {
                var onItemsSelect = _this.props.onItemsSelect;
                var _a = _this.store.getState().editor, editor = _a === void 0 ? {} : _a;
                // Give editable components a chance to save their state before the visualization(s) change.
                if (window.document.hasFocus()) {
                    window.document.activeElement.blur();
                }
                onItemsSelect(editor.selectedItems);
            },
            _a;
    };
    DashboardCore.prototype.render = function () {
        var _a = this.props, width = _a.width, height = _a.height, actionMenus = _a.actionMenus, showGrid = _a.showGrid;
        var _b = this.context.featureFlags, featureFlags = _b === void 0 ? {} : _b;
        return (react_1.default.createElement(react_redux_1.Provider, { store: this.store },
            react_1.default.createElement(RegistryContext_1.RegistryContextProvider, { preset: this.preset, eventRegistry: this.eventRegistry, apiRegistry: this.apiRegistry, dataSourceRegistry: this.dataSourceRegistry },
                react_1.default.createElement(DashboardCoreApiContext_1.DashboardCoreApiProvider, { value: this.dashboardCoreApi },
                    featureFlags.enableTokensInUrl && (react_1.default.createElement(TokensToUrl, { preset: this.preset })),
                    react_1.default.createElement(ActionMenusContext_1.ActionMenusContextProvider, { value: this.cloneActionMenus(actionMenus) },
                        react_1.default.createElement(ConnectedDashboardContainer_1.default, { width: width, height: height, showGrid: showGrid }))))));
    };
    DashboardCore.displayName = 'DashboardCore';
    DashboardCore.contextType = dashboard_context_1.default;
    DashboardCore.propTypes = {
        /**
         *  The dashboard definition json object
         */
        definition: prop_types_1.default.object,
        /**
         * Dashboard Mode. ('view' or 'edit')
         */
        mode: prop_types_1.default.string,
        /**
         * Callback to signal definition change
         */
        onDefinitionChange: prop_types_1.default.func,
        /**
         * selected visualizations or inputs
         */
        selectedItems: prop_types_1.default.arrayOf(prop_types_1.default.shape({
            id: prop_types_1.default.string.isRequired,
            type: prop_types_1.default.oneOf(['block', 'line', 'input']).isRequired,
        })),
        /**
         * Callback when visualizations or inputs are selected
         */
        onItemsSelect: prop_types_1.default.func,
        /**
         *  datasource context
         */
        dataSourceContext: prop_types_1.default.object,
        /**
         * Supply a custom token binding for the dashboard. If this is provided, and
         * every time it changes, the token binding of the dashboard is reset.
         */
        tokenBinding: prop_types_1.default.object,
        /**
         * A callback for when the tokenBinding change
         */
        onTokenBindingChange: prop_types_1.default.func,
        /**
         * Optionally add a dashboard lifecycle plugin which allows to hook
         * into certain lifecycle events of the dashboard by providing
         * callback functions.
         */
        dashboardCorePlugin: prop_types_1.default.shape({
            /**
             * Called when the dashboard is initialized
             */
            onInitialize: prop_types_1.default.func,
            /**
             * Called when an event triggered
             */
            onEventTrigger: prop_types_1.default.func,
            /**
             * Called when navigation will occur
             */
            onLinkToUrl: prop_types_1.default.func,
        }),
        /**
         * Hook to retrieve a reference to the dashboard lifecycle API, which
         * allows programmatic interaction with the dashboard.
         */
        dashboardCoreApiRef: prop_types_1.default.func,
        /**
         * Dashboard Preset
         */
        preset: prop_types_1.default.shape({
            layouts: prop_types_1.default.objectOf(prop_types_1.default.elementType),
            visualizations: prop_types_1.default.objectOf(prop_types_1.default.elementType),
            dataSources: prop_types_1.default.objectOf(prop_types_1.default.elementType),
            inputs: prop_types_1.default.objectOf(prop_types_1.default.elementType),
            eventHandlers: prop_types_1.default.objectOf(prop_types_1.default.func),
        }),
        /**
         * width in pixel or string, defaults to 100%
         */
        width: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
        /**
         * height in pixel or string, defaults to 600px
         */
        height: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
        /**
         * viz action menus
         */
        actionMenus: prop_types_1.default.arrayOf(prop_types_1.default.element),
        /**
         * metadata for logging purposes
         */
        metadata: prop_types_1.default.object,
        /**
         * whether gridlines should be displayed in edit mode
         */
        showGrid: prop_types_1.default.bool,
        /**
         * Called when validation fails
         */
        onValidationError: prop_types_1.default.func,
        /**
         * Called when migration is done
         */
        onMigrationDone: prop_types_1.default.func,
        /**
         * Set of readonly token namespaces. Tokens in these namespaces cannot be modified from their initial tokenBinding values.
         */
        readOnlyTokenNamespaces: prop_types_1.default.instanceOf(Set),
    };
    DashboardCore.defaultProps = {
        mode: 'view',
        showGrid: true,
        definition: {},
        width: '100%',
        height: 600,
        actionMenus: [],
        selectedItems: [],
        dashboardCoreApiRef: noop,
        onDefinitionChange: noop,
        onItemsSelect: noop,
        onTokenBindingChange: noop,
        onMigrationDone: noop,
        readOnlyTokenNamespaces: new Set(),
    };
    return DashboardCore;
}(react_1.PureComponent));
exports.DashboardCore = DashboardCore;
// Once dashboardCore is a functional component we can drop this pseudo component and just use the hook
var TokensToUrl = function (_a) {
    var preset = _a.preset;
    useTokensWithUrl_1.useTokensWithUrl({ preset: preset });
    return null;
};
exports.default = presetUtils_1.withUpdatedPreset(DashboardCore);


/***/ }),
/* 48 */
/***/ (function(module, exports) {

module.exports = require("lodash/merge");

/***/ }),
/* 49 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-definition/DashboardSchema");

/***/ }),
/* 50 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-ui/utils/presetUtils");

/***/ }),
/* 51 */
/***/ (function(module, exports) {

module.exports = require("memoize-one");

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defToArray = void 0;
var defaultsDeep_1 = __importDefault(__webpack_require__(53));
var transform_1 = __importDefault(__webpack_require__(54));
var get_1 = __importDefault(__webpack_require__(2));
var react_1 = __importDefault(__webpack_require__(0));
var i18n_1 = __webpack_require__(13);
var SnapshotDataSource_1 = __importDefault(__webpack_require__(55));
var Message_1 = __importDefault(__webpack_require__(22));
var cloneDeep_1 = __importDefault(__webpack_require__(28));
var defToArray = function (items) {
    return transform_1.default(items, function (ret, v, k) {
        ret.push(__assign({ type: k }, v));
    }, []);
};
exports.defToArray = defToArray;
var noopHandler = {
    canHandle: function () { return false; },
};
var Preset = /** @class */ (function () {
    function Preset(presetDefinition) {
        if (presetDefinition === void 0) { presetDefinition = {}; }
        this.presetDef = this.normalize(cloneDeep_1.default(presetDefinition));
    }
    /* eslint-disable-next-line class-methods-use-this */
    Preset.prototype.getDefaultPreset = function () {
        return {
            visualizations: {},
            inputs: {},
            dataSources: {
                '_ds.snapshot_': SnapshotDataSource_1.default,
            },
            eventHandlers: {},
            layouts: {},
        };
    };
    Preset.prototype.normalize = function (preset) {
        return defaultsDeep_1.default(preset, this.getDefaultPreset());
    };
    Preset.prototype.listLayouts = function () {
        return exports.defToArray(this.presetDef.layouts);
    };
    Preset.prototype.listVisualizations = function () {
        return exports.defToArray(this.presetDef.visualizations);
    };
    Preset.prototype.listDataSources = function () {
        return exports.defToArray(this.presetDef.dataSources);
    };
    Preset.prototype.listInputs = function () {
        return exports.defToArray(this.presetDef.inputs);
    };
    Preset.prototype.listEventHandlers = function () {
        return exports.defToArray(this.presetDef.eventHandlers);
    };
    Preset.prototype.findVisualization = function (type) {
        return get_1.default(this.presetDef, ['visualizations', type]);
    };
    Preset.prototype.findDataSource = function (type) {
        return get_1.default(this.presetDef, ['dataSources', type]);
    };
    Preset.prototype.findInput = function (type) {
        return get_1.default(this.presetDef, ['inputs', type]);
    };
    Preset.prototype.findEventHandler = function (type) {
        return get_1.default(this.presetDef, ['eventHandlers', type]);
    };
    Preset.prototype.findLayout = function (type) {
        return get_1.default(this.presetDef, ['layouts', type]);
    };
    /**
     * create visualization component
     * @param {*} type visualization type
     * @param {*} props computed react props
     */
    Preset.prototype.createVisualization = function (type, props) {
        var Viz = this.findVisualization(type);
        try {
            if (Viz == null) {
                return react_1.default.createElement(Message_1.default, {
                    level: 'error',
                    message: i18n_1._(type + " is not defined"),
                });
            }
            return react_1.default.createElement(Viz, __assign(__assign({}, props), { type: type }));
        }
        catch (ex) {
            return react_1.default.createElement(Message_1.default, {
                level: 'error',
                message: ex.message,
            });
        }
    };
    /**
     * Determine if preset class recommends displaying a title and description
     * @param {String} type Visualization type, e.g. ('viz.singlevalue')
     */
    Preset.prototype.shouldDisplayVisualizationSiblingContent = function (type) {
        var Viz = this.findVisualization(type);
        return {
            showTitleAndDescription: !!(Viz && Viz.showTitleAndDescription),
            showProgressBar: !!(Viz && Viz.showProgressBar),
            showLastUpdated: !!(Viz && Viz.showLastUpdated),
        };
    };
    /**
     * instantiate visualization editor component
     * @param  {...any} args
     */
    Preset.prototype.createVisualizationEditor = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this.createVisualization.apply(this, __spread(args));
    };
    /**
     * instantiate datasource
     * @param {*} type datasource type
     * @param {*} options datasource options
     * @param {*} dataSourceContext  datasource context
     * @param {*} meta metadata
     * @param {*} id datasource id
     */
    Preset.prototype.createDataSource = function (type, options, dataSourceContext, meta, id, baseChainModel) {
        try {
            var DataSourceDef = this.findDataSource(type);
            if (DataSourceDef) {
                // pass id within context for testing purpose
                return new DataSourceDef(options, __assign(__assign({}, dataSourceContext), { id: id }), meta, baseChainModel);
            }
            return new SnapshotDataSource_1.default({
                errorLevel: 'error',
                error: i18n_1._(type + " is not defined"),
            });
        }
        catch (ex) {
            return new SnapshotDataSource_1.default({
                errorLevel: 'error',
                error: ex.message,
            });
        }
    };
    /**
     * instantiate input component
     * @param {*} type
     * @param {*} props
     */
    Preset.prototype.createInput = function (type, props) {
        var Input = this.findInput(type);
        try {
            if (Input == null) {
                return react_1.default.createElement(Message_1.default, {
                    level: 'error',
                    message: i18n_1._(type + " is not defined"),
                    // Do not center this component to allow it to display in the global inputs section
                    centered: false,
                });
            }
            return react_1.default.createElement(Input, __assign(__assign({}, props), { type: type }));
        }
        catch (ex) {
            return react_1.default.createElement(Message_1.default, {
                level: 'error',
                message: ex.message,
                centered: false,
            });
        }
    };
    /**
     * instantiate event handlers
     * @param {*} type
     * @param {*} options
     */
    Preset.prototype.createEventHandler = function (type, options) {
        try {
            var EventHandlerDef = this.findEventHandler(type);
            if (EventHandlerDef) {
                return new EventHandlerDef(options);
            }
            return noopHandler;
        }
        catch (ex) {
            return noopHandler;
        }
    };
    /**
     * instantiate layout component
     * @param {*} type
     * @param {*} props
     */
    Preset.prototype.createLayout = function (type, props) {
        var Layout = this.findLayout(type);
        try {
            if (Layout == null) {
                return react_1.default.createElement(Message_1.default, {
                    level: 'error',
                    message: i18n_1._(type + " is not defined"),
                });
            }
            return react_1.default.createElement(Layout, __assign(__assign({}, props), { type: type }));
        }
        catch (ex) {
            return react_1.default.createElement(Message_1.default, {
                level: 'error',
                message: ex.message,
            });
        }
    };
    /**
     * instantiate layout editor component
     * @param  {...any} args
     */
    Preset.prototype.createLayoutEditor = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this.createLayout.apply(this, __spread(args));
    };
    return Preset;
}());
exports.default = Preset;


/***/ }),
/* 53 */
/***/ (function(module, exports) {

module.exports = require("lodash/defaultsDeep");

/***/ }),
/* 54 */
/***/ (function(module, exports) {

module.exports = require("lodash/transform");

/***/ }),
/* 55 */
/***/ (function(module, exports) {

module.exports = require("@splunk/datasources/SnapshotDataSource");

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable no-restricted-syntax, no-constant-condition */
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var effects_1 = __webpack_require__(15);
var sagaActions_1 = __webpack_require__(4);
var inputSaga_1 = __importDefault(__webpack_require__(57));
var eventSaga_1 = __importDefault(__webpack_require__(68));
var editingSaga_1 = __importDefault(__webpack_require__(71));
var dataSourceSaga_1 = __importDefault(__webpack_require__(72));
var migrationSaga_1 = __importDefault(__webpack_require__(73));
exports.default = (function (sagaContext) {
    if (sagaContext === void 0) { sagaContext = {}; }
    return function mainSaga() {
        var dataSourceTask, inputUpdateTask, eventHandlingTask, editingSagaTask, migrationSagaTask;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, effects_1.fork(dataSourceSaga_1.default, sagaContext)];
                case 1:
                    dataSourceTask = _a.sent();
                    return [4 /*yield*/, effects_1.fork(inputSaga_1.default, sagaContext)];
                case 2:
                    inputUpdateTask = _a.sent();
                    return [4 /*yield*/, effects_1.fork(eventSaga_1.default, sagaContext)];
                case 3:
                    eventHandlingTask = _a.sent();
                    return [4 /*yield*/, effects_1.fork(editingSaga_1.default, sagaContext)];
                case 4:
                    editingSagaTask = _a.sent();
                    return [4 /*yield*/, effects_1.fork(migrationSaga_1.default, sagaContext)];
                case 5:
                    migrationSagaTask = _a.sent();
                    return [4 /*yield*/, effects_1.take(sagaActions_1.teardown)];
                case 6:
                    _a.sent();
                    return [4 /*yield*/, effects_1.cancel(dataSourceTask)];
                case 7:
                    _a.sent();
                    return [4 /*yield*/, effects_1.cancel(inputUpdateTask)];
                case 8:
                    _a.sent();
                    return [4 /*yield*/, effects_1.cancel(eventHandlingTask)];
                case 9:
                    _a.sent();
                    return [4 /*yield*/, effects_1.cancel(editingSagaTask)];
                case 10:
                    _a.sent();
                    return [4 /*yield*/, effects_1.cancel(migrationSagaTask)];
                case 11:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    };
});


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleRemoveInput = exports.handleInputOrderChange = exports.handleCreateInput = exports.handleInputDefinitionChanged = exports.handleInitialTokenSubmit = void 0;
/* eslint-disable no-restricted-syntax, guard-for-in */
var get_1 = __importDefault(__webpack_require__(2));
var inRange_1 = __importDefault(__webpack_require__(58));
var console_1 = __webpack_require__(11);
var DashboardDefinition_1 = __importDefault(__webpack_require__(17));
var effects_1 = __webpack_require__(15);
var input_1 = __webpack_require__(23);
var input_2 = __webpack_require__(35);
var definition_1 = __webpack_require__(3);
var tokens_1 = __webpack_require__(5);
var sagaActions_1 = __webpack_require__(4);
var token_1 = __webpack_require__(9);
var redux_1 = __webpack_require__(38);
var hasSubmitButton = function (layout) {
    return get_1.default(layout, ['options', 'submitButton'], false);
};
var hasSubmitOnDashboardLoad = function (layout) {
    return get_1.default(layout, ['options', 'submitOnDashboardLoad'], false);
};
var getTokenNamespace = function (inputDef) {
    return get_1.default(inputDef, ['options', 'tokenNamespace'], 'default');
};
/**
 * handle input value change, it's gonna update the input state ( value ) and set tokens
 * @param {*} action
 * @param {*} inputDefs
 * @param {*} sagaContext
 */
function handleValueChange(inputDefs, sagaContext, action) {
    var _a, id, value, eventId, inputDef, layout, nextState, input, tokens, tokenNamespace, submit;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = action.payload, id = _a.id, value = _a.value, eventId = _a.eventId;
                inputDef = inputDefs[id];
                return [4 /*yield*/, effects_1.select(definition_1.selectLayout)];
            case 1:
                layout = _b.sent();
                nextState = input_2.createNextState({ value: value, inputDef: inputDef });
                return [4 /*yield*/, effects_1.put(input_1.updateInputState(id, nextState))];
            case 2:
                _b.sent();
                input = sagaContext.preset.findInput(inputDef.type);
                tokens = input && input.valueToTokens
                    ? input.valueToTokens(nextState.value, get_1.default(inputDef, 'options', {}))
                    : {};
                tokenNamespace = getTokenNamespace(inputDef);
                submit = !(tokenNamespace === 'default' && hasSubmitButton(layout));
                return [4 /*yield*/, effects_1.put(sagaActions_1.triggerEvent(id, 'input.change', {
                        value: nextState.value,
                        tokens: tokens,
                        tokenNamespace: tokenNamespace,
                        submit: submit,
                    }, eventId // the event dispatched from ui component
                    ))];
            case 3:
                _b.sent();
                return [2 /*return*/];
        }
    });
}
/**
 * Given the new inputState, compute and update token values.
 * We need to perform this because new inputState may contains default/initial value so we need to
 * populate the tokens accordingly
 * @param {*} inputState
 * @param {*} inputDefs
 * @param {*} sagaContext
 */
function handleInitialTokenSubmit(_a) {
    var layout, submittedTokens, stashedTokens, submitFirstTokens, existingTokens, _b, _c, _i, id, inputDef, tokenNamespace, submit, input, tokens, filteredTokens;
    var inputState = _a.inputState, inputDefs = _a.inputDefs, sagaContext = _a.sagaContext, _d = _a.action, action = _d === void 0 ? {} : _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0: return [4 /*yield*/, effects_1.select(definition_1.selectLayout)];
            case 1:
                layout = _e.sent();
                return [4 /*yield*/, effects_1.select(tokens_1.selectSubmittedTokens)];
            case 2:
                submittedTokens = _e.sent();
                return [4 /*yield*/, effects_1.select(tokens_1.selectStashedTokens)];
            case 3:
                stashedTokens = _e.sent();
                submitFirstTokens = action.type === 'SAGA_INITIALIZE' && hasSubmitOnDashboardLoad(layout);
                existingTokens = {};
                _b = [];
                for (_c in inputState)
                    _b.push(_c);
                _i = 0;
                _e.label = 4;
            case 4:
                if (!(_i < _b.length)) return [3 /*break*/, 7];
                id = _b[_i];
                inputDef = inputDefs[id];
                tokenNamespace = getTokenNamespace(inputDef);
                submit = submitFirstTokens ||
                    tokenNamespace !== 'default' ||
                    !hasSubmitButton(layout);
                input = sagaContext.preset.findInput(inputDef.type);
                tokens = input && input.valueToTokens
                    ? input.valueToTokens(inputState[id].value, get_1.default(inputDef, 'options', {}))
                    : {};
                filteredTokens = token_1.filterExisting(tokens, existingTokens);
                existingTokens = __assign(__assign({}, existingTokens), filteredTokens); // Add new tokens to existing list
                if (!!token_1.contains((submit ? submittedTokens : stashedTokens)[tokenNamespace], filteredTokens)) return [3 /*break*/, 6];
                return [4 /*yield*/, effects_1.put(tokens_1.setToken(filteredTokens, tokenNamespace, submit))];
            case 5:
                _e.sent();
                _e.label = 6;
            case 6:
                _i++;
                return [3 /*break*/, 4];
            case 7: return [2 /*return*/];
        }
    });
}
exports.handleInitialTokenSubmit = handleInitialTokenSubmit;
/**
 * handle input definition change
 * @param {*} sagaContext
 */
function handleInputDefinitionChanged(sagaContext, action) {
    var inputDefs, currentInputState, submittedTokens, preset, inputState;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, effects_1.select(definition_1.selectInputs)];
            case 1:
                inputDefs = _a.sent();
                return [4 /*yield*/, effects_1.select(input_1.selectInputState)];
            case 2:
                currentInputState = _a.sent();
                return [4 /*yield*/, effects_1.select(tokens_1.selectSubmittedTokens)];
            case 3:
                submittedTokens = _a.sent();
                preset = sagaContext.preset;
                inputState = input_2.createInputState({
                    currentInputState: currentInputState,
                    inputDefs: inputDefs,
                    submittedTokens: submittedTokens,
                    preset: preset,
                    isReset: action.type === 'RESET',
                });
                return [4 /*yield*/, effects_1.put(input_1.setInputState(inputState))];
            case 4:
                _a.sent();
                // handle initial submission
                return [4 /*yield*/, handleInitialTokenSubmit({
                        inputState: inputState,
                        inputDefs: inputDefs,
                        sagaContext: sagaContext,
                        action: action,
                    })];
            case 5:
                // handle initial submission
                _a.sent();
                // setup value change handler for inputs
                return [4 /*yield*/, effects_1.takeEvery(sagaActions_1.inputValueChanged, handleValueChange, inputDefs, sagaContext)];
            case 6:
                // setup value change handler for inputs
                _a.sent();
                return [2 /*return*/];
        }
    });
}
exports.handleInputDefinitionChanged = handleInputDefinitionChanged;
/**
 * create input
 * @param {Object} sagaContext Redux store context
 * @param {Object} action
 * @param {String} action.inputId The new input id
 * @param {Object} action.inputDefinition The configuration of the input
 */
// TODO: should we also support creating datasource at the same time (like viz?)
function handleCreateInput(_sagaContext, action) {
    var _a, inputId, inputDefinition, currentDefinition, definition, token;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = action.payload || {}, inputId = _a.inputId, inputDefinition = _a.inputDefinition;
                // Bail when we don't have information to use
                if (!inputId || !inputDefinition) {
                    return [2 /*return*/];
                }
                return [4 /*yield*/, effects_1.select(definition_1.selectDefinition)];
            case 1:
                currentDefinition = _b.sent();
                definition = DashboardDefinition_1.default.fromJSON(currentDefinition);
                token = get_1.default(inputDefinition, 'options.token');
                // Bail if the token is set by another input.
                if (token && definition.getInputByToken(token)) {
                    return [2 /*return*/];
                }
                // Add input will normalize the inputDefinition
                definition.addInput(inputId, inputDefinition).addInputToLayout(inputId);
                // onDefinitionChange callback will then be invoked
                return [4 /*yield*/, effects_1.put(definition_1.updateDefinition(definition.toJSON()))];
            case 2:
                // onDefinitionChange callback will then be invoked
                _b.sent();
                return [2 /*return*/];
        }
    });
}
exports.handleCreateInput = handleCreateInput;
/**
 * move an input around the globalInputs array
 * @param {Object} sagaContext Redux store context
 * @param {Object} action
 * @param {Number} action.from Original position
 * @param {Number} action.to The new position
 */
function handleInputOrderChange(_sagaContext, action) {
    var _a, from, to, currentDefinition, definition, globalInputs, orig;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = action.payload || {}, from = _a.from, to = _a.to;
                return [4 /*yield*/, effects_1.select(definition_1.selectDefinition)];
            case 1:
                currentDefinition = _b.sent();
                definition = DashboardDefinition_1.default.fromJSON(currentDefinition);
                globalInputs = definition.getGlobalInputs();
                // Make sure from and to values are sane
                if (!inRange_1.default(from, globalInputs.length) ||
                    !inRange_1.default(to, globalInputs.length) ||
                    from === to) {
                    return [2 /*return*/];
                }
                orig = globalInputs.splice(from, 1);
                // put it back in
                globalInputs.splice.apply(globalInputs, __spread([to, 0], orig));
                definition.updateGlobalInputs(globalInputs);
                // onDefinitionChange callback will then be invoked
                return [4 /*yield*/, effects_1.put(definition_1.updateDefinition(definition.toJSON()))];
            case 2:
                // onDefinitionChange callback will then be invoked
                _b.sent();
                return [2 /*return*/];
        }
    });
}
exports.handleInputOrderChange = handleInputOrderChange;
/**
 * remove an input from the definition and unset the input token
 * @param {Object} sagaContext Redux store sagaContext
 * @param {*} action
 */
function handleRemoveInput(sagaContext, action) {
    var inputId, currentDefinition, currentInputState, definition, inputDef, type, _a, options, defaultTokenName, tokenNamespace, input, tokensToUnset, lastValue, tokens;
    var _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                inputId = action.payload;
                return [4 /*yield*/, effects_1.select(definition_1.selectDefinition)];
            case 1:
                currentDefinition = _d.sent();
                return [4 /*yield*/, effects_1.select(input_1.selectInputState)];
            case 2:
                currentInputState = _d.sent();
                definition = DashboardDefinition_1.default.fromJSON(currentDefinition);
                inputDef = definition.getInput(inputId);
                // bail if there's no input config for the given id
                if (!inputDef) {
                    return [2 /*return*/];
                }
                definition.removeInput(inputId).removeInputFromLayout(inputId);
                return [4 /*yield*/, effects_1.put(definition_1.updateDefinition(definition.toJSON()))];
            case 3:
                _d.sent();
                type = inputDef.type, _a = inputDef.options, options = _a === void 0 ? {} : _a;
                defaultTokenName = options.token;
                tokenNamespace = getTokenNamespace(inputDef);
                input = (_b = sagaContext.preset) === null || _b === void 0 ? void 0 : _b.findInput(type);
                tokensToUnset = [];
                // run the inputs valueToTokens to see if multiple tokens
                // were generated, we'll have to remove them all.
                if (currentInputState && input && input.valueToTokens) {
                    lastValue = (_c = currentInputState[inputId]) === null || _c === void 0 ? void 0 : _c.value;
                    if (lastValue) {
                        tokens = input.valueToTokens(lastValue, options);
                        tokensToUnset.push.apply(tokensToUnset, __spread(Object.keys(tokens)));
                    }
                }
                else if (defaultTokenName) {
                    tokensToUnset.push(defaultTokenName);
                }
                if (!tokensToUnset.length) return [3 /*break*/, 5];
                return [4 /*yield*/, effects_1.put(tokens_1.unsetToken(tokensToUnset, tokenNamespace))];
            case 4:
                _d.sent();
                _d.label = 5;
            case 5: return [2 /*return*/];
        }
    });
}
exports.handleRemoveInput = handleRemoveInput;
/**
 * Handle adding an input to the definition and global inputs
 * @param {Object} sagaContext Redux store context
 */
function inputSaga(sagaContext) {
    var error_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 5, 7, 8]);
                return [4 /*yield*/, effects_1.takeLatest([redux_1.resetStore, sagaActions_1.inputChanged, sagaActions_1.initialize], handleInputDefinitionChanged, sagaContext)];
            case 1:
                _a.sent();
                return [4 /*yield*/, effects_1.takeLatest(sagaActions_1.createInput, handleCreateInput, sagaContext)];
            case 2:
                _a.sent();
                return [4 /*yield*/, effects_1.takeLatest(sagaActions_1.adjustInputOrder, handleInputOrderChange, sagaContext)];
            case 3:
                _a.sent();
                return [4 /*yield*/, effects_1.takeLatest(sagaActions_1.removeInput, handleRemoveInput, sagaContext)];
            case 4:
                _a.sent();
                return [3 /*break*/, 8];
            case 5:
                error_1 = _a.sent();
                return [4 /*yield*/, effects_1.cancelled()];
            case 6:
                if (!(_a.sent())) {
                    // eslint-disable-next-line no-console
                    console.error.apply(console, __spread(console_1.logfmt(templateObject_1 || (templateObject_1 = __makeTemplateObject(["Caught error: ", ""], ["Caught error: ", ""])), error_1)));
                }
                return [3 /*break*/, 8];
            case 7: return [7 /*endfinally*/];
            case 8: return [2 /*return*/];
        }
    });
}
exports.default = inputSaga;
var templateObject_1;


/***/ }),
/* 58 */
/***/ (function(module, exports) {

module.exports = require("lodash/inRange");

/***/ }),
/* 59 */
/***/ (function(module, exports) {

module.exports = require("lodash/values");

/***/ }),
/* 60 */
/***/ (function(module, exports) {

module.exports = require("lodash/without");

/***/ }),
/* 61 */
/***/ (function(module, exports) {

module.exports = require("lodash/clone");

/***/ }),
/* 62 */
/***/ (function(module, exports) {

module.exports = require("lodash/uniq");

/***/ }),
/* 63 */
/***/ (function(module, exports) {

module.exports = require("lodash/keys");

/***/ }),
/* 64 */
/***/ (function(module, exports) {

module.exports = require("redux");

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsonEqual_1 = __importDefault(__webpack_require__(30));
var sagaActions_1 = __webpack_require__(4);
var resetStore_1 = __importDefault(__webpack_require__(40));
/**
 * monitor redux store state and dispatch definition/tokens changed action for datasource saga
 * @param {*} getState
 */
function changeMonitor(_a) {
    var getState = _a.getState;
    return function (next) { return function (action) {
        var _a = getState(), definition = _a.definition, tokens = _a.tokens, _b = _a.editor, editor = _b === void 0 ? {} : _b;
        var oldDefinition = __assign({}, definition);
        var oldTokens = __assign({}, tokens);
        var returnValue = next(action); // hit reducer
        if (action.type === resetStore_1.default.toString()) {
            return returnValue;
        }
        var _c = getState(), newDefinition = _c.definition, _d = _c.tokens, newTokens = _d === void 0 ? {} : _d, _e = _c.editor, newEditor = _e === void 0 ? {} : _e;
        if (!jsonEqual_1.default(oldDefinition, newDefinition)) {
            returnValue = next(sagaActions_1.definitionChanged());
        }
        if (!jsonEqual_1.default(oldDefinition.inputs, newDefinition.inputs)) {
            returnValue = next(sagaActions_1.inputChanged());
        }
        if (!jsonEqual_1.default(oldTokens.submitted, newTokens.submitted)) {
            returnValue = next(sagaActions_1.submittedTokenChanged());
        }
        if (!jsonEqual_1.default(editor.selectedItems, newEditor.selectedItems)) {
            returnValue = next(sagaActions_1.selectedItemChanged());
        }
        return returnValue;
    }; };
}
exports.default = changeMonitor;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var isFunction_1 = __importDefault(__webpack_require__(20));
var console_1 = __importDefault(__webpack_require__(11));
/**
 * a custom action listener implemented as an redux middleware
 */
exports.default = (function (actionListeners) {
    if (actionListeners === void 0) { actionListeners = {}; }
    return function () { return function (next) { return function (action) {
        var returnValue = next(action); // hit reducer
        if (actionListeners[action.type]) {
            try {
                if (isFunction_1.default(actionListeners[action.type])) {
                    actionListeners[action.type](action);
                }
            }
            catch (ex) {
                console_1.default.error(ex);
            }
        }
        return returnValue;
    }; }; };
});


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.setGlobalMessage = void 0;
var redux_actions_1 = __webpack_require__(8);
exports.setGlobalMessage = redux_actions_1.createAction('SET_GLOBAL_MESSAGE');
exports.default = redux_actions_1.handleActions((_a = {},
    _a[exports.setGlobalMessage] = function (state, _a) {
        var payload = _a.payload;
        return payload;
    },
    _a), null);


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleEvent = exports.executeActions = exports.findEventHandler = void 0;
/* eslint-disable no-restricted-syntax */
var get_1 = __importDefault(__webpack_require__(2));
var effects_1 = __webpack_require__(15);
var console_1 = __importStar(__webpack_require__(11));
var token_1 = __webpack_require__(37);
var url_1 = __webpack_require__(69);
var sagaActions_1 = __webpack_require__(4);
var tokens_1 = __webpack_require__(5);
var definition_1 = __webpack_require__(3);
var DefaultInputHandler_1 = __importDefault(__webpack_require__(70));
var defaultInputHandler = new DefaultInputHandler_1.default();
var defaultHandlers = [defaultInputHandler];
/**
 * find event handlers that can handle the given event
 * @param {*} definition
 * @param {*} componentId
 * @param {*} event
 * @param {*} preset
 */
var findEventHandler = function (definition, event, preset, tokens) {
    var mergedTokens = __assign(__assign({}, tokens), { default: __assign(__assign({}, ((tokens === null || tokens === void 0 ? void 0 : tokens.default) || {})), (event.payload || {})) });
    var handlers = [];
    if (event.targetId != null) {
        ['inputs', 'dataSources', 'visualizations'].forEach(function (type) {
            var matchedHandlers = get_1.default(definition, [type, event.targetId, 'eventHandlers'], [])
                .map(function (_a) {
                var handlerType = _a.type, options = _a.options;
                // treat eventhandler as immutable module, always create new instance here
                return preset.createEventHandler(handlerType, token_1.replaceTokensForObject(options, mergedTokens));
            })
                .filter(function (h) { return h.canHandle(event); });
            handlers = handlers.concat(matchedHandlers);
        });
    }
    return handlers;
};
exports.findEventHandler = findEventHandler;
function executeActions(_a) {
    var actions_1, actions_1_1, action, _b, payload, type, cancel, _c, e_1_1;
    var e_1, _d;
    var _e = _a.actions, actions = _e === void 0 ? [] : _e, plugin = _a.plugin, event = _a.event;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _f.trys.push([0, 9, 10, 11]);
                actions_1 = __values(actions), actions_1_1 = actions_1.next();
                _f.label = 1;
            case 1:
                if (!!actions_1_1.done) return [3 /*break*/, 8];
                action = actions_1_1.value;
                _b = action.payload, payload = _b === void 0 ? {} : _b, type = action.type;
                cancel = void 0;
                _c = type;
                switch (_c) {
                    case 'linkTo': return [3 /*break*/, 2];
                    case 'setToken': return [3 /*break*/, 3];
                    case 'unsetToken': return [3 /*break*/, 5];
                }
                return [3 /*break*/, 7];
            case 2:
                cancel = plugin.invokeCancellablePluginCallback('onLinkToUrl', {
                    dispatchedEvent: event,
                    url: payload.url,
                    newTab: payload.newTab,
                });
                if (!cancel && url_1.isValidUrl(payload.url)) {
                    if (payload.newTab) {
                        window.open(payload.url, '_blank');
                    }
                    else {
                        window.location = payload.url;
                    }
                }
                return [3 /*break*/, 7];
            case 3: return [4 /*yield*/, effects_1.put.resolve(tokens_1.setToken(payload.tokens, payload.namespace, payload.submit))];
            case 4:
                _f.sent();
                return [3 /*break*/, 7];
            case 5: return [4 /*yield*/, effects_1.put.resolve(tokens_1.unsetToken(payload.tokenName, payload.namespace, payload.submit))];
            case 6:
                _f.sent();
                return [3 /*break*/, 7];
            case 7:
                actions_1_1 = actions_1.next();
                return [3 /*break*/, 1];
            case 8: return [3 /*break*/, 11];
            case 9:
                e_1_1 = _f.sent();
                e_1 = { error: e_1_1 };
                return [3 /*break*/, 11];
            case 10:
                try {
                    if (actions_1_1 && !actions_1_1.done && (_d = actions_1.return)) _d.call(actions_1);
                }
                finally { if (e_1) throw e_1.error; }
                return [7 /*endfinally*/];
            case 11: return [2 /*return*/];
        }
    });
}
exports.executeActions = executeActions;
function handleEvent(sagaContext, action) {
    var definition, _a, targetId, eventType, eventPayload, eventId, event, tokens, matchedDefaultHandlers, matchedCustomHandlers, handlers, handlers_1, handlers_1_1, handler, actions, e_2_1;
    var e_2, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4 /*yield*/, effects_1.select(definition_1.selectDefinition)];
            case 1:
                definition = _c.sent();
                _a = action.payload || {}, targetId = _a.targetId, eventType = _a.eventType, eventPayload = _a.eventPayload, eventId = _a.eventId;
                event = {
                    targetId: targetId,
                    type: eventType,
                    payload: eventPayload,
                    originalEvent: eventId
                        ? sagaContext.eventRegistry.retrieveEvent(eventId)
                        : null,
                };
                // Handle pluginCallback first to make sure we always have updated token bindings
                sagaContext.dashboardPlugin.invokePluginCallback('onEventTrigger', event);
                return [4 /*yield*/, effects_1.select(tokens_1.selectSubmittedTokens)];
            case 2:
                tokens = _c.sent();
                matchedDefaultHandlers = defaultHandlers.filter(function (h) {
                    return h.canHandle(event);
                });
                matchedCustomHandlers = exports.findEventHandler(definition, event, sagaContext.preset, tokens);
                handlers = matchedDefaultHandlers.concat(matchedCustomHandlers);
                _c.label = 3;
            case 3:
                _c.trys.push([3, 9, 10, 11]);
                handlers_1 = __values(handlers), handlers_1_1 = handlers_1.next();
                _c.label = 4;
            case 4:
                if (!!handlers_1_1.done) return [3 /*break*/, 8];
                handler = handlers_1_1.value;
                return [4 /*yield*/, handler.handle(event)];
            case 5:
                actions = _c.sent();
                return [4 /*yield*/, executeActions({
                        actions: actions,
                        plugin: sagaContext.dashboardPlugin,
                        event: event,
                    })];
            case 6:
                _c.sent();
                _c.label = 7;
            case 7:
                handlers_1_1 = handlers_1.next();
                return [3 /*break*/, 4];
            case 8: return [3 /*break*/, 11];
            case 9:
                e_2_1 = _c.sent();
                e_2 = { error: e_2_1 };
                return [3 /*break*/, 11];
            case 10:
                try {
                    if (handlers_1_1 && !handlers_1_1.done && (_b = handlers_1.return)) _b.call(handlers_1);
                }
                finally { if (e_2) throw e_2.error; }
                return [7 /*endfinally*/];
            case 11: return [2 /*return*/];
        }
    });
}
exports.handleEvent = handleEvent;
function eventSaga(sagaContext) {
    var error_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, 4, 5]);
                return [4 /*yield*/, effects_1.takeEvery(sagaActions_1.triggerEvent, handleEvent, sagaContext)];
            case 1:
                _a.sent();
                return [3 /*break*/, 5];
            case 2:
                error_1 = _a.sent();
                return [4 /*yield*/, effects_1.cancelled()];
            case 3:
                if (!(_a.sent())) {
                    console_1.default.error.apply(console_1.default, __spread(console_1.logfmt(templateObject_1 || (templateObject_1 = __makeTemplateObject(["Caught error: ", ""], ["Caught error: ", ""])), error_1)));
                }
                return [3 /*break*/, 5];
            case 4: return [7 /*endfinally*/];
            case 5: return [2 /*return*/];
        }
    });
}
exports.default = eventSaga;
var templateObject_1;


/***/ }),
/* 69 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-utils/url");

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable class-methods-use-this */
var DefaultInputHandler = /** @class */ (function () {
    function DefaultInputHandler() {
    }
    DefaultInputHandler.prototype.canHandle = function (_a) {
        var type = _a.type;
        return type === 'input.change';
    };
    DefaultInputHandler.prototype.handle = function (_a) {
        var payload = _a.payload;
        var tokens = payload.tokens, _b = payload.tokenNamespace, tokenNamespace = _b === void 0 ? 'default' : _b, _c = payload.submit, submit = _c === void 0 ? true : _c;
        return Promise.resolve([
            {
                type: 'setToken',
                payload: { tokens: tokens, namespace: tokenNamespace, submit: submit },
            },
        ]);
    };
    return DefaultInputHandler;
}());
exports.default = DefaultInputHandler;


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleCloneVisualizations = exports.handleCreateVisualization = void 0;
/* eslint-disable no-restricted-syntax */
var each_1 = __importDefault(__webpack_require__(19));
var isFunction_1 = __importDefault(__webpack_require__(20));
var effects_1 = __webpack_require__(15);
var console_1 = __importStar(__webpack_require__(11));
var DashboardDefinition_1 = __importDefault(__webpack_require__(17));
var sagaActions_1 = __webpack_require__(4);
var definition_1 = __webpack_require__(3);
/**
 * create visualization and datasource
 * @param {*} sagaContext
 * @param {*} action
 */
function handleCreateVisualization(sagaContext, action) {
    var layoutApi, currentDefinition, definition, _a, visualizationId, visualizationDefinition, layoutItemType, dataSourceType, dataSourceDefinition, viz, vizContract, config, vizDef, dataSourceId, proposedLayoutStructure;
    var _b;
    var _c, _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                layoutApi = sagaContext.apiRegistry.getLayoutApi();
                if (!(layoutApi && isFunction_1.default(layoutApi.addLayoutItem))) return [3 /*break*/, 5];
                return [4 /*yield*/, effects_1.select(definition_1.selectDefinition)];
            case 1:
                currentDefinition = _e.sent();
                definition = DashboardDefinition_1.default.fromJSON(currentDefinition);
                _a = action.payload || {}, visualizationId = _a.visualizationId, visualizationDefinition = _a.visualizationDefinition, layoutItemType = _a.layoutItemType, dataSourceType = _a.dataSourceType, dataSourceDefinition = _a.dataSourceDefinition;
                viz = sagaContext.preset.findVisualization(visualizationDefinition.type);
                vizContract = (_c = viz === null || viz === void 0 ? void 0 : viz.vizContract) !== null && _c !== void 0 ? _c : {};
                config = (_d = viz === null || viz === void 0 ? void 0 : viz.config) !== null && _d !== void 0 ? _d : {};
                if (!(visualizationId && visualizationDefinition)) return [3 /*break*/, 3];
                vizDef = __assign({}, visualizationDefinition);
                if (dataSourceType && dataSourceDefinition) {
                    dataSourceId = definition.nextDataSourceId();
                    definition.addDataSource(dataSourceId, dataSourceDefinition);
                    vizDef.dataSources = __assign(__assign({}, (vizDef.dataSources || {})), (_b = {}, _b[dataSourceType] = dataSourceId, _b));
                }
                return [4 /*yield*/, effects_1.call(layoutApi.addLayoutItem, {
                        itemId: visualizationId,
                        vizContract: vizContract,
                        type: layoutItemType,
                        config: config,
                        metadata: { internal: true },
                    })];
            case 2:
                proposedLayoutStructure = _e.sent();
                definition
                    .addVisualization(visualizationId, vizDef)
                    .updateLayoutStructure(proposedLayoutStructure);
                _e.label = 3;
            case 3: 
            // onDefinitionChange callback will then be invoke
            return [4 /*yield*/, effects_1.put(definition_1.updateDefinition(definition.toJSON()))];
            case 4:
                // onDefinitionChange callback will then be invoke
                _e.sent();
                _e.label = 5;
            case 5: return [2 /*return*/];
        }
    });
}
exports.handleCreateVisualization = handleCreateVisualization;
function handleCloneVisualizations(sagaContext, action) {
    var layoutApi, currentDefinition, definition_2, _a, from, to_1, offsetMultiplier, proposedLayoutStructure;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                layoutApi = sagaContext.apiRegistry.getLayoutApi();
                if (!(layoutApi && isFunction_1.default(layoutApi.cloneLayoutItems))) return [3 /*break*/, 5];
                return [4 /*yield*/, effects_1.select(definition_1.selectDefinition)];
            case 1:
                currentDefinition = _b.sent();
                definition_2 = DashboardDefinition_1.default.fromJSON(currentDefinition);
                _a = action.payload || {}, from = _a.from, to_1 = _a.to, offsetMultiplier = _a.offsetMultiplier;
                if (!from.length) return [3 /*break*/, 3];
                each_1.default(from, function (vizId, iter) {
                    definition_2.cloneVisualization(vizId, to_1[iter]);
                });
                return [4 /*yield*/, effects_1.call(layoutApi.cloneLayoutItems, {
                        from: from,
                        to: to_1,
                        offsetMultiplier: offsetMultiplier,
                        metadata: { internal: true },
                    })];
            case 2:
                proposedLayoutStructure = _b.sent();
                definition_2.updateLayoutStructure(proposedLayoutStructure);
                _b.label = 3;
            case 3: return [4 /*yield*/, effects_1.put(definition_1.updateDefinition(definition_2.toJSON()))];
            case 4:
                _b.sent();
                _b.label = 5;
            case 5: return [2 /*return*/];
        }
    });
}
exports.handleCloneVisualizations = handleCloneVisualizations;
function handleRemoveVisualizations(sagaContext, action) {
    var layoutApi, currentDefinition, definition_3, vizIds, proposedLayoutStructure;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                layoutApi = sagaContext.apiRegistry.getLayoutApi();
                if (!(layoutApi && isFunction_1.default(layoutApi.removeLayoutItems))) return [3 /*break*/, 4];
                return [4 /*yield*/, effects_1.select(definition_1.selectDefinition)];
            case 1:
                currentDefinition = _a.sent();
                definition_3 = DashboardDefinition_1.default.fromJSON(currentDefinition);
                vizIds = action.payload || {};
                return [4 /*yield*/, effects_1.call(layoutApi.removeLayoutItems, vizIds, { internal: true })];
            case 2:
                proposedLayoutStructure = _a.sent();
                each_1.default(vizIds, function (id) {
                    definition_3.removeVisualization(id);
                });
                // onDefinitionChange callback will then be invoke
                definition_3.updateLayoutStructure(proposedLayoutStructure);
                return [4 /*yield*/, effects_1.put(definition_1.updateDefinition(definition_3.toJSON()))];
            case 3:
                _a.sent();
                _a.label = 4;
            case 4: return [2 /*return*/];
        }
    });
}
function handleVisualizationOrder(sagaContext, action) {
    var layoutApi, currentDefinition, definition, proposedLayoutStructure;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                layoutApi = sagaContext.apiRegistry.getLayoutApi();
                if (!(layoutApi && layoutApi.adjustLayoutItemOrder)) return [3 /*break*/, 4];
                return [4 /*yield*/, effects_1.select(definition_1.selectDefinition)];
            case 1:
                currentDefinition = _a.sent();
                definition = DashboardDefinition_1.default.fromJSON(currentDefinition);
                return [4 /*yield*/, effects_1.call(layoutApi.adjustLayoutItemOrder, action.payload.from, action.payload.to, { internal: true })];
            case 2:
                proposedLayoutStructure = _a.sent();
                // onDefinitionChange callback will then be invoke
                definition.updateLayoutStructure(proposedLayoutStructure);
                return [4 /*yield*/, effects_1.put(definition_1.updateDefinition(definition.toJSON()))];
            case 3:
                _a.sent();
                _a.label = 4;
            case 4: return [2 /*return*/];
        }
    });
}
function editingSaga(sagaContext) {
    var error_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 5, 7, 8]);
                return [4 /*yield*/, effects_1.takeEvery(sagaActions_1.createVisualization, handleCreateVisualization, sagaContext)];
            case 1:
                _a.sent();
                return [4 /*yield*/, effects_1.takeEvery(sagaActions_1.cloneVisualizations, handleCloneVisualizations, sagaContext)];
            case 2:
                _a.sent();
                return [4 /*yield*/, effects_1.takeEvery(sagaActions_1.removeVisualizations, handleRemoveVisualizations, sagaContext)];
            case 3:
                _a.sent();
                return [4 /*yield*/, effects_1.takeEvery(sagaActions_1.adjustVisualizationOrder, handleVisualizationOrder, sagaContext)];
            case 4:
                _a.sent();
                return [3 /*break*/, 8];
            case 5:
                error_1 = _a.sent();
                return [4 /*yield*/, effects_1.cancelled()];
            case 6:
                if (!(_a.sent())) {
                    console_1.default.error.apply(console_1.default, __spread(console_1.logfmt(templateObject_1 || (templateObject_1 = __makeTemplateObject(["Caught error: ", ""], ["Caught error: ", ""])), error_1)));
                }
                return [3 /*break*/, 8];
            case 7: return [7 /*endfinally*/];
            case 8: return [2 /*return*/];
        }
    });
}
exports.default = editingSaga;
var templateObject_1;


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-constant-condition */
var redux_saga_1 = __webpack_require__(39);
var effects_1 = __webpack_require__(15);
var console_1 = __importStar(__webpack_require__(11));
var sagaActions_1 = __webpack_require__(4);
/**
 * dispatch dataSource event into saga flow
 * @param {Object} sagaContext saga context object
 * @public
 */
function dataSourceSaga(sagaContext) {
    var channel, _a, eventType, targetId, payload, error_1;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _b.trys.push([0, 5, 7, 8]);
                channel = redux_saga_1.eventChannel(function (emit) {
                    sagaContext.dataSourceRegistry.onEventBroadcast(function (event) {
                        emit(event);
                    });
                    return function () { };
                }, redux_saga_1.buffers.expanding(10));
                _b.label = 1;
            case 1:
                if (false) {}
                return [4 /*yield*/, effects_1.take(channel)];
            case 2:
                _a = _b.sent(), eventType = _a.eventType, targetId = _a.targetId, payload = _a.payload;
                return [4 /*yield*/, effects_1.put(sagaActions_1.triggerEvent(targetId, eventType, payload))];
            case 3:
                _b.sent();
                return [3 /*break*/, 1];
            case 4: return [3 /*break*/, 8];
            case 5:
                error_1 = _b.sent();
                return [4 /*yield*/, effects_1.cancelled()];
            case 6:
                if (!(_b.sent())) {
                    console_1.default.error.apply(console_1.default, __spread(console_1.logfmt(templateObject_1 || (templateObject_1 = __makeTemplateObject(["Caught error: ", ""], ["Caught error: ", ""])), error_1)));
                }
                return [3 /*break*/, 8];
            case 7: return [7 /*endfinally*/];
            case 8: return [2 /*return*/];
        }
    });
}
exports.default = dataSourceSaga;
var templateObject_1;


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleMigrateDashboard = void 0;
var effects_1 = __webpack_require__(15);
var console_1 = __importStar(__webpack_require__(11));
var migration_1 = __webpack_require__(74);
var definition_1 = __webpack_require__(3);
var sagaActions_1 = __webpack_require__(4);
function handleMigrateDashboard(_a) {
    var currentDefinition, migratedDefinition;
    var preset = _a.preset, onMigrationDone = _a.onMigrationDone;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, effects_1.select(definition_1.selectDefinition)];
            case 1:
                currentDefinition = _b.sent();
                migratedDefinition = migration_1.migrateDashboardDefinition({
                    definition: currentDefinition,
                    preset: preset.presetDef,
                });
                // Dispatch UPDATE_DEFINITION action
                return [4 /*yield*/, effects_1.put.resolve(definition_1.updateDefinition(migratedDefinition))];
            case 2:
                // Dispatch UPDATE_DEFINITION action
                _b.sent();
                // Call onMigrationDone() from sagaContext
                onMigrationDone();
                return [2 /*return*/];
        }
    });
}
exports.handleMigrateDashboard = handleMigrateDashboard;
function migrationSaga(sagaContext) {
    var error_1, isCancelled;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, 4, 5]);
                // Take latest so sending multiple migration actions will cancel earlier
                // actions and only the most migration action gets fully executed
                return [4 /*yield*/, effects_1.takeLatest(sagaActions_1.migrateDashboard, handleMigrateDashboard, sagaContext)];
            case 1:
                // Take latest so sending multiple migration actions will cancel earlier
                // actions and only the most migration action gets fully executed
                _a.sent();
                return [3 /*break*/, 5];
            case 2:
                error_1 = _a.sent();
                return [4 /*yield*/, effects_1.cancelled()];
            case 3:
                isCancelled = _a.sent();
                if (!isCancelled) {
                    console_1.default.error.apply(console_1.default, __spread(console_1.logfmt(templateObject_1 || (templateObject_1 = __makeTemplateObject(["Caught error: ", ""], ["Caught error: ", ""])), error_1)));
                }
                return [3 /*break*/, 5];
            case 4: return [7 /*endfinally*/];
            case 5: return [2 /*return*/];
        }
    });
}
exports.default = migrationSaga;
var templateObject_1;


/***/ }),
/* 74 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-utils/migration");

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var EventRegistry = /** @class */ (function () {
    function EventRegistry() {
        this.idSeq = 0;
        this.storedEvents = {};
        this.teardown();
    }
    EventRegistry.prototype.registerEvent = function (e) {
        // eslint-disable-next-line no-plusplus
        var id = "event" + ++this.idSeq;
        this.storedEvents[id] = e;
        return id;
    };
    EventRegistry.prototype.retrieveEvent = function (id) {
        var event = this.storedEvents[id];
        delete this.storedEvents[id];
        return event;
    };
    EventRegistry.prototype.teardown = function () {
        this.storedEvents = {};
        this.idSeq = 0;
    };
    return EventRegistry;
}());
exports.default = EventRegistry;


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var isFunction_1 = __importDefault(__webpack_require__(20));
/**
 * An registry that hold layout,input and viz apis
 */
var ApiRegistry = /** @class */ (function () {
    function ApiRegistry() {
        this.onLayoutApiReady = undefined;
        this.layoutApi = null;
        this.visualizationApis = {};
        this.visualizationActionApis = {};
        this.globalInputsApi = null;
        this.inputApis = {};
        this.inputActionApis = {};
    }
    ApiRegistry.prototype.registerLayoutApi = function (layoutApi) {
        this.layoutApi = layoutApi;
        this.notifyLayoutApiReady();
    };
    ApiRegistry.prototype.registerVisualizationActionsApi = function (vizId, api) {
        this.visualizationActionApis[vizId] = api;
    };
    ApiRegistry.prototype.registerVisualizationApi = function (vizId, api) {
        this.visualizationApis[vizId] = api;
    };
    ApiRegistry.prototype.registerGlobalInputsApi = function (api) {
        this.globalInputsApi = api;
    };
    ApiRegistry.prototype.registerInputApi = function (inputId, api) {
        this.inputApis[inputId] = api;
    };
    ApiRegistry.prototype.registerInputActionsApi = function (inputId, api) {
        this.inputActionApis[inputId] = api;
    };
    ApiRegistry.prototype.removeLayoutApi = function () {
        this.layoutApi = null;
    };
    ApiRegistry.prototype.removeVisualizationApi = function (vizId) {
        delete this.visualizationApis[vizId];
    };
    ApiRegistry.prototype.removeVisualizationActionsApi = function (vizId) {
        delete this.visualizationActionApis[vizId];
    };
    ApiRegistry.prototype.removeGlobalInputsApi = function () {
        this.globalInputsApi = null;
    };
    ApiRegistry.prototype.removeInputApi = function (inputId) {
        delete this.inputApis[inputId];
    };
    ApiRegistry.prototype.removeInputActionsApi = function (inputId) {
        delete this.inputActionApis[inputId];
    };
    ApiRegistry.prototype.getLayoutApi = function () {
        return this.layoutApi;
    };
    ApiRegistry.prototype.getVisualizationApi = function (vizId) {
        return this.visualizationApis[vizId];
    };
    ApiRegistry.prototype.getVisualizationActionsApi = function (vizId) {
        return this.visualizationActionApis[vizId];
    };
    ApiRegistry.prototype.getGlobalInputsApi = function () {
        return this.globalInputsApi;
    };
    ApiRegistry.prototype.getInputApi = function (inputId) {
        return this.inputApis[inputId];
    };
    ApiRegistry.prototype.getInputActionsApi = function (inputId) {
        return this.inputActionApis[inputId];
    };
    ApiRegistry.prototype.notifyLayoutApiReady = function () {
        if (isFunction_1.default(this.onLayoutApiReady)) {
            this.onLayoutApiReady();
        }
    };
    ApiRegistry.prototype.teardown = function () {
        this.removeLayoutApi();
        this.visualizationApis = {};
        this.removeGlobalInputsApi();
        this.inputApis = {};
    };
    return ApiRegistry;
}());
exports.default = ApiRegistry;


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var each_1 = __importDefault(__webpack_require__(19));
var bind_1 = __importDefault(__webpack_require__(78));
var omit_1 = __importDefault(__webpack_require__(24));
var isEqual_1 = __importDefault(__webpack_require__(14));
var isEmpty_1 = __importDefault(__webpack_require__(12));
var get_1 = __importDefault(__webpack_require__(2));
var hash_it_1 = __importDefault(__webpack_require__(79));
var i18n_1 = __webpack_require__(13);
var BaseChainUtils_1 = __webpack_require__(80);
var search_1 = __webpack_require__(41);
var token_1 = __webpack_require__(9);
var definition_1 = __webpack_require__(3);
var tokens_1 = __webpack_require__(5);
var DataSourceController_1 = __importDefault(__webpack_require__(81));
var RiskyCommandController_1 = __importDefault(__webpack_require__(90));
/**
 * compute unique hash key for a given object
 * @param {Object} dataSourceDef
 */
var computeKey = function (dataSourceDef) {
    // same DataSource will be reused
    // todo, benchmark on how fast this hash function is
    return hash_it_1.default(omit_1.default(dataSourceDef, ['name']));
};
/**
 * A module that create reuseable DataSource controller
 */
var DataSourceRegistry = /** @class */ (function () {
    /**
     *
     * @param {Object} preset dashboard preset
     * @param {Object} dataSourceContext DataSource context
     * @returns {DataSourceRegistry}
     */
    function DataSourceRegistry(_a) {
        var _this = this;
        var preset = _a.preset, dataSourceContext = _a.dataSourceContext;
        /**
         * Return a DataSource controller that matches the definition
         * @param {Object} dataSourceDef DataSource definition
         * @param {Object} dataSourceId DataSource id
         * @returns {DataSourceController} DataSource controller instance
         */
        this.allocate = function (_a) {
            var /* dataSourceDef, */ dataSourceId = _a.dataSourceId;
            if (!dataSourceId) {
                throw Error('dataSourceId is required to allocate DataSourceController');
            }
            // allocate a DataSource controller that matches the definition.
            // an existing controller will be returned if definition matches,
            // otherwise a new one will be created and return.
            // we want to resolve tokens and apply the defaults, thus it is necessary to use the `selectDataSources` instead of the raw dataSourceDef from the arguments
            var state = _this.store.getState();
            var dataSourceDef = token_1.replaceTokenForDataSources(definition_1.selectDataSources(state), tokens_1.selectSubmittedTokens(state))[dataSourceId];
            if (isEmpty_1.default(dataSourceDef)) {
                throw Error("cannot find dataSourceDef for dataSourceId: " + dataSourceId);
            }
            var key = computeKey(dataSourceDef);
            if (_this.controllers[key] == null) {
                var newController_1 = new DataSourceController_1.default({
                    id: dataSourceId,
                    dataSourceDef: dataSourceDef,
                    dataSourceContext: _this.dataSourceContext,
                    preset: _this.preset,
                    riskyCommandController: _this.riskyCommandController,
                });
                newController_1.onTeardown(bind_1.default(_this.handleDataSourceTeardown, _this, key));
                newController_1.onDataSourceEvent(_this.broadcastDataSourceEvent);
                if (BaseChainUtils_1.isBaseDataSource(dataSourceId, _this.definition)) {
                    var baseChainModel = BaseChainUtils_1.createBaseChainModel(dataSourceId, _this.definition);
                    newController_1.setBaseChainModel(baseChainModel);
                    var chainControllers = _this.getActiveChainControllers(dataSourceId);
                    each_1.default(chainControllers, function (controller) {
                        controller.setParent(newController_1);
                        controller.subscribeToParentDataSourceController();
                    });
                }
                else if (BaseChainUtils_1.isChainDataSource(dataSourceId, _this.definition)) {
                    _this.dataSourceValidation(dataSourceId);
                    var parentDataSourceId = get_1.default(dataSourceDef, [
                        'options',
                        'extend',
                    ]);
                    var parentDataSourceDef = _this.definition[parentDataSourceId];
                    if (!parentDataSourceId || !parentDataSourceDef) {
                        throw new Error(i18n_1._("Cannot find parent dataSource: " + parentDataSourceId));
                    }
                    var parentController = _this.getDataSourceController(parentDataSourceDef);
                    // get chain dataSource controller
                    var chainControllers = _this.getActiveChainControllers(dataSourceId);
                    if (parentController) {
                        var subs = parentController.getSubscriptions();
                        // Special case:
                        // if parent has only one data source subscription, and this subscription is the current newController
                        //
                        if (subs.size === 1 && subs.has(dataSourceId)) {
                            parentController.setHandleSubscriptionCancelOverride();
                        }
                    }
                    else {
                        parentController = _this.allocate({
                            dataSourceId: parentDataSourceId,
                        });
                    }
                    // set parent
                    newController_1.setParent(parentController);
                    // map chain dataSources, and this triggers newController to execute setup
                    each_1.default(chainControllers, function (controller) {
                        controller.setParent(newController_1);
                        controller.subscribeToParentDataSourceController();
                    });
                    var baseDataSourceId = BaseChainUtils_1.getBaseDataSourceId(dataSourceId, _this.definition);
                    if (baseDataSourceId) {
                        var baseDataSourceController = _this.getDataSourceController(_this.definition[baseDataSourceId]);
                        if (baseDataSourceController) {
                            baseDataSourceController.setBaseChainModel(BaseChainUtils_1.createBaseChainModel(baseDataSourceId, _this.definition));
                        }
                    }
                }
                _this.controllers[key] = newController_1;
            }
            return _this.controllers[key];
        };
        /**
         * Return a DataSource controller given the DataSource definition
         * @param {Object} dataSourceDef DataSource definition
         * @returns {DataSourceController} DataSource controller instance
         */
        this.getDataSourceController = function (dataSourceDef) {
            var key = computeKey(dataSourceDef);
            return _this.controllers[key];
        };
        /**
         * Remove DataSource controller from registry
         * @param {String} key cached key
         */
        this.handleDataSourceTeardown = function (key) {
            delete _this.controllers[key];
        };
        /**
         * Pause all DataSource controllers from registry
         */
        this.pauseDataSources = function () {
            each_1.default(_this.controllers, function (controller) {
                controller.pause();
            });
        };
        /**
         * Broadcast DataSource event via broadcastCallback
         * @param {Object} event DataSource event
         */
        this.broadcastDataSourceEvent = function (event) {
            if (_this.broadcastCallback) {
                _this.broadcastCallback(event);
            }
        };
        /**
         * register event broadcast callback
         * @param {Function} callback broadcast callback
         */
        this.onEventBroadcast = function (callback) {
            _this.broadcastCallback = callback;
        };
        this.preset = preset;
        this.dataSourceContext = dataSourceContext;
        this.controllers = {};
        this.store = null;
        this.unsubscribeFromStore = null;
        this.riskyCommandController = new RiskyCommandController_1.default();
    }
    DataSourceRegistry.prototype.subscribeToStore = function (store) {
        var _this = this;
        this.store = store;
        this.unsubscribeFromStore = this.store.subscribe(function () {
            _this.updateDefinition();
        });
    };
    DataSourceRegistry.prototype.updateDefinition = function () {
        var _this = this;
        var state = this.store.getState();
        var dataSourceDefinition = token_1.replaceTokenForDataSources(definition_1.selectDataSources(state), tokens_1.selectSubmittedTokens(state));
        if (isEqual_1.default(this.definition, dataSourceDefinition)) {
            return;
        }
        var lastDefinition = this.definition;
        this.definition = dataSourceDefinition;
        // The following code detects if any base/chain data source without any UI component binding has been updated in the new definition.
        // If there are such data sources, the following code triggers the allocate() function to create new data source and remap into base chain tree
        each_1.default(lastDefinition, function (dsDef, dsId) {
            var newDataSourceDef = _this.definition[dsId];
            var chainDataSources = _this.getActiveChainControllers(dsId);
            var oldDataSourceController = _this.controllers[computeKey(dsDef)];
            if (!isEqual_1.default(dsDef, newDataSourceDef) && // definition is changed
                (BaseChainUtils_1.isBaseDataSource(dsId, _this.definition) ||
                    BaseChainUtils_1.isChainDataSource(dsId, _this.definition)) && // this data source is used in base chain
                oldDataSourceController && // this data source has been created before
                oldDataSourceController.getSubscriptions().size === // this data source has only data source subscriptions
                    oldDataSourceController.getDataSourceSubscriptions().size &&
                Object.keys(chainDataSources).length > 0 // and this data source has chained data source which means this data source is used by chain data source(s)
            ) {
                // call allocate() to create new data source and remap into current base chain
                _this.allocate({
                    dataSourceId: dsId,
                });
            }
        });
    };
    /**
     * capture the snapshot of all DataSources
     */
    DataSourceRegistry.prototype.snapshot = function () {
        var state = {};
        each_1.default(this.controllers, function (controller) {
            var subs = controller.getSubscriptions();
            var subState = {};
            subs.forEach(function (sub) {
                subState[sub.consumerId] = sub.getLastState();
            });
            state[controller.id] = subState;
        });
        return state;
    };
    /**
     * Get chain data source controllers that are subscribed to the given parentDataSourceId
     * @param {String} parentDataSourceId
     */
    DataSourceRegistry.prototype.getActiveChainControllers = function (parentDataSourceId) {
        var _this = this;
        if (!parentDataSourceId) {
            return {};
        }
        var chainDataSourceDefs = BaseChainUtils_1.getChainDataSources(parentDataSourceId, this.definition);
        var result = {};
        each_1.default(chainDataSourceDefs, function (chainDataSourceDef, chainDataSourceId) {
            var chainDataSourceController = _this.getDataSourceController(chainDataSourceDef);
            if (chainDataSourceController) {
                result[chainDataSourceId] = chainDataSourceController;
            }
        });
        return result;
    };
    DataSourceRegistry.prototype.dataSourceValidation = function (dataSourceId) {
        if (BaseChainUtils_1.isChainDataSource(dataSourceId, this.definition)) {
            var references = 0;
            var currentId = dataSourceId;
            var currentDS = this.definition[currentId];
            var visitedDS = [];
            var extend = get_1.default(currentDS, ['options', 'extend']);
            if (!this.definition[extend]) {
                throw new Error(i18n_1._("Chain data source " + dataSourceId + " must have valid extend property"));
            }
            while (currentDS != null) {
                if (visitedDS.indexOf(currentId) > -1) {
                    throw new Error(i18n_1._("Data source " + currentId + " creates an invalid circular reference; check parent data sources referenced by extend property."));
                }
                if (references > search_1.MAX_CHAIN_LENGTH) {
                    throw new Error(i18n_1._(references + " chained data sources exceeds the maximum of " + search_1.MAX_CHAIN_LENGTH));
                }
                if (BaseChainUtils_1.isBaseDataSource(currentId, this.definition)) {
                    return;
                }
                visitedDS.push(currentId);
                references += 1;
                currentId = get_1.default(currentDS, ['options', 'extend']);
                currentDS = this.definition[currentId];
            }
        }
    };
    DataSourceRegistry.prototype.teardown = function () {
        if (this.unsubscribeFromStore) {
            this.unsubscribeFromStore();
        }
    };
    DataSourceRegistry.prototype.getDataSourceControllers = function () {
        return this.controllers;
    };
    return DataSourceRegistry;
}());
exports.default = DataSourceRegistry;


/***/ }),
/* 78 */
/***/ (function(module, exports) {

module.exports = require("lodash/bind");

/***/ }),
/* 79 */
/***/ (function(module, exports) {

module.exports = require("hash-it");

/***/ }),
/* 80 */
/***/ (function(module, exports) {

module.exports = require("@splunk/datasource-utils/BaseChainUtils");

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = __webpack_require__(82);
var get_1 = __importDefault(__webpack_require__(2));
var once_1 = __importDefault(__webpack_require__(83));
var i18n_1 = __webpack_require__(13);
var dashboard_utils_1 = __webpack_require__(18);
var Subscription_1 = __importDefault(__webpack_require__(84));
var RefreshScheduler_1 = __importStar(__webpack_require__(86));
/**
 * A control wrapper on top of actual DataSource instance
 */
var DataSourceController = /** @class */ (function () {
    /**
     *
     * @param {String} id DataSource Id
     * @param {Object} dataSourceDef DataSource definition
     * @param {Object} dataSourceContext DataSource context
     * @param {Object} preset dashboard preset
     * @param {Object} riskyCommandController RiskyCommandController
     */
    function DataSourceController(_a) {
        var _this = this;
        var id = _a.id, dataSourceDef = _a.dataSourceDef, dataSourceContext = _a.dataSourceContext, preset = _a.preset, riskyCommandController = _a.riskyCommandController;
        /**
         * get existing subscriptions
         * @returns {Map} subscriptions
         */
        this.getSubscriptions = function () {
            return _this.subs;
        };
        /**
         * get existing data source subscriptions
         * @returns {Map} data source subscriptions
         */
        this.getDataSourceSubscriptions = function () {
            return _this.dataSourceSubs;
        };
        /**
         * check if viz or input is attached to the data source
         * @returns {Boolean}
         */
        this.isVizOrInputAttached = function () {
            return _this.subs.size > _this.dataSourceSubs.size;
        };
        /**
         * setup DataSource
         */
        this.setup = function () { return __awaiter(_this, void 0, void 0, function () {
            var ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 6, , 7]);
                        this.dataSource = this.preset.createDataSource(this.def.type, __assign(__assign({}, this.def.options), { checkRiskyCommand: this.enableRiskyCommand &&
                                this.riskyCommandController.shouldCheckRiskyCommand(this.query) }), this.context, this.def.meta, this.id, this.baseChainModel);
                        this.setupError = null;
                        if (!this.parent) return [3 /*break*/, 4];
                        if (!this.parent.isConsumerSubscribedBefore(this.id)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getBase().refresh()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this.subscribeToParentDataSourceController()];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [4 /*yield*/, this.dataSource.setup()];
                    case 5:
                        _a.sent();
                        this.setupAutoRefresh();
                        this.broadcast({
                            eventType: 'datasource.setup',
                            targetId: this.id,
                            payload: {},
                        });
                        return [3 /*break*/, 7];
                    case 6:
                        ex_1 = _a.sent();
                        this.setupAutoRefresh();
                        this.setupError = ex_1.message;
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        }); };
        /**
         * teardown DataSource
         */
        this.teardown = function () { return __awaiter(_this, void 0, void 0, function () {
            var ex_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        if (this.parentDataSourceSub) {
                            this.parentDataSourceSub.cancel();
                            this.parentDataSourceSub = null;
                        }
                        if (this.parentStatusSub) {
                            this.parentStatusSub.unsubscribe();
                            this.parentStatusSub = null;
                        }
                        return [4 /*yield*/, this.dataSource.teardown()];
                    case 1:
                        _a.sent();
                        this.broadcast({
                            eventType: 'datasource.teardown',
                            targetId: this.id,
                            payload: {},
                        });
                        return [3 /*break*/, 3];
                    case 2:
                        ex_2 = _a.sent();
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); };
        /**
         * pause DataSource
         * temporarily use teardown datasources instead of pausing
         * this should be fixed when adding resume datasources function
         */
        this.pause = function () {
            if (_this.scheduler) {
                _this.scheduler.stop();
            }
            _this.teardown();
        };
        /**
         * Refresh the base data source, if has parent subscription, otherwise refresh current data source
         * @param {Boolean} checkRiskyCommand optional, by default assuming all searches are risky
         */
        this.refresh = function (_a) {
            var _b = _a === void 0 ? {} : _a, _c = _b.checkRiskyCommand, checkRiskyCommand = _c === void 0 ? true : _c;
            return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            if (!checkRiskyCommand && this.enableRiskyCommand) {
                                this.riskyCommandController.addToDisableCheckList(this.query);
                            }
                            if (!this.parentDataSourceSub) return [3 /*break*/, 5];
                            if (!!checkRiskyCommand) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.parent.refresh({ checkRiskyCommand: checkRiskyCommand })];
                        case 1:
                            _d.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, this.getBase().refresh({ checkRiskyCommand: checkRiskyCommand })];
                        case 3:
                            _d.sent();
                            _d.label = 4;
                        case 4: return [3 /*break*/, 7];
                        case 5: return [4 /*yield*/, this.reset()];
                        case 6:
                            _d.sent();
                            _d.label = 7;
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * reset the current DataSource
         */
        this.reset = function () { return __awaiter(_this, void 0, void 0, function () {
            var ex_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.refreshing) return [3 /*break*/, 6];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, 5, 6]);
                        this.refreshing = true;
                        // we need to wait till teardown completed here.
                        return [4 /*yield*/, this.teardown()];
                    case 2:
                        // we need to wait till teardown completed here.
                        _a.sent();
                        return [4 /*yield*/, this.setup()];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 4:
                        ex_3 = _a.sent();
                        this.setupError = ex_3.message;
                        return [3 /*break*/, 6];
                    case 5:
                        this.refreshing = false;
                        // refresh all subscriptions
                        this.refreshSubscriptions();
                        return [7 /*endfinally*/];
                    case 6: return [2 /*return*/];
                }
            });
        }); };
        /**
         * broadcast a DataSource event
         * @param {Object} event DataSource lifecycle event
         */
        this.broadcast = function (event) {
            if (_this.dataSourceEventCallback) {
                _this.dataSourceEventCallback(event);
            }
        };
        /**
         * register teardown callback
         * @param {Function} teardownCallback teardown callback
         */
        this.onTeardown = function (teardownCallback) {
            _this.teardownCallback = teardownCallback;
        };
        /**
         * register DataSource event callback
         * @param {Function} eventCallback callback
         */
        this.onDataSourceEvent = function (eventCallback) {
            _this.dataSourceEventCallback = eventCallback;
        };
        /**
         * handle subscription cancel
         * @param {String} consumerId DataSource consumerId, this will either be viz or input id
         */
        this.handleSubscriptionCancel = function (consumerId) {
            _this.subs.delete(consumerId);
            _this.dataSourceSubs.delete(consumerId);
            // teardown datasource when no consumers
            if (_this.subs.size === 0) {
                if (!_this.handleSubscriptionCancelOverride) {
                    // we don't need to wait till teardown complete
                    _this.teardown();
                    if (_this.scheduler) {
                        _this.scheduler.stop();
                    }
                    if (_this.teardownCallback) {
                        _this.teardownCallback();
                    }
                }
                else {
                    _this.handleSubscriptionCancelOverride = false;
                }
            }
        };
        this.handleSubscriptionStart = function () {
            if (_this.scheduler && _this.scheduler.refreshType === 'interval') {
                _this.scheduler.scheduleNextRefresh();
            }
        };
        this.handleSubscriptionComplete = function () {
            if (_this.scheduler && _this.scheduler.refreshType === 'delay') {
                _this.scheduler.scheduleNextRefresh();
            }
        };
        /**
         * request a new dataset
         * @param {Object} requestParams requestParams
         * @returns {Observable} Observable instance that will emit data or error
         */
        this.request = function (requestParams) {
            if (!_this.dataSource) {
                throw new Error(i18n_1._('DataSource is not set up.'));
            }
            var result = _this.refreshing
                ? rxjs_1.Observable.of()
                : _this.dataSource.request(requestParams);
            return typeof result.subscribe === 'function'
                ? result
                : rxjs_1.Observable.create(result);
        };
        /**
         * create a new DataSource subscription
         * @param {String} consumerId DataSource consumerId, this will either be viz or input id
         * @param {Object} initialRequestParams initial requestParams
         * @param {Boolean} isDataSource
         * @returns {Subscription} DataSource subscription
         */
        this.subscribe = function (_a) {
            var consumerId = _a.consumerId, initialRequestParams = _a.initialRequestParams, isDataSource = _a.isDataSource;
            return __awaiter(_this, void 0, void 0, function () {
                var sub;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: 
                        // always try to call setup first
                        return [4 /*yield*/, this.setupOnce()];
                        case 1:
                            // always try to call setup first
                            _b.sent();
                            sub = new Subscription_1.default(this, consumerId, initialRequestParams);
                            this.subs.set(consumerId, sub);
                            this.consumerIds.add(consumerId);
                            sub.onStart(this.handleSubscriptionStart);
                            sub.onCancel(this.handleSubscriptionCancel);
                            sub.onComplete(this.handleSubscriptionComplete);
                            if (isDataSource) {
                                this.dataSourceSubs.set(consumerId, sub);
                            }
                            return [2 /*return*/, sub];
                    }
                });
            });
        };
        /**
         * get DataSource metadata
         * @returns {Object} DataSource meta data
         */
        this.getDataSourceMetaData = function () {
            return _this.dataSource && _this.dataSource.getMetaData
                ? _this.dataSource.getMetaData()
                : {};
        };
        this.id = id;
        this.def = dataSourceDef;
        this.preset = preset;
        this.context = dataSourceContext;
        this.setupOnce = once_1.default(this.setup);
        // subscriptions
        this.subs = new Map();
        // dataSourceSubs
        this.dataSourceSubs = new Map();
        this.consumerIds = new Set();
        this.query = get_1.default(this.def, 'options.query');
        this.riskyCommandController = riskyCommandController;
        this.enableRiskyCommand = !!this.context.enableRiskyCommand;
        // ReplaySubject used instead of a BehaviorSubject because we don't want the subject to emit when there
        // hasn't been a status update yet. A BehaviorSubject would require a default value and will immediately emit.
        this.statusSubject = new rxjs_1.ReplaySubject(1);
    }
    /**
     * setup DataSource auto refresh
     */
    DataSourceController.prototype.setupAutoRefresh = function () {
        var refresh;
        var refreshType;
        if (this.dataSource && this.dataSource.getRefreshConfig) {
            var refreshConfig = this.dataSource.getRefreshConfig();
            refresh = get_1.default(refreshConfig, 'refresh');
            refreshType = get_1.default(refreshConfig, 'refreshType');
        }
        else {
            refresh = get_1.default(this.def, 'options.refresh');
            refreshType = get_1.default(this.def, 'options.refreshType');
        }
        if (!refresh) {
            return;
        }
        var refreshInterval = RefreshScheduler_1.parseExprToSeconds(refresh);
        if (!refreshInterval) {
            return;
        }
        if (this.scheduler) {
            this.scheduler.stop();
        }
        this.scheduler = new RefreshScheduler_1.default({
            refreshFunc: this.refresh,
            refreshInterval: refreshInterval,
            refreshType: refreshType,
        });
    };
    Object.defineProperty(DataSourceController.prototype, "completeSearchQuery", {
        get: function () {
            return this.parent
                ? this.parent.completeSearchQuery + " " + this.query
                : this.query;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * check if a consumer is subscribed to this data source controller
     * @param {String} consumerId
     * @returns {Boolean}
     */
    DataSourceController.prototype.isSubscribed = function (consumerId) {
        return this.subs.has(consumerId);
    };
    /**
     * refresh all subscriptions
     */
    DataSourceController.prototype.refreshSubscriptions = function () {
        // refresh all subscriptions
        this.subs.forEach(function (sub) {
            sub.refresh();
        });
    };
    /**
     * Subscribe to parent data source controller
     */
    DataSourceController.prototype.subscribeToParentDataSourceController = function () {
        return __awaiter(this, void 0, void 0, function () {
            var precedingSearchStatusObject, _a, _b, next, error;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (this.parentDataSourceSub) {
                            this.parentDataSourceSub.cancel();
                            this.parentDataSourceSub = null;
                        }
                        if (this.parentStatusSub) {
                            this.parentStatusSub.unsubscribe();
                            this.parentStatusSub = null;
                        }
                        precedingSearchStatusObject = {
                            meta: {
                                statusMessage: i18n_1._('Paused: Dependent on successful preceding search.'),
                            },
                        };
                        this.parentStatusSub = this.parent
                            .getStatusObservable()
                            .subscribe(function (_a) {
                            var error = _a.error, meta = _a.meta;
                            if (dashboard_utils_1.isRiskyCommandError(error === null || error === void 0 ? void 0 : error.message)) {
                                if (_this.parent.isVizOrInputAttached()) {
                                    _this.statusSubject.next(precedingSearchStatusObject);
                                    return;
                                }
                            }
                            _this.statusSubject.next({ error: error, meta: meta });
                        });
                        _a = this;
                        return [4 /*yield*/, this.parent.subscribe({
                                consumerId: this.id,
                                isDataSource: true,
                            })];
                    case 1:
                        _a.parentDataSourceSub = _c.sent();
                        _b = this.dataSource.getObserver(), next = _b.next, error = _b.error;
                        // this sends out results_preview requests
                        this.parentDataSourceSub.subscribeToData({
                            onData: function (args) {
                                var checkRiskyCommand = _this.enableRiskyCommand &&
                                    _this.riskyCommandController.shouldCheckRiskyCommand(_this.query);
                                var completeSearchQuery = _this.completeSearchQuery;
                                var meta = get_1.default(args, 'meta', {});
                                var newMeta = __assign(__assign({}, meta), { checkRiskyCommand: checkRiskyCommand,
                                    completeSearchQuery: completeSearchQuery });
                                next(__assign(__assign({}, args), { meta: newMeta }));
                                if (_this.dataSource.shouldRefreshSubscription()) {
                                    _this.refreshSubscriptions();
                                }
                            },
                            onError: function (args) {
                                error(args);
                                if (dashboard_utils_1.isRiskyCommandError(args.message)) {
                                    if (_this.parent.isVizOrInputAttached()) {
                                        _this.statusSubject.next(precedingSearchStatusObject);
                                    }
                                    else {
                                        var completeSearchQuery = _this.completeSearchQuery;
                                        _this.statusSubject.next({
                                            error: args,
                                            meta: {
                                                completeSearchQuery: completeSearchQuery,
                                            },
                                        });
                                    }
                                }
                                if (_this.dataSource.shouldRefreshSubscription()) {
                                    _this.refreshSubscriptions();
                                }
                            },
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Generate the id and definition data
     */
    DataSourceController.prototype.getIdAndDefinition = function () {
        return {
            id: this.id,
            definition: this.def,
        };
    };
    /**
     * Sets the current parent in the data source
     * @param {DataSourceController} parent
     */
    DataSourceController.prototype.setParent = function (parent) {
        this.parent = parent;
    };
    DataSourceController.prototype.getStatusObservable = function () {
        return this.statusSubject;
    };
    /**
     * Get the base data source for the current one
     */
    DataSourceController.prototype.getBase = function () {
        return this.parent ? this.parent.getBase() : this;
    };
    /**
     * Set the base chain model
     * @param {Object} baseChainModel
     */
    DataSourceController.prototype.setBaseChainModel = function (baseChainModel) {
        this.baseChainModel = baseChainModel;
    };
    /**
     * Function to determine if consumer id has previously subscribed
     * @param {String} consumerId
     * @returns {Boolean}
     */
    DataSourceController.prototype.isConsumerSubscribedBefore = function (consumerId) {
        return this.consumerIds.has(consumerId);
    };
    /**
     * Function to override handleSubscriptionCancel
     */
    DataSourceController.prototype.setHandleSubscriptionCancelOverride = function () {
        this.handleSubscriptionCancelOverride = true;
    };
    return DataSourceController;
}());
exports.default = DataSourceController;


/***/ }),
/* 82 */
/***/ (function(module, exports) {

module.exports = require("rxjs");

/***/ }),
/* 83 */
/***/ (function(module, exports) {

module.exports = require("lodash/once");

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var datasource_1 = __webpack_require__(26);
/**
 * A DataSource subscription
 * This represent a DataSource -- Consumer binding.
 * Be aware that the binding can be n to n.
 */
var Subscription = /** @class */ (function () {
    /**
     *
     * @param {Object} dataSource DataSource controller
     * @param {String} consumerId Consumer id
     * @param {Object} initialRequestParams initial requestParams
     */
    function Subscription(dataSource, consumerId, initialRequestParams) {
        var _this = this;
        /**
         * get last state of this subscription
         * @returns {Object} last state, either be data or error
         */
        this.getLastState = function () {
            return _this.lastState;
        };
        /**
         * send back data and broadcast progress event
         */
        this.progress = function (payload) {
            if (_this.dataCallback) {
                _this.dataCallback(payload);
            }
            _this.dataSource.broadcast({
                eventType: 'datasource.progress',
                targetId: _this.dataSource.id,
                payload: __assign({ consumerId: _this.consumerId }, payload),
            });
        };
        /**
         * send back error and broadcast error event
         */
        this.error = function (payload) {
            if (_this.errorCallback) {
                _this.errorCallback(payload);
            }
            _this.dataSource.broadcast({
                eventType: 'datasource.error',
                targetId: _this.dataSource.id,
                payload: {
                    consumerId: _this.consumerId,
                    requestParams: _this.requestParams,
                    error: payload,
                },
            });
            if (_this.completeCallback) {
                _this.completeCallback(_this.consumerId);
            }
        };
        /**
         * broadcast done event
         */
        this.done = function () {
            _this.dataSource.broadcast({
                eventType: 'datasource.done',
                targetId: _this.dataSource.id,
                payload: __assign({ consumerId: _this.consumerId }, _this.lastState),
            });
            if (_this.completeCallback) {
                _this.completeCallback(_this.consumerId);
            }
        };
        this.consumerId = consumerId;
        this.dataSource = dataSource;
        this.requestParams = initialRequestParams;
        this.lastState = {};
    }
    /**
     * start polling data
     */
    Subscription.prototype.startPolling = function () {
        var _this = this;
        this.start();
        if (this.dataSource.setupError) {
            this.error({
                level: 'error',
                message: this.dataSource.setupError,
            });
            return;
        }
        try {
            var ob = this.dataSource.request(this.requestParams);
            this.sub = ob.subscribe(function (_a) {
                var data = _a.data, _b = _a.meta, meta = _b === void 0 ? {} : _b;
                var formattedData = datasource_1.formatData(data);
                if (formattedData != null) {
                    var payload = {
                        requestParams: _this.requestParams,
                        data: formattedData,
                        meta: meta,
                    };
                    _this.lastState = payload;
                    _this.progress(payload);
                }
                else {
                    _this.error({
                        level: 'error',
                        message: _this.dataSource.def.type + " returns invalid data",
                    });
                }
            }, function (_a) {
                var level = _a.level, message = _a.message, _b = _a.meta, meta = _b === void 0 ? {} : _b;
                var payload = {
                    level: level,
                    message: message,
                    meta: meta,
                };
                _this.lastState = payload;
                _this.error(payload);
            }, function () {
                _this.done();
            });
        }
        catch (ex) {
            this.error({
                level: 'error',
                message: ex.message,
            });
        }
    };
    /**
     * cancel this subscription
     */
    Subscription.prototype.cancel = function () {
        if (this.sub) {
            this.sub.unsubscribe();
        }
        this.dataCallback = null;
        this.errorCallback = null;
        this.lastState = {};
        if (this.cancelCallback) {
            this.cancelCallback(this.consumerId);
        }
    };
    /**
     * refresh current subscription
     */
    Subscription.prototype.refresh = function () {
        if (this.sub) {
            this.sub.unsubscribe();
        }
        this.startPolling();
    };
    /**
     *
     */
    Subscription.prototype.start = function () {
        if (this.startCallback) {
            this.startCallback(this.consumerId);
        }
    };
    /**
     * register subscription start callback
     * @param {Function} callback
     */
    Subscription.prototype.onStart = function (callback) {
        this.startCallback = callback;
    };
    /**
     * register subscription cancel callback
     * @param {Function} callback cancel callback
     */
    Subscription.prototype.onCancel = function (callback) {
        this.cancelCallback = callback;
    };
    /**
     * register complete callback
     * @param {Function} callback
     */
    Subscription.prototype.onComplete = function (callback) {
        this.completeCallback = callback;
    };
    /**
     * Subscribe to DataSource data
     * @param {Function} onData data callback
     * @param {Function} onError error callback
     */
    Subscription.prototype.subscribeToData = function (_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.onData, onData = _c === void 0 ? function () { } : _c, _d = _b.onError, onError = _d === void 0 ? function () { } : _d;
        this.dataCallback = onData;
        this.errorCallback = onError;
        this.startPolling();
    };
    /**
     * update request params for this subscription
     * @param {Object} newRequestParams new request params
     */
    Subscription.prototype.updateRequestParams = function (newRequestParams) {
        if (this.sub) {
            this.sub.unsubscribe();
        }
        this.requestParams = newRequestParams;
        this.startPolling();
    };
    return Subscription;
}());
exports.default = Subscription;


/***/ }),
/* 85 */
/***/ (function(module, exports) {

module.exports = require("@splunk/datasource-utils/DataSet");

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseExprToSeconds = void 0;
var isFinite_1 = __importDefault(__webpack_require__(87));
var isString_1 = __importDefault(__webpack_require__(88));
var time_1 = __webpack_require__(89);
var minInterval = 3; // 3 secs
var computeInterval = function (interval, refreshType) {
    return refreshType === 'delay' ? interval : Math.max(minInterval, interval);
};
var parseExprToSeconds = function (exp) {
    if (exp === void 0) { exp = '5s'; }
    try {
        if (isFinite_1.default(exp)) {
            return Math.abs(parseInt(exp, 10));
        }
        if (isString_1.default(exp)) {
            var now = time_1.epochToMoment();
            var momentTime = time_1.parse("+" + exp, now).momentTime;
            var diff = momentTime.diff(now, 'seconds');
            return Math.abs(diff);
        }
        return 0;
    }
    catch (ex) {
        return 0;
    }
};
exports.parseExprToSeconds = parseExprToSeconds;
/**
 * Control DataSource refresh behaviour
 */
var RefreshScheduler = /** @class */ (function () {
    function RefreshScheduler(_a) {
        var _this = this;
        var _b = _a.refreshFunc, refreshFunc = _b === void 0 ? function () { } : _b, refreshInterval = _a.refreshInterval, _c = _a.refreshType, refreshType = _c === void 0 ? 'delay' : _c;
        this.scheduleNextRefresh = function () {
            // Do not schedule a new refresh if the timer has already started
            if (!_this.timeout) {
                _this.timeout = setTimeout(function () {
                    _this.timeout = null;
                    if (!_this.stopped) {
                        _this.refreshFunc();
                    }
                }, _this.interval * 1000);
            }
        };
        this.stop = function () {
            if (_this.timeout) {
                clearTimeout(_this.timeout);
                _this.timeout = null;
            }
            _this.stopped = true;
        };
        this.refreshFunc = refreshFunc;
        this.refreshType = refreshType;
        this.interval = computeInterval(refreshInterval, refreshType);
        this.stopped = false;
        this.timeout = null;
    }
    return RefreshScheduler;
}());
exports.default = RefreshScheduler;


/***/ }),
/* 87 */
/***/ (function(module, exports) {

module.exports = require("lodash/isFinite");

/***/ }),
/* 88 */
/***/ (function(module, exports) {

module.exports = require("lodash/isString");

/***/ }),
/* 89 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-utils/time");

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Controller caches the SPL query
 */
var RiskyCommandController = /** @class */ (function () {
    function RiskyCommandController() {
        this.disableRiskyCheckList = new Set();
    }
    /**
     * Check if a search query requires risky cmd verification
     * @param {String} query
     * @returns Boolean
     */
    RiskyCommandController.prototype.shouldCheckRiskyCommand = function (query) {
        return !this.disableRiskyCheckList.has(query);
    };
    /**
     * Add query to disableRiskyCheckList
     * @param {String} query
     */
    RiskyCommandController.prototype.addToDisableCheckList = function (query) {
        this.disableRiskyCheckList.add(query);
    };
    /**
     * Clean up the disableRiskyCheckList
     */
    RiskyCommandController.prototype.clearDisableCheckList = function () {
        this.disableRiskyCheckList.clear();
    };
    return RiskyCommandController;
}());
exports.default = RiskyCommandController;


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_redux_1 = __webpack_require__(7);
var definition_1 = __webpack_require__(3);
var DashboardContainer_1 = __importDefault(__webpack_require__(92));
var mapStateToProps = function (state) { return ({
    message: state.message,
    globalInputs: definition_1.selectLayout(state).globalInputs,
}); };
exports.default = react_redux_1.connect(mapStateToProps)(DashboardContainer_1.default);


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(__webpack_require__(0));
var prop_types_1 = __importDefault(__webpack_require__(1));
var ErrorBoundary_1 = __importDefault(__webpack_require__(43));
var Message_1 = __importDefault(__webpack_require__(22));
var DashboardLayout_1 = __importDefault(__webpack_require__(93));
var ConnectedLayoutContainer_1 = __importDefault(__webpack_require__(99));
var GlobalInputContainer_1 = __importDefault(__webpack_require__(124));
var GlobalErrorMessage = function (_a) {
    var message = _a.message;
    return (react_1.default.createElement(Message_1.default, { level: "error", message: message }));
};
GlobalErrorMessage.propTypes = {
    message: prop_types_1.default.string,
};
GlobalErrorMessage.defaultProps = {
    message: null,
};
var renderErrorMessage = function (errorMessage) { return (react_1.default.createElement(GlobalErrorMessage, { message: errorMessage })); };
var renderGlobalInput = function () { return react_1.default.createElement(GlobalInputContainer_1.default, null); };
var DashboardContainer = function (_a) {
    var message = _a.message, height = _a.height, width = _a.width, showGrid = _a.showGrid, globalInputs = _a.globalInputs;
    var renderLayout = react_1.useCallback(function (dimension) { return (react_1.default.createElement(ConnectedLayoutContainer_1.default, { width: dimension.width, height: dimension.height, showGrid: showGrid })); }, [showGrid]);
    if (message) {
        return react_1.default.createElement(GlobalErrorMessage, { message: message });
    }
    return (react_1.default.createElement(ErrorBoundary_1.default, { render: renderErrorMessage },
        react_1.default.createElement(DashboardLayout_1.default, { width: width, height: height, renderGlobalInput: renderGlobalInput, renderLayout: renderLayout, showGlobalInputs: globalInputs.length > 0 })));
};
DashboardContainer.propTypes = {
    height: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
    width: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
    showGrid: prop_types_1.default.bool,
    globalInputs: prop_types_1.default.array,
    message: prop_types_1.default.string,
};
DashboardContainer.defaultProps = {
    globalInputs: [],
    message: null,
};
exports.default = DashboardContainer;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* global __UDF_VERSION__ */
var pick_1 = __importDefault(__webpack_require__(16));
var react_1 = __importStar(__webpack_require__(0));
var prop_types_1 = __importDefault(__webpack_require__(1));
var styled_components_1 = __importDefault(__webpack_require__(6));
var mixins_1 = __webpack_require__(94);
var SizeAwareWrapper_1 = __importDefault(__webpack_require__(95));
var style_1 = __webpack_require__(96);
var layout_1 = __webpack_require__(97);
var CanvasContext_1 = __importDefault(__webpack_require__(98));
var DashboardLayoutContainer = styled_components_1.default.div.attrs({
    'data-test': 'DashboardLayoutContainer',
})(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    ", ";\n    position: relative;\n    overflow: hidden;\n    flex-direction: column;\n    ", ";\n"], ["\n    ", ";\n    position: relative;\n    overflow: hidden;\n    flex-direction: column;\n    ", ";\n"])), mixins_1.reset('flex'), function (props) { return style_1.toDimension(pick_1.default(props, ['width', 'height'])); });
var GlobalInputsContainer = styled_components_1.default.div.attrs({
    'data-test': 'GlobalInputsContainer',
})(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n    flex-basis: auto;\n    z-index: 100;\n"], ["\n    flex-basis: auto;\n    z-index: 100;\n"])));
var LayoutContainer = styled_components_1.default.div.attrs({
    'data-test': 'LayoutContainer',
})(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n    flex-grow: 1;\n    min-height: 0px;\n    overflow: ", ";\n    position: relative;\n"], ["\n    flex-grow: 1;\n    min-height: 0px;\n    overflow: ", ";\n    position: relative;\n"])), function (props) { return (props.useOverlay ? 'overlay' : 'auto'); });
var DashboardLayout = function (_a) {
    var height = _a.height, width = _a.width, renderGlobalInput = _a.renderGlobalInput, renderLayout = _a.renderLayout, showGlobalInputs = _a.showGlobalInputs;
    // this is mainly for auto scrolling to the bottom of canvas when adding a new viz in grid layout
    var canvasRef = react_1.useRef();
    var renderGlobalInputsContainer = react_1.useMemo(function () {
        return showGlobalInputs && (react_1.default.createElement(GlobalInputsContainer, null, renderGlobalInput()));
    }, [showGlobalInputs, renderGlobalInput]);
    return (react_1.default.createElement(DashboardLayoutContainer, { height: height, width: width, "data-udf-core-version": "23.3.0" || false },
        renderGlobalInputsContainer,
        react_1.default.createElement(LayoutContainer, { ref: canvasRef, useOverlay: layout_1.useScrollbarOverlay() },
            react_1.default.createElement(CanvasContext_1.default.Provider, { value: canvasRef },
                react_1.default.createElement(SizeAwareWrapper_1.default, null, function (containerDimensions) {
                    return renderLayout(containerDimensions);
                })))));
};
DashboardLayout.propTypes = {
    height: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
    width: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
    renderGlobalInput: prop_types_1.default.func,
    renderLayout: prop_types_1.default.func,
    showGlobalInputs: prop_types_1.default.bool,
};
DashboardLayout.defaultProps = {
    renderGlobalInput: function () { return null; },
    renderLayout: function () { return null; },
    height: '100%',
    width: '100%',
    showGlobalInputs: false,
};
exports.default = DashboardLayout;
var templateObject_1, templateObject_2, templateObject_3;


/***/ }),
/* 94 */
/***/ (function(module, exports) {

module.exports = require("@splunk/themes/mixins");

/***/ }),
/* 95 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-ui/SizeAwareWrapper");

/***/ }),
/* 96 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-utils/style");

/***/ }),
/* 97 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-utils/layout");

/***/ }),
/* 98 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-context/CanvasContext");

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_redux_1 = __webpack_require__(7);
var definition_1 = __webpack_require__(3);
var editor_1 = __webpack_require__(25);
var mode_1 = __webpack_require__(21);
var sagaActions_1 = __webpack_require__(4);
var LayoutContainer_1 = __importDefault(__webpack_require__(100));
var mapStateToProps = function (state) { return ({
    layout: definition_1.selectResolvedLayout(state),
    mode: mode_1.selectMode(state),
    // TODO: verify if layouts still need selected items (remove if not)
    selectedItems: editor_1.selectSelectedItems(state),
}); };
var mapDispatchToProps = function (dispatch) { return ({
    handleEvent: function (eventType, payload, eventId) {
        dispatch(sagaActions_1.triggerEvent(null, eventType, payload, eventId));
    },
    onLayoutItemsSelect: function (selectedItems) {
        dispatch(editor_1.updateSelectedItems(selectedItems));
    },
    onLayoutStructureChange: function (layoutStructure) {
        dispatch(definition_1.updateLayoutStructure(layoutStructure));
    },
}); };
exports.default = react_redux_1.connect(mapStateToProps, mapDispatchToProps)(LayoutContainer_1.default);


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(__webpack_require__(0));
var prop_types_1 = __importDefault(__webpack_require__(1));
var i18n_1 = __webpack_require__(13);
var Message_1 = __importDefault(__webpack_require__(22));
var ConnectedVisualizationContainer_1 = __importDefault(__webpack_require__(101));
var ConnectedLineContainer_1 = __importDefault(__webpack_require__(122));
var RegistryContext_1 = __importDefault(__webpack_require__(10));
/**
 * A prop passed to the layout component.
 * @param {String} id visualization id
 * @param {*} props the props passed down to VisualizationContainer or LineContainer
 * @param {*} layoutItemType layoutItemType, could be 'line' or 'block'
 * @param {*} onSelected a callback function when visualization is selected
 */
var renderLayoutItem = function (id, props, layoutItemType, onSelected) {
    if (layoutItemType === 'line') {
        return react_1.default.createElement(ConnectedLineContainer_1.default, __assign({ key: id, id: id }, props));
    }
    return (react_1.default.createElement(ConnectedVisualizationContainer_1.default, __assign({ key: id, id: id }, props, { onSelected: onSelected })));
};
var LayoutContainer = function (_a) {
    var handleEvent = _a.handleEvent, height = _a.height, // container height in pixel
    layout = _a.layout, mode = _a.mode, onLayoutItemsSelect = _a.onLayoutItemsSelect, onLayoutStructureChange = _a.onLayoutStructureChange, selectedItems = _a.selectedItems, showGrid = _a.showGrid, width = _a.width;
    var layoutApi = react_1.useRef(null);
    var _b = react_1.useContext(RegistryContext_1.default), apiRegistry = _b.apiRegistry, eventRegistry = _b.eventRegistry, preset = _b.preset;
    react_1.useEffect(function () {
        if (layoutApi.current) {
            apiRegistry.registerLayoutApi(layoutApi.current);
        }
        return function () { return apiRegistry.removeLayoutApi(); };
    }, [layoutApi, apiRegistry]);
    var onEventTrigger = react_1.useCallback(function (_a) {
        var eventType = _a.type, originalEvent = _a.originalEvent, payload = _a.payload;
        var eventId = eventRegistry.registerEvent(originalEvent);
        handleEvent(eventType, payload, eventId);
    }, [handleEvent, eventRegistry]);
    var layoutApiRef = react_1.useCallback(function (ref) {
        layoutApi.current = ref;
    }, []);
    return react_1.useMemo(function () {
        var type = layout.type, options = layout.options, layoutStructure = layout.structure;
        if (!preset.findLayout(type)) {
            return (react_1.default.createElement(Message_1.default, { level: "error", message: i18n_1._("Layout " + type + " is not defined") }));
        }
        var layoutProps = {
            // we send down the actual width/height of dashboard-core container
            containerHeight: height,
            containerWidth: width,
            layoutApiRef: layoutApiRef,
            layoutStructure: layoutStructure,
            mode: mode,
            onEventTrigger: onEventTrigger,
            onLayoutItemsSelect: onLayoutItemsSelect,
            onLayoutStructureChange: onLayoutStructureChange,
            options: options,
            renderLayoutItem: renderLayoutItem,
            selectedItems: selectedItems,
            showGrid: showGrid,
        };
        return preset.createLayout(type, layoutProps);
    }, [
        onLayoutItemsSelect,
        height,
        layout,
        layoutApiRef,
        mode,
        onEventTrigger,
        onLayoutStructureChange,
        preset,
        selectedItems,
        showGrid,
        width,
    ]);
};
LayoutContainer.propTypes = {
    mode: prop_types_1.default.string,
    /**
     * layout node from dashboard definition
     */
    layout: prop_types_1.default.object,
    /**
     * visualization definitions
     */
    visualizations: prop_types_1.default.object,
    /**
     * datasource definitions
     */
    dataSources: prop_types_1.default.object,
    /**
     * current submitted tokens
     */
    submittedTokens: prop_types_1.default.object,
    /**
     * container width in pixel
     */
    width: prop_types_1.default.number,
    /**
     * container height in pixel
     */
    height: prop_types_1.default.number,
    /**
     * action menus
     */
    actionMenus: prop_types_1.default.arrayOf(prop_types_1.default.object),
    /**
     * current selected items
     */
    selectedItems: prop_types_1.default.arrayOf(prop_types_1.default.shape({ id: prop_types_1.default.string, type: prop_types_1.default.oneOf(['block', 'line', 'input']) })),
    /**
     * callback when item been selected
     */
    onLayoutItemsSelect: prop_types_1.default.func,
    /**
     * callback when layout structure changed
     */
    onLayoutStructureChange: prop_types_1.default.func,
    /**
     * handle event callback
     */
    handleEvent: prop_types_1.default.func,
    /**
     * whether gridlines should be displayed in edit mode
     */
    showGrid: prop_types_1.default.bool,
};
exports.default = LayoutContainer;


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_redux_1 = __webpack_require__(7);
var mode_1 = __webpack_require__(21);
var fullscreen_1 = __webpack_require__(31);
var definition_1 = __webpack_require__(3);
var sagaActions_1 = __webpack_require__(4);
var VisualizationContainer_1 = __importDefault(__webpack_require__(102));
var mapStateToProps = function (__, _a) {
    var id = _a.id;
    return function (state) {
        var selectVizDef = definition_1.selectVisualizationDefinitionFactory();
        var selectDSDef = definition_1.selectDataSourceDefinitionForVizFactory();
        return {
            mode: mode_1.selectMode(state),
            isFullscreen: fullscreen_1.selectFullscreenElement(state) === id,
            vizDef: selectVizDef(state, id),
            dataSourceDefs: selectDSDef(state, id),
        };
    };
};
var mapDispatchToProps = function (dispatch, _a) {
    var id = _a.id;
    return ({
        handleEvent: function (eventType, payload, eventId) {
            dispatch(sagaActions_1.triggerEvent(id, eventType, payload, eventId));
        },
        onOptionsChange: function (newOptions) {
            dispatch(definition_1.updateVizOptions(id, newOptions));
        },
        onTitleChange: function (newTitle) {
            dispatch(definition_1.updateVizTitle(id, newTitle));
        },
        onDescriptionChange: function (newDescription) {
            dispatch(definition_1.updateVizDescription(id, newDescription));
        },
        onExitFullscreen: function () {
            dispatch(fullscreen_1.toggleFullscreen(null));
        },
    });
};
exports.default = react_redux_1.connect(mapStateToProps, mapDispatchToProps)(VisualizationContainer_1.default);


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(__webpack_require__(0));
var map_1 = __importDefault(__webpack_require__(103));
var styled_components_1 = __importDefault(__webpack_require__(6));
var react_full_screen_1 = __webpack_require__(104);
var i18n_1 = __webpack_require__(13);
var Message_1 = __importDefault(__webpack_require__(22));
var ErrorBoundary_1 = __importDefault(__webpack_require__(43));
var dashboard_utils_1 = __webpack_require__(18);
var DataSourceComposer_1 = __importDefault(__webpack_require__(105));
var datasource_1 = __webpack_require__(26);
var VisualizationContent_1 = __importDefault(__webpack_require__(107));
var RegistryContext_1 = __webpack_require__(10);
var Item = styled_components_1.default.div.attrs(function (_a) {
    var width = _a.width;
    return ({
        style: {
            width: width,
        },
    });
})(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    position: relative;\n    pointer-events: auto;\n"], ["\n    position: relative;\n    pointer-events: auto;\n"])));
var FixSizeItem = styled_components_1.default.div.attrs(function (_a) {
    var width = _a.width, height = _a.height;
    return ({
        style: {
            width: width,
            height: height,
        },
    });
})(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n    position: relative;\n    flex-direction: column;\n    pointer-events: auto;\n"], ["\n    position: relative;\n    flex-direction: column;\n    pointer-events: auto;\n"])));
var StyledFullScreen = styled_components_1.default(react_full_screen_1.FullScreen)(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n    height: ", ";\n    width: ", ";\n"], ["\n    height: ", ";\n    width: ", ";\n"])), function (props) { return dashboard_utils_1.toPx(props.height); }, function (props) { return dashboard_utils_1.toPx(props.width); });
var empty = {};
/**
 * Visualization wrapper that wires up events and data for viz content.
 */
var VisualizationContainer = function (_a) {
    var dataSourceDefs = _a.dataSourceDefs, handleEvent = _a.handleEvent, id = _a.id, _b = _a.isFullscreen, isFullscreen = _b === void 0 ? false : _b, mode = _a.mode, onDescriptionChange = _a.onDescriptionChange, onExitFullscreen = _a.onExitFullscreen, onOptionsChange = _a.onOptionsChange, onSelected = _a.onSelected, onTitleChange = _a.onTitleChange, vizDef = _a.vizDef, height = _a.height, width = _a.width, y = _a.y, canvasHeight = _a.canvasHeight;
    var type = vizDef.type, _c = vizDef.options, options = _c === void 0 ? empty : _c, _d = vizDef.dataSources, dataSourceBindings = _d === void 0 ? empty : _d, _e = vizDef.showProgressBar, showProgressBar = _e === void 0 ? false : _e, _f = vizDef.showLastUpdated, showLastUpdated = _f === void 0 ? false : _f;
    var _g = RegistryContext_1.useRegistry(), apiRegistry = _g.apiRegistry, eventRegistry = _g.eventRegistry, preset = _g.preset;
    var fullscreenHandle = react_full_screen_1.useFullScreenHandle();
    var enterFullscreen = fullscreenHandle.enter, vizRef = fullscreenHandle.node;
    var vizApi = react_1.useMemo(function () { return ({
        getDomElement: function () { return vizRef.current; },
    }); }, [vizRef]);
    react_1.useEffect(function () {
        if (!apiRegistry.getVisualizationApi(id)) {
            apiRegistry.registerVisualizationApi(id, vizApi);
        }
        return function () {
            apiRegistry.removeVisualizationApi(id);
        };
    }, [apiRegistry, id, vizApi]);
    var registerApi = react_1.useCallback(function (ref) {
        apiRegistry.registerVisualizationApi(id, __assign(__assign({}, ref), vizApi));
    }, [apiRegistry, id, vizApi]);
    var handleToggleFullscreen = react_1.useCallback(function (isFull) {
        if (isFullscreen && !isFull) {
            onExitFullscreen();
        }
    }, [isFullscreen, onExitFullscreen]);
    var bindings = react_1.useMemo(function () {
        return map_1.default(dataSourceBindings, function (dataSourceId, bindingType) {
            return {
                bindingType: bindingType,
                dataSourceId: dataSourceId,
                dataSource: dataSourceDefs[dataSourceId],
                initialRequestParams: datasource_1.findInitialRequestParams({
                    bindingType: bindingType,
                    consumerModule: preset.findVisualization(type),
                    options: options,
                }),
            };
        });
    }, [dataSourceBindings, dataSourceDefs, preset, type, options]);
    var handleEventTrigger = react_1.useCallback(function (_a) {
        var eventType = _a.type, originalEvent = _a.originalEvent, payload = _a.payload;
        var eventId = eventRegistry.registerEvent(originalEvent);
        handleEvent(eventType, payload, eventId);
    }, [eventRegistry, handleEvent]);
    var vizProps = react_1.useMemo(function () { return ({
        id: id,
        mode: mode,
        onEventTrigger: handleEventTrigger,
        vizActionHandlerRef: registerApi,
        visualizationApiRef: registerApi,
        onOptionsChange: onOptionsChange,
        // need to convert the array of string to an array of objects.
        onSelected: function (e, visualizationIds) {
            return onSelected(e, visualizationIds.map(function (vizId) { return ({
                id: vizId,
                type: 'block',
            }); }));
        },
        onTitleChange: onTitleChange,
        onDescriptionChange: onDescriptionChange,
        isFullscreen: isFullscreen,
    }); }, [
        id,
        mode,
        handleEventTrigger,
        registerApi,
        onOptionsChange,
        onTitleChange,
        onDescriptionChange,
        isFullscreen,
        onSelected,
    ]);
    var handleError = react_1.useCallback(function (message) { return react_1.default.createElement(Message_1.default, { level: "error", message: i18n_1._(message) }); }, []);
    // enter fullscreen when the isFullscreen prop becomes true
    react_1.useEffect(function () {
        if (isFullscreen) {
            enterFullscreen();
        }
    }, [isFullscreen, enterFullscreen]);
    var renderContent = react_1.useMemo(
    // eslint-disable-next-line react/prop-types
    function () { return function (_a) {
        var contentWidth = _a.width, contentHeight = _a.height;
        return (react_1.default.createElement(ErrorBoundary_1.default, { render: handleError },
            react_1.default.createElement(StyledFullScreen, { handle: fullscreenHandle, onChange: handleToggleFullscreen, width: contentWidth, height: contentHeight },
                react_1.default.createElement(DataSourceComposer_1.default, { consumerId: id, bindings: bindings }, function (_a) {
                    var loading = _a.loading, dataSources = _a.dataSources, updateRequestParams = _a.updateRequestParams, refresh = _a.refresh;
                    return (react_1.default.createElement(VisualizationContent_1.default, { type: type, vizProps: vizProps, visualizationDefinition: vizDef, dataSourceDefinitions: dataSourceDefs, height: contentHeight, width: contentWidth, y: y, canvasHeight: canvasHeight, loading: loading, dataSources: dataSources, updateRequestParams: updateRequestParams, refresh: refresh, showProgressBar: showProgressBar, showLastUpdated: showLastUpdated }));
                }))));
    }; }, [
        handleError,
        fullscreenHandle,
        handleToggleFullscreen,
        id,
        bindings,
        type,
        vizProps,
        vizDef,
        dataSourceDefs,
        y,
        canvasHeight,
        showProgressBar,
        showLastUpdated,
    ]);
    return react_1.useMemo(function () {
        return height != null ? (react_1.default.createElement(FixSizeItem, { "data-test": "viz-item", "data-viz-type": type, "data-id": id, width: width, height: height }, renderContent({ width: width, height: height }))) : (react_1.default.createElement(Item, { "data-test": "viz-item", "data-viz-type": type, "data-id": id, width: width }, renderContent({ width: width })));
    }, [height, id, width, renderContent, type]);
};
exports.default = VisualizationContainer;
var templateObject_1, templateObject_2, templateObject_3;


/***/ }),
/* 103 */
/***/ (function(module, exports) {

module.exports = require("lodash/map");

/***/ }),
/* 104 */
/***/ (function(module, exports) {

module.exports = require("react-full-screen");

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(__webpack_require__(0));
var prop_types_1 = __importDefault(__webpack_require__(1));
var react_composer_1 = __importDefault(__webpack_require__(106));
var DataSourceConsumer_1 = __importDefault(__webpack_require__(32));
var noop = function () { return undefined; };
var empty = {};
/**
 * A React component that allow consumer subscribe to multiple DataSources
 */
var DataSourceComposer = function (_a) {
    var consumerId = _a.consumerId, bindings = _a.bindings, children = _a.children;
    if (bindings.length === 0) {
        children({
            loading: false,
            dataSources: empty,
            updateRequestParams: noop,
        });
    }
    var dataSourceConsumers = bindings.map(function (_a) {
        var bindingType = _a.bindingType, dataSource = _a.dataSource, dataSourceId = _a.dataSourceId, initialRequestParams = _a.initialRequestParams;
        return (react_1.default.createElement(DataSourceConsumer_1.default, { consumerId: consumerId, bindingType: bindingType, dataSource: dataSource, dataSourceId: dataSourceId, initialRequestParams: initialRequestParams }));
    });
    return (react_1.default.createElement(react_composer_1.default, { components: dataSourceConsumers }, function (mergedResults) {
        // merge result into a single dataSources object
        var dataSources = {};
        var requestParamsUpdater = {};
        var refreshes = {};
        var primaryLoading;
        mergedResults.forEach(function (_a) {
            var bindingType = _a.bindingType, loading = _a.loading, requestParams = _a.requestParams, updateRequestParams = _a.updateRequestParams, data = _a.data, meta = _a.meta, error = _a.error, refresh = _a.refresh;
            // we use primary dataSource to drive loading state
            if (bindingType === 'primary') {
                primaryLoading = loading;
            }
            requestParamsUpdater[bindingType] = updateRequestParams;
            refreshes[bindingType] = refresh;
            dataSources[bindingType] = {
                requestParams: requestParams,
                data: data,
                meta: meta,
                error: error,
            };
        });
        return children({
            loading: primaryLoading,
            dataSources: dataSources,
            updateRequestParams: function (bindingType, newRequestParams) {
                requestParamsUpdater[bindingType](newRequestParams);
            },
            refresh: function (payload) {
                // Refresh all searches. Later we may want to consider refresh a search by specifying bindingType
                Object.keys(refreshes).forEach(function (bindingType) {
                    return refreshes[bindingType](payload);
                });
            },
        });
    }));
};
DataSourceComposer.propTypes = {
    /**
     * Consumer id
     */
    consumerId: prop_types_1.default.string.isRequired,
    /**
     * render prop
     */
    children: prop_types_1.default.func,
    /**
     * Consumer -- DataSource bindings
     */
    bindings: prop_types_1.default.arrayOf(prop_types_1.default.shape({
        bindingType: prop_types_1.default.string,
        dataSource: prop_types_1.default.object,
        dataSourceId: prop_types_1.default.string,
        initialRequestParams: prop_types_1.default.object,
    })),
};
DataSourceComposer.defaultProps = {
    children: noop,
};
exports.default = DataSourceComposer;


/***/ }),
/* 106 */
/***/ (function(module, exports) {

module.exports = require("react-composer");

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(__webpack_require__(0));
var styled_components_1 = __importDefault(__webpack_require__(6));
var dashboard_context_1 = __webpack_require__(34);
var dashboard_telemetry_1 = __webpack_require__(108);
var colorUtils_1 = __webpack_require__(109);
var dashboard_ui_1 = __webpack_require__(110);
var react_redux_1 = __webpack_require__(7);
var dashboard_utils_1 = __webpack_require__(18);
var riskyCommandUtils_1 = __webpack_require__(111);
var VizProgressBar_1 = __importStar(__webpack_require__(112));
var VizTitleAndDescription_1 = __importStar(__webpack_require__(114));
var VizWaitingForInput_1 = __importDefault(__webpack_require__(115));
var VizStatusBar_1 = __importStar(__webpack_require__(44));
var VizStatusIcon_1 = __importDefault(__webpack_require__(118));
var RegistryContext_1 = __webpack_require__(10);
var token_1 = __webpack_require__(9);
var editor_1 = __webpack_require__(25);
var tokens_1 = __webpack_require__(5);
var ActionMenusContext_1 = __webpack_require__(45);
var visualization_1 = __webpack_require__(120);
var SelectableContainer_1 = __importDefault(__webpack_require__(121));
/**
 * canvasHeight - 40 is the closest a viz should be from bottom of canvas to
 * render action menu below viz.
 */
var minDistanceFromBottomCanvasForActionMenus = 40;
var VizWrapper = styled_components_1.default.div.attrs(function (_a) {
    var width = _a.width, height = _a.height;
    return ({
        style: {
            width: dashboard_utils_1.toPx(width),
            height: dashboard_utils_1.toPx(height),
        },
    });
})(templateObject_1 || (templateObject_1 = __makeTemplateObject([""], [""])));
var ActionMenuWrapper = styled_components_1.default.div(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n    visibility: ", ";\n    transition: visibility 0.2s ease-in 0;\n    position: relative;\n\n    ", ":hover & {\n        transition: visibility 0.2s ease-in 0.3s;\n        visibility: visible;\n    }\n"], ["\n    visibility: ", ";\n    transition: visibility 0.2s ease-in 0;\n    position: relative;\n\n    ", ":hover & {\n        transition: visibility 0.2s ease-in 0.3s;\n        visibility: visible;\n    }\n"])), function (_a) {
    var isSelected = _a.isSelected;
    return (isSelected ? 'visible' : 'hidden');
}, SelectableContainer_1.default);
var empty = {};
var VisualizationContent = function (_a) {
    var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
    var type = _a.type, height = _a.height, width = _a.width, y = _a.y, canvasHeight = _a.canvasHeight, _q = _a.dataSources, dataSources = _q === void 0 ? {} : _q, loading = _a.loading, refresh = _a.refresh, updateRequestParams = _a.updateRequestParams, vizProps = _a.vizProps, _r = _a.showProgressBar, showProgressBar = _r === void 0 ? false : _r, _s = _a.showLastUpdated, showLastUpdated = _s === void 0 ? false : _s, vizDef = _a.visualizationDefinition, dataSourceDefinitions = _a.dataSourceDefinitions;
    var id = vizProps.id, mode = vizProps.mode, isFullscreen = vizProps.isFullscreen;
    var title = vizDef.title, description = vizDef.description, eventHandlers = vizDef.eventHandlers, _t = vizDef.options, options = _t === void 0 ? empty : _t;
    var _u = __read(react_1.useState({}), 2), computedProps = _u[0], setComputedProps = _u[1];
    var _v = __read(react_1.useState(false), 2), hasStatusIcon = _v[0], setHasStatusIcon = _v[1];
    var _w = RegistryContext_1.useRegistry(), apiRegistry = _w.apiRegistry, preset = _w.preset;
    var _x = dashboard_context_1.useFeatureFlags(), progressFeatureFlag = _x.showProgressBar, lastUpdatedFeatureFlag = _x.showLastUpdated;
    var _y = __read(react_1.useState(false), 2), timerCreated = _y[0], setTimerCreated = _y[1];
    var telemetry = react_1.useContext(dashboard_telemetry_1.TelemetryContext);
    var containerWidth = isFullscreen ? '100vw' : width;
    var containerHeight = isFullscreen ? '100vh' : height;
    var errorLevel = (_c = (_b = dataSources === null || dataSources === void 0 ? void 0 : dataSources.primary) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.level;
    var message = (_f = (_e = (_d = dataSources === null || dataSources === void 0 ? void 0 : dataSources.primary) === null || _d === void 0 ? void 0 : _d.error) === null || _e === void 0 ? void 0 : _e.message) !== null && _f !== void 0 ? _f : '';
    var showWaitingForInputPlaceholder = errorLevel === token_1.ERROR_LEVEL_INFO && message === token_1.WAITING_FOR_INPUT_MSG;
    var backgroundColor = options.backgroundColor;
    var bgColor = computedProps.backgroundColor || backgroundColor || null;
    if (bgColor) {
        bgColor = colorUtils_1.sanitizeColor(bgColor);
    }
    // Register refresh to api on mount, unregister on unmount
    react_1.useEffect(function () {
        apiRegistry.registerVisualizationActionsApi(id, { refresh: refresh });
        return function () {
            apiRegistry.removeVisualizationActionsApi(id);
        };
    }, [apiRegistry, id, refresh]);
    react_1.useEffect(function () {
        setComputedProps({});
    }, [type]);
    // Unique timerId for performanceCollector to create timer with
    var timerId = "Visualization - " + type + " - " + dashboard_utils_1.hashString(id) + " - Time to Interactive";
    react_1.useEffect(function () {
        var initialPayload = {
            pageAction: 'performance.createTimer',
            metadata: {
                timerId: timerId,
                sourceElement: 'TimeRangePicker',
                heroElement: timerId,
                currentTime: performance.now(),
            },
        };
        // Creates an initial timer object when this visualization is initially mounted
        // Source element is the Time Range Picker, because we want to track time between
        // the time range change and this visualization updating
        if (!timerCreated) {
            telemetry.emit(initialPayload);
            setTimerCreated(true);
        }
    }, [telemetry, timerCreated, timerId]);
    react_1.useEffect(function () {
        var actionPayload = {
            pageAction: 'performance.mark',
            metadata: {
                timerId: timerId,
                markInformation: timerId,
                currentTime: performance.now(),
            },
        };
        var initialPayload = {
            pageAction: 'performance.createTimer',
            metadata: {
                timerId: timerId,
                sourceElement: 'TimeRangePicker',
                heroElement: timerId,
                currentTime: performance.now(),
            },
        };
        // After loading is finished, we emit a mark indicating that this visualization
        // has finished updating. We create a new timer since the original timer's job is
        // finished; a future update to time range picker and visualization updating
        // will have a fresh timer object to act upon, and cycle continues.
        if (!loading && timerCreated) {
            telemetry.emit(actionPayload);
            telemetry.emit(initialPayload);
        }
    }, [telemetry, loading, timerCreated, timerId]);
    /**
     * Viz/Preset should have first say of whether the element should be enabled
     * Then determine if user has enabled/disabled in definition
     */
    var _z = react_1.useMemo(function () {
        var presetFlags = preset.shouldDisplayVisualizationSiblingContent(type);
        return {
            useLastUpdated: lastUpdatedFeatureFlag &&
                presetFlags.showLastUpdated &&
                showLastUpdated &&
                !showWaitingForInputPlaceholder,
            useProgressBar: progressFeatureFlag &&
                presetFlags.showProgressBar &&
                showProgressBar &&
                !showWaitingForInputPlaceholder,
            useTitle: presetFlags.showTitleAndDescription && (title || description),
        };
    }, [
        preset,
        type,
        showProgressBar,
        showLastUpdated,
        progressFeatureFlag,
        lastUpdatedFeatureFlag,
        title,
        description,
        showWaitingForInputPlaceholder,
    ]), useLastUpdated = _z.useLastUpdated, useProgressBar = _z.useProgressBar, useTitle = _z.useTitle;
    var hasRiskyCommand = react_1.useMemo(function () {
        var _a, _b;
        var errorMessage = (_b = (_a = dataSources.primary) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.message;
        if (errorMessage === undefined) {
            return false;
        }
        return riskyCommandUtils_1.isRiskyCommandError(errorMessage);
    }, [(_h = (_g = dataSources.primary) === null || _g === void 0 ? void 0 : _g.error) === null || _h === void 0 ? void 0 : _h.message]);
    /**
     * Calculate the heights of all the components that are not the visualization
     * Used to tell the visualization how much room it has to use
     */
    var siblingHeights = react_1.useMemo(function () {
        var h = 0;
        if (hasRiskyCommand) {
            // Error messages enable status icon
            h += VizStatusBar_1.STATUSBAR_HEIGHT;
        }
        if (useProgressBar) {
            // useProgressBar will enable progress bar
            h += VizProgressBar_1.PROGRESSBAR_HEIGHT;
        }
        if (useTitle) {
            // TODO: there has to be a better way...
            h += title || description ? VizTitleAndDescription_1.TITLE_CONTAINER_PADDING : 0;
            h += title ? VizTitleAndDescription_1.TITLE_HEIGHT : 0;
            h += description ? VizTitleAndDescription_1.DESCRIPTION_HEIGHT : 0;
        }
        return h;
    }, [hasRiskyCommand, useProgressBar, useTitle, title, description]);
    // Generate final props passed to viz
    var props = react_1.useMemo(function () { return (__assign(__assign(__assign({}, vizProps), vizDef), { hasEventHandlers: eventHandlers && eventHandlers.length > 0, width: isFullscreen ? '100vw' : width, height: isFullscreen
            ? "calc(100vh - " + siblingHeights + "px)"
            : Number(height) - siblingHeights || height, dataSources: dataSources,
        loading: loading, onRequestParamsChange: updateRequestParams, onComputedProps: setComputedProps })); }, [
        vizProps,
        vizDef,
        dataSources,
        height,
        isFullscreen,
        loading,
        siblingHeights,
        updateRequestParams,
        width,
        eventHandlers,
    ]);
    // Memoize rendering the viz
    var Viz = react_1.useMemo(function () {
        return showWaitingForInputPlaceholder ? (react_1.default.createElement(VizWaitingForInput_1.default, { message: message, backgroundColor: bgColor, width: props.width, height: props.height })) : (react_1.default.createElement(VizWrapper, { "data-test": "viz-size-wrapper", width: props.width, height: props.height }, preset.createVisualization(type, props)));
    }, [preset, type, props, showWaitingForInputPlaceholder, message, bgColor]);
    // Memoize rendering the title and description
    var TitleAndDescription = react_1.useMemo(function () {
        if (!useTitle || (!title && !description)) {
            return null;
        }
        return (react_1.default.createElement(VizTitleAndDescription_1.default, { title: title, description: description, backgroundColor: bgColor }));
    }, [title, description, bgColor, useTitle]);
    // Memoize ProgressBar
    var ProgressBar = react_1.useMemo(function () {
        var _a, _b, _c;
        if (!useProgressBar) {
            return null;
        }
        var currentProgress = (_c = (_b = (_a = dataSources === null || dataSources === void 0 ? void 0 : dataSources.primary) === null || _a === void 0 ? void 0 : _a.meta) === null || _b === void 0 ? void 0 : _b.percentComplete) !== null && _c !== void 0 ? _c : 0;
        return (react_1.default.createElement(VizProgressBar_1.default, { hasData: !!dataSources.primary, percentage: currentProgress, backgroundColor: bgColor }));
    }, [dataSources.primary, useProgressBar, bgColor]);
    // Memoize Status Bar
    var StatusBar = react_1.useMemo(function () {
        if (!hasRiskyCommand) {
            return null;
        }
        return (react_1.default.createElement(VizStatusBar_1.default, { backgroundColor: bgColor, hasRiskyCommand: hasRiskyCommand }));
    }, [hasRiskyCommand, bgColor]);
    // Memoize Status Icon
    var StatusIcon = react_1.useMemo(function () {
        return (react_1.default.createElement(VizStatusIcon_1.default, { dataSource: dataSources.primary, id: id, hasStatusIcon: setHasStatusIcon }));
    }, [dataSources.primary, id]);
    // Handle Selected State
    var selectedItems = react_redux_1.useSelector(editor_1.selectSelectedItems);
    var isMultiSelect = selectedItems.length > 1;
    var isSelected = react_1.useMemo(function () { return !!selectedItems.find(function (item) { return item.id === id; }); }, [selectedItems, id]);
    // Action Menu Props
    var submittedTokens = react_redux_1.useSelector(tokens_1.selectSubmittedTokens);
    var actionMenus = ActionMenusContext_1.useActionMenus();
    // TODO: [BREAKING CHANGE], remove tokens from this, none of our buttons use tokens, and we give the configs to buttons with the tokens already resolved
    var actionMenusWithVizData = react_1.useMemo(function () {
        return actionMenus.map(function (item) {
            return react_1.default.cloneElement(item, {
                itemId: id,
                visualization: vizDef,
                dataSources: dataSourceDefinitions,
                submittedTokens: submittedTokens,
            });
        });
    }, [actionMenus, id, vizDef, submittedTokens, dataSourceDefinitions]);
    var hasDrilldown = visualization_1.getHasDrilldown(eventHandlers);
    var outlineStyle = visualization_1.getVizBorderStyle(isSelected, mode, hasDrilldown);
    // Memoize the calculation for the top or bottom
    // alignment of the action menu container
    var _0 = react_1.useMemo(function () {
        if (typeof height === 'number') {
            // Bottom of the action menu to be rendered
            var menuBottom = height + y;
            // Bottom of the canvas
            var canvasBottom = canvasHeight - minDistanceFromBottomCanvasForActionMenus;
            // Only render below the visualization when the action
            // menu will not fall below the bottom of the canvas
            if (menuBottom <= canvasBottom) {
                // Menu can render below viz
                return { actionMenuTop: 'calc(100% + 1px)' };
            }
        }
        // If there is a status icon or a risky command, don't render
        // the action menu in the same place as that component
        if (hasRiskyCommand || hasStatusIcon) {
            // Bump menu into viz AND place above status bar (with small padding)
            return {
                actionMenuBottom: VizStatusBar_1.STATUSBAR_HEIGHT + 1 + "px",
            };
        }
        // Bump menu into viz
        return { actionMenuBottom: '0px' };
    }, [height, hasRiskyCommand, hasStatusIcon, y, canvasHeight]), actionMenuTop = _0.actionMenuTop, actionMenuBottom = _0.actionMenuBottom;
    // Memoize Action Menu
    var ActionMenu = react_1.useMemo(function () {
        var _a, _b, _c, _d, _e, _f;
        return (react_1.default.createElement(ActionMenuWrapper, { isSelected: isSelected },
            react_1.default.createElement(dashboard_ui_1.ActionMenuContainer, { actionButtons: actionMenusWithVizData, lastUpdated: (_b = (_a = dataSources.primary) === null || _a === void 0 ? void 0 : _a.meta) === null || _b === void 0 ? void 0 : _b.lastUpdated, status: (_d = (_c = dataSources.primary) === null || _c === void 0 ? void 0 : _c.meta) === null || _d === void 0 ? void 0 : _d.status, isRealTimeSearch: (_f = (_e = dataSources.primary) === null || _e === void 0 ? void 0 : _e.meta) === null || _f === void 0 ? void 0 : _f.isRealTimeSearch, showLastUpdated: useLastUpdated, itemId: id, top: actionMenuTop, bottom: actionMenuBottom })));
    }, [
        actionMenusWithVizData,
        (_k = (_j = dataSources.primary) === null || _j === void 0 ? void 0 : _j.meta) === null || _k === void 0 ? void 0 : _k.isRealTimeSearch,
        (_m = (_l = dataSources.primary) === null || _l === void 0 ? void 0 : _l.meta) === null || _m === void 0 ? void 0 : _m.lastUpdated,
        (_p = (_o = dataSources.primary) === null || _o === void 0 ? void 0 : _o.meta) === null || _p === void 0 ? void 0 : _p.status,
        id,
        isSelected,
        useLastUpdated,
        actionMenuTop,
        actionMenuBottom,
    ]);
    return (react_1.default.createElement(SelectableContainer_1.default, { vizId: id, width: containerWidth, height: containerHeight, outlineStyle: outlineStyle },
        ProgressBar,
        TitleAndDescription,
        Viz,
        StatusBar,
        StatusIcon,
        isMultiSelect ? null : ActionMenu));
};
exports.default = VisualizationContent;
var templateObject_1, templateObject_2;


/***/ }),
/* 108 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-telemetry");

/***/ }),
/* 109 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-ui/utils/colorUtils");

/***/ }),
/* 110 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-ui");

/***/ }),
/* 111 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-utils/riskyCommandUtils");

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PROGRESSBAR_HEIGHT = void 0;
var react_1 = __importDefault(__webpack_require__(0));
var prop_types_1 = __importDefault(__webpack_require__(1));
var styled_components_1 = __importDefault(__webpack_require__(6));
var Progress_1 = __importDefault(__webpack_require__(113));
var customThemeVariables_1 = __webpack_require__(27);
exports.PROGRESSBAR_HEIGHT = 3;
var ProgressBarContainer = styled_components_1.default.div.attrs(function () { return ({
    'data-test': 'progress-bar-container',
}); })(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    height: ", "px;\n    background-color: ", ";\n    width: 100%;\n    display: block;\n    /* Fix sub-pixel gaps between elements when scaled */\n    box-shadow: 0 1px 1px 0\n        ", ";\n"], ["\n    height: ", "px;\n    background-color: ",
    ";\n    width: 100%;\n    display: block;\n    /* Fix sub-pixel gaps between elements when scaled */\n    box-shadow: 0 1px 1px 0\n        ",
    ";\n"])), exports.PROGRESSBAR_HEIGHT, function (props) {
    return props.backgroundColor || customThemeVariables_1.customThemeVariables.vizPanelBackgroundColor;
}, function (props) {
    return props.backgroundColor ||
        customThemeVariables_1.customThemeVariables.vizPanelBackgroundColor;
});
var VizProgressBar = function (_a) {
    var backgroundColor = _a.backgroundColor, percentage = _a.percentage, hasData = _a.hasData;
    if (percentage >= 100 || !hasData) {
        return react_1.default.createElement(ProgressBarContainer, { backgroundColor: backgroundColor });
    }
    var progressBarPercent = Math.max(percentage, 5);
    return (react_1.default.createElement(ProgressBarContainer, { backgroundColor: backgroundColor },
        react_1.default.createElement(Progress_1.default, { percentage: progressBarPercent, tooltip: percentage + "% complete" })));
};
VizProgressBar.propTypes = {
    percentage: prop_types_1.default.number,
    backgroundColor: prop_types_1.default.string,
    hasData: prop_types_1.default.bool,
};
VizProgressBar.defaultProps = {
    hasData: true,
    percentage: 0,
};
exports.default = VizProgressBar;
var templateObject_1;


/***/ }),
/* 113 */
/***/ (function(module, exports) {

module.exports = require("@splunk/react-ui/Progress");

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DESCRIPTION_HEIGHT = exports.TITLE_HEIGHT = exports.TITLE_CONTAINER_PADDING = void 0;
var react_1 = __importStar(__webpack_require__(0));
var styled_components_1 = __importDefault(__webpack_require__(6));
var themes_1 = __webpack_require__(33);
var customThemeVariables_1 = __webpack_require__(27);
exports.TITLE_CONTAINER_PADDING = 12;
exports.TITLE_HEIGHT = 20;
exports.DESCRIPTION_HEIGHT = 16;
var Title = styled_components_1.default.div.attrs(function () { return ({
    'data-test': 'viz-title',
}); })(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    flex-basis: auto;\n    font-size: 14px;\n    font-weight: 600;\n    line-height: ", "px;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    color: ", ";\n"], ["\n    flex-basis: auto;\n    font-size: 14px;\n    font-weight: 600;\n    line-height: ", "px;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    color: ", ";\n"])), exports.TITLE_HEIGHT, themes_1.variables.contentColorActive);
var Description = styled_components_1.default.div.attrs(function () { return ({
    'data-test': 'viz-description',
}); })(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n    flex-basis: auto;\n    font-size: 12px;\n    line-height: ", "px;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    color: ", ";\n    opacity: ", ";\n"], ["\n    flex-basis: auto;\n    font-size: 12px;\n    line-height: ", "px;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    color: ", ";\n    opacity: ",
    ";\n"])), exports.DESCRIPTION_HEIGHT, themes_1.variables.contentColorActive, themes_1.pick({
    enterprise: {
        light: 0.6,
        dark: 0.7,
    },
    prisma: 0.7,
}));
var Container = styled_components_1.default.div.attrs(function () { return ({
    'data-test': 'viz-title-description-container',
}); })(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n    padding: ", "px 10px;\n    background-color: ", ";\n    /* Fix sub-pixel gaps between elements when scaled */\n    box-shadow: 0 1px 1px 0\n        ", ";\n    overflow: hidden;\n"], ["\n    padding: ", "px 10px;\n    background-color: ",
    ";\n    /* Fix sub-pixel gaps between elements when scaled */\n    box-shadow: 0 1px 1px 0\n        ",
    ";\n    overflow: hidden;\n"])), exports.TITLE_CONTAINER_PADDING / 2, function (props) {
    return props.backgroundColor || customThemeVariables_1.customThemeVariables.vizPanelBackgroundColor;
}, function (props) {
    return props.backgroundColor ||
        customThemeVariables_1.customThemeVariables.vizPanelBackgroundColor;
});
var VizTitleAndDescription = function (_a) {
    var _b = _a.description, description = _b === void 0 ? '' : _b, _c = _a.title, title = _c === void 0 ? '' : _c, backgroundColor = _a.backgroundColor;
    var TitleMemo = react_1.useMemo(function () { return title && react_1.default.createElement(Title, null, title); }, [title]);
    var DescriptionMemo = react_1.useMemo(function () { return description && react_1.default.createElement(Description, null, description); }, [description]);
    if (!title && !description) {
        return null;
    }
    return (react_1.default.createElement(Container, { backgroundColor: backgroundColor },
        TitleMemo,
        DescriptionMemo));
};
exports.default = VizTitleAndDescription;
var templateObject_1, templateObject_2, templateObject_3;


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(__webpack_require__(0));
var prop_types_1 = __importDefault(__webpack_require__(1));
var styled_components_1 = __importDefault(__webpack_require__(6));
var Input_1 = __importDefault(__webpack_require__(116));
var themes_1 = __webpack_require__(33);
var SVG_1 = __importDefault(__webpack_require__(117));
var customThemeVariables_1 = __webpack_require__(27);
var token_1 = __webpack_require__(9);
var Container = styled_components_1.default.div.attrs(function (_a) {
    var width = _a.width, height = _a.height;
    return ({
        'data-test': 'viz-waiting-for-input',
        style: {
            width: width,
            height: height,
        },
    });
})(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    background-color: ", ";\n"], ["\n    background-color: ",
    ";\n"])), function (props) {
    return props.backgroundColor || customThemeVariables_1.customThemeVariables.vizPanelBackgroundColor;
});
var Text = styled_components_1.default.text(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n    fill: ", ";\n    fill-opacity: 1;\n"], ["\n    fill: ", ";\n    fill-opacity: 1;\n"])), themes_1.variables.contentColorActive);
var IconContainer = styled_components_1.default.div(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n    height: 50%;\n    fill-opacity: 0.5;\n"], ["\n    height: 50%;\n    fill-opacity: 0.5;\n"])));
var VizWaitingForInput = function (_a) {
    var message = _a.message, backgroundColor = _a.backgroundColor, width = _a.width, height = _a.height;
    return (react_1.default.createElement(Container, { width: width, height: height, backgroundColor: backgroundColor },
        react_1.default.createElement(IconContainer, null,
            react_1.default.createElement(Input_1.default, { width: "100%", height: "100%" })),
        react_1.default.createElement(IconContainer, null,
            react_1.default.createElement(SVG_1.default, { viewBox: "0 0 100 100", xmlns: "http://www.w3.org/2000/svg", screenReaderText: message, height: "100%", width: "100%" },
                react_1.default.createElement(Text, { x: "50%", y: "50%", textAnchor: "middle" }, message)))));
};
VizWaitingForInput.propTypes = {
    message: prop_types_1.default.string,
    backgroundColor: prop_types_1.default.string,
    width: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]).isRequired,
    height: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
};
VizWaitingForInput.defaultProps = {
    message: token_1.WAITING_FOR_INPUT_MSG,
};
exports.default = VizWaitingForInput;
var templateObject_1, templateObject_2, templateObject_3;


/***/ }),
/* 116 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-icons/Input");

/***/ }),
/* 117 */
/***/ (function(module, exports) {

module.exports = require("@splunk/react-icons/SVG");

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIconStatus = void 0;
var react_1 = __importStar(__webpack_require__(0));
var prop_types_1 = __importDefault(__webpack_require__(1));
var styled_components_1 = __importDefault(__webpack_require__(6));
var get_1 = __importDefault(__webpack_require__(2));
var SearchStatusIcon_1 = __importDefault(__webpack_require__(119));
var VizStatusBar_1 = __webpack_require__(44);
var StatusIconContainer = styled_components_1.default.div.attrs(function () { return ({
    'data-test': 'status-icon-container',
}); })(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    height: ", "px;\n    display: flex;\n    align-items: center;\n    position: absolute;\n    bottom: 0;\n    right: 0;\n"], ["\n    height: ", "px;\n    display: flex;\n    align-items: center;\n    position: absolute;\n    bottom: 0;\n    right: 0;\n"])), VizStatusBar_1.STATUSBAR_HEIGHT);
var getIconStatus = function (status, isRealTimeSearch, totalCount) {
    switch (status) {
        case 'queued':
        case 'parsing':
            return 'info';
        case 'running':
            return isRealTimeSearch || totalCount === 0 ? 'ok' : null;
        case 'paused':
        case 'finalizing':
        case 'cancelled':
            return null;
        case 'failed':
            return 'error';
        case 'done':
            return totalCount === 0 ? 'info' : null;
        default:
            return null;
    }
};
exports.getIconStatus = getIconStatus;
var VizStatusIcon = function (_a) {
    var dataSource = _a.dataSource, id = _a.id, hasStatusIcon = _a.hasStatusIcon;
    var status = get_1.default(dataSource, 'meta.status', 'queued');
    var statusMessage = get_1.default(dataSource, 'meta.statusMessage');
    var search = get_1.default(dataSource, 'meta.search');
    if (dataSource === null || dataSource === void 0 ? void 0 : dataSource.error) {
        status = 'failed';
        statusMessage = get_1.default(dataSource, 'error.message');
    }
    var totalCount = get_1.default(dataSource, 'meta.totalCount', 0);
    var isRealTimeSearch = get_1.default(dataSource, 'meta.isRealTimeSearch', false);
    var iconStatus = status
        ? exports.getIconStatus(status, isRealTimeSearch, totalCount)
        : null;
    react_1.useEffect(function () {
        if (typeof hasStatusIcon === 'function') {
            hasStatusIcon(!!dataSource && iconStatus !== null);
        }
    }, [dataSource, hasStatusIcon, iconStatus]);
    if (!dataSource) {
        return null;
    }
    return (react_1.default.createElement(StatusIconContainer, null,
        react_1.default.createElement(SearchStatusIcon_1.default, { status: iconStatus, message: statusMessage, height: VizStatusBar_1.STATUSBAR_HEIGHT, search: search, id: id })));
};
VizStatusIcon.propTypes = {
    dataSource: prop_types_1.default.object,
    id: prop_types_1.default.string,
    hasStatusIcon: prop_types_1.default.func,
};
exports.default = VizStatusIcon;
var templateObject_1;


/***/ }),
/* 119 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-ui/SearchStatusIcon");

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getVizBorderStyle = exports.getHasDrilldown = void 0;
var getHasDrilldown = function (eventHandlers) {
    if (!Array.isArray(eventHandlers)) {
        return false;
    }
    // eventHandlers has to be an array here, we don't have to keep looping once we find something.
    return !!eventHandlers.find(function (eventHandler) {
        return /^drilldown/.test(eventHandler.type);
    });
};
exports.getHasDrilldown = getHasDrilldown;
var getVizBorderStyle = function (isSelected, mode, hasDrilldown) {
    var outlineStyle = 'none';
    if (isSelected) {
        outlineStyle = 'selected';
    }
    else if (hasDrilldown || mode === 'edit') {
        outlineStyle = 'lightBorder';
    }
    return outlineStyle;
};
exports.getVizBorderStyle = getVizBorderStyle;


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var themes_1 = __webpack_require__(33);
var styled_components_1 = __importDefault(__webpack_require__(6));
var SelectableContainer = styled_components_1.default.div.attrs(function (_a) {
    var vizId = _a.vizId, width = _a.width, height = _a.height, outlineStyle = _a.outlineStyle;
    return ({
        'data-test': 'select-outline',
        'data-id': vizId,
        'data-outline-style': "" + outlineStyle,
        style: {
            width: width,
            height: height,
        },
    });
})(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    display: flex;\n    flex-flow: column nowrap;\n    position: relative;\n\n    // We position an outline using a psuedo element absolutly positioned\n    &::after {\n        content: '';\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        z-index: 1;\n        pointer-events: none;\n        cursor: default;\n        outline-style: solid;\n        outline-offset: 1px;\n        outline-width: 2px;\n        outline-color: ", ";\n    }\n\n    &:hover::after {\n        outline-color: ", ";\n    }\n"], ["\n    display: flex;\n    flex-flow: column nowrap;\n    position: relative;\n\n    // We position an outline using a psuedo element absolutly positioned\n    &::after {\n        content: '';\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        z-index: 1;\n        pointer-events: none;\n        cursor: default;\n        outline-style: solid;\n        outline-offset: 1px;\n        outline-width: 2px;\n        outline-color: ",
    ";\n    }\n\n    &:hover::after {\n        outline-color: ",
    ";\n    }\n"])), themes_1.pickVariant('outlineStyle', {
    selected: {
        enterprise: themes_1.variables.focusColor,
        prisma: themes_1.variables.focusColor,
    },
    lightBorder: 'transparent',
    none: 'transparent',
}), themes_1.pickVariant('outlineStyle', {
    selected: {
        enterprise: themes_1.variables.focusColor,
        prisma: themes_1.variables.focusColor,
    },
    lightBorder: {
        enterprise: themes_1.variables.borderLightColor,
        prisma: themes_1.variables.interactiveColorBorderHover,
    },
    none: 'transparent',
}));
exports.default = SelectableContainer;
var templateObject_1;


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_redux_1 = __webpack_require__(7);
var mode_1 = __webpack_require__(21);
var definition_1 = __webpack_require__(3);
var sagaActions_1 = __webpack_require__(4);
var LineContainer_1 = __importDefault(__webpack_require__(123));
var mapStateToProps = function (__, _a) {
    var id = _a.id;
    return function (state) {
        var selectVizDef = definition_1.selectVisualizationDefinitionFactory();
        var selectDSDef = definition_1.selectDataSourceDefinitionForVizFactory();
        return {
            mode: mode_1.selectMode(state),
            vizDef: selectVizDef(state, id),
            dataSourceDefs: selectDSDef(state, id),
        };
    };
};
var mapDispatchToProps = function (dispatch, _a) {
    var id = _a.id;
    return ({
        handleEvent: function (eventType, payload, eventId) {
            dispatch(sagaActions_1.triggerEvent(id, eventType, payload, eventId));
        },
        onOptionsChange: function (newOptions) {
            dispatch(definition_1.updateVizOptions(id, newOptions));
        },
    });
};
exports.default = react_redux_1.connect(mapStateToProps, mapDispatchToProps)(LineContainer_1.default);


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(__webpack_require__(0));
var prop_types_1 = __importDefault(__webpack_require__(1));
var DataSourceConsumer_1 = __importDefault(__webpack_require__(32));
var datasource_1 = __webpack_require__(26);
var RegistryContext_1 = __importDefault(__webpack_require__(10));
/**
 * Connection line container
 */
var LineContainer = /** @class */ (function (_super) {
    __extends(LineContainer, _super);
    function LineContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LineContainer.prototype.renderLine = function (_a) {
        var loading = _a.loading, dataSources = _a.dataSources, onRequestParamsChange = _a.onRequestParamsChange;
        var _b = this.props, id = _b.id, mode = _b.mode, from = _b.from, to = _b.to, onLineSelect = _b.onLineSelect, _c = _b.vizDef, type = _c.type, _d = _c.options, options = _d === void 0 ? {} : _d, _e = _c.context, context = _e === void 0 ? {} : _e, handleEvent = _b.handleEvent, onOptionsChange = _b.onOptionsChange;
        var _f = this.context, preset = _f.preset, eventRegistry = _f.eventRegistry;
        var lineProps = {
            id: id,
            mode: mode,
            from: from,
            to: to,
            onLineSelect: onLineSelect,
            options: options,
            dataSources: dataSources,
            loading: loading,
            context: context,
            onEventTrigger: function (_a) {
                var eventType = _a.type, originalEvent = _a.originalEvent, payload = _a.payload;
                var eventId = eventRegistry.registerEvent(originalEvent);
                handleEvent(eventType, payload, eventId);
            },
            onOptionsChange: onOptionsChange,
            onRequestParamsChange: onRequestParamsChange,
        };
        return preset.createVisualization(type, lineProps);
    };
    LineContainer.prototype.render = function () {
        var _this = this;
        var _a = this.props, id = _a.id, _b = _a.vizDef, type = _b.type, _c = _b.options, options = _c === void 0 ? {} : _c, _d = _b.dataSources, dataSourceBindings = _d === void 0 ? {} : _d, dataSourceDefs = _a.dataSourceDefs;
        var preset = this.context.preset;
        // line only support primary DataSource
        var primaryDataSourceId = dataSourceBindings.primary;
        var primaryDataSource;
        if (primaryDataSourceId) {
            primaryDataSource = dataSourceDefs[primaryDataSourceId];
        }
        return primaryDataSource ? (react_1.default.createElement(DataSourceConsumer_1.default, { consumerId: id, initialRequestParams: datasource_1.findInitialRequestParams({
                bindingType: 'primary',
                consumerModule: preset.findVisualization(type),
                options: options,
            }), bindingType: "primary", dataSource: primaryDataSource, dataSourceId: primaryDataSourceId }, function (_a) {
            var loading = _a.loading, requestParams = _a.requestParams, updateRequestParams = _a.updateRequestParams, data = _a.data, meta = _a.meta, error = _a.error;
            return _this.renderLine({
                loading: loading,
                dataSources: {
                    primary: {
                        requestParams: requestParams,
                        data: data,
                        meta: meta,
                        error: error,
                    },
                },
                onRequestParamsChange: function (bindingType, newRequestParams) {
                    updateRequestParams(newRequestParams);
                },
            });
        })) : (this.renderLine({
            loading: false,
            dataSources: {},
            onRequestParamsChange: function () { },
        }));
    };
    return LineContainer;
}(react_1.PureComponent));
LineContainer.propTypes = {
    mode: prop_types_1.default.string,
    id: prop_types_1.default.string,
    from: prop_types_1.default.shape({
        x: prop_types_1.default.number,
        y: prop_types_1.default.number,
    }),
    to: prop_types_1.default.shape({
        x: prop_types_1.default.number,
        y: prop_types_1.default.number,
    }),
    vizDef: prop_types_1.default.object,
    dataSourceDefs: prop_types_1.default.object,
    handleEvent: prop_types_1.default.func,
    onLineSelect: prop_types_1.default.func,
    onOptionsChange: prop_types_1.default.func,
};
LineContainer.contextType = RegistryContext_1.default;
exports.default = LineContainer;


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var isEmpty_1 = __importDefault(__webpack_require__(12));
var react_1 = __importStar(__webpack_require__(0));
var prop_types_1 = __importDefault(__webpack_require__(1));
var react_redux_1 = __webpack_require__(7);
var get_1 = __importDefault(__webpack_require__(2));
var InputLayout_1 = __importDefault(__webpack_require__(125));
var definition_1 = __webpack_require__(3);
var tokens_1 = __webpack_require__(5);
var ConnectedInputContainer_1 = __importDefault(__webpack_require__(126));
var token_1 = __webpack_require__(9);
var RegistryContext_1 = __importDefault(__webpack_require__(10));
var DashboardCoreApiContext_1 = __importDefault(__webpack_require__(42));
var shouldSubmitButtonDisable = function (state) {
    // global submit button deal with 'default' namespace
    var stashed = tokens_1.selectStashedTokens(state).default || {};
    var submitted = tokens_1.selectSubmittedTokens(state).default || {};
    // disable submit button when
    // 1. no stashed token
    // 2. stashed tokens are the same as submitted tokens, (submit is a noop in this case)
    return isEmpty_1.default(stashed) || token_1.contains(submitted, stashed);
};
var mapStateToProps = function (state) { return ({
    layout: definition_1.selectLayout(state),
    submitButtonDisabled: shouldSubmitButtonDisable(state),
}); };
var mapDispatchToProps = function (dispatch) { return ({
    onSubmitButtonClick: function () {
        dispatch(tokens_1.submitTokens('default')); // submit tokens to default namespace
    },
}); };
var renderInput = function (_a) {
    var inputId = _a.inputId, index = _a.index;
    return (react_1.default.createElement(ConnectedInputContainer_1.default, { key: inputId, id: inputId, index: index }));
};
renderInput.propTypes = {
    inputId: prop_types_1.default.string,
    index: prop_types_1.default.number,
};
var GlobalInputContainer = function (_a) {
    var layout = _a.layout, submitButtonDisabled = _a.submitButtonDisabled, onSubmitButtonClick = _a.onSubmitButtonClick;
    var apiRegistry = react_1.useContext(RegistryContext_1.default).apiRegistry;
    var dashboardCoreApi = react_1.useContext(DashboardCoreApiContext_1.default);
    var inputsRef = react_1.useRef(null);
    var globalInputsApi = react_1.useMemo(function () {
        return {
            getInputsDomElement: function () {
                return inputsRef.current;
            },
        };
    }, [inputsRef]);
    react_1.useEffect(function () {
        apiRegistry.registerGlobalInputsApi(globalInputsApi);
        return function () {
            apiRegistry.removeGlobalInputsApi();
        };
    }, [apiRegistry, globalInputsApi]);
    var submitButton = react_1.useMemo(function () { return !!get_1.default(layout, 'options.submitButton'); }, [
        layout,
    ]);
    var globalInputs = react_1.useMemo(function () { return get_1.default(layout, 'globalInputs', []); }, [
        layout,
    ]);
    return (react_1.default.createElement(InputLayout_1.default, { submitButtonDisabled: submitButtonDisabled, onSubmitButtonClick: onSubmitButtonClick, submitButton: submitButton, inputStructure: globalInputs, dashboardCoreApi: dashboardCoreApi, renderInput: renderInput, ref: inputsRef }));
};
GlobalInputContainer.propTypes = {
    layout: prop_types_1.default.object,
    onSubmitButtonClick: prop_types_1.default.func,
    submitButtonDisabled: prop_types_1.default.bool,
};
exports.default = react_redux_1.connect(mapStateToProps, mapDispatchToProps)(GlobalInputContainer);


/***/ }),
/* 125 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-layouts/InputLayout");

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_redux_1 = __webpack_require__(7);
var mode_1 = __webpack_require__(21);
var definition_1 = __webpack_require__(3);
var tokens_1 = __webpack_require__(5);
var input_1 = __webpack_require__(23);
var token_1 = __webpack_require__(9);
var sagaActions_1 = __webpack_require__(4);
var InputContainer_1 = __importDefault(__webpack_require__(127));
var editor_1 = __webpack_require__(25);
var mapStateToProps = function (state, _a) {
    var id = _a.id;
    return ({
        inputDef: token_1.replaceTokenForInput(definition_1.selectInput(state, id), tokens_1.selectSubmittedTokens(state)),
        value: input_1.selectInputValue(state, id),
        dataSourceDefs: token_1.replaceTokenForDataSources(definition_1.selectDataSourcesForInput(state, id), tokens_1.selectSubmittedTokens(state)),
        mode: mode_1.selectMode(state),
        isSelected: !!editor_1.selectSelectedItems(state).find(function (_a) {
            var type = _a.type, selectedId = _a.id;
            return type === 'input' && id === selectedId;
        }),
    });
};
var mapDispatchToProps = function (dispatch, _a) {
    var id = _a.id;
    return ({
        onValueChange: function (eventId, newValue) {
            dispatch(sagaActions_1.inputValueChanged(id, newValue, eventId));
        },
        onRemove: function (inputId) {
            dispatch(sagaActions_1.removeInput(inputId));
        },
        onSelect: function (inputId) {
            dispatch(editor_1.updateSelectedItems([{ id: inputId, type: 'input' }]));
        },
    });
};
exports.default = react_redux_1.connect(mapStateToProps, mapDispatchToProps)(InputContainer_1.default);


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(__webpack_require__(0));
var prop_types_1 = __importDefault(__webpack_require__(1));
var memoize_1 = __importDefault(__webpack_require__(36));
var DataSourceConsumer_1 = __importDefault(__webpack_require__(32));
var datasource_1 = __webpack_require__(26);
var RegistryContext_1 = __importDefault(__webpack_require__(10));
var InputContent_1 = __importDefault(__webpack_require__(128));
/**
 * Memoize input dataSources value
 */
var getInputDatasources = memoize_1.default(function (_a) {
    var requestParams = _a.requestParams, data = _a.data, meta = _a.meta, error = _a.error;
    return ({
        primary: {
            requestParams: requestParams,
            data: data !== null && data !== void 0 ? data : {},
            meta: meta !== null && meta !== void 0 ? meta : {},
            error: error,
        },
    });
}, function (dsProps) { return JSON.stringify(dsProps); });
/**
 * Input wrapper that wires up data for input content
 * @param {Object} props
 * @param {String} props.id input id
 * @param {String} props.value input value
 * @param {Object} props.inputDef input config
 * @param {Object} props.dataSourceDefs dataSource definitions
 * @param {Function} props.onValueChange callback to update input value
 * @param {Function} props.onRemove callback to remove input from definition
 * @param {String} props.mode dashboard mode - edit/view
 * @param {Function} props.onSelect callback to update the store when input is selected
 * @param {Boolean} props.isSelected indicates if input is selected
 */
var InputContainer = function (_a) {
    var id = _a.id, index = _a.index, value = _a.value, inputDef = _a.inputDef, dataSourceDefs = _a.dataSourceDefs, onValueChange = _a.onValueChange, onRemove = _a.onRemove, mode = _a.mode, onSelect = _a.onSelect, isSelected = _a.isSelected;
    var _b = react_1.useContext(RegistryContext_1.default), apiRegistry = _b.apiRegistry, eventRegistry = _b.eventRegistry, preset = _b.preset;
    var type = inputDef.type, title = inputDef.title, _c = inputDef.options, options = _c === void 0 ? {} : _c, _d = inputDef.encoding, encoding = _d === void 0 ? {} : _d, _e = inputDef.context, context = _e === void 0 ? {} : _e, _f = inputDef.dataSources, dataSourceBindings = _f === void 0 ? {} : _f;
    react_1.useEffect(function () {
        return function () {
            apiRegistry.removeInputApi(id);
            apiRegistry.removeInputActionsApi(id);
        };
    }, [apiRegistry, id]);
    var registerApi = react_1.useCallback(function (ref) {
        apiRegistry.registerInputApi(id, ref);
    }, [apiRegistry, id]);
    var registerActionsApi = react_1.useCallback(function (api) {
        apiRegistry.registerInputActionsApi(id, api);
    }, [apiRegistry, id]);
    var handleValueChange = react_1.useCallback(function (e, newValue) {
        var eventId = eventRegistry.registerEvent(e);
        onValueChange(eventId, newValue);
    }, [eventRegistry, onValueChange]);
    var inputProps = react_1.useMemo(function () { return ({
        id: id,
        key: id,
        title: title,
        value: value,
        options: options,
        context: context,
        encoding: encoding,
        inputApiRef: registerApi,
        onValueChange: handleValueChange,
        onRemove: onRemove,
        mode: mode,
        isSelected: isSelected,
    }); }, [
        id,
        title,
        value,
        options,
        context,
        encoding,
        registerApi,
        handleValueChange,
        onRemove,
        mode,
        isSelected,
    ]);
    // input only supports primary dataSource
    var primaryDataSourceId = dataSourceBindings.primary;
    var primaryDataSource = primaryDataSourceId
        ? dataSourceDefs[primaryDataSourceId]
        : null;
    var commonProps = react_1.useMemo(function () { return ({
        onSelect: onSelect,
        inputProps: inputProps,
        type: type,
        id: id,
        index: index,
    }); }, [onSelect, inputProps, type, id, index]);
    return primaryDataSource ? (react_1.default.createElement(DataSourceConsumer_1.default, { consumerId: id, initialRequestParams: datasource_1.findInitialRequestParams({
            bindingType: 'primary',
            consumerModule: preset.findInput(type),
            options: options,
        }), bindingType: "primary", dataSource: primaryDataSource, dataSourceId: primaryDataSourceId }, function (_a) {
        var loading = _a.loading, requestParams = _a.requestParams, data = _a.data, meta = _a.meta, error = _a.error, refresh = _a.refresh;
        registerActionsApi({ refresh: refresh });
        var dataSources = getInputDatasources({
            requestParams: requestParams,
            data: data,
            meta: meta,
            error: error,
        });
        return (react_1.default.createElement(InputContent_1.default, __assign({}, commonProps, { loading: loading, dataSources: dataSources })));
    })) : (react_1.default.createElement(InputContent_1.default, __assign({}, commonProps)));
};
InputContainer.propTypes = {
    id: prop_types_1.default.string,
    index: prop_types_1.default.number.isRequired,
    value: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
    inputDef: prop_types_1.default.object,
    dataSourceDefs: prop_types_1.default.object,
    onValueChange: prop_types_1.default.func,
    onRemove: prop_types_1.default.func,
    mode: prop_types_1.default.string,
    onSelect: prop_types_1.default.func,
    isSelected: prop_types_1.default.bool,
};
InputContainer.defaultProps = {
    inputDef: {},
    isSelected: false,
};
exports.default = InputContainer;


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getErrorDisabledStates = void 0;
var react_1 = __importStar(__webpack_require__(0));
var prop_types_1 = __importDefault(__webpack_require__(1));
var styled_components_1 = __importDefault(__webpack_require__(6));
var get_1 = __importDefault(__webpack_require__(2));
var pick_1 = __importDefault(__webpack_require__(16));
var isEmpty_1 = __importDefault(__webpack_require__(12));
var react_sortable_hoc_1 = __webpack_require__(129);
var token_1 = __webpack_require__(9);
var RegistryContext_1 = __importDefault(__webpack_require__(10));
var Wrapper = styled_components_1.default.div.attrs(function () { return ({
    'data-test': 'input-item',
}); })(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    display: inline-block;\n    // need to set z-index in order to make the react-sortable-hoc work https://github.com/clauderic/react-sortable-hoc/issues/87\n    // not sure what exactly caused the issue, but seems 100 is the minimum number to make it work\n    z-index: 100;\n"], ["\n    display: inline-block;\n    // need to set z-index in order to make the react-sortable-hoc work https://github.com/clauderic/react-sortable-hoc/issues/87\n    // not sure what exactly caused the issue, but seems 100 is the minimum number to make it work\n    z-index: 100;\n"])));
/**
 * compute isError, errorMessage, isDisabled, disabledMessage based on whether
 * primary dataSource contains error (level: info/error)
 * @method getErrorDisabledStates
 * @param {Object} inputData
 * @param {Object} inputData.dataSources dataSources containing primary dataSource
 * @returns {Object}
 */
var getErrorDisabledStates = function (_a) {
    var dataSources = _a.dataSources;
    var errorLevel = get_1.default(dataSources, 'primary.error.level');
    var message = get_1.default(dataSources, 'primary.error.message', '');
    // Search is waiting for unresolved tokens
    if (errorLevel === token_1.ERROR_LEVEL_INFO) {
        return {
            isDisabled: true,
            disabledMessage: message || token_1.WAITING_FOR_INPUT_MSG,
        };
    }
    if (errorLevel === token_1.ERROR_LEVEL_ERROR) {
        return { isError: true, errorMessage: message };
    }
    return {};
};
exports.getErrorDisabledStates = getErrorDisabledStates;
/**
 * Display input content
 * @param {Object} props
 * @param {Object} props.inputProps props required by the input to render
 * @param {Boolean} props.loading indicates whether datasource is still fetching data and hasn't had an error
 * @param {Object} props.dataSources primary dataSource (if any) used by the input
 * @param {String} props.id input id
 * @param {String} props.type input type
 * @param {Function} props.onSelect callback to update the store when input is selected
 */
var InputContent = function (_a) {
    var inputProps = _a.inputProps, loading = _a.loading, dataSources = _a.dataSources, type = _a.type, id = _a.id, onSelect = _a.onSelect;
    var preset = react_1.useContext(RegistryContext_1.default).preset;
    var input = preset.findInput(type);
    var inputStaticDef = pick_1.default(inputProps, ['options', 'context']);
    // check whether the input dataSource contains search errors
    var _b = react_1.useMemo(function () {
        return exports.getErrorDisabledStates({
            dataSources: dataSources,
        });
    }, [dataSources]), _c = _b.isError, dsError = _c === void 0 ? false : _c, _d = _b.errorMessage, dsErrorMessage = _d === void 0 ? '' : _d, _e = _b.isDisabled, isDisabled = _e === void 0 ? false : _e, _f = _b.disabledMessage, disabledMessage = _f === void 0 ? '' : _f;
    // check whether the static input config (options/context) contain validation errors
    var inputErrorMessages = react_1.useMemo(function () {
        var validate = get_1.default(input, 'validate');
        return typeof validate === 'function'
            ? validate(inputStaticDef)
            : { errorMessages: [] };
    }, [inputStaticDef, input]).errorMessages;
    // Generate final props passed to input
    var props = react_1.useMemo(function () {
        return __assign(__assign({}, inputProps), { loading: loading,
            dataSources: dataSources, isError: dsError || !isEmpty_1.default(inputErrorMessages), errorMessage: dsErrorMessage || inputErrorMessages.join(' '), // TODO: refactor tooltip to display multiline errors
            isDisabled: isDisabled,
            disabledMessage: disabledMessage });
    }, [
        inputProps,
        loading,
        dsError,
        dsErrorMessage,
        inputErrorMessages,
        isDisabled,
        disabledMessage,
        dataSources,
    ]);
    var handleClick = react_1.useCallback(function () {
        onSelect(id);
    }, [id, onSelect]);
    return (react_1.default.createElement(Wrapper, { "data-input-id": id, "data-input-type": type, "data-test-selected": inputProps.isSelected, onClick: handleClick }, preset.createInput(type, props)));
};
InputContent.propTypes = {
    inputProps: prop_types_1.default.object.isRequired,
    loading: prop_types_1.default.bool,
    dataSources: prop_types_1.default.object,
    type: prop_types_1.default.string.isRequired,
    id: prop_types_1.default.string.isRequired,
    onSelect: prop_types_1.default.func,
};
InputContent.defaultProps = {
    loading: false,
    dataSources: {},
};
var SortableInputContent = react_sortable_hoc_1.SortableElement(InputContent);
SortableInputContent.displayName = 'SortableInputContent';
exports.default = SortableInputContent;
var templateObject_1;


/***/ }),
/* 129 */
/***/ (function(module, exports) {

module.exports = require("react-sortable-hoc");

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDashboardPlugin = exports.DashboardPluginWrapper = exports.validateDashboardPlugin = exports.CancellableDashboardLifecycleEvent = exports.DashboardLifecycleEvent = void 0;
var console_1 = __importDefault(__webpack_require__(11));
var DashboardLifecycleEvent_1 = __importDefault(__webpack_require__(46));
var CancellableDashboardLifecycleEvent_1 = __importDefault(__webpack_require__(131));
// Reexport these
exports.DashboardLifecycleEvent = DashboardLifecycleEvent_1.default;
exports.CancellableDashboardLifecycleEvent = CancellableDashboardLifecycleEvent_1.default;
var lifecycleCallbacks = {
    onInitialize: {},
    onEventTrigger: {},
    onLinkToUrl: {},
};
function invokePluginCallbackWithEvent(plugin, name, eventGen) {
    if (plugin && name in plugin) {
        var event_1 = eventGen();
        try {
            plugin[name](event_1);
        }
        catch (e) {
            console_1.default.error("Caught error while invoking lifecycle plugin callback " + name, e);
            event_1.error = e;
        }
        return event_1;
    }
    return null;
}
function validateDashboardPlugin(plugin) {
    if (!plugin || typeof plugin !== 'object') {
        throw new Error('Invalid lifecycle plugin provided - should be an object');
    }
    Object.keys(plugin).forEach(function (key) {
        if (!(key in lifecycleCallbacks)) {
            if (typeof plugin[key] === 'function') {
                console_1.default.warn("Unknown callback function \"" + key + "\" in lifecycle plugin");
            }
        }
        else if (lifecycleCallbacks[key].deprecated) {
            console_1.default.warn("Lifecycle plugin callback function \"" + key + "\" is DEPRECATED.");
        }
    });
    return plugin;
}
exports.validateDashboardPlugin = validateDashboardPlugin;
/**
 * A module wrap user provided plugin object
 */
var DashboardPluginWrapper = /** @class */ (function () {
    function DashboardPluginWrapper(plugin) {
        var _this = this;
        this.invokePluginCallback = function (name, payload) {
            invokePluginCallbackWithEvent(_this.plugin, name, function () { return new exports.DashboardLifecycleEvent(payload); });
        };
        this.invokeCancellablePluginCallback = function (name, payload) {
            var event = invokePluginCallbackWithEvent(_this.plugin, name, function () { return new exports.CancellableDashboardLifecycleEvent(payload); });
            return event != null ? event._cancelled : false; // eslint-disable-line
        };
        this.plugin = plugin;
    }
    return DashboardPluginWrapper;
}());
exports.DashboardPluginWrapper = DashboardPluginWrapper;
/**
 * DashboardPlugin Factory function, create a wrapped dashboard plugin
 * @param {*} plugin
 */
var createDashboardPlugin = function (plugin) {
    if (plugin === void 0) { plugin = {}; }
    return new DashboardPluginWrapper(plugin);
};
exports.createDashboardPlugin = createDashboardPlugin;


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var DashboardLifecycleEvent_1 = __importDefault(__webpack_require__(46));
/**
 * Cancellable event
 */
var CancellableDashboardLifecycleEvent = /** @class */ (function (_super) {
    __extends(CancellableDashboardLifecycleEvent, _super);
    function CancellableDashboardLifecycleEvent() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = _super.apply(this, __spread(args)) || this;
        _this._cancelled = false; // eslint-disable-line
        return _this;
    }
    CancellableDashboardLifecycleEvent.prototype.preventDefault = function () {
        this._cancelled = true; // eslint-disable-line
    };
    return CancellableDashboardLifecycleEvent;
}(DashboardLifecycleEvent_1.default));
exports.default = CancellableDashboardLifecycleEvent;


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDashboardApi = void 0;
var get_1 = __importDefault(__webpack_require__(2));
var some_1 = __importDefault(__webpack_require__(133));
var search_1 = __webpack_require__(41);
var datasource_utils_1 = __webpack_require__(134);
var DashboardDefinition_1 = __importDefault(__webpack_require__(17));
var definition_1 = __webpack_require__(3);
var sagaActions_1 = __webpack_require__(4);
var tokens_1 = __webpack_require__(5);
var snapshot_1 = __webpack_require__(135);
var token_1 = __webpack_require__(9);
var fullscreen_1 = __webpack_require__(31);
var DashboardCoreApi = /** @class */ (function () {
    function DashboardCoreApi(_a) {
        var store = _a.store, apiRegistry = _a.apiRegistry, dataSourceRegistry = _a.dataSourceRegistry;
        this.store = store;
        this.apiRegistry = apiRegistry;
        this.dataSourceRegistry = dataSourceRegistry;
    }
    /**
     * Update dashboard definition
     * @param {Object} definition dashboard definition
     */
    DashboardCoreApi.prototype.updateDefinition = function (definition) {
        this.store.dispatch(definition_1.updateDefinition(definition));
    };
    /**
     * Set token bindings
     * @param {Object} tokenBindingsConfig
     * @param {Object} tokenBindingsConfig.tokenBindings token bindings
     * @param {String} [tokenBindingsConfig.namespace = 'default'] - namespace for token bindings
     * @public
     */
    DashboardCoreApi.prototype.setTokenBindings = function (_a) {
        var tokenBindings = _a.tokenBindings, _b = _a.namespace, namespace = _b === void 0 ? 'default' : _b;
        this.store.dispatch(tokens_1.setToken(tokenBindings, namespace));
    };
    /**
     * Unset token binding
     * @param {Object} tokenBindingConfig
     * @param {String} tokenBindingConfig.tokenName token name
     * @param {String} [tokenBindingConfig.namespace = 'default'] - namespace for token bindings
     * @public
     */
    DashboardCoreApi.prototype.unsetTokenBinding = function (_a) {
        var tokenName = _a.tokenName, _b = _a.namespace, namespace = _b === void 0 ? 'default' : _b;
        this.store.dispatch(tokens_1.unsetToken(tokenName, namespace));
    };
    /**
     * @returns {Promise} A Promise that resolves to layoutApi object
     */
    DashboardCoreApi.prototype.isLayoutApiReady = function () {
        var _this = this;
        return new Promise(function (resolve) {
            // If the LayoutApi is ready just instantly resolve the promise
            if (_this.apiRegistry.getLayoutApi()) {
                resolve(_this.apiRegistry.getLayoutApi());
            }
            _this.apiRegistry.onLayoutApiReady = function () {
                return resolve(_this.apiRegistry.getLayoutApi());
            };
        });
    };
    /**
     * createVisualization
     * @param {*} param0
     */
    DashboardCoreApi.prototype.createVisualization = function (_a) {
        var visualizationId = _a.visualizationId, visualizationDefinition = _a.visualizationDefinition, _b = _a.layoutItemType, layoutItemType = _b === void 0 ? 'block' : _b, dataSourceType = _a.dataSourceType, dataSourceDefinition = _a.dataSourceDefinition;
        this.store.dispatch(sagaActions_1.createVisualization({
            visualizationId: visualizationId,
            visualizationDefinition: visualizationDefinition,
            layoutItemType: layoutItemType,
            dataSourceType: dataSourceType,
            dataSourceDefinition: dataSourceDefinition,
        }));
    };
    /**
     * clone one or more existing visualizations
     * @method cloneVisualization
     * @param {Object} config
     * @param {Array} config.from Original VizIds
     * @param {Array} config.to Ids for cloned viz
     * @param {Number} [config.offsetMultiplier=1] Multiplier to offset cloned vis
     */
    DashboardCoreApi.prototype.cloneVisualizations = function (_a) {
        var from = _a.from, to = _a.to, _b = _a.offsetMultiplier, offsetMultiplier = _b === void 0 ? 1 : _b;
        this.store.dispatch(sagaActions_1.cloneVisualizations({ from: from, to: to, offsetMultiplier: offsetMultiplier }));
    };
    /**
     * remove visualizations
     * @param {*} vizIds
     */
    DashboardCoreApi.prototype.removeVisualizations = function (vizIds) {
        this.store.dispatch(sagaActions_1.removeVisualizations(vizIds));
    };
    /**
     * Update a visualization definition
     * @param {Object} options
     * @param {String} options.id   visualization id
     * @param {Object} options.vizDefinition    visualization definition
     */
    DashboardCoreApi.prototype.updateVisualization = function (_a) {
        var id = _a.id, vizDefinition = _a.vizDefinition;
        this.store.dispatch(definition_1.updateVisualization({
            id: id,
            vizDefinition: vizDefinition,
        }));
    };
    /**
     * Remove a dataSource from a visualization definition
     * @param {Object} options
     * @param {String} options.vizId    visualization id
     * @param {String} options.dsBindingType    dataSource binding type, such as 'primary' or 'annotation'
     */
    DashboardCoreApi.prototype.removeDataSourceFromVisualization = function (_a) {
        var vizId = _a.vizId, dsBindingType = _a.dsBindingType;
        this.store.dispatch(definition_1.removeDataSourceFromVisualization({
            vizId: vizId,
            dsBindingType: dsBindingType,
        }));
    };
    /**
     * get dashboard global inputs dom element
     */
    DashboardCoreApi.prototype.getInputsDomElement = function () {
        var globalInputsApi = this.apiRegistry.getGlobalInputsApi();
        return globalInputsApi ? globalInputsApi.getInputsDomElement() : null;
    };
    /**
     * get dashboard canvas dom element
     */
    DashboardCoreApi.prototype.getCanvasDomElement = function () {
        var layoutApi = this.apiRegistry.getLayoutApi();
        return layoutApi ? layoutApi.getCanvasDomElement() : null;
    };
    /**
     * get visualization dom element
     * @param {*} vizId
     */
    DashboardCoreApi.prototype.getVisualizationDomElement = function (vizId) {
        var vizActionsApi = this.apiRegistry.getVisualizationApi(vizId);
        if (vizActionsApi && vizActionsApi.getDomElement) {
            return vizActionsApi.getDomElement();
        }
        return null;
    };
    /**
     * pause all data sources
     */
    DashboardCoreApi.prototype.pauseAllDataSources = function () {
        this.dataSourceRegistry.pauseDataSources();
    };
    /**
     * get data source metadata
     * @param {*} dataSourceId data source id
     */
    DashboardCoreApi.prototype.getDataSourceMetaData = function (dataSourceId) {
        var state = this.store.getState();
        var dataSources = token_1.replaceTokenForDataSources(definition_1.selectDataSources(state), tokens_1.selectSubmittedTokens(state));
        var dataSourceDef = dataSources[dataSourceId];
        var dataSourceController = dataSourceDef
            ? this.dataSourceRegistry.getDataSourceController(dataSourceDef)
            : null;
        return dataSourceController
            ? dataSourceController.getDataSourceMetaData()
            : {};
    };
    /**
     * return visualization ids in order
     */
    DashboardCoreApi.prototype.getVisualizationOrder = function () {
        var layoutApi = this.apiRegistry.getLayoutApi();
        if (layoutApi) {
            return layoutApi.getLayoutItemOrder();
        }
        return null;
    };
    /**
     * adjust visualization order, this will produce a new definition
     */
    DashboardCoreApi.prototype.adjustVisualizationOrder = function (fromIdx, toIdx) {
        this.store.dispatch(sagaActions_1.adjustVisualizationOrder(fromIdx, toIdx));
    };
    /**
     * take snapshot of current dashboard.
     * @returns {Object} The dashboard snapshot object.
     */
    DashboardCoreApi.prototype.takeSnapshotSync = function () {
        var state = this.store.getState();
        var definition = definition_1.selectDefinition(state);
        var tokens = tokens_1.selectSubmittedTokens(state);
        return snapshot_1.assembleSnapshot({
            definition: definition,
            tokens: tokens,
            apiRegistry: this.apiRegistry,
            dataSourceRegistry: this.dataSourceRegistry,
        });
    };
    /**
     * take snapshot of current dashboard.
     * Note: This is left in to be backwards compatible with the legacy async API.
     * @returns {Promise} A promise that resolves to a dashboard snapshot object.
     */
    DashboardCoreApi.prototype.takeSnapshot = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.takeSnapshotSync()];
            });
        });
    };
    /**
     * focus on a visualization
     * @param {String} vizId visualization id
     */
    DashboardCoreApi.prototype.focusOnVisualization = function (vizId) {
        var vizApi = this.apiRegistry.getVisualizationApi(vizId);
        if (vizApi && vizApi.focus) {
            vizApi.focus();
        }
    };
    /**
     * refresh all searches associated with the given visualization
     * @param {String} vizId visualization id
     * @param {Boolean} checkRiskyCommand check_risky_command can be `false` to continue searches with risky commands
     */
    DashboardCoreApi.prototype.refreshVisualization = function (vizId, _a) {
        var _b = _a === void 0 ? {} : _a, checkRiskyCommand = _b.checkRiskyCommand;
        var vizActionsApi = this.apiRegistry.getVisualizationActionsApi(vizId);
        if (vizActionsApi && vizActionsApi.refresh) {
            vizActionsApi.refresh({ checkRiskyCommand: checkRiskyCommand });
        }
    };
    /**
     * refresh all searches associated with the given input
     * @param {String} inputId input id
     * @param {Boolean} checkRiskyCommand check_risky_command can be `false` to continue searches with risky commands
     */
    DashboardCoreApi.prototype.refreshInput = function (inputId, _a) {
        var _b = _a === void 0 ? {} : _a, checkRiskyCommand = _b.checkRiskyCommand;
        var inputActionsApi = this.apiRegistry.getInputActionsApi(inputId);
        if (inputActionsApi && inputActionsApi.refresh) {
            inputActionsApi.refresh({ checkRiskyCommand: checkRiskyCommand });
        }
    };
    DashboardCoreApi.prototype.toggleVisualizationFullscreen = function (vizId) {
        this.store.dispatch(fullscreen_1.toggleFullscreen(vizId));
    };
    /**
     * @returns {boolean} Boolean indicating if at least one search is running
     * i.e. status is one of 'queued', 'parsing', 'running', 'paused' or 'finalizing'.
     * @public
     */
    DashboardCoreApi.prototype.hasRunningSearches = function () {
        var snapshotSync = this.takeSnapshotSync();
        var _a = (snapshotSync === null || snapshotSync === void 0 ? void 0 : snapshotSync.snapshotDefinition).dataSources, dataSources = _a === void 0 ? {} : _a;
        return some_1.default(dataSources, function (datasource) {
            var status = get_1.default(datasource, 'state.meta.status');
            return search_1.runningSearchStatuses.includes(status);
        });
    };
    /**
     * Applies new scale to the dashboard
     * @param {Number} scale scale factor as floating point number
     * @returns {Boolean} Boolean indicating if completed successfully.
     */
    DashboardCoreApi.prototype.setScale = function (scale) {
        var layoutApi = this.apiRegistry.getLayoutApi();
        return layoutApi ? layoutApi.setScale(scale) : null;
    };
    /**
     * Increases dashboard zoom level for one step
     * @public
     */
    DashboardCoreApi.prototype.zoomIn = function () {
        var layoutApi = this.apiRegistry.getLayoutApi();
        return layoutApi ? layoutApi.zoomIn() : null;
    };
    /**
     * Decreases dashboard zoom level for one step
     * @public
     */
    DashboardCoreApi.prototype.zoomOut = function () {
        var layoutApi = this.apiRegistry.getLayoutApi();
        return layoutApi ? layoutApi.zoomOut() : null;
    };
    /**
     * Adjusts dashboard's width to fit its parent element.
     * @public
     */
    DashboardCoreApi.prototype.fitToWidth = function () {
        var layoutApi = this.apiRegistry.getLayoutApi();
        return layoutApi ? layoutApi.fitToWidth() : null;
    };
    /**
     * @public
     * @returns {Promise} Promise that resolves to an observable that yields zoom level
     */
    DashboardCoreApi.prototype.getZoomLevel = function () {
        return __awaiter(this, void 0, void 0, function () {
            var layoutApi;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.isLayoutApiReady()];
                    case 1:
                        layoutApi = _a.sent();
                        return [2 /*return*/, layoutApi ? layoutApi.getZoomLevel() : null];
                }
            });
        });
    };
    /**
     * Get input definition given a token id
     * @param {String} tokenId
     * @returns {Object}
     * @public
     */
    DashboardCoreApi.prototype.getInputByToken = function (tokenId) {
        var state = this.store.getState();
        var definition = new DashboardDefinition_1.default(definition_1.selectDefinition(state));
        return definition.getInputByToken(tokenId);
    };
    /**
     * Add an input to the definition
     * @param {String} inputId The input id
     * @param {Object} inputDefinition The input configuration
     */
    DashboardCoreApi.prototype.addInput = function (inputId, inputDefinition) {
        this.store.dispatch(sagaActions_1.createInput({
            inputId: inputId,
            inputDefinition: inputDefinition,
        }));
    };
    /**
     * Moves input ids in the globalInputs array
     * @param {Number} from array index of the input to move
     * @param {Number} to array index of where the input should move to
     */
    DashboardCoreApi.prototype.moveInput = function (from, to) {
        this.store.dispatch(sagaActions_1.adjustInputOrder({
            from: from,
            to: to,
        }));
    };
    /**
     * remove input from definition
     * @param {String} inputId The input id to remove
     */
    DashboardCoreApi.prototype.removeInput = function (inputId) {
        this.store.dispatch(sagaActions_1.removeInput(inputId));
    };
    /**
     * Update an input definition
     * @param {Object} options
     * @param {String} options.id   input id
     * @param {Object} options.inputDefinition    input definition
     */
    DashboardCoreApi.prototype.updateInput = function (_a) {
        var id = _a.id, inputDefinition = _a.inputDefinition;
        this.store.dispatch(definition_1.updateInput({
            id: id,
            inputDefinition: inputDefinition,
        }));
    };
    /**
     * Update the layout.globalInputs section in the definition
     * @param {String[]} inputStructure input ids
     */
    DashboardCoreApi.prototype.updateInputStructure = function (inputStructure) {
        this.store.dispatch(definition_1.updateInputStructure(inputStructure));
    };
    /**
     * Fetch the complete SPL search query and query parameters of a datasource including its ancestors
     * @param {String} dataSourceId dataSource ID
     * @returns {Object} Search options including the query and query parameters
     */
    DashboardCoreApi.prototype.getCompleteSearchQueryAndParameters = function (dataSourceId) {
        var state = this.store.getState();
        var definition = DashboardDefinition_1.default.fromJSON(definition_1.selectDefinition(state));
        return datasource_utils_1.getCompleteSearchQueryAndParameters({
            definition: definition,
            dataSourceId: dataSourceId,
            getMetaData: this.getDataSourceMetaData.bind(this),
        });
    };
    /**
     * Update dashboard layout structure
     * @param {Object} layoutStructure dashboard layout structure
     */
    DashboardCoreApi.prototype.updateLayoutStructure = function (layoutStructure) {
        this.store.dispatch(definition_1.updateLayoutStructure(layoutStructure));
    };
    /**
     * Update layout options
     * @param {Object} options layout options
     */
    DashboardCoreApi.prototype.updateLayoutOptions = function (options) {
        this.store.dispatch(definition_1.updateLayoutOptions(options));
    };
    /**
     * Migrate deprecated  dashboard configuration
     */
    DashboardCoreApi.prototype.startDashboardMigration = function () {
        this.store.dispatch(sagaActions_1.migrateDashboard());
    };
    return DashboardCoreApi;
}());
exports.default = DashboardCoreApi;
var createDashboardApi = function (options) { return new DashboardCoreApi(options); };
exports.createDashboardApi = createDashboardApi;


/***/ }),
/* 133 */
/***/ (function(module, exports) {

module.exports = require("lodash/some");

/***/ }),
/* 134 */
/***/ (function(module, exports) {

module.exports = require("@splunk/datasource-utils");

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.assembleSnapshot = void 0;
var pick_1 = __importDefault(__webpack_require__(16));
var each_1 = __importDefault(__webpack_require__(19));
var cloneDeep_1 = __importDefault(__webpack_require__(28));
var uniqueId_1 = __importDefault(__webpack_require__(136));
var get_1 = __importDefault(__webpack_require__(2));
var isFunction_1 = __importDefault(__webpack_require__(20));
var assembleSnapshot = function (_a) {
    var definition = _a.definition, _b = _a.tokens, tokens = _b === void 0 ? {} : _b, dataSourceRegistry = _a.dataSourceRegistry, apiRegistry = _a.apiRegistry;
    var snapshotDefinition = cloneDeep_1.default(definition);
    var dataSourceSnapshot = dataSourceRegistry.snapshot();
    // replace data source by a special type of data source which holds the search result. By doing this the definition becomes self-contained.
    var dsDefs = {};
    each_1.default(snapshotDefinition.visualizations, function (vizDef, vizId) {
        var dataSources = get_1.default(vizDef, 'dataSources', {});
        var newBindings = {};
        each_1.default(dataSources, function (dsId, dsType) {
            var dsDef = get_1.default(snapshotDefinition, ['dataSources', dsId], {});
            var dsState = get_1.default(dataSourceSnapshot, [dsId, vizId], {});
            var newDsId = uniqueId_1.default('ds_');
            dsDefs[newDsId] = __assign(__assign({}, dsDef), { state: __assign({}, pick_1.default(dsState, ['requestParams', 'meta', 'error'])) });
            newBindings[dsType] = newDsId;
        });
        snapshotDefinition.visualizations[vizId].dataSources = newBindings;
        // get snapshot of each visualization if applicable
        var vizApi = apiRegistry.getVisualizationApi(vizId);
        if (vizApi && isFunction_1.default(vizApi.snapshot)) {
            snapshotDefinition.visualizations[vizId] = __assign(__assign({}, snapshotDefinition.visualizations[vizId]), vizApi.snapshot());
        }
    });
    snapshotDefinition.dataSources = dsDefs;
    // replace background image with encoding
    var layoutApi = apiRegistry.getLayoutApi();
    if (layoutApi && isFunction_1.default(layoutApi.snapshot)) {
        snapshotDefinition.layout = __assign(__assign({}, snapshotDefinition.layout), layoutApi.snapshot());
    }
    // remove inputs
    delete snapshotDefinition.inputs;
    delete snapshotDefinition.layout.globalInputs;
    // remove submit button
    if (snapshotDefinition.layout.options) {
        delete snapshotDefinition.layout.options.submitButton;
    }
    var snapshot = {
        snapshotDefinition: snapshotDefinition,
        tokens: tokens,
    };
    return snapshot;
};
exports.assembleSnapshot = assembleSnapshot;


/***/ }),
/* 136 */
/***/ (function(module, exports) {

module.exports = require("lodash/uniqueId");

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTokensWithUrl = void 0;
var react_1 = __webpack_require__(0);
var isEqual_1 = __importDefault(__webpack_require__(14));
var isEmpty_1 = __importDefault(__webpack_require__(12));
var react_redux_1 = __webpack_require__(7);
var useEventCallback_1 = __importDefault(__webpack_require__(138));
var dashboard_utils_1 = __webpack_require__(18);
var definition_1 = __webpack_require__(3);
var input_1 = __webpack_require__(23);
var tokens_1 = __webpack_require__(5);
var input_2 = __webpack_require__(35);
var useTokensWithUrl = function (_a) {
    var preset = _a.preset;
    var dispatch = react_redux_1.useDispatch();
    var inputDefs = react_redux_1.useSelector(definition_1.selectInputs);
    var tokens = react_redux_1.useSelector(tokens_1.selectSubmittedTokens);
    // On popstate we get the new tokens from the url
    // and dispatch setInputState and setToken
    var handlePopState = useEventCallback_1.default(function () {
        var newTokens = dashboard_utils_1.mapURLToTokens({
            search: dashboard_utils_1.getWindowLocationSearch(),
        });
        if (!isEqual_1.default(tokens.default, newTokens.default)) {
            dispatch(input_1.setInputState(input_2.createInputState({
                currentInputState: {},
                inputDefs: inputDefs,
                submittedTokens: newTokens,
                preset: preset,
            })));
            dispatch(tokens_1.setToken(newTokens.default));
        }
    });
    // Listen for the popstate event
    react_1.useEffect(function () {
        window.addEventListener('popstate', handlePopState);
        return function () {
            window.removeEventListener('popstate', handlePopState);
        };
    }, [handlePopState]);
    // When tokens change push a new history item
    react_1.useEffect(function () {
        if (isEmpty_1.default(tokens === null || tokens === void 0 ? void 0 : tokens.default)) {
            return undefined;
        }
        var search = dashboard_utils_1.getWindowLocationSearch();
        var searchWithTokens = dashboard_utils_1.mapTokensToURL({
            search: search,
            tokens: tokens,
        });
        if (search !== "?" + searchWithTokens) {
            var url = new URL(window.location.href);
            url.search = searchWithTokens;
            window.history.pushState({}, '', url.toString());
        }
        return undefined;
    }, [tokens]);
};
exports.useTokensWithUrl = useTokensWithUrl;
exports.default = exports.useTokensWithUrl;


/***/ }),
/* 138 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-ui/hooks/useEventCallback");

/***/ })
/******/ ]);
//# sourceMappingURL=DashboardCore.js.map