import type { Subscriber } from 'rxjs';
import type { JSONCols } from 'dashboard-types';
import { DataSet } from '@splunk/datasource-utils';
import type { Meta, Status, ErrorLevel, ObservableData, RequestParams } from './types';
import DataSource from './DataSource';
export interface TestDataSourceOptions {
    data?: JSONCols;
    meta?: Meta;
    delay?: number;
    timeToStart?: number;
    errorLevel?: ErrorLevel;
    error?: string;
    timeToComplete?: number;
    increments?: number;
}
/**
 * @class TestDataSource
 */
export default class TestDataSource extends DataSource {
    /**
     * List of valid configuration options
     * @static
     */
    static schema: {
        data: {
            type: string;
        };
        vizOptions: {
            type: string;
        };
        meta: {
            type: string;
        };
        errorLevel: {
            type: string;
            enum: string[];
        };
        error: {
            type: string;
        };
        delay: {
            type: string;
        };
        timeToStart: {
            type: string;
        };
        timeToComplete: {
            type: string;
        };
        increments: {
            type: string;
        };
    };
    static config: {
        optionsSchema: {
            data: {
                type: string;
            };
            vizOptions: {
                type: string;
            };
            meta: {
                type: string;
            };
            errorLevel: {
                type: string;
                enum: string[];
            };
            error: {
                type: string;
            };
            delay: {
                type: string;
            };
            timeToStart: {
                type: string;
            };
            timeToComplete: {
                type: string;
            };
            increments: {
                type: string;
            };
        };
    };
    readonly data: JSONCols;
    readonly meta: Meta;
    readonly timeToStart: number;
    readonly errorLevel?: ErrorLevel;
    readonly error?: string;
    readonly timePerUpdate: number;
    readonly incrementSize: number;
    progress: number;
    status: Status;
    /**
     * Test Datasource
     * @param {Object} options.data static data set
     * @param {Number} [options.delay=0] time before first results return (deprecated)
     * @param {Object} [options.meta] Return meta, merged with search progress
     * @param {*} [options.errorLevel] Passthrough data for errors
     * @param {String} [options.error] Passthrough error message - Set to create an erroring datasource
     * @param {Number} [options.timeToStart=0] time before first results return (same as delay)
     * @param {Number} [options.timeToComplete=0] time before all results return (same as delay)
     * @param {Number} [options.timeToStart=0] time before results return (same as delay)
     * @param {Number} [options.increments=10] Number of times to return partial results after initial delay
     * @param {Object} context
     */
    constructor(options?: TestDataSourceOptions, context?: {});
    /**
     * Create a DataSet
     * @param {Object} [config]
     * @param {Array} [config.fields=[]] List of field names
     * @param {Array[]} [config.columns=[]] List of column data
     * @return {DataSet}
     */
    toDataSet({ fields, columns }: JSONCols): DataSet;
    /**
     * Calculate the partial results for a dataset
     * @returns {DataSet}
     */
    getData(requestParams?: RequestParams): DataSet;
    /**
     * Calculate the content of meta
     * @return {Object}
     */
    getMeta(): Meta;
    /**
     * Creates loop to request and return results
     * @return {Function} Given an observable, schedule data updates over time
     */
    request(requestParams?: RequestParams): (observer?: Subscriber<ObservableData> | undefined) => (() => void);
}
//# sourceMappingURL=TestDataSource.d.ts.map