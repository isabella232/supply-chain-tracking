{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/DataSource.ts","webpack:///external \"lodash/isEqual\"","webpack:///external \"@splunk/datasource-utils\"","webpack:///external \"lodash/isEmpty\"","webpack:///external \"@splunk/dashboard-utils/deprecated\"","webpack:///./src/SnapshotDataSource.ts"],"names":[],"mappings":"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","file":"SnapshotDataSource.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 34);\n","/* eslint-disable class-methods-use-this,no-unused-vars, @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function */\nimport isEqual from 'lodash/isEqual';\nimport isEmpty from 'lodash/isEmpty';\nimport type { ExtendableDataSourceDefinition } from '@splunk/dashboard-types';\nimport type { Observable, Subscriber, Observer } from 'rxjs';\nimport deprecated from '@splunk/dashboard-utils/deprecated';\nimport type { RequestParams, ObservableData } from './types';\n\n/**\n * Base class of a DataSource\n */\nexport default class DataSource {\n    options: Record<string, unknown>;\n\n    context: Record<string, unknown>;\n\n    // deprecated property\n    meta: Record<string, unknown>;\n\n    // deprecated property\n    baseChainModel: Record<string, ExtendableDataSourceDefinition>;\n\n    /**\n     * Create a new DataSource Instance\n     * @param {Object} options DataSource options such as search string, earliest/latest time\n     * @param {Object} context contextual information such as api key or scope\n     * @param {Object} meta metadata of this datasource\n     * @param {Object} baseChainModel base chain definition\n     */\n    constructor(options = {}, context = {}, meta = {}, baseChainModel = {}) {\n        this.options = options;\n        this.context = context;\n        this.meta = meta;\n        this.baseChainModel = baseChainModel;\n        if (!isEmpty(meta)) {\n            deprecated('Property \"meta\" has been deprecated');\n        }\n        if (!isEmpty(baseChainModel)) {\n            deprecated('Property \"baseChainModel\" has been deprecated');\n        }\n    }\n\n    /**\n     * setup the DataSource, this is the place where you can setup your connection or create the search job.\n     * setup will be called only once per DataSource.\n     * @return {Promise}\n     * @public\n     */\n    setup(): Promise<string | null> {\n        return Promise.resolve(null);\n    }\n\n    /**\n     * Request a Data Stream represent by an Observable.\n     * Once the Observable was created and returned,\n     * it's the DataSource itself responsible for 'pushing' the data out via Observable.next() function.\n     * Override this function to implement your own data fetching logic.\n     *\n     * @param {Object} [requestParams] RequestParams\n     * @param {Number} [requestParams.offset] result offset\n     * @param {Number} [requestParams.count] result count, use with offset to return data in pages\n     * @param {Object} [requestParams.sort] result sorting, key indicate the sorting fields and value must be one of ['none', 'asc', 'desc']\n     * @param {Boolean} [requestParams.requireTotalCount] true if TotalCount is required in meta\n     * @param {Boolean} [requestParams.progress] true to emit progress data, false to only return data when search is finalized\n     * @return {Observable}\n     * @public\n     */\n    request(\n        requestParams?: RequestParams\n    ):\n        | Observable<ObservableData>\n        | ((observer?: Subscriber<ObservableData>) => () => void) {\n        return (observer) => {\n            if (observer) {\n                observer.complete();\n            }\n            return () => {\n                // cleanup\n            };\n        };\n    }\n\n    /**\n     * teardown the DataSource, clear up connection or other resources\n     * @return {Promise}\n     * @public\n     */\n    teardown(): Promise<null> {\n        return Promise.resolve(null);\n    }\n\n    /**\n     * @param {DataSource} another another DataSource to compare with\n     * @return {Boolean} true if the these two DataSources are considered equal.\n     * @public\n     */\n    equals(another: InstanceType<typeof DataSource>): boolean {\n        return (\n            this.constructor === another.constructor &&\n            isEqual(this.options, another.options)\n        );\n    }\n\n    /**\n     * return an observer that can be used to chain with other data source\n     * @return {Object}\n     * @public\n     */\n    getObserver(): Observer<ObservableData> {\n        return {\n            next({ requestParams, data, meta }) {\n                // next\n            },\n            error({ level, message }) {\n                // error\n            },\n            complete() {\n                // complete\n            },\n        };\n    }\n\n    /**\n     * flag used to show if the subscription for this data source should be refresh\n     * @return {Boolean}\n     * @public\n     */\n    shouldRefreshSubscription(): boolean {\n        return false;\n    }\n}\n","module.exports = require(\"lodash/isEqual\");","module.exports = require(\"@splunk/datasource-utils\");","module.exports = require(\"lodash/isEmpty\");","module.exports = require(\"@splunk/dashboard-utils/deprecated\");","import { DataSet } from '@splunk/datasource-utils';\nimport type { JSONCols } from '@splunk/dashboard-types';\nimport type { Subscriber } from 'rxjs';\nimport type { Meta, ObservableData, RequestParams, ErrorLevel } from './types';\nimport DataSource from './DataSource';\n\nexport interface Options {\n    data?: JSONCols;\n    meta?: Meta;\n    delay?: number;\n    errorLevel?: ErrorLevel;\n    error?: string;\n}\n\nexport default class SnapshotDataSource extends DataSource {\n    data: DataSet;\n\n    delay: number;\n\n    meta: Meta;\n\n    errorLevel?: ErrorLevel;\n\n    error?: string;\n\n    constructor(options: Options = {}, context = {}) {\n        super(options, context);\n        if (options.data) {\n            this.data = DataSet.fromJSONCols(\n                options.data.fields,\n                options.data.columns\n            );\n        } else {\n            this.data = DataSet.fromJSONCols([], []);\n        }\n        this.meta = options.meta ?? {};\n        this.delay = options.delay ?? 0;\n        this.errorLevel = options.errorLevel;\n        this.error = options.error;\n    }\n\n    request(requestParams?: RequestParams) {\n        return (observer?: Subscriber<ObservableData>): (() => void) => {\n            let timer: ReturnType<typeof setTimeout>;\n            if (observer) {\n                if (this.error) {\n                    observer.error({\n                        level: this.errorLevel,\n                        message: this.error,\n                    });\n                    return () => undefined;\n                }\n\n                timer = setTimeout(() => {\n                    observer.next({\n                        data: this.data.getPage({\n                            count: requestParams?.count,\n                            offset: requestParams?.offset,\n                        }),\n                        meta: {\n                            ...this.meta,\n                            totalCount: this.data.getTotalCount(),\n                        },\n                    });\n                    observer.complete();\n                }, this.delay);\n            }\n\n            return () => {\n                clearTimeout(timer);\n            };\n        };\n    }\n}\n"],"sourceRoot":""}