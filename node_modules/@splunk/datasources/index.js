/*!
 * Copyright © 2020 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 42);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable class-methods-use-this,no-unused-vars, @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function */
var isEqual_1 = __importDefault(__webpack_require__(1));
var isEmpty_1 = __importDefault(__webpack_require__(2));
var deprecated_1 = __importDefault(__webpack_require__(3));
/**
 * Base class of a DataSource
 */
var DataSource = /** @class */ (function () {
    /**
     * Create a new DataSource Instance
     * @param {Object} options DataSource options such as search string, earliest/latest time
     * @param {Object} context contextual information such as api key or scope
     * @param {Object} meta metadata of this datasource
     * @param {Object} baseChainModel base chain definition
     */
    function DataSource(options, context, meta, baseChainModel) {
        if (options === void 0) { options = {}; }
        if (context === void 0) { context = {}; }
        if (meta === void 0) { meta = {}; }
        if (baseChainModel === void 0) { baseChainModel = {}; }
        this.options = options;
        this.context = context;
        this.meta = meta;
        this.baseChainModel = baseChainModel;
        if (!isEmpty_1.default(meta)) {
            deprecated_1.default('Property "meta" has been deprecated');
        }
        if (!isEmpty_1.default(baseChainModel)) {
            deprecated_1.default('Property "baseChainModel" has been deprecated');
        }
    }
    /**
     * setup the DataSource, this is the place where you can setup your connection or create the search job.
     * setup will be called only once per DataSource.
     * @return {Promise}
     * @public
     */
    DataSource.prototype.setup = function () {
        return Promise.resolve(null);
    };
    /**
     * Request a Data Stream represent by an Observable.
     * Once the Observable was created and returned,
     * it's the DataSource itself responsible for 'pushing' the data out via Observable.next() function.
     * Override this function to implement your own data fetching logic.
     *
     * @param {Object} [requestParams] RequestParams
     * @param {Number} [requestParams.offset] result offset
     * @param {Number} [requestParams.count] result count, use with offset to return data in pages
     * @param {Object} [requestParams.sort] result sorting, key indicate the sorting fields and value must be one of ['none', 'asc', 'desc']
     * @param {Boolean} [requestParams.requireTotalCount] true if TotalCount is required in meta
     * @param {Boolean} [requestParams.progress] true to emit progress data, false to only return data when search is finalized
     * @return {Observable}
     * @public
     */
    DataSource.prototype.request = function (requestParams) {
        return function (observer) {
            if (observer) {
                observer.complete();
            }
            return function () {
                // cleanup
            };
        };
    };
    /**
     * teardown the DataSource, clear up connection or other resources
     * @return {Promise}
     * @public
     */
    DataSource.prototype.teardown = function () {
        return Promise.resolve(null);
    };
    /**
     * @param {DataSource} another another DataSource to compare with
     * @return {Boolean} true if the these two DataSources are considered equal.
     * @public
     */
    DataSource.prototype.equals = function (another) {
        return (this.constructor === another.constructor &&
            isEqual_1.default(this.options, another.options));
    };
    /**
     * return an observer that can be used to chain with other data source
     * @return {Object}
     * @public
     */
    DataSource.prototype.getObserver = function () {
        return {
            next: function (_a) {
                var requestParams = _a.requestParams, data = _a.data, meta = _a.meta;
                // next
            },
            error: function (_a) {
                var level = _a.level, message = _a.message;
                // error
            },
            complete: function () {
                // complete
            },
        };
    };
    /**
     * flag used to show if the subscription for this data source should be refresh
     * @return {Boolean}
     * @public
     */
    DataSource.prototype.shouldRefreshSubscription = function () {
        return false;
    };
    return DataSource;
}());
exports.default = DataSource;


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("lodash/isEqual");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("lodash/isEmpty");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-utils/deprecated");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("lodash/get");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("@splunk/ui-utils/i18n");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("rxjs");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("lodash/pick");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = require("@splunk/datasource-utils/DataSet");

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = require("@splunk/splunk-utils/config");

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = require("@splunk/moment");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var isNumber_1 = __importDefault(__webpack_require__(17));
/**
 * A Simple task scheduler
 */
var SimpleScheduler = /** @class */ (function () {
    /**
     *
     * @param {*} tickFunc a function that will be executed by scheduler, its return value will be used to schedule next execution.
     * return false from this function will stop the execution
     * @param {*} options
     */
    function SimpleScheduler(tickFunc, options) {
        if (tickFunc === void 0) { tickFunc = function () { }; }
        if (options === void 0) { options = {}; }
        this.tickFunc = tickFunc;
        this.minDelay = options.minDelay || 0;
        this.loop = this.loop.bind(this);
        this.t = null;
        this.stopped = false;
    }
    SimpleScheduler.createScheduler = function (tickFunc, options) {
        return new SimpleScheduler(tickFunc, options);
    };
    /**
     * execute tick function and stop next execution if error catched
     */
    SimpleScheduler.prototype.tick = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.tickFunc()];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        ex_1 = _a.sent();
                        return [2 /*return*/, false];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * start scheduler
     */
    SimpleScheduler.prototype.start = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.stopped = false;
                        return [4 /*yield*/, this.loop()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    SimpleScheduler.prototype.loop = function () {
        return __awaiter(this, void 0, void 0, function () {
            var delay;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.tick()];
                    case 1:
                        delay = _a.sent();
                        if (!this.stopped && delay !== false && isNumber_1.default(delay)) {
                            this.t = setTimeout(this.loop, Math.max(this.minDelay, delay));
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * stop scheduler
     */
    SimpleScheduler.prototype.stop = function () {
        this.stopped = true;
        if (this.t) {
            clearTimeout(this.t);
            this.t = null;
        }
    };
    return SimpleScheduler;
}());
exports.default = SimpleScheduler;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultOptionsForSearchQuery = void 0;
var memoize_1 = __importDefault(__webpack_require__(19));
var DashboardDefinition_1 = __importDefault(__webpack_require__(20));
exports.getDefaultOptionsForSearchQuery = memoize_1.default(function (definition) {
    var def = DashboardDefinition_1.default.fromJSON(definition);
    var timeRange = def.getDefaultTimeRangeForNewSearch();
    if (timeRange.earliest || timeRange.latest) {
        return {
            queryParameters: __assign({}, timeRange),
        };
    }
    return {};
}, 
// note: this is the resolver function that uses a dirty trick to avoid re-creating the object
function (definition) {
    var def = DashboardDefinition_1.default.fromJSON(definition);
    var timeRange = def.getDefaultTimeRangeForNewSearch();
    return JSON.stringify(timeRange);
});


/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = require("@splunk/datasource-utils");

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-utils/console");

/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = require("@splunk/search-job");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEnterpriseSearchContext = exports.previewFetchPredicate = exports.transformObserver = exports.combineResultWhenFinalized = exports.combineResultWhenProgress = exports.projectFunc = exports.getStatusMessage = void 0;
var pick_1 = __importDefault(__webpack_require__(7));
var get_1 = __importDefault(__webpack_require__(4));
var rxjs_1 = __webpack_require__(6);
var i18n_1 = __webpack_require__(5);
var DataSet_1 = __importDefault(__webpack_require__(8));
var moment_1 = __importDefault(__webpack_require__(10));
var config_1 = __webpack_require__(9);
/**
 * Get status message based on search job properties
 * @param {String} status the status returned by the search job
 * @param {Boolean} isRealTimeSearch
 * @param {Number} totalCount the total number of search results retrieved
 * @returns {String} status message
 */
var getStatusMessage = function (_a) {
    var status = _a.status, isRealTimeSearch = _a.isRealTimeSearch, totalCount = _a.totalCount;
    if (status === 'running') {
        if (isRealTimeSearch) {
            return i18n_1._('Real-time search is running');
        }
        if (totalCount === 0) {
            return i18n_1._('Search is running, but not enough data to render visualization');
        }
    }
    if (status === 'queued') {
        return i18n_1._('Search is not yet running, queued on server');
    }
    if (status === 'parsing') {
        return i18n_1._('Search is not yet running, queued on server');
    }
    if (status === 'done' && totalCount === 0) {
        return i18n_1._('Search ran successfully, but no results were returned');
    }
    return '';
};
exports.getStatusMessage = getStatusMessage;
// this is a list of properties that will be removed or normalized in the future. Refer to the RFC 2020_05_05-search_job_metadata.md
var deprecatedSearchMetas = ['resultCount', 'isDone', 'dispatchState'];
/**
 * Formats the results of a Splunk SearchJob to use in UDF
 * @param {Object} results search results object
 * @param {Object} progress search progress object
 * @param {String} search search query
 * @returns {Object} Formatted data and metadata
 */
var projectFunc = function (results, progress, search) {
    var fields = results.fields, columns = results.columns, postProcessCount = results.post_process_count;
    var _a = progress.content, isRealTimeSearch = _a.isRealTimeSearch, resultPreviewCount = _a.resultPreviewCount, resultCount = _a.resultCount;
    // totalCount is required for pagination.
    var totalCount;
    if (postProcessCount != null) {
        // for post process searches, the totalCount is post_process_count in the results, NOT the resultPreviewCount/resultCount in the jobProperties.
        totalCount = postProcessCount;
    }
    else if (resultPreviewCount != null) {
        // we look at resultPreviewCount since that is always set when preview = true.
        // when search job is done, resultPreviewCount can be null,
        // see https://splunk.slack.com/archives/C8YPWKC4U/p1591290195175900 for more context.
        totalCount = resultPreviewCount;
    }
    else {
        totalCount = resultCount;
    }
    var status = progress.content.dispatchState.toLowerCase();
    return {
        data: new DataSet_1.default(fields, columns),
        meta: __assign(__assign({}, pick_1.default(progress.content, deprecatedSearchMetas)), { sid: progress.content.sid, totalCount: totalCount,
            status: status, statusMessage: exports.getStatusMessage({
                status: status,
                isRealTimeSearch: isRealTimeSearch,
                totalCount: totalCount,
            }), 
            // need to manually convert progress from [0, 1] to [0, 100]
            percentComplete: status === 'done'
                ? 100
                : Math.round(progress.content.doneProgress * 100), isRealTimeSearch: isRealTimeSearch, lastUpdated: moment_1.default(progress.published)
                .add(pick_1.default(progress.content, 'runDuration'), 'seconds')
                .toISOString(), search: search }),
    };
};
exports.projectFunc = projectFunc;
/**
 * return an Observable that will emit intermediate search result
 * @param {Observable} resultsObservable observable for the search results
 * @param {Observable} progressObservable observable for the search progress so far
 * @param {Function} callback project function to transform the values emitted by the Observable
 */
var combineResultWhenProgress = function (resultsObservable, progressObservable, callback) { return rxjs_1.Observable.combineLatest(resultsObservable, progressObservable, callback); };
exports.combineResultWhenProgress = combineResultWhenProgress;
/**
 * return an Observable that will emit final search result
 * @param {Observable} resultsObservable observable for the search results
 * @param {Observable} progressObservable observable for the search progress so far
 * @param {Function} callback project function to transform the values emitted by the Observable
 */
var combineResultWhenFinalized = function (resultsObservable, progressObservable, callback) { return rxjs_1.Observable.forkJoin(resultsObservable, progressObservable, callback); };
exports.combineResultWhenFinalized = combineResultWhenFinalized;
/**
 * Wraps the observer to improve the error handling
 * @param {Observer} observer the observer to be wrapped
 * @param {string} search the search query
 * @returns {Observer} the wrapped observer
 */
var transformObserver = function (observer, search) { return ({
    next: function (response) { return observer.next(response); },
    error: function (err) {
        return observer.error({
            level: 'error',
            message: err.message,
            meta: {
                search: search,
            },
        });
    },
    complete: function () { return observer.complete(); },
}); };
exports.transformObserver = transformObserver;
/**
 * Determine if a fetch is needed based on the given search preview state
 * @param {Object} searchState search preview state
 * @returns {Boolean}
 */
var previewFetchPredicate = function (searchState) {
    if (get_1.default(searchState, ['content', 'isRealTimeSearch'], false)) {
        return true;
    }
    // we do a fetch when
    // 1. result count > 0
    // 2. search is done so we can make sure we always return the result
    return (get_1.default(searchState, ['content', 'resultPreviewCount'], 0) > 0 ||
        !!get_1.default(searchState, ['content', 'isDone']));
};
exports.previewFetchPredicate = previewFetchPredicate;
/**
 * Provides common options for splunk search dispatch options
 * @param {Object} context Object containing any configurable dispatchOptions from splunk/search-job
 * @returns {Object}
 */
var getEnterpriseSearchContext = function (context) {
    return __assign({ keepAlive: true, cache: false, app: config_1.app }, context);
};
exports.getEnterpriseSearchContext = getEnterpriseSearchContext;


/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = require("lodash/isNumber");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    query: {
        type: 'string',
        description: 'An SPL search string.',
    },
    queryParameters: {
        type: 'object',
        properties: {
            earliest: {
                type: 'string',
                description: 'Specify the earliest time to search for events.',
            },
            latest: {
                type: 'string',
                description: 'Specify the latest time to search for events.',
            },
            timezone: {
                type: 'string',
                description: 'Specify the timezone.',
            },
        },
        additionalProperties: false,
        description: 'SPL query parameters.',
    },
    refresh: {
        anyOf: [
            {
                type: 'number',
                minimum: 0,
            },
            {
                type: 'string',
            },
        ],
        description: 'Specify the refresh interval in seconds or with a time expression.',
    },
    refreshType: {
        type: 'string',
        enum: ['delay', 'interval'],
        default: 'delay',
        description: 'Indicate the starting time for counting down to a refresh. Use delay to start counting when the search is done. Use interval to count down when the search is dispatched.',
    },
    requiredFreshness: {
        type: 'number',
        description: 'Specify the freshness range in seconds to enable search job caching',
    },
    module: {
        type: 'string',
        description: 'Dataset module for search isolation',
    },
};


/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports = require("lodash/memoize");

/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-definition/DashboardDefinition");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    ref: {
        type: 'string',
        description: 'The name of the saved search to retrieve the results from.',
    },
    app: {
        type: 'string',
        description: 'The name of the app that the saved search belongs to.',
    },
    refresh: {
        type: ['number', 'string'],
        description: 'Specify the refresh interval in seconds or with a time expression. Ignored if saved search is scheduled.',
    },
    refreshType: {
        type: 'string',
        enum: ['delay', 'interval'],
        default: 'delay',
        description: 'Indicate the starting time for counting down to a refresh. Use delay to start counting when the search is done. Use interval to count down when the search is dispatched. Ignored if saved search is scheduled.',
    },
};


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    query: {
        type: 'string',
        description: 'An SPL search string.',
    },
    queryParameters: {
        type: 'object',
        properties: {
            earliest: {
                type: 'string',
                description: "Specify the earliest time to search for events. Choose from year (y), month (m), week (w), day (d), minute, (m), or second (s), or 0 for all time.\n                See the examples below.",
            },
            latest: {
                type: 'string',
                description: "Specify the earliest time to search for events. Choose from year (y), month (m), week (w), day (d), minute, (m), second (s), or now.\n                See the examples below.",
            },
        },
        additionalProperties: false,
        description: 'SPL query parameters, only contains earliest and latest for now.',
    },
    refresh: {
        type: ['number', 'string'],
        description: 'Specify the refresh interval in seconds or with a time expression.',
    },
    refreshType: {
        type: 'string',
        enum: ['delay', 'interval'],
        default: 'delay',
        description: 'Indicate the starting time for counting down to a refresh. Use delay to start counting when the search is done. Use interval to count down when the search is dispatched.',
    },
};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    data: {
        type: 'object',
    },
    vizOptions: {
        type: 'object',
    },
    meta: {
        type: 'object',
    },
    errorLevel: {
        type: 'string',
        enum: ['info', 'warning', 'error'],
    },
    error: {
        type: 'string',
    },
    delay: {
        type: 'number',
    },
    timeToStart: {
        type: 'number',
    },
    timeToComplete: {
        type: 'number',
    },
    increments: {
        type: 'number',
    },
};


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchMetaData = exports.fetchData = exports.fetchPagedData = exports.getWaitTimeInMs = exports.normalizeQueryParameters = exports.shouldFetch = exports.shouldUpdateJob = exports.isJobCompleted = exports.isJobFailed = exports.isJobDone = exports.getStatusMessage = void 0;
var rxjs_1 = __webpack_require__(6);
var pick_1 = __importDefault(__webpack_require__(7));
var map_1 = __importDefault(__webpack_require__(25));
var has_1 = __importDefault(__webpack_require__(26));
var get_1 = __importDefault(__webpack_require__(4));
var isEqual_1 = __importDefault(__webpack_require__(1));
var isUndefined_1 = __importDefault(__webpack_require__(27));
var memoize_one_1 = __importDefault(__webpack_require__(28));
var moment_1 = __importDefault(__webpack_require__(29));
var query_string_1 = __importDefault(__webpack_require__(30));
var search_1 = __webpack_require__(31);
var client_1 = __webpack_require__(32);
var DataSet_1 = __importDefault(__webpack_require__(8));
var i18n_1 = __webpack_require__(5);
var DataSource_1 = __importDefault(__webpack_require__(0));
var addLeadingSearchCommand_1 = __importDefault(__webpack_require__(33));
var SimpleScheduler_1 = __importDefault(__webpack_require__(11));
var CloudSearchOptionsSchema_1 = __importDefault(__webpack_require__(18));
var SearchConfigUtils_1 = __webpack_require__(12);
/**
 * Get status message based on search job properties
 * @private
 */
var getStatusMessage = function (_a) {
    var status = _a.status, totalCount = _a.totalCount;
    if (status === 'running' && totalCount === 0) {
        return i18n_1._('Search is running, but not enough data to render visualization');
    }
    if (status === 'done' && totalCount === 0) {
        return i18n_1._('Search ran successfully, but no results were returned');
    }
    if (status == null) {
        return i18n_1._('Search is not yet running, queued on client');
    }
    return '';
};
exports.getStatusMessage = getStatusMessage;
/**
 * get sdk client
 * @param {String} cloudApiUrl cloud api url
 * @param {String} accessToken access token as string
 * @param {CloudAuthClient} authClient cloud-auth instance
 * @param {String} tenantId tenant id
 */
var getSdkClient = function (_a) {
    var cloudApiUrl = _a.cloudApiUrl, accessToken = _a.accessToken, authClient = _a.authClient, tenantId = _a.tenantId, _b = _a.searchSubmitQueueParams, searchSubmitQueueParams = _b === void 0 ? {} : _b, _c = _a.searchQueueParams, searchQueueParams = _c === void 0 ? {} : _c;
    var serviceClient = new client_1.ServiceClient({
        urls: { api: cloudApiUrl },
        tokenSource: function () { return accessToken || authClient.getAccessToken(); },
        defaultTenant: tenantId,
        requestQueueManagerParams: new client_1.RequestQueueManagerParams({
            // These are taken from overrides in DefaultQueueManagerParams (https://github.com/splunk/splunk-cloud-sdk-js) (src/client.ts)
            retries: 6,
            initialTimeout: 1000,
            exponent: 1.6,
            maxInFlight: 3,
        }, 
        // FYI 'search-submit' queue is to start search job while 'search' queue is for search status and results requests.
        new Map([
            [
                'search-submit',
                {
                    retries: get_1.default(searchSubmitQueueParams, 'retries', 10),
                    initialTimeout: get_1.default(searchSubmitQueueParams, 'initialTimeout', 1000),
                    exponent: get_1.default(searchSubmitQueueParams, 'exponent', 1.6),
                    maxInFlight: get_1.default(searchSubmitQueueParams, 'maxInFlight', 10),
                },
            ],
            [
                'search',
                {
                    retries: get_1.default(searchQueueParams, 'retries', 10),
                    initialTimeout: get_1.default(searchQueueParams, 'initialTimeout', 500),
                    exponent: get_1.default(searchQueueParams, 'exponent', 2),
                    maxInFlight: get_1.default(searchQueueParams, 'maxInFlight', 10),
                },
            ],
        ])),
    });
    return new search_1.SearchService(serviceClient);
};
/**
 * a cached version of getSdkClient;
 */
var getCachedSdkClient = memoize_one_1.default(getSdkClient, isEqual_1.default);
/**
 * polling intervals
 */
var JOB_POLLING_INTERVAL = 400;
var RESULTS_POLLING_INTERVAL = 500;
var OTHER_SEARCH_PARAMS = [
    'extractAllFields',
    'timeFormat',
    'maxTime',
    'timeOfSearch',
    'enablePreview',
    'requiredFreshness',
];
/**
 * @fixme, this is a placeholder as search service does not return any messages now.

 * Find message in job status
 * @param {Array} messages
 * @param {String} type
 */
var findMessages = function (messages, type) {
    if (messages === void 0) { messages = []; }
    if (type === void 0) { type = 'INFO'; }
    return messages.find(function (m) { return m.type === type; });
};
/**
 * Extract error message from messages lists
 */
var extractErrorMessage = function (messages) {
    if (messages === void 0) { messages = []; }
    return map_1.default(findMessages(messages, 'ERROR'), function (m) { return m.text; }).join(',');
};
var wait = function (time) { return new Promise(function (resolve) { return setTimeout(resolve, time); }); };
/**
 * check if job is done
 * @param {Object} job job properties
 */
var isJobDone = function (job) { return job.status === 'done'; };
exports.isJobDone = isJobDone;
/**
 * check if job is failed
 * @param {Object} job job instance
 * @returns {Boolean}
 */
var isJobFailed = function (job) { return job.status === 'failed'; };
exports.isJobFailed = isJobFailed;
/**
 * check if job is either done or failed
 * @param {Object} job job instance
 * @returns {Boolean}
 */
var isJobCompleted = function (job) {
    return job && (exports.isJobDone(job) || exports.isJobFailed(job));
};
exports.isJobCompleted = isJobCompleted;
/**
 * should update job stats
 * @param {Object} job job instance
 * @returns {Boolean}
 */
var shouldUpdateJob = function (job) { return !job || !exports.isJobCompleted(job); };
exports.shouldUpdateJob = shouldUpdateJob;
/**
 * return true if we need to fetch current result.
 * @param {Object} job job instance
 * @param {Boolean} [progress=true] whether allow fetching intermediate data
 * @private
 */
var shouldFetch = function (job, progress) {
    if (progress === void 0) { progress = true; }
    // disable fetch when search is running
    return progress || exports.isJobDone(job);
};
exports.shouldFetch = shouldFetch;
/**
 * Normalize queryParameters so that search API v1beta1 doesn't throw error
 * @param {Object} queryParameters
 */
var normalizeQueryParameters = function (queryParameters) {
    if (queryParameters === void 0) { queryParameters = {}; }
    var result = {};
    if (queryParameters.earliest != null) {
        result.earliest = queryParameters.earliest;
    }
    if (queryParameters.latest != null) {
        result.latest = queryParameters.latest;
    }
    if (queryParameters.earliest == null) {
        if (has_1.default(queryParameters, 'earliestTime')) {
            result.earliest = queryParameters.earliestTime;
        }
        else if (has_1.default(queryParameters, 'earliest_time')) {
            result.earliest = queryParameters.earliest_time;
        }
    }
    if (queryParameters.latest == null) {
        if (has_1.default(queryParameters, 'latestTime')) {
            result.latest = queryParameters.latestTime;
        }
        else if (has_1.default(queryParameters, 'latest_time')) {
            result.latest = queryParameters.latest_time;
        }
    }
    if (queryParameters.timezone) {
        result.timezone = queryParameters.timezone;
    }
    else {
        result.timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    }
    if (result.earliest === '') {
        // another normalization to make both customers and search service API happy
        result.earliest = '0';
    }
    if (result.latest === '') {
        // This is to make sure current react time range picker works. Remove at your own peril!
        result.latest = 'now';
    }
    // this is to be compliant with the `v2beta1` version of SCP search API, sigh...
    // here's its requirement: "When specifying an absolute time specify either UNIX time, or UTC in seconds using the ISO-8601 (%FT%T.%Q) format. For example 2019-01-25T13:15:30Z. GMT is the default timezone. You must specify GMT when you specify UTC. Any offset specified is ignored."
    // so basically it is saying if the time format is ISO it must ends with 'Z'
    // additionally, SCP doesn't support user timezone setting, so we agreed on setting to browser's timezone!
    if (moment_1.default(result.earliest, moment_1.default.ISO_8601, true).isValid() &&
        !result.earliest.endsWith('Z')) {
        result.earliest = moment_1.default(result.earliest).toISOString();
    }
    if (moment_1.default(result.latest, moment_1.default.ISO_8601, true).isValid() &&
        !result.latest.endsWith('Z')) {
        result.latest = moment_1.default(result.latest).toISOString();
    }
    return result;
};
exports.normalizeQueryParameters = normalizeQueryParameters;
/**
 * an object with supported time durations and their multiplier
 * to convert to milliseconds. don't expect wait time to be > minutes
 */
var supportedTimeDurations = {
    ms: 1,
    s: 1000,
    m: 60000,
};
var numberUnitRegex = /(\d+)(\w+)/;
/**
 * convert the wait string returned by the endpoint to milliseconds
 * @param {String} wait time as string e.g. '5s' is 5 seconds, '500ms' is 500 milliseconds
 */
var getWaitTimeInMs = function (waitStr) {
    if (!waitStr) {
        return 0;
    }
    var matches = waitStr.match(numberUnitRegex);
    if (!matches || matches.length !== 3) {
        return 0;
    }
    var unit = matches[2]; // this assumes we always have a unit
    var time = parseInt(matches[1], 10);
    if (supportedTimeDurations[unit]) {
        return time * supportedTimeDurations[unit];
    }
    return time;
};
exports.getWaitTimeInMs = getWaitTimeInMs;
/**
 * Split a relative url into pathname and query string parts
 * @param {String} relativeUrl A relative url
 * @returns {Object} { pathname, query }
 */
var parseNextLink = function (relativeUrl) { return query_string_1.default.parseUrl(relativeUrl); };
/**
 * fetch paged data or data that is not ready yet
 *
 * @param {SDKClient} client sdk client
 * @param {String} link to page to be fetched
 * @param {Number} time to wait in milliseconds (if result set is not ready yet)
 */
var fetchPagedData = function (client, link, timeToWait, queryData) {
    if (timeToWait === void 0) { timeToWait = 0; }
    if (queryData === void 0) { queryData = {}; }
    return __awaiter(void 0, void 0, void 0, function () {
        var pageResponse, pageData, _a, fields, _b, results, _c, url, query, nextPageData;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    if (!timeToWait) return [3 /*break*/, 2];
                    return [4 /*yield*/, wait(timeToWait)];
                case 1:
                    _d.sent();
                    _d.label = 2;
                case 2: return [4 /*yield*/, client.get('api', link, { query: queryData })];
                case 3:
                    pageResponse = _d.sent();
                    pageData = pageResponse.body;
                    _a = pageData.fields, fields = _a === void 0 ? [] : _a, _b = pageData.results, results = _b === void 0 ? [] : _b;
                    if (!pageData.nextLink) return [3 /*break*/, 5];
                    _c = parseNextLink(pageData.nextLink), url = _c.url, query = _c.query;
                    return [4 /*yield*/, exports.fetchPagedData(client, url, exports.getWaitTimeInMs(pageData.wait), query)];
                case 4:
                    nextPageData = _d.sent();
                    results = results.concat(nextPageData.results);
                    fields = fields || nextPageData.fields;
                    _d.label = 5;
                case 5: return [2 /*return*/, {
                        fields: fields,
                        results: results,
                    }];
            }
        });
    });
};
exports.fetchPagedData = fetchPagedData;
/**
 * fetch actual data from 'source' endpoint.
 * @param {SDKClient} client search service sdk client
 * @param {Object} requestParams requestParams from request function.
 * @param {Object} job search job
 */
var fetchData = function (searchServiceClient, requestParams, job) { return __awaiter(void 0, void 0, void 0, function () {
    var data, fetchParams, fetchResultFn, response, _a, fields, _b, results, _c, url, query, pageData;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                data = null;
                fetchParams = pick_1.default(requestParams, ['offset', 'count', 'f', 'search']);
                fetchResultFn = job.enablePreview
                    ? searchServiceClient.listPreviewResults
                    : searchServiceClient.listResults;
                return [4 /*yield*/, fetchResultFn(job.sid, fetchParams)];
            case 1:
                response = _d.sent();
                _a = response.fields, fields = _a === void 0 ? [] : _a, _b = response.results, results = _b === void 0 ? [] : _b;
                if (!response.nextLink) return [3 /*break*/, 3];
                _c = parseNextLink(response.nextLink), url = _c.url, query = _c.query;
                return [4 /*yield*/, exports.fetchPagedData(searchServiceClient.client, url, exports.getWaitTimeInMs(response.wait), query)];
            case 2:
                pageData = _d.sent();
                fields = fields.length ? fields : pageData.fields;
                results = results.concat(pageData.results);
                _d.label = 3;
            case 3:
                // We will emit data out when
                // 1) response contains data (fields.length && results.length)
                // 2) job is complete, in this case we need to emit dataset even it's empty
                if (exports.isJobCompleted(job) || (fields.length && results.length)) {
                    data = DataSet_1.default.fromJSONArray(fields, results);
                }
                return [2 /*return*/, data];
        }
    });
}); };
exports.fetchData = fetchData;
/**
 * pick datasource metadata from job properties.
 * @param {Object} job job properties
 * @returns {Object} job metadata object normalized as per go/search-job-metadata
 */
var fetchMetaData = function (job) {
    var jobProperties = pick_1.default(job, ['status', 'sid', 'percentComplete']);
    // we always include totalCount to show warning on viz if 0 results returned
    jobProperties.totalCount = job.resultsAvailable;
    // Enterprise has real-time searches, SCS does not so always set to false.
    jobProperties.isRealTimeSearch = false;
    jobProperties.statusMessage = exports.getStatusMessage(pick_1.default(jobProperties, ['status', 'totalCount', 'isRealTimeSearch']));
    jobProperties.lastUpdated =
        get_1.default(job, 'completionTime') || get_1.default(job, 'dispatchTime');
    return jobProperties;
};
exports.fetchMetaData = fetchMetaData;
/**
 * Create a new `CloudSearch` datasource instance. Datasource is a module that provides data into a visualization.
 * One datasource can bind to multiple viz while one viz can be powered by multiple datasources.
 * This is specific to SDC search framework and use js-sdk search framework.
 * Examples:
 * ```js
 *      try {
 *          const datasource = new CloudSearch(options, context);
 *      } catch (e) {
 *          // Handle error here.
 *      }
 *```
 * @param {Object} options - Search parameters.
 * @param {String} options.query - The search string. This is the only required search param.
 * @param {String} options.queryParameters.earliestTime - earliest time of the query
 * @param {String} options.queryParameters.latestTime - latest time of the query
 * @param {String} options.requiredFreshness - freshness of search used for search job caching
 * @param {String} options.module - search module
 * @param {Object} context - ssc config parameters.
 * @param {Object} context.authClient - instance of @splunk/ssc-auth
 * @param {String} context.tenantId - current user tenantId to make the request to sdc search service
 * @returns {CloudSearch} A new CloudSearch datasource instance.
 * @public
 */
var CloudSearch = /** @class */ (function (_super) {
    __extends(CloudSearch, _super);
    function CloudSearch(options, context) {
        if (options === void 0) { options = {}; }
        if (context === void 0) { context = {}; }
        var _this = _super.call(this, options, context) || this;
        /**
         * Compute the next fetch interval, return false to terminal the loop
         */
        _this.computeNextFetchDelay = function () {
            if (exports.isJobCompleted(_this.currentJob) || _this.isTeardown) {
                return false; // no next fetch;
            }
            return RESULTS_POLLING_INTERVAL;
        };
        _this.currentJob = null;
        _this.caughtError = null;
        _this.isTeardown = false;
        _this.updateJob = _this.updateJob.bind(_this);
        if (!_this.options.query && !_this.options.sid) {
            throw Error('search string or sid is required!');
        }
        if (!_this.context.tenantId) {
            throw Error('tenantId is required');
        }
        if (_this.context.accessToken == null &&
            _this.context.authClient == null) {
            throw Error('authClient or accessToken is required');
        }
        return _this;
    }
    /**
     * create a sdk client
     */
    CloudSearch.prototype.getServiceClient = function () {
        if (this.client == null) {
            var _a = this.context, cloudApiUrl = _a.cloudApiUrl, accessToken = _a.accessToken, authClient = _a.authClient, tenantId = _a.tenantId, _b = _a.cacheClient, cacheClient = _b === void 0 ? true : _b, searchQueueParams = _a.searchQueueParams;
            // For backwards compatibility, previously it was 'requestQueueManagerParams'. Now it's renamed since we have 2 queues with diff params.
            var searchSubmitQueueParams = this.context.searchSubmitQueueParams ||
                this.context.requestQueueManagerParams;
            var getFn = cacheClient ? getCachedSdkClient : getSdkClient;
            this.client = getFn({
                cloudApiUrl: cloudApiUrl,
                accessToken: accessToken,
                authClient: authClient,
                tenantId: tenantId,
                searchSubmitQueueParams: searchSubmitQueueParams,
                searchQueueParams: searchQueueParams,
            });
        }
        return this.client;
    };
    /**
     * Creates a search job and returns a jobId.
     *
     * Examples:
     * ```js
     *      const datasource = new CloudSearch(options, context);
     *      const sid = await datasource.setup();
     *```
     * @throws {error} If request to sdk endpoint fails
     * @returns {Promise<string>} The SID of created search.
     * @public
     */
    CloudSearch.prototype.setup = function () {
        return __awaiter(this, void 0, void 0, function () {
            var module, jobParams, job, _a, ex_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        module = isUndefined_1.default(this.options.module)
                            ? this.context.defaultModule
                            : this.options.module;
                        jobParams = __assign(__assign({ 
                            // we by default enable preview unless user set `enablePreview` to false in options
                            enablePreview: true }, pick_1.default(this.options, OTHER_SEARCH_PARAMS)), { module: module, query: this.options.query
                                ? addLeadingSearchCommand_1.default(this.options.query)
                                : null });
                        if (this.options.queryParameters) {
                            jobParams.queryParameters = exports.normalizeQueryParameters(this.options.queryParameters);
                        }
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, , 7]);
                        if (!this.options.sid) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getServiceClient().getJob(this.options.sid)];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.getServiceClient().createJob(jobParams)];
                    case 4:
                        _a = _b.sent();
                        _b.label = 5;
                    case 5:
                        job = _a;
                        this.jobId = job.sid;
                        this.updateJobScheduler = SimpleScheduler_1.default.createScheduler(this.updateJob);
                        this.updateJobScheduler.start();
                        return [3 /*break*/, 7];
                    case 6:
                        ex_1 = _b.sent();
                        if (this.options.sid) {
                            // eslint-disable-next-line no-console
                            console.error('failed to retrieve search job:', ex_1);
                        }
                        else {
                            // eslint-disable-next-line no-console
                            console.error('failed to create search job:', ex_1);
                        }
                        this.caughtError = ex_1.message;
                        return [2 /*return*/, null];
                    case 7: return [2 /*return*/, this.jobId];
                }
            });
        });
    };
    /**
     * Supports getResults as exposed
     * by [@splunk/cloud-sdk](https://github.com/splunk/splunk-cloud-sdk-js) (src/search.ts)
     *
     * Examples:
     * ```js
     *      const datasource = new CloudSearch(options, context);
     *      datasource.setup().then(() => {
     *          datasource.request().subscribe({
     *              complete() {
     *                 // search completed
     *              },
     *              next(obj) {
     *                  // Process results
     *              },
     *              error() {
     *                  // Handle error
     *              },
     *         });
     *     });
     * ```
     * @param {Object} requestParams search request parameters.
     * @param {Number} requestParams.offset data offset.
     * @param {Number} requestParams.count data count.
     * @param {String} requestParams.progress whether to return intermediate search result
     * @returns {function(*)}
     * @public
     */
    CloudSearch.prototype.request = function (requestParams) {
        var _this = this;
        if (requestParams === void 0) { requestParams = {}; }
        var params = __assign({ offset: 0, count: 0, progress: true }, requestParams);
        return rxjs_1.Observable.create(function (observer) {
            var resultScheduler = null;
            var data = null;
            if (_this.caughtError) {
                observer.error({
                    level: 'error',
                    message: _this.caughtError,
                });
            }
            else {
                resultScheduler = SimpleScheduler_1.default.createScheduler(function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, ex_2;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _b.trys.push([0, 8, , 9]);
                                if (!this.currentJob) return [3 /*break*/, 7];
                                _a = this.currentJob.status;
                                switch (_a) {
                                    case 'failed': return [3 /*break*/, 1];
                                    case 'running': return [3 /*break*/, 2];
                                    case 'finalizing': return [3 /*break*/, 2];
                                    case 'done': return [3 /*break*/, 2];
                                }
                                return [3 /*break*/, 5];
                            case 1:
                                observer.error({
                                    level: 'error',
                                    message: extractErrorMessage(this.currentJob.messages),
                                });
                                return [3 /*break*/, 6];
                            case 2:
                                if (!exports.shouldFetch(this.currentJob, params.progress)) return [3 /*break*/, 4];
                                return [4 /*yield*/, exports.fetchData(this.getServiceClient(), params, this.currentJob)];
                            case 3:
                                data = _b.sent();
                                if (data) {
                                    observer.next({
                                        data: data,
                                        meta: exports.fetchMetaData(this.currentJob),
                                    });
                                }
                                _b.label = 4;
                            case 4: return [3 /*break*/, 6];
                            case 5: return [3 /*break*/, 6];
                            case 6:
                                if (exports.isJobDone(this.currentJob)) {
                                    observer.complete();
                                }
                                _b.label = 7;
                            case 7: return [2 /*return*/, this.computeNextFetchDelay()];
                            case 8:
                                ex_2 = _b.sent();
                                observer.error({
                                    level: 'error',
                                    message: ex_2.message,
                                });
                                return [2 /*return*/, false]; // stop next fetch once we have error
                            case 9: return [2 /*return*/];
                        }
                    });
                }); });
                // kick off the loop
                resultScheduler.start();
            }
            return function () {
                // clean up function when no consumer subscribe to this observable
                if (resultScheduler) {
                    resultScheduler.stop();
                    resultScheduler = null;
                }
            };
        });
    };
    /**
     * This is how the search sdk expects delete to work,
     * but it is commented out on ssc-search spec which means that this method can't really be used right now.
     * When available to use, it will delete the search job with the given jobId
     *
     * Examples:
     * ```js
     *   const response = await datasource.teardown().then(
     *      value => {
     *          console.log(`Should have deleted the job: ${value}`);
     *          },
     *      reason => {
     *          console.log(`Failed to delete the job: ${reason}`);
     *         }
     *   );
     *```
     * @returns {Promise<*>}
     * @public
     */
    CloudSearch.prototype.teardown = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.updateJobScheduler) {
                            this.updateJobScheduler.stop();
                        }
                        if (!(this.jobId && !exports.isJobCompleted(this.currentJob))) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getServiceClient().updateJob(this.jobId, {
                                status: 'canceled',
                            })];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        this.isTeardown = true;
                        return [2 /*return*/, null];
                }
            });
        });
    };
    /**
     * Given the job id, update the job stats and compute the next update delay
     */
    CloudSearch.prototype.updateJob = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, ex_3;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 3, , 4]);
                        if (!(this.jobId && exports.shouldUpdateJob(this.currentJob))) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.getServiceClient().getJob(this.jobId)];
                    case 1:
                        _a.currentJob = _b.sent();
                        return [2 /*return*/, JOB_POLLING_INTERVAL];
                    case 2: return [3 /*break*/, 4];
                    case 3:
                        ex_3 = _b.sent();
                        this.caughtError = ex_3.message;
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, false];
                }
            });
        });
    };
    CloudSearch.schema = CloudSearchOptionsSchema_1.default;
    return CloudSearch;
}(DataSource_1.default));
CloudSearch.config = {
    title: i18n_1._('Search'),
    displayDataSourceItemListByDefault: true,
    canCreateDataSource: true,
    dataSourceRemoveVerb: 'delete',
    isDataSourceNameEditable: true,
    getDataSourceName: function (_a) {
        var dataSource = _a.dataSource;
        return get_1.default(dataSource, 'name', i18n_1._('Unnamed'));
    },
    defaultOptions: function (_a) {
        var definition = _a.definition;
        return SearchConfigUtils_1.getDefaultOptionsForSearchQuery(definition);
    },
    editorConfig: [],
    optionsSchema: CloudSearchOptionsSchema_1.default,
};
exports.default = CloudSearch;


/***/ }),
/* 25 */
/***/ (function(module, exports) {

module.exports = require("lodash/map");

/***/ }),
/* 26 */
/***/ (function(module, exports) {

module.exports = require("lodash/has");

/***/ }),
/* 27 */
/***/ (function(module, exports) {

module.exports = require("lodash/isUndefined");

/***/ }),
/* 28 */
/***/ (function(module, exports) {

module.exports = require("memoize-one");

/***/ }),
/* 29 */
/***/ (function(module, exports) {

module.exports = require("moment");

/***/ }),
/* 30 */
/***/ (function(module, exports) {

module.exports = require("query-string");

/***/ }),
/* 31 */
/***/ (function(module, exports) {

module.exports = require("@splunkdev/cloud-sdk/services/search");

/***/ }),
/* 32 */
/***/ (function(module, exports) {

module.exports = require("@splunkdev/cloud-sdk/client");

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Returns a fully qualified search string by prepending the 'search'
 * command of unqualified searches.  This method deems strings as unqualified
 * if it does not start with a '|', 'search ', or 'from '
 *
 * @param {String} search - The search string.
 * @returns {String}
 * @public
 */
function addLeadingSearchCommand(search) {
    var trimmedSearch = search.trim();
    if (trimmedSearch.startsWith('|')) {
        return search;
    }
    if ((trimmedSearch.startsWith('search ') && trimmedSearch.length > 7) ||
        (trimmedSearch.startsWith('from ') && trimmedSearch.length > 5)) {
        return search;
    }
    return "search " + trimmedSearch;
}
exports.default = addLeadingSearchCommand;


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var datasource_utils_1 = __webpack_require__(13);
var DataSource_1 = __importDefault(__webpack_require__(0));
var SnapshotDataSource = /** @class */ (function (_super) {
    __extends(SnapshotDataSource, _super);
    function SnapshotDataSource(options, context) {
        if (options === void 0) { options = {}; }
        if (context === void 0) { context = {}; }
        var _a, _b;
        var _this = _super.call(this, options, context) || this;
        if (options.data) {
            _this.data = datasource_utils_1.DataSet.fromJSONCols(options.data.fields, options.data.columns);
        }
        else {
            _this.data = datasource_utils_1.DataSet.fromJSONCols([], []);
        }
        _this.meta = (_a = options.meta) !== null && _a !== void 0 ? _a : {};
        _this.delay = (_b = options.delay) !== null && _b !== void 0 ? _b : 0;
        _this.errorLevel = options.errorLevel;
        _this.error = options.error;
        return _this;
    }
    SnapshotDataSource.prototype.request = function (requestParams) {
        var _this = this;
        return function (observer) {
            var timer;
            if (observer) {
                if (_this.error) {
                    observer.error({
                        level: _this.errorLevel,
                        message: _this.error,
                    });
                    return function () { return undefined; };
                }
                timer = setTimeout(function () {
                    observer.next({
                        data: _this.data.getPage({
                            count: requestParams === null || requestParams === void 0 ? void 0 : requestParams.count,
                            offset: requestParams === null || requestParams === void 0 ? void 0 : requestParams.offset,
                        }),
                        meta: __assign(__assign({}, _this.meta), { totalCount: _this.data.getTotalCount() }),
                    });
                    observer.complete();
                }, _this.delay);
            }
            return function () {
                clearTimeout(timer);
            };
        };
    };
    return SnapshotDataSource;
}(DataSource_1.default));
exports.default = SnapshotDataSource;


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateRefreshTime = exports.getSecondsBetweenDates = exports.defaultRequestParams = exports.defaultParams = exports.ownRequestParams = void 0;
var get_1 = __importDefault(__webpack_require__(4));
var i18n_1 = __webpack_require__(5);
var console_1 = __importDefault(__webpack_require__(14));
var search_job_1 = __importDefault(__webpack_require__(15));
var config_1 = __webpack_require__(9);
var savedSearch_1 = __webpack_require__(36);
var moment_1 = __importDefault(__webpack_require__(10));
var DataSource_1 = __importDefault(__webpack_require__(0));
var SplunkSavedSearchOptionsSchema_1 = __importDefault(__webpack_require__(21));
var SplunkSearchUtils_1 = __webpack_require__(16);
exports.ownRequestParams = {
    output_mode: 'json_cols',
};
exports.defaultParams = {
    // Note: if preview is changed to false, we will not get resultPreviewCount below and
    // may break search status icon behavior
    preview: true,
};
exports.defaultRequestParams = {
    count: 0,
    offset: 0,
    progress: true,
};
var getSecondsBetweenDates = function (date1, date2) {
    if (!(date1 instanceof moment_1.default) || !(date2 instanceof moment_1.default)) {
        throw Error('Parameters must be @splunk/moment types');
    }
    return Math.ceil((date2 - date1) / 1000);
};
exports.getSecondsBetweenDates = getSecondsBetweenDates;
var calculateRefreshTime = function (nextScheduledTime) {
    // SCP-39715
    // `nextScheduledTime` is in the format like '2021-05-05 01:32:00 CEST' where CEST is a non-standard abbreviation which cannot be recognized by moment() or Date().
    // To handle this issue, we remove the timezone from the timestamp and let `.newSplunkTime()` handle it.
    // Note the timezone depends on Splunk Enterprise user settings, it could be CEST, UTC or some other timezone abbreviations.
    var nextScheduledTimeWithoutTimezone = nextScheduledTime
        .split(' ')
        .slice(0, -1)
        .join(' ');
    var timeOfSavedSearchRetrieval = moment_1.default.newSplunkTime();
    var secondsUntilNextSchedule = exports.getSecondsBetweenDates(timeOfSavedSearchRetrieval, moment_1.default.newSplunkTime({ time: nextScheduledTimeWithoutTimezone }));
    // Give a slight buffer of 5 seconds to allow the scheduled job to kick off in an ideal environment,
    // making it less likely to require multiple calls to retrieve the newest job.
    return secondsUntilNextSchedule + 5;
};
exports.calculateRefreshTime = calculateRefreshTime;
/**
 * A DataSource that talks to splunk enterprise
 * @param {Object} options
 * @param {String} options.ref name of saved search
 * @param {String} options.app name of app saved search belongs to
 * @param {Object} context See [search-job api](https://splunkui.sv.splunk.com/Packages/search-job/API) dispatchOptions object
 * @param {Boolean} [context.keepAlive=true] If true, keep the job alive before teardown
 * @param {Boolean} [context.cache=false] If true, will try and reuse an existing search job if it has the same request params.
 * @param {String} [context.app] The current app in use as defined in the page url and @splunk/splunk-utils/Config
 * @param {String} [context.splunkdPath] splunk rest endpoint path
 * @param {String} [context.sessionKey] current session key
 * @param {String} [context.auditProvenance] provenance value to appear in the splunk audit log
 * @param {String} [context.id] ID of the dashboard performing the query
 * @returns {SplunkSavedSearch} A new SplunkSavedSearch datasource instance.
 * @public
 */
var SplunkSavedSearch = /** @class */ (function (_super) {
    __extends(SplunkSavedSearch, _super);
    function SplunkSavedSearch(options, context) {
        if (options === void 0) { options = {}; }
        if (context === void 0) { context = {}; }
        var _this = _super.call(this, options, context) || this;
        if (!_this.options.ref) {
            throw Error('saved search ref is required!');
        }
        _this.context = SplunkSearchUtils_1.getEnterpriseSearchContext(_this.context);
        return _this;
    }
    /**
     * Creates a search job and returns sid once the job is created on the server.
     * @returns {Promise} The sid of the created job.
     * @public
     */
    SplunkSavedSearch.prototype.setup = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, splunkdPath, sessionKey, _b, app, ref, savedSearchParams, requestParams, sid, _c, isScheduled, params, lastSearchJob, e_1;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 8, , 9]);
                        _a = this.context, splunkdPath = _a.splunkdPath, sessionKey = _a.sessionKey;
                        if (splunkdPath) {
                            search_job_1.default.setSplunkConfig({
                                splunkdPath: splunkdPath,
                            });
                        }
                        if (sessionKey) {
                            search_job_1.default.setBaseFetchInit({
                                headers: {
                                    Authorization: "Splunk " + sessionKey,
                                },
                            });
                        }
                        _b = this.options, app = _b.app, ref = _b.ref;
                        savedSearchParams = {
                            name: ref,
                            app: app || config_1.app,
                            owner: config_1.username,
                        };
                        requestParams = {
                            'dispatch.check_risky_command': this.options.checkRiskyCommand,
                            'dispatch.label': this.context.id,
                        };
                        if (this.context.auditProvenance) {
                            requestParams['dispatch.provenance'] = this.context.auditProvenance;
                        }
                        sid = null;
                        // fetch report definition
                        _c = this;
                        return [4 /*yield*/, savedSearch_1.get(savedSearchParams)];
                    case 1:
                        // fetch report definition
                        _c.savedSearch = _d.sent();
                        isScheduled = get_1.default(this.savedSearch, [
                            'entry',
                            0,
                            'content',
                            'is_scheduled',
                        ]);
                        this.searchQuery = get_1.default(this.savedSearch, [
                            'entry',
                            0,
                            'content',
                            'search',
                        ]);
                        if (!isScheduled) return [3 /*break*/, 5];
                        params = { search: 'isScheduled=true' };
                        return [4 /*yield*/, savedSearch_1.getLatest(savedSearchParams, params, search_job_1.default.splunkConfig, search_job_1.default.baseFetchInit)];
                    case 2:
                        lastSearchJob = _d.sent();
                        sid = get_1.default(lastSearchJob, ['name'], null);
                        if (!!sid) return [3 /*break*/, 4];
                        return [4 /*yield*/, savedSearch_1.dispatch(savedSearchParams, requestParams, search_job_1.default.splunkConfig, search_job_1.default.baseFetchInit)];
                    case 3:
                        (sid = (_d.sent()).sid);
                        _d.label = 4;
                    case 4: return [3 /*break*/, 7];
                    case 5: return [4 /*yield*/, savedSearch_1.dispatch(savedSearchParams, requestParams, search_job_1.default.splunkConfig, search_job_1.default.baseFetchInit)];
                    case 6:
                        (sid = (_d.sent()).sid);
                        _d.label = 7;
                    case 7:
                        this.searchJob = search_job_1.default.fromSid(sid);
                        return [2 /*return*/, sid];
                    case 8:
                        e_1 = _d.sent();
                        console_1.default.error('failed to retrieve search job:', e_1);
                        this.setupError = e_1;
                        return [2 /*return*/, null];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns an Observable that emits job information and search results.
     *
     * @param requestParams {Object} - [See documentation for available parameters.
     * ](http://docs.splunk.com/Documentation/Splunk/latest/RESTREF/RESTsearch#search.2Fjobs.2F.7Bsearch_id.7D.2Fresults)
     * @returns {Observable}
     * @public
     */
    SplunkSavedSearch.prototype.request = function (requestParams) {
        var _this = this;
        if (requestParams === void 0) { requestParams = {}; }
        if (this.setupError) {
            return function (observer) {
                observer.error({
                    level: 'error',
                    message: _this.setupError.message,
                    meta: {
                        search: _this.searchQuery,
                    },
                });
                return function () { };
            };
        }
        var params = __assign(__assign(__assign({}, exports.defaultRequestParams), requestParams), exports.ownRequestParams);
        if (params.sort) {
            Object.keys(params.sort).forEach(function (sortKey) {
                var sortDir = params.sort[sortKey];
                if (sortDir) {
                    if (!params.search) {
                        params.search = '| sort 0';
                    }
                    if (sortDir === 'desc') {
                        params.search += " -\"" + sortKey + "\"";
                    }
                    else if (sortDir === 'asc') {
                        params.search += " +\"" + sortKey + "\"";
                    }
                }
            });
            delete params.sort;
        }
        var progressObservable = this.searchJob.getProgress();
        var result = params.progress
            ? SplunkSearchUtils_1.combineResultWhenProgress(this.searchJob.getResultsPreview(params, {
                fetchPredicate: SplunkSearchUtils_1.previewFetchPredicate,
            }), progressObservable, SplunkSearchUtils_1.projectFunc)
            : SplunkSearchUtils_1.combineResultWhenFinalized(this.searchJob.getResults(params), progressObservable, SplunkSearchUtils_1.projectFunc);
        return function (observer) {
            // note: due to the nature that 'data' and 'meta' are from two different endpoints, there's no
            // way to guarantee that they always match. But they'll eventually match when search is done.
            var subscription = result.subscribe(SplunkSearchUtils_1.transformObserver(observer));
            return function () {
                subscription.unsubscribe();
            };
        };
    };
    SplunkSavedSearch.prototype.getRefreshConfig = function () {
        var refresh = get_1.default(this.options, 'refresh');
        var refreshType = get_1.default(this.options, 'refreshType');
        if (this.savedSearch) {
            var isScheduled = get_1.default(this.savedSearch, [
                'entry',
                0,
                'content',
                'is_scheduled',
            ]);
            if (isScheduled) {
                var nextScheduledTime = get_1.default(this.savedSearch, [
                    'entry',
                    0,
                    'content',
                    'next_scheduled_time',
                ]);
                refresh = exports.calculateRefreshTime(nextScheduledTime) + "s";
                refreshType = 'interval';
            }
        }
        return {
            refresh: refresh,
            refreshType: refreshType,
        };
    };
    SplunkSavedSearch.prototype.getMetaData = function () {
        var _a = get_1.default(this.savedSearch, ['entry', 0], {}), author = _a.author, updated = _a.updated, _b = _a.acl, _c = _b === void 0 ? {} : _b, app = _c.app, sharing = _c.sharing, _d = _a.content, _e = _d === void 0 ? {} : _d, isScheduled = _e.is_scheduled, nextScheduledTime = _e.next_scheduled_time, savedSearchQuery = _e.search, earliestTime = _e["dispatch.earliest_time"], latestTime = _e["dispatch.latest_time"];
        return {
            author: author,
            updated: updated,
            app: app,
            sharing: sharing,
            isScheduled: isScheduled,
            nextScheduledTime: nextScheduledTime,
            savedSearchQuery: savedSearchQuery,
            earliestTime: earliestTime,
            latestTime: latestTime,
        };
    };
    /**
     * Cancel the search job and returns the server response.
     * Job will not be cancelled if `context.cache` is true.
     * @returns {Promise}
     * @public
     */
    SplunkSavedSearch.prototype.teardown = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cache;
            return __generator(this, function (_a) {
                cache = this.context.cache;
                if (!cache && this.searchJob) {
                    this.searchJob = null;
                    this.savedSearch = null;
                }
                return [2 /*return*/, null];
            });
        });
    };
    SplunkSavedSearch.schema = SplunkSavedSearchOptionsSchema_1.default;
    return SplunkSavedSearch;
}(DataSource_1.default));
SplunkSavedSearch.config = {
    title: i18n_1._('Saved Search'),
    displayDataSourceItemListByDefault: true,
    canCreateDataSource: false,
    dataSourceRemoveVerb: 'remove',
    isDataSourceNameEditable: false,
    getDataSourceName: function (_a) {
        var dataSource = _a.dataSource;
        return get_1.default(dataSource, ['options', 'ref']) ||
            get_1.default(dataSource, 'name', i18n_1._('Unnamed'));
    },
    defaultOptions: {},
    editorConfig: [],
    optionsSchema: SplunkSavedSearchOptionsSchema_1.default,
};
exports.default = SplunkSavedSearch;


/***/ }),
/* 36 */
/***/ (function(module, exports) {

module.exports = require("@splunk/splunk-utils/savedSearch");

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultRequestParams = exports.defaultParams = exports.ownRequestParams = void 0;
var mapKeys_1 = __importDefault(__webpack_require__(38));
var get_1 = __importDefault(__webpack_require__(4));
var hash_it_1 = __importDefault(__webpack_require__(39));
var console_1 = __importDefault(__webpack_require__(14));
var search_job_1 = __importDefault(__webpack_require__(15));
var i18n_1 = __webpack_require__(5);
var rxjs_1 = __webpack_require__(6);
var BaseChainUtils_1 = __webpack_require__(40);
var DataSource_1 = __importDefault(__webpack_require__(0));
var SplunkSearchOptionsSchema_1 = __importDefault(__webpack_require__(22));
var SplunkSearchUtils_1 = __webpack_require__(16);
var SearchConfigUtils_1 = __webpack_require__(12);
exports.ownRequestParams = {
    output_mode: 'json_cols',
};
exports.defaultParams = {
    // Note: if preview is changed to false, we will not get resultPreviewCount below and
    // may break search status icon behavior
    preview: true,
};
exports.defaultRequestParams = {
    count: 0,
    offset: 0,
    progress: true,
};
var paramsMapping = {
    earliest: 'earliest_time',
    latest: 'latest_time',
};
var parseQueryParameters = function (options) { return (__assign(__assign({}, exports.defaultParams), mapKeys_1.default(options.queryParameters, function (v, k) {
    return paramsMapping[k] ? paramsMapping[k] : k;
}))); };
var noCollectInSplRegex = new RegExp(/\|\s*collect/gi);
/**
 * A DataSource that talks to splunk enterprise
 * @param {Object} options
 * @param {String} options.query spl query string
 * @param {String} options.queryParameters.earliest earliest time
 * @param {String} options.queryParameters.latest latest time
 * @param {Object} context See [search-job api](https://splunkui.sv.splunk.com/Packages/search-job/API) dispatchOptions object
 * @param {Boolean} [context.keepAlive=true] If true, keep the job alive before teardown
 * @param {Boolean} [context.cache=false] If true, will try and reuse an existing search job if it has the same request params.
 * @param {String} [context.app] The current app in use as defined in the page url and @splunk/splunk-utils/Config
 * @param {String} [context.splunkdPath] splunk rest endpoint path
 * @param {String} [context.sessionKey] current session key
 * @param {String} [context.auditProvenance] provenance value to appear in the splunk audit log
 * @param {String} [context.id] ID of the dashboard performing the query
 * @param {Object} meta
 * @param {Object} baseChainModel base chain definition
 * @returns {SplunkSearch} A new SplunkSearch datasource instance.
 * @public
 */
var SplunkSearch = /** @class */ (function (_super) {
    __extends(SplunkSearch, _super);
    function SplunkSearch(options, context, meta, baseChainModel) {
        if (options === void 0) { options = {}; }
        if (context === void 0) { context = {}; }
        if (meta === void 0) { meta = {}; }
        if (baseChainModel === void 0) { baseChainModel = {}; }
        var _this = _super.call(this, options, context) || this;
        if (!_this.options.query && !_this.options.sid) {
            throw Error('query string or sid is required!');
        }
        // if there is extend, then this is chain search
        _this.extend = _this.options.extend;
        _this.context = SplunkSearchUtils_1.getEnterpriseSearchContext(_this.context);
        _this.options = __assign(__assign({}, parseQueryParameters(_this.options)), { search: _this.options.query, sid: _this.options.sid, check_risky_command: _this.options.checkRiskyCommand, label: _this.context.id });
        if (_this.context.auditProvenance) {
            _this.options.provenance = _this.context.auditProvenance;
        }
        _this.baseChainModel = baseChainModel;
        _this.meta = meta;
        _this.results = {};
        return _this;
    }
    /**
     * Creates a search job and returns sid once the job is created on the server.
     * @returns {Promise} The sid of the created job.
     * @public
     */
    SplunkSearch.prototype.setup = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, splunkdPath, sessionKey, sid, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 4, , 5]);
                        _a = this.context, splunkdPath = _a.splunkdPath, sessionKey = _a.sessionKey;
                        if (splunkdPath) {
                            search_job_1.default.setSplunkConfig({
                                splunkdPath: splunkdPath,
                            });
                        }
                        if (sessionKey) {
                            search_job_1.default.setBaseFetchInit({
                                headers: {
                                    Authorization: "Splunk " + sessionKey,
                                },
                            });
                        }
                        if (this.baseChainModel && this.baseChainModel[this.context.id]) {
                            // this is base data source
                            this.validation();
                            this.options = __assign(__assign({}, this.options), { postprocess_searches: JSON.stringify(BaseChainUtils_1.createPostSearchQueryArray(this.context.id, this.baseChainModel)), auto_cancel: 90, label: this.context.id });
                        }
                        sid = null;
                        if (!this.extend) return [3 /*break*/, 1];
                        if (this.options.sid) {
                            this.searchJob = search_job_1.default.fromSid(this.options.sid);
                        }
                        return [3 /*break*/, 3];
                    case 1:
                        this.searchJob = this.options.sid
                            ? search_job_1.default.fromSid(this.options.sid)
                            : search_job_1.default.create(this.options, this.context);
                        return [4 /*yield*/, this.searchJob.getSid().first().toPromise()];
                    case 2:
                        sid = _b.sent();
                        _b.label = 3;
                    case 3: return [2 /*return*/, sid];
                    case 4:
                        e_1 = _b.sent();
                        if (this.options.sid) {
                            console_1.default.error('failed to retrieve search job:', e_1);
                        }
                        else {
                            console_1.default.error('failed to create search job:', e_1);
                        }
                        this.setupError = e_1;
                        return [2 /*return*/, null];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns an Observable that emits job information and search results.
     *
     * @param requestParams {Object} - [See documentation for available parameters.
     * ](http://docs.splunk.com/Documentation/Splunk/latest/RESTREF/RESTsearch#search.2Fjobs.2F.7Bsearch_id.7D.2Fresults)
     * @returns {Observable}
     * @public
     */
    SplunkSearch.prototype.request = function (requestParams) {
        var _this = this;
        if (requestParams === void 0) { requestParams = {}; }
        if (this.setupError) {
            return function (observer) {
                observer.error({
                    level: 'error',
                    message: _this.setupError.message,
                    meta: {
                        search: _this.options.search,
                    },
                });
                return function () { };
            };
        }
        var key = hash_it_1.default(requestParams);
        var requestResult = this.results[key];
        // One observable serves for all viz and ds subscription with same requestParams
        if (!requestResult && this.searchJob) {
            var searchRequestParams_1 = requestParams;
            if (this.extend) {
                searchRequestParams_1 = __assign(__assign({}, requestParams), { check_risky_command: this.options.check_risky_command, search: this.parentChainQuery
                        ? BaseChainUtils_1.mergeSearches(this.parentChainQuery, this.options.search)
                        : this.options.search });
            }
            var params_1 = __assign(__assign(__assign({}, exports.defaultRequestParams), searchRequestParams_1), exports.ownRequestParams);
            if (params_1.sort) {
                var sortStr_1 = '';
                Object.keys(params_1.sort).forEach(function (sortKey) {
                    var sortDir = params_1.sort[sortKey];
                    if (sortDir) {
                        if (sortDir === 'desc') {
                            sortStr_1 += " -\"" + sortKey + "\"";
                        }
                        else if (sortDir === 'asc') {
                            sortStr_1 += " +\"" + sortKey + "\"";
                        }
                    }
                });
                if (sortStr_1) {
                    if (params_1.search) {
                        params_1.search += ' | sort 0';
                    }
                    else {
                        params_1.search = '| sort 0';
                    }
                    params_1.search += sortStr_1;
                }
                delete params_1.sort;
            }
            var progressObservable = this.searchJob.getProgress();
            requestResult = params_1.progress
                ? SplunkSearchUtils_1.combineResultWhenProgress(this.searchJob.getResultsPreview(params_1, {
                    fetchPredicate: SplunkSearchUtils_1.previewFetchPredicate,
                }), progressObservable, 
                // populate the search query to the chained data source for construct the chain-chain query
                function (results, progress) {
                    return SplunkSearchUtils_1.projectFunc(results, progress, searchRequestParams_1.search);
                })
                : SplunkSearchUtils_1.combineResultWhenFinalized(this.searchJob.getResults(params_1), progressObservable, function (results, progress) {
                    return SplunkSearchUtils_1.projectFunc(results, progress, searchRequestParams_1.search);
                });
            this.results[key] = requestResult;
        }
        return function (observer) {
            // note: due to the nature that 'data' and 'meta' are from two different endpoints, there's no
            // way to guarantee that they always match. But they'll eventually match when search is done.
            // no search job? then return a empty Observable
            var result = requestResult || rxjs_1.Observable.of();
            var subscription = result.subscribe(SplunkSearchUtils_1.transformObserver(observer, _this.completeSearchQuery || _this.options.search));
            return function () {
                subscription.unsubscribe();
            };
        };
    };
    /**
     * Cancel the search job and returns the server response.
     * Job will not be cancelled if `context.cache` is true.
     * @returns {Promise}
     * @public
     */
    SplunkSearch.prototype.teardown = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cache;
            return __generator(this, function (_a) {
                this.results = null;
                // chain search does not cancel search job
                if (this.extend) {
                    return [2 /*return*/, null];
                }
                try {
                    cache = this.context.cache;
                    if (!cache && this.searchJob) {
                        return [2 /*return*/, this.searchJob.cancel().first().toPromise()];
                    }
                    return [2 /*return*/, null];
                }
                catch (ex) {
                    console_1.default.error('failed to cancel search job:', ex);
                    return [2 /*return*/, null];
                }
                return [2 /*return*/];
            });
        });
    };
    SplunkSearch.prototype.getObserver = function () {
        var _this = this;
        return {
            next: function (_a) {
                var _b = _a.meta, sid = _b.sid, search = _b.search, checkRiskyCommand = _b.checkRiskyCommand, completeSearchQuery = _b.completeSearchQuery;
                _this.parentChainQuery = search;
                _this.completeSearchQuery = completeSearchQuery;
                if (_this.options.sid !== sid ||
                    _this.options.check_risky_command !== checkRiskyCommand) {
                    _this.options.sid = sid;
                    _this.options.check_risky_command = checkRiskyCommand;
                    _this.results = {};
                    _this.shouldRefreshSub = true;
                    // re-create SearchJob. setup() is async but should be fine here
                    _this.setup();
                }
                else {
                    _this.shouldRefreshSub = false;
                }
            },
            error: function (error) {
                console_1.default.log(error);
            },
        };
    };
    SplunkSearch.prototype.shouldRefreshSubscription = function () {
        return this.shouldRefreshSub;
    };
    SplunkSearch.prototype.validation = function () {
        if (this.options.search &&
            noCollectInSplRegex.test(this.options.search)) {
            throw new Error(i18n_1._("The \"collect\" command cannot be used in a base search. Use an ad-hoc search for data source " + this.context.id + " to use the \"collect\" command."));
        }
    };
    SplunkSearch.schema = SplunkSearchOptionsSchema_1.default;
    return SplunkSearch;
}(DataSource_1.default));
SplunkSearch.config = {
    title: function (_a) {
        var searchType = _a.searchType;
        return searchType === 'ds.search' ? i18n_1._('Search') : i18n_1._('Chain Search');
    },
    displayDataSourceItemListByDefault: true,
    canCreateDataSource: true,
    dataSourceRemoveVerb: 'delete',
    isDataSourceNameEditable: true,
    getDataSourceName: function (_a) {
        var dataSource = _a.dataSource;
        return get_1.default(dataSource, 'name', i18n_1._('Unnamed'));
    },
    defaultOptions: function (_a) {
        var searchType = _a.searchType, definition = _a.definition;
        return searchType === 'ds.search'
            ? SearchConfigUtils_1.getDefaultOptionsForSearchQuery(definition)
            : {};
    },
    editorConfig: [],
    optionsSchema: SplunkSearchOptionsSchema_1.default,
    isChainEnabled: true,
};
exports.default = SplunkSearch;


/***/ }),
/* 38 */
/***/ (function(module, exports) {

module.exports = require("lodash/mapKeys");

/***/ }),
/* 39 */
/***/ (function(module, exports) {

module.exports = require("hash-it");

/***/ }),
/* 40 */
/***/ (function(module, exports) {

module.exports = require("@splunk/datasource-utils/BaseChainUtils");

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var datasource_utils_1 = __webpack_require__(13);
var DataSource_1 = __importDefault(__webpack_require__(0));
var TestDataSourceOptionsSchema_1 = __importDefault(__webpack_require__(23));
var SimpleScheduler_1 = __importDefault(__webpack_require__(11));
/**
 * @class TestDataSource
 */
var TestDataSource = /** @class */ (function (_super) {
    __extends(TestDataSource, _super);
    /**
     * Test Datasource
     * @param {Object} options.data static data set
     * @param {Number} [options.delay=0] time before first results return (deprecated)
     * @param {Object} [options.meta] Return meta, merged with search progress
     * @param {*} [options.errorLevel] Passthrough data for errors
     * @param {String} [options.error] Passthrough error message - Set to create an erroring datasource
     * @param {Number} [options.timeToStart=0] time before first results return (same as delay)
     * @param {Number} [options.timeToComplete=0] time before all results return (same as delay)
     * @param {Number} [options.timeToStart=0] time before results return (same as delay)
     * @param {Number} [options.increments=10] Number of times to return partial results after initial delay
     * @param {Object} context
     */
    function TestDataSource(options, context) {
        if (options === void 0) { options = {}; }
        if (context === void 0) { context = {}; }
        var _a;
        var _this = _super.call(this, options, context) || this;
        _this.data = options.data ? options.data : { fields: [], columns: [] };
        _this.meta = (_a = options.meta) !== null && _a !== void 0 ? _a : {};
        _this.timeToStart = options.delay || options.timeToStart || 0;
        _this.errorLevel = options.errorLevel;
        _this.error = options.error;
        var timeToComplete = options.timeToComplete || 0;
        var increments = Math.max(options.increments || 10, 1);
        _this.timePerUpdate = timeToComplete / increments;
        _this.incrementSize = Math.ceil(100 / increments);
        _this.progress = timeToComplete ? 0 : 100;
        _this.status = 'queued';
        return _this;
    }
    /**
     * Create a DataSet
     * @param {Object} [config]
     * @param {Array} [config.fields=[]] List of field names
     * @param {Array[]} [config.columns=[]] List of column data
     * @return {DataSet}
     */
    // eslint-disable-next-line class-methods-use-this
    TestDataSource.prototype.toDataSet = function (_a) {
        var _b = _a.fields, fields = _b === void 0 ? [] : _b, _c = _a.columns, columns = _c === void 0 ? [] : _c;
        return datasource_utils_1.DataSet.fromJSONCols(fields, columns);
    };
    /**
     * Calculate the partial results for a dataset
     * @returns {DataSet}
     */
    TestDataSource.prototype.getData = function (requestParams) {
        if (this.progress >= 100) {
            // for now, we only allow pagination for completed data source
            return this.toDataSet(this.data).getPage({
                count: requestParams === null || requestParams === void 0 ? void 0 : requestParams.count,
                offset: requestParams === null || requestParams === void 0 ? void 0 : requestParams.offset,
            });
        }
        var data = { fields: this.data.fields, columns: [] };
        var size = Math.floor(this.data.columns[0].length * (this.progress / 100));
        this.data.columns.forEach(function (column) {
            if (!size) {
                data.columns.push([]);
            }
            else {
                data.columns.push(column.slice(0, size));
            }
        });
        return this.toDataSet(data);
    };
    /**
     * Calculate the content of meta
     * @return {Object}
     */
    TestDataSource.prototype.getMeta = function () {
        var meta = __assign(__assign({}, this.meta), { status: this.status });
        if (this.status === 'failed') {
            return meta;
        }
        meta.percentComplete = this.progress;
        // Number of results produced so far...
        meta.totalCount = Math.floor(this.data.columns[0].length * (this.progress / 100));
        if (this.status !== 'queued') {
            meta.lastUpdated = new Date().toISOString();
        }
        return meta;
    };
    /**
     * Creates loop to request and return results
     * @return {Function} Given an observable, schedule data updates over time
     */
    TestDataSource.prototype.request = function (requestParams) {
        var _this = this;
        return function (observer) {
            if (!observer) {
                return function () { return undefined; };
            }
            if (_this.error) {
                _this.status = 'failed';
                observer.error({
                    level: _this.errorLevel,
                    message: _this.error,
                    meta: _this.getMeta(),
                });
                return function () { return undefined; };
            }
            var resultScheduler;
            var timer = setTimeout(function () {
                _this.status = 'running';
                resultScheduler = SimpleScheduler_1.default.createScheduler(function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        if (this.progress >= 100) {
                            this.status = 'done';
                        }
                        observer.next({
                            data: this.getData(requestParams),
                            meta: this.getMeta(),
                        });
                        if (this.progress >= 100) {
                            observer.complete();
                        }
                        this.progress = Math.min(this.progress + this.incrementSize, 100);
                        return [2 /*return*/, this.timePerUpdate];
                    });
                }); });
                // kick off the loop
                resultScheduler.start();
            }, _this.timeToStart);
            return function () {
                clearTimeout(timer);
                if (_this.status === 'running') {
                    _this.status = 'canceled';
                }
                if (resultScheduler) {
                    resultScheduler.stop();
                }
            };
        };
    };
    /**
     * List of valid configuration options
     * @static
     */
    TestDataSource.schema = TestDataSourceOptionsSchema_1.default;
    TestDataSource.config = {
        optionsSchema: TestDataSourceOptionsSchema_1.default,
    };
    return TestDataSource;
}(DataSource_1.default));
exports.default = TestDataSource;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestDataSource = exports.SplunkSearch = exports.SplunkSavedSearch = exports.SnapshotDataSource = exports.CloudSearch = exports.DataSource = void 0;
var DataSource_1 = __webpack_require__(0);
Object.defineProperty(exports, "DataSource", { enumerable: true, get: function () { return __importDefault(DataSource_1).default; } });
var CloudSearch_1 = __webpack_require__(24);
Object.defineProperty(exports, "CloudSearch", { enumerable: true, get: function () { return __importDefault(CloudSearch_1).default; } });
var SnapshotDataSource_1 = __webpack_require__(34);
Object.defineProperty(exports, "SnapshotDataSource", { enumerable: true, get: function () { return __importDefault(SnapshotDataSource_1).default; } });
var SplunkSavedSearch_1 = __webpack_require__(35);
Object.defineProperty(exports, "SplunkSavedSearch", { enumerable: true, get: function () { return __importDefault(SplunkSavedSearch_1).default; } });
var SplunkSearch_1 = __webpack_require__(37);
Object.defineProperty(exports, "SplunkSearch", { enumerable: true, get: function () { return __importDefault(SplunkSearch_1).default; } });
var TestDataSource_1 = __webpack_require__(41);
Object.defineProperty(exports, "TestDataSource", { enumerable: true, get: function () { return __importDefault(TestDataSource_1).default; } });
__exportStar(__webpack_require__(43), exports);


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });


/***/ })
/******/ ]);
//# sourceMappingURL=index.js.map