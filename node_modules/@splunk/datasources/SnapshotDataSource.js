/*!
 * Copyright © 2020 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 34);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable class-methods-use-this,no-unused-vars, @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function */
var isEqual_1 = __importDefault(__webpack_require__(1));
var isEmpty_1 = __importDefault(__webpack_require__(2));
var deprecated_1 = __importDefault(__webpack_require__(3));
/**
 * Base class of a DataSource
 */
var DataSource = /** @class */ (function () {
    /**
     * Create a new DataSource Instance
     * @param {Object} options DataSource options such as search string, earliest/latest time
     * @param {Object} context contextual information such as api key or scope
     * @param {Object} meta metadata of this datasource
     * @param {Object} baseChainModel base chain definition
     */
    function DataSource(options, context, meta, baseChainModel) {
        if (options === void 0) { options = {}; }
        if (context === void 0) { context = {}; }
        if (meta === void 0) { meta = {}; }
        if (baseChainModel === void 0) { baseChainModel = {}; }
        this.options = options;
        this.context = context;
        this.meta = meta;
        this.baseChainModel = baseChainModel;
        if (!isEmpty_1.default(meta)) {
            deprecated_1.default('Property "meta" has been deprecated');
        }
        if (!isEmpty_1.default(baseChainModel)) {
            deprecated_1.default('Property "baseChainModel" has been deprecated');
        }
    }
    /**
     * setup the DataSource, this is the place where you can setup your connection or create the search job.
     * setup will be called only once per DataSource.
     * @return {Promise}
     * @public
     */
    DataSource.prototype.setup = function () {
        return Promise.resolve(null);
    };
    /**
     * Request a Data Stream represent by an Observable.
     * Once the Observable was created and returned,
     * it's the DataSource itself responsible for 'pushing' the data out via Observable.next() function.
     * Override this function to implement your own data fetching logic.
     *
     * @param {Object} [requestParams] RequestParams
     * @param {Number} [requestParams.offset] result offset
     * @param {Number} [requestParams.count] result count, use with offset to return data in pages
     * @param {Object} [requestParams.sort] result sorting, key indicate the sorting fields and value must be one of ['none', 'asc', 'desc']
     * @param {Boolean} [requestParams.requireTotalCount] true if TotalCount is required in meta
     * @param {Boolean} [requestParams.progress] true to emit progress data, false to only return data when search is finalized
     * @return {Observable}
     * @public
     */
    DataSource.prototype.request = function (requestParams) {
        return function (observer) {
            if (observer) {
                observer.complete();
            }
            return function () {
                // cleanup
            };
        };
    };
    /**
     * teardown the DataSource, clear up connection or other resources
     * @return {Promise}
     * @public
     */
    DataSource.prototype.teardown = function () {
        return Promise.resolve(null);
    };
    /**
     * @param {DataSource} another another DataSource to compare with
     * @return {Boolean} true if the these two DataSources are considered equal.
     * @public
     */
    DataSource.prototype.equals = function (another) {
        return (this.constructor === another.constructor &&
            isEqual_1.default(this.options, another.options));
    };
    /**
     * return an observer that can be used to chain with other data source
     * @return {Object}
     * @public
     */
    DataSource.prototype.getObserver = function () {
        return {
            next: function (_a) {
                var requestParams = _a.requestParams, data = _a.data, meta = _a.meta;
                // next
            },
            error: function (_a) {
                var level = _a.level, message = _a.message;
                // error
            },
            complete: function () {
                // complete
            },
        };
    };
    /**
     * flag used to show if the subscription for this data source should be refresh
     * @return {Boolean}
     * @public
     */
    DataSource.prototype.shouldRefreshSubscription = function () {
        return false;
    };
    return DataSource;
}());
exports.default = DataSource;


/***/ }),

/***/ 1:
/***/ (function(module, exports) {

module.exports = require("lodash/isEqual");

/***/ }),

/***/ 13:
/***/ (function(module, exports) {

module.exports = require("@splunk/datasource-utils");

/***/ }),

/***/ 2:
/***/ (function(module, exports) {

module.exports = require("lodash/isEmpty");

/***/ }),

/***/ 3:
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-utils/deprecated");

/***/ }),

/***/ 34:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var datasource_utils_1 = __webpack_require__(13);
var DataSource_1 = __importDefault(__webpack_require__(0));
var SnapshotDataSource = /** @class */ (function (_super) {
    __extends(SnapshotDataSource, _super);
    function SnapshotDataSource(options, context) {
        if (options === void 0) { options = {}; }
        if (context === void 0) { context = {}; }
        var _a, _b;
        var _this = _super.call(this, options, context) || this;
        if (options.data) {
            _this.data = datasource_utils_1.DataSet.fromJSONCols(options.data.fields, options.data.columns);
        }
        else {
            _this.data = datasource_utils_1.DataSet.fromJSONCols([], []);
        }
        _this.meta = (_a = options.meta) !== null && _a !== void 0 ? _a : {};
        _this.delay = (_b = options.delay) !== null && _b !== void 0 ? _b : 0;
        _this.errorLevel = options.errorLevel;
        _this.error = options.error;
        return _this;
    }
    SnapshotDataSource.prototype.request = function (requestParams) {
        var _this = this;
        return function (observer) {
            var timer;
            if (observer) {
                if (_this.error) {
                    observer.error({
                        level: _this.errorLevel,
                        message: _this.error,
                    });
                    return function () { return undefined; };
                }
                timer = setTimeout(function () {
                    observer.next({
                        data: _this.data.getPage({
                            count: requestParams === null || requestParams === void 0 ? void 0 : requestParams.count,
                            offset: requestParams === null || requestParams === void 0 ? void 0 : requestParams.offset,
                        }),
                        meta: __assign(__assign({}, _this.meta), { totalCount: _this.data.getTotalCount() }),
                    });
                    observer.complete();
                }, _this.delay);
            }
            return function () {
                clearTimeout(timer);
            };
        };
    };
    return SnapshotDataSource;
}(DataSource_1.default));
exports.default = SnapshotDataSource;


/***/ })

/******/ });
//# sourceMappingURL=SnapshotDataSource.js.map