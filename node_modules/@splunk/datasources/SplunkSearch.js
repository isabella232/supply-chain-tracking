/*!
 * Copyright © 2020 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 37);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable class-methods-use-this,no-unused-vars, @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function */
var isEqual_1 = __importDefault(__webpack_require__(1));
var isEmpty_1 = __importDefault(__webpack_require__(2));
var deprecated_1 = __importDefault(__webpack_require__(3));
/**
 * Base class of a DataSource
 */
var DataSource = /** @class */ (function () {
    /**
     * Create a new DataSource Instance
     * @param {Object} options DataSource options such as search string, earliest/latest time
     * @param {Object} context contextual information such as api key or scope
     * @param {Object} meta metadata of this datasource
     * @param {Object} baseChainModel base chain definition
     */
    function DataSource(options, context, meta, baseChainModel) {
        if (options === void 0) { options = {}; }
        if (context === void 0) { context = {}; }
        if (meta === void 0) { meta = {}; }
        if (baseChainModel === void 0) { baseChainModel = {}; }
        this.options = options;
        this.context = context;
        this.meta = meta;
        this.baseChainModel = baseChainModel;
        if (!isEmpty_1.default(meta)) {
            deprecated_1.default('Property "meta" has been deprecated');
        }
        if (!isEmpty_1.default(baseChainModel)) {
            deprecated_1.default('Property "baseChainModel" has been deprecated');
        }
    }
    /**
     * setup the DataSource, this is the place where you can setup your connection or create the search job.
     * setup will be called only once per DataSource.
     * @return {Promise}
     * @public
     */
    DataSource.prototype.setup = function () {
        return Promise.resolve(null);
    };
    /**
     * Request a Data Stream represent by an Observable.
     * Once the Observable was created and returned,
     * it's the DataSource itself responsible for 'pushing' the data out via Observable.next() function.
     * Override this function to implement your own data fetching logic.
     *
     * @param {Object} [requestParams] RequestParams
     * @param {Number} [requestParams.offset] result offset
     * @param {Number} [requestParams.count] result count, use with offset to return data in pages
     * @param {Object} [requestParams.sort] result sorting, key indicate the sorting fields and value must be one of ['none', 'asc', 'desc']
     * @param {Boolean} [requestParams.requireTotalCount] true if TotalCount is required in meta
     * @param {Boolean} [requestParams.progress] true to emit progress data, false to only return data when search is finalized
     * @return {Observable}
     * @public
     */
    DataSource.prototype.request = function (requestParams) {
        return function (observer) {
            if (observer) {
                observer.complete();
            }
            return function () {
                // cleanup
            };
        };
    };
    /**
     * teardown the DataSource, clear up connection or other resources
     * @return {Promise}
     * @public
     */
    DataSource.prototype.teardown = function () {
        return Promise.resolve(null);
    };
    /**
     * @param {DataSource} another another DataSource to compare with
     * @return {Boolean} true if the these two DataSources are considered equal.
     * @public
     */
    DataSource.prototype.equals = function (another) {
        return (this.constructor === another.constructor &&
            isEqual_1.default(this.options, another.options));
    };
    /**
     * return an observer that can be used to chain with other data source
     * @return {Object}
     * @public
     */
    DataSource.prototype.getObserver = function () {
        return {
            next: function (_a) {
                var requestParams = _a.requestParams, data = _a.data, meta = _a.meta;
                // next
            },
            error: function (_a) {
                var level = _a.level, message = _a.message;
                // error
            },
            complete: function () {
                // complete
            },
        };
    };
    /**
     * flag used to show if the subscription for this data source should be refresh
     * @return {Boolean}
     * @public
     */
    DataSource.prototype.shouldRefreshSubscription = function () {
        return false;
    };
    return DataSource;
}());
exports.default = DataSource;


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("lodash/isEqual");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("lodash/isEmpty");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-utils/deprecated");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("lodash/get");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("@splunk/ui-utils/i18n");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("rxjs");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("lodash/pick");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = require("@splunk/datasource-utils/DataSet");

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = require("@splunk/splunk-utils/config");

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = require("@splunk/moment");

/***/ }),
/* 11 */,
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultOptionsForSearchQuery = void 0;
var memoize_1 = __importDefault(__webpack_require__(19));
var DashboardDefinition_1 = __importDefault(__webpack_require__(20));
exports.getDefaultOptionsForSearchQuery = memoize_1.default(function (definition) {
    var def = DashboardDefinition_1.default.fromJSON(definition);
    var timeRange = def.getDefaultTimeRangeForNewSearch();
    if (timeRange.earliest || timeRange.latest) {
        return {
            queryParameters: __assign({}, timeRange),
        };
    }
    return {};
}, 
// note: this is the resolver function that uses a dirty trick to avoid re-creating the object
function (definition) {
    var def = DashboardDefinition_1.default.fromJSON(definition);
    var timeRange = def.getDefaultTimeRangeForNewSearch();
    return JSON.stringify(timeRange);
});


/***/ }),
/* 13 */,
/* 14 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-utils/console");

/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = require("@splunk/search-job");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEnterpriseSearchContext = exports.previewFetchPredicate = exports.transformObserver = exports.combineResultWhenFinalized = exports.combineResultWhenProgress = exports.projectFunc = exports.getStatusMessage = void 0;
var pick_1 = __importDefault(__webpack_require__(7));
var get_1 = __importDefault(__webpack_require__(4));
var rxjs_1 = __webpack_require__(6);
var i18n_1 = __webpack_require__(5);
var DataSet_1 = __importDefault(__webpack_require__(8));
var moment_1 = __importDefault(__webpack_require__(10));
var config_1 = __webpack_require__(9);
/**
 * Get status message based on search job properties
 * @param {String} status the status returned by the search job
 * @param {Boolean} isRealTimeSearch
 * @param {Number} totalCount the total number of search results retrieved
 * @returns {String} status message
 */
var getStatusMessage = function (_a) {
    var status = _a.status, isRealTimeSearch = _a.isRealTimeSearch, totalCount = _a.totalCount;
    if (status === 'running') {
        if (isRealTimeSearch) {
            return i18n_1._('Real-time search is running');
        }
        if (totalCount === 0) {
            return i18n_1._('Search is running, but not enough data to render visualization');
        }
    }
    if (status === 'queued') {
        return i18n_1._('Search is not yet running, queued on server');
    }
    if (status === 'parsing') {
        return i18n_1._('Search is not yet running, queued on server');
    }
    if (status === 'done' && totalCount === 0) {
        return i18n_1._('Search ran successfully, but no results were returned');
    }
    return '';
};
exports.getStatusMessage = getStatusMessage;
// this is a list of properties that will be removed or normalized in the future. Refer to the RFC 2020_05_05-search_job_metadata.md
var deprecatedSearchMetas = ['resultCount', 'isDone', 'dispatchState'];
/**
 * Formats the results of a Splunk SearchJob to use in UDF
 * @param {Object} results search results object
 * @param {Object} progress search progress object
 * @param {String} search search query
 * @returns {Object} Formatted data and metadata
 */
var projectFunc = function (results, progress, search) {
    var fields = results.fields, columns = results.columns, postProcessCount = results.post_process_count;
    var _a = progress.content, isRealTimeSearch = _a.isRealTimeSearch, resultPreviewCount = _a.resultPreviewCount, resultCount = _a.resultCount;
    // totalCount is required for pagination.
    var totalCount;
    if (postProcessCount != null) {
        // for post process searches, the totalCount is post_process_count in the results, NOT the resultPreviewCount/resultCount in the jobProperties.
        totalCount = postProcessCount;
    }
    else if (resultPreviewCount != null) {
        // we look at resultPreviewCount since that is always set when preview = true.
        // when search job is done, resultPreviewCount can be null,
        // see https://splunk.slack.com/archives/C8YPWKC4U/p1591290195175900 for more context.
        totalCount = resultPreviewCount;
    }
    else {
        totalCount = resultCount;
    }
    var status = progress.content.dispatchState.toLowerCase();
    return {
        data: new DataSet_1.default(fields, columns),
        meta: __assign(__assign({}, pick_1.default(progress.content, deprecatedSearchMetas)), { sid: progress.content.sid, totalCount: totalCount,
            status: status, statusMessage: exports.getStatusMessage({
                status: status,
                isRealTimeSearch: isRealTimeSearch,
                totalCount: totalCount,
            }), 
            // need to manually convert progress from [0, 1] to [0, 100]
            percentComplete: status === 'done'
                ? 100
                : Math.round(progress.content.doneProgress * 100), isRealTimeSearch: isRealTimeSearch, lastUpdated: moment_1.default(progress.published)
                .add(pick_1.default(progress.content, 'runDuration'), 'seconds')
                .toISOString(), search: search }),
    };
};
exports.projectFunc = projectFunc;
/**
 * return an Observable that will emit intermediate search result
 * @param {Observable} resultsObservable observable for the search results
 * @param {Observable} progressObservable observable for the search progress so far
 * @param {Function} callback project function to transform the values emitted by the Observable
 */
var combineResultWhenProgress = function (resultsObservable, progressObservable, callback) { return rxjs_1.Observable.combineLatest(resultsObservable, progressObservable, callback); };
exports.combineResultWhenProgress = combineResultWhenProgress;
/**
 * return an Observable that will emit final search result
 * @param {Observable} resultsObservable observable for the search results
 * @param {Observable} progressObservable observable for the search progress so far
 * @param {Function} callback project function to transform the values emitted by the Observable
 */
var combineResultWhenFinalized = function (resultsObservable, progressObservable, callback) { return rxjs_1.Observable.forkJoin(resultsObservable, progressObservable, callback); };
exports.combineResultWhenFinalized = combineResultWhenFinalized;
/**
 * Wraps the observer to improve the error handling
 * @param {Observer} observer the observer to be wrapped
 * @param {string} search the search query
 * @returns {Observer} the wrapped observer
 */
var transformObserver = function (observer, search) { return ({
    next: function (response) { return observer.next(response); },
    error: function (err) {
        return observer.error({
            level: 'error',
            message: err.message,
            meta: {
                search: search,
            },
        });
    },
    complete: function () { return observer.complete(); },
}); };
exports.transformObserver = transformObserver;
/**
 * Determine if a fetch is needed based on the given search preview state
 * @param {Object} searchState search preview state
 * @returns {Boolean}
 */
var previewFetchPredicate = function (searchState) {
    if (get_1.default(searchState, ['content', 'isRealTimeSearch'], false)) {
        return true;
    }
    // we do a fetch when
    // 1. result count > 0
    // 2. search is done so we can make sure we always return the result
    return (get_1.default(searchState, ['content', 'resultPreviewCount'], 0) > 0 ||
        !!get_1.default(searchState, ['content', 'isDone']));
};
exports.previewFetchPredicate = previewFetchPredicate;
/**
 * Provides common options for splunk search dispatch options
 * @param {Object} context Object containing any configurable dispatchOptions from splunk/search-job
 * @returns {Object}
 */
var getEnterpriseSearchContext = function (context) {
    return __assign({ keepAlive: true, cache: false, app: config_1.app }, context);
};
exports.getEnterpriseSearchContext = getEnterpriseSearchContext;


/***/ }),
/* 17 */,
/* 18 */,
/* 19 */
/***/ (function(module, exports) {

module.exports = require("lodash/memoize");

/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-definition/DashboardDefinition");

/***/ }),
/* 21 */,
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    query: {
        type: 'string',
        description: 'An SPL search string.',
    },
    queryParameters: {
        type: 'object',
        properties: {
            earliest: {
                type: 'string',
                description: "Specify the earliest time to search for events. Choose from year (y), month (m), week (w), day (d), minute, (m), or second (s), or 0 for all time.\n                See the examples below.",
            },
            latest: {
                type: 'string',
                description: "Specify the earliest time to search for events. Choose from year (y), month (m), week (w), day (d), minute, (m), second (s), or now.\n                See the examples below.",
            },
        },
        additionalProperties: false,
        description: 'SPL query parameters, only contains earliest and latest for now.',
    },
    refresh: {
        type: ['number', 'string'],
        description: 'Specify the refresh interval in seconds or with a time expression.',
    },
    refreshType: {
        type: 'string',
        enum: ['delay', 'interval'],
        default: 'delay',
        description: 'Indicate the starting time for counting down to a refresh. Use delay to start counting when the search is done. Use interval to count down when the search is dispatched.',
    },
};


/***/ }),
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultRequestParams = exports.defaultParams = exports.ownRequestParams = void 0;
var mapKeys_1 = __importDefault(__webpack_require__(38));
var get_1 = __importDefault(__webpack_require__(4));
var hash_it_1 = __importDefault(__webpack_require__(39));
var console_1 = __importDefault(__webpack_require__(14));
var search_job_1 = __importDefault(__webpack_require__(15));
var i18n_1 = __webpack_require__(5);
var rxjs_1 = __webpack_require__(6);
var BaseChainUtils_1 = __webpack_require__(40);
var DataSource_1 = __importDefault(__webpack_require__(0));
var SplunkSearchOptionsSchema_1 = __importDefault(__webpack_require__(22));
var SplunkSearchUtils_1 = __webpack_require__(16);
var SearchConfigUtils_1 = __webpack_require__(12);
exports.ownRequestParams = {
    output_mode: 'json_cols',
};
exports.defaultParams = {
    // Note: if preview is changed to false, we will not get resultPreviewCount below and
    // may break search status icon behavior
    preview: true,
};
exports.defaultRequestParams = {
    count: 0,
    offset: 0,
    progress: true,
};
var paramsMapping = {
    earliest: 'earliest_time',
    latest: 'latest_time',
};
var parseQueryParameters = function (options) { return (__assign(__assign({}, exports.defaultParams), mapKeys_1.default(options.queryParameters, function (v, k) {
    return paramsMapping[k] ? paramsMapping[k] : k;
}))); };
var noCollectInSplRegex = new RegExp(/\|\s*collect/gi);
/**
 * A DataSource that talks to splunk enterprise
 * @param {Object} options
 * @param {String} options.query spl query string
 * @param {String} options.queryParameters.earliest earliest time
 * @param {String} options.queryParameters.latest latest time
 * @param {Object} context See [search-job api](https://splunkui.sv.splunk.com/Packages/search-job/API) dispatchOptions object
 * @param {Boolean} [context.keepAlive=true] If true, keep the job alive before teardown
 * @param {Boolean} [context.cache=false] If true, will try and reuse an existing search job if it has the same request params.
 * @param {String} [context.app] The current app in use as defined in the page url and @splunk/splunk-utils/Config
 * @param {String} [context.splunkdPath] splunk rest endpoint path
 * @param {String} [context.sessionKey] current session key
 * @param {String} [context.auditProvenance] provenance value to appear in the splunk audit log
 * @param {String} [context.id] ID of the dashboard performing the query
 * @param {Object} meta
 * @param {Object} baseChainModel base chain definition
 * @returns {SplunkSearch} A new SplunkSearch datasource instance.
 * @public
 */
var SplunkSearch = /** @class */ (function (_super) {
    __extends(SplunkSearch, _super);
    function SplunkSearch(options, context, meta, baseChainModel) {
        if (options === void 0) { options = {}; }
        if (context === void 0) { context = {}; }
        if (meta === void 0) { meta = {}; }
        if (baseChainModel === void 0) { baseChainModel = {}; }
        var _this = _super.call(this, options, context) || this;
        if (!_this.options.query && !_this.options.sid) {
            throw Error('query string or sid is required!');
        }
        // if there is extend, then this is chain search
        _this.extend = _this.options.extend;
        _this.context = SplunkSearchUtils_1.getEnterpriseSearchContext(_this.context);
        _this.options = __assign(__assign({}, parseQueryParameters(_this.options)), { search: _this.options.query, sid: _this.options.sid, check_risky_command: _this.options.checkRiskyCommand, label: _this.context.id });
        if (_this.context.auditProvenance) {
            _this.options.provenance = _this.context.auditProvenance;
        }
        _this.baseChainModel = baseChainModel;
        _this.meta = meta;
        _this.results = {};
        return _this;
    }
    /**
     * Creates a search job and returns sid once the job is created on the server.
     * @returns {Promise} The sid of the created job.
     * @public
     */
    SplunkSearch.prototype.setup = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, splunkdPath, sessionKey, sid, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 4, , 5]);
                        _a = this.context, splunkdPath = _a.splunkdPath, sessionKey = _a.sessionKey;
                        if (splunkdPath) {
                            search_job_1.default.setSplunkConfig({
                                splunkdPath: splunkdPath,
                            });
                        }
                        if (sessionKey) {
                            search_job_1.default.setBaseFetchInit({
                                headers: {
                                    Authorization: "Splunk " + sessionKey,
                                },
                            });
                        }
                        if (this.baseChainModel && this.baseChainModel[this.context.id]) {
                            // this is base data source
                            this.validation();
                            this.options = __assign(__assign({}, this.options), { postprocess_searches: JSON.stringify(BaseChainUtils_1.createPostSearchQueryArray(this.context.id, this.baseChainModel)), auto_cancel: 90, label: this.context.id });
                        }
                        sid = null;
                        if (!this.extend) return [3 /*break*/, 1];
                        if (this.options.sid) {
                            this.searchJob = search_job_1.default.fromSid(this.options.sid);
                        }
                        return [3 /*break*/, 3];
                    case 1:
                        this.searchJob = this.options.sid
                            ? search_job_1.default.fromSid(this.options.sid)
                            : search_job_1.default.create(this.options, this.context);
                        return [4 /*yield*/, this.searchJob.getSid().first().toPromise()];
                    case 2:
                        sid = _b.sent();
                        _b.label = 3;
                    case 3: return [2 /*return*/, sid];
                    case 4:
                        e_1 = _b.sent();
                        if (this.options.sid) {
                            console_1.default.error('failed to retrieve search job:', e_1);
                        }
                        else {
                            console_1.default.error('failed to create search job:', e_1);
                        }
                        this.setupError = e_1;
                        return [2 /*return*/, null];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns an Observable that emits job information and search results.
     *
     * @param requestParams {Object} - [See documentation for available parameters.
     * ](http://docs.splunk.com/Documentation/Splunk/latest/RESTREF/RESTsearch#search.2Fjobs.2F.7Bsearch_id.7D.2Fresults)
     * @returns {Observable}
     * @public
     */
    SplunkSearch.prototype.request = function (requestParams) {
        var _this = this;
        if (requestParams === void 0) { requestParams = {}; }
        if (this.setupError) {
            return function (observer) {
                observer.error({
                    level: 'error',
                    message: _this.setupError.message,
                    meta: {
                        search: _this.options.search,
                    },
                });
                return function () { };
            };
        }
        var key = hash_it_1.default(requestParams);
        var requestResult = this.results[key];
        // One observable serves for all viz and ds subscription with same requestParams
        if (!requestResult && this.searchJob) {
            var searchRequestParams_1 = requestParams;
            if (this.extend) {
                searchRequestParams_1 = __assign(__assign({}, requestParams), { check_risky_command: this.options.check_risky_command, search: this.parentChainQuery
                        ? BaseChainUtils_1.mergeSearches(this.parentChainQuery, this.options.search)
                        : this.options.search });
            }
            var params_1 = __assign(__assign(__assign({}, exports.defaultRequestParams), searchRequestParams_1), exports.ownRequestParams);
            if (params_1.sort) {
                var sortStr_1 = '';
                Object.keys(params_1.sort).forEach(function (sortKey) {
                    var sortDir = params_1.sort[sortKey];
                    if (sortDir) {
                        if (sortDir === 'desc') {
                            sortStr_1 += " -\"" + sortKey + "\"";
                        }
                        else if (sortDir === 'asc') {
                            sortStr_1 += " +\"" + sortKey + "\"";
                        }
                    }
                });
                if (sortStr_1) {
                    if (params_1.search) {
                        params_1.search += ' | sort 0';
                    }
                    else {
                        params_1.search = '| sort 0';
                    }
                    params_1.search += sortStr_1;
                }
                delete params_1.sort;
            }
            var progressObservable = this.searchJob.getProgress();
            requestResult = params_1.progress
                ? SplunkSearchUtils_1.combineResultWhenProgress(this.searchJob.getResultsPreview(params_1, {
                    fetchPredicate: SplunkSearchUtils_1.previewFetchPredicate,
                }), progressObservable, 
                // populate the search query to the chained data source for construct the chain-chain query
                function (results, progress) {
                    return SplunkSearchUtils_1.projectFunc(results, progress, searchRequestParams_1.search);
                })
                : SplunkSearchUtils_1.combineResultWhenFinalized(this.searchJob.getResults(params_1), progressObservable, function (results, progress) {
                    return SplunkSearchUtils_1.projectFunc(results, progress, searchRequestParams_1.search);
                });
            this.results[key] = requestResult;
        }
        return function (observer) {
            // note: due to the nature that 'data' and 'meta' are from two different endpoints, there's no
            // way to guarantee that they always match. But they'll eventually match when search is done.
            // no search job? then return a empty Observable
            var result = requestResult || rxjs_1.Observable.of();
            var subscription = result.subscribe(SplunkSearchUtils_1.transformObserver(observer, _this.completeSearchQuery || _this.options.search));
            return function () {
                subscription.unsubscribe();
            };
        };
    };
    /**
     * Cancel the search job and returns the server response.
     * Job will not be cancelled if `context.cache` is true.
     * @returns {Promise}
     * @public
     */
    SplunkSearch.prototype.teardown = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cache;
            return __generator(this, function (_a) {
                this.results = null;
                // chain search does not cancel search job
                if (this.extend) {
                    return [2 /*return*/, null];
                }
                try {
                    cache = this.context.cache;
                    if (!cache && this.searchJob) {
                        return [2 /*return*/, this.searchJob.cancel().first().toPromise()];
                    }
                    return [2 /*return*/, null];
                }
                catch (ex) {
                    console_1.default.error('failed to cancel search job:', ex);
                    return [2 /*return*/, null];
                }
                return [2 /*return*/];
            });
        });
    };
    SplunkSearch.prototype.getObserver = function () {
        var _this = this;
        return {
            next: function (_a) {
                var _b = _a.meta, sid = _b.sid, search = _b.search, checkRiskyCommand = _b.checkRiskyCommand, completeSearchQuery = _b.completeSearchQuery;
                _this.parentChainQuery = search;
                _this.completeSearchQuery = completeSearchQuery;
                if (_this.options.sid !== sid ||
                    _this.options.check_risky_command !== checkRiskyCommand) {
                    _this.options.sid = sid;
                    _this.options.check_risky_command = checkRiskyCommand;
                    _this.results = {};
                    _this.shouldRefreshSub = true;
                    // re-create SearchJob. setup() is async but should be fine here
                    _this.setup();
                }
                else {
                    _this.shouldRefreshSub = false;
                }
            },
            error: function (error) {
                console_1.default.log(error);
            },
        };
    };
    SplunkSearch.prototype.shouldRefreshSubscription = function () {
        return this.shouldRefreshSub;
    };
    SplunkSearch.prototype.validation = function () {
        if (this.options.search &&
            noCollectInSplRegex.test(this.options.search)) {
            throw new Error(i18n_1._("The \"collect\" command cannot be used in a base search. Use an ad-hoc search for data source " + this.context.id + " to use the \"collect\" command."));
        }
    };
    SplunkSearch.schema = SplunkSearchOptionsSchema_1.default;
    return SplunkSearch;
}(DataSource_1.default));
SplunkSearch.config = {
    title: function (_a) {
        var searchType = _a.searchType;
        return searchType === 'ds.search' ? i18n_1._('Search') : i18n_1._('Chain Search');
    },
    displayDataSourceItemListByDefault: true,
    canCreateDataSource: true,
    dataSourceRemoveVerb: 'delete',
    isDataSourceNameEditable: true,
    getDataSourceName: function (_a) {
        var dataSource = _a.dataSource;
        return get_1.default(dataSource, 'name', i18n_1._('Unnamed'));
    },
    defaultOptions: function (_a) {
        var searchType = _a.searchType, definition = _a.definition;
        return searchType === 'ds.search'
            ? SearchConfigUtils_1.getDefaultOptionsForSearchQuery(definition)
            : {};
    },
    editorConfig: [],
    optionsSchema: SplunkSearchOptionsSchema_1.default,
    isChainEnabled: true,
};
exports.default = SplunkSearch;


/***/ }),
/* 38 */
/***/ (function(module, exports) {

module.exports = require("lodash/mapKeys");

/***/ }),
/* 39 */
/***/ (function(module, exports) {

module.exports = require("hash-it");

/***/ }),
/* 40 */
/***/ (function(module, exports) {

module.exports = require("@splunk/datasource-utils/BaseChainUtils");

/***/ })
/******/ ]);
//# sourceMappingURL=SplunkSearch.js.map