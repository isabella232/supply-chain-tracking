{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/DataSource.ts","webpack:///external \"lodash/isEqual\"","webpack:///./src/utils/SimpleScheduler.js","webpack:///external \"@splunk/datasource-utils\"","webpack:///external \"lodash/isNumber\"","webpack:///external \"lodash/isEmpty\"","webpack:///./src/TestDataSourceOptionsSchema.ts","webpack:///external \"@splunk/dashboard-utils/deprecated\"","webpack:///./src/TestDataSource.ts"],"names":[],"mappings":"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","file":"TestDataSource.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 41);\n","/* eslint-disable class-methods-use-this,no-unused-vars, @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function */\nimport isEqual from 'lodash/isEqual';\nimport isEmpty from 'lodash/isEmpty';\nimport type { ExtendableDataSourceDefinition } from '@splunk/dashboard-types';\nimport type { Observable, Subscriber, Observer } from 'rxjs';\nimport deprecated from '@splunk/dashboard-utils/deprecated';\nimport type { RequestParams, ObservableData } from './types';\n\n/**\n * Base class of a DataSource\n */\nexport default class DataSource {\n    options: Record<string, unknown>;\n\n    context: Record<string, unknown>;\n\n    // deprecated property\n    meta: Record<string, unknown>;\n\n    // deprecated property\n    baseChainModel: Record<string, ExtendableDataSourceDefinition>;\n\n    /**\n     * Create a new DataSource Instance\n     * @param {Object} options DataSource options such as search string, earliest/latest time\n     * @param {Object} context contextual information such as api key or scope\n     * @param {Object} meta metadata of this datasource\n     * @param {Object} baseChainModel base chain definition\n     */\n    constructor(options = {}, context = {}, meta = {}, baseChainModel = {}) {\n        this.options = options;\n        this.context = context;\n        this.meta = meta;\n        this.baseChainModel = baseChainModel;\n        if (!isEmpty(meta)) {\n            deprecated('Property \"meta\" has been deprecated');\n        }\n        if (!isEmpty(baseChainModel)) {\n            deprecated('Property \"baseChainModel\" has been deprecated');\n        }\n    }\n\n    /**\n     * setup the DataSource, this is the place where you can setup your connection or create the search job.\n     * setup will be called only once per DataSource.\n     * @return {Promise}\n     * @public\n     */\n    setup(): Promise<string | null> {\n        return Promise.resolve(null);\n    }\n\n    /**\n     * Request a Data Stream represent by an Observable.\n     * Once the Observable was created and returned,\n     * it's the DataSource itself responsible for 'pushing' the data out via Observable.next() function.\n     * Override this function to implement your own data fetching logic.\n     *\n     * @param {Object} [requestParams] RequestParams\n     * @param {Number} [requestParams.offset] result offset\n     * @param {Number} [requestParams.count] result count, use with offset to return data in pages\n     * @param {Object} [requestParams.sort] result sorting, key indicate the sorting fields and value must be one of ['none', 'asc', 'desc']\n     * @param {Boolean} [requestParams.requireTotalCount] true if TotalCount is required in meta\n     * @param {Boolean} [requestParams.progress] true to emit progress data, false to only return data when search is finalized\n     * @return {Observable}\n     * @public\n     */\n    request(\n        requestParams?: RequestParams\n    ):\n        | Observable<ObservableData>\n        | ((observer?: Subscriber<ObservableData>) => () => void) {\n        return (observer) => {\n            if (observer) {\n                observer.complete();\n            }\n            return () => {\n                // cleanup\n            };\n        };\n    }\n\n    /**\n     * teardown the DataSource, clear up connection or other resources\n     * @return {Promise}\n     * @public\n     */\n    teardown(): Promise<null> {\n        return Promise.resolve(null);\n    }\n\n    /**\n     * @param {DataSource} another another DataSource to compare with\n     * @return {Boolean} true if the these two DataSources are considered equal.\n     * @public\n     */\n    equals(another: InstanceType<typeof DataSource>): boolean {\n        return (\n            this.constructor === another.constructor &&\n            isEqual(this.options, another.options)\n        );\n    }\n\n    /**\n     * return an observer that can be used to chain with other data source\n     * @return {Object}\n     * @public\n     */\n    getObserver(): Observer<ObservableData> {\n        return {\n            next({ requestParams, data, meta }) {\n                // next\n            },\n            error({ level, message }) {\n                // error\n            },\n            complete() {\n                // complete\n            },\n        };\n    }\n\n    /**\n     * flag used to show if the subscription for this data source should be refresh\n     * @return {Boolean}\n     * @public\n     */\n    shouldRefreshSubscription(): boolean {\n        return false;\n    }\n}\n","module.exports = require(\"lodash/isEqual\");","import isNumber from 'lodash/isNumber';\n\n/**\n * A Simple task scheduler\n */\nclass SimpleScheduler {\n    static createScheduler(tickFunc, options) {\n        return new SimpleScheduler(tickFunc, options);\n    }\n\n    /**\n     *\n     * @param {*} tickFunc a function that will be executed by scheduler, its return value will be used to schedule next execution.\n     * return false from this function will stop the execution\n     * @param {*} options\n     */\n    constructor(tickFunc = () => {}, options = {}) {\n        this.tickFunc = tickFunc;\n        this.minDelay = options.minDelay || 0;\n        this.loop = this.loop.bind(this);\n        this.t = null;\n        this.stopped = false;\n    }\n\n    /**\n     * execute tick function and stop next execution if error catched\n     */\n    async tick() {\n        try {\n            return await this.tickFunc();\n        } catch (ex) {\n            return false;\n        }\n    }\n\n    /**\n     * start scheduler\n     */\n    async start() {\n        this.stopped = false;\n        await this.loop();\n    }\n\n    async loop() {\n        const delay = await this.tick();\n        if (!this.stopped && delay !== false && isNumber(delay)) {\n            this.t = setTimeout(this.loop, Math.max(this.minDelay, delay));\n        }\n    }\n\n    /**\n     * stop scheduler\n     */\n    stop() {\n        this.stopped = true;\n        if (this.t) {\n            clearTimeout(this.t);\n            this.t = null;\n        }\n    }\n}\n\nexport default SimpleScheduler;\n","module.exports = require(\"@splunk/datasource-utils\");","module.exports = require(\"lodash/isNumber\");","module.exports = require(\"lodash/isEmpty\");","export default {\n    data: {\n        type: 'object',\n    },\n    vizOptions: {\n        type: 'object',\n    },\n    meta: {\n        type: 'object',\n    },\n    errorLevel: {\n        type: 'string',\n        enum: ['info', 'warning', 'error'],\n    },\n    error: {\n        type: 'string',\n    },\n    delay: {\n        type: 'number',\n    },\n    timeToStart: {\n        type: 'number',\n    },\n    timeToComplete: {\n        type: 'number',\n    },\n    increments: {\n        type: 'number',\n    },\n};\n","module.exports = require(\"@splunk/dashboard-utils/deprecated\");","import type { Subscriber } from 'rxjs';\nimport type { JSONCols } from 'dashboard-types';\nimport { DataSet } from '@splunk/datasource-utils';\nimport type {\n    Meta,\n    Status,\n    ErrorLevel,\n    ObservableData,\n    RequestParams,\n} from './types';\nimport DataSource from './DataSource';\nimport TestDataSourceOptionsSchema from './TestDataSourceOptionsSchema';\nimport SimpleScheduler from './utils/SimpleScheduler';\n\nexport interface TestDataSourceOptions {\n    data?: JSONCols;\n    meta?: Meta;\n    delay?: number;\n    timeToStart?: number;\n    errorLevel?: ErrorLevel;\n    error?: string;\n    timeToComplete?: number;\n    increments?: number;\n}\n\n/**\n * @class TestDataSource\n */\nexport default class TestDataSource extends DataSource {\n    /**\n     * List of valid configuration options\n     * @static\n     */\n    static schema = TestDataSourceOptionsSchema;\n\n    static config = {\n        optionsSchema: TestDataSourceOptionsSchema,\n    };\n\n    readonly data: JSONCols;\n\n    readonly meta: Meta;\n\n    readonly timeToStart: number;\n\n    readonly errorLevel?: ErrorLevel;\n\n    readonly error?: string;\n\n    readonly timePerUpdate: number;\n\n    readonly incrementSize: number;\n\n    progress: number;\n\n    status: Status;\n\n    /**\n     * Test Datasource\n     * @param {Object} options.data static data set\n     * @param {Number} [options.delay=0] time before first results return (deprecated)\n     * @param {Object} [options.meta] Return meta, merged with search progress\n     * @param {*} [options.errorLevel] Passthrough data for errors\n     * @param {String} [options.error] Passthrough error message - Set to create an erroring datasource\n     * @param {Number} [options.timeToStart=0] time before first results return (same as delay)\n     * @param {Number} [options.timeToComplete=0] time before all results return (same as delay)\n     * @param {Number} [options.timeToStart=0] time before results return (same as delay)\n     * @param {Number} [options.increments=10] Number of times to return partial results after initial delay\n     * @param {Object} context\n     */\n    constructor(options: TestDataSourceOptions = {}, context = {}) {\n        super(options, context);\n        this.data = options.data ? options.data : { fields: [], columns: [] };\n        this.meta = options.meta ?? {};\n        this.timeToStart = options.delay || options.timeToStart || 0;\n        this.errorLevel = options.errorLevel;\n        this.error = options.error;\n        const timeToComplete = options.timeToComplete || 0;\n        const increments = Math.max(options.increments || 10, 1);\n        this.timePerUpdate = timeToComplete / increments;\n        this.incrementSize = Math.ceil(100 / increments);\n        this.progress = timeToComplete ? 0 : 100;\n        this.status = 'queued';\n    }\n\n    /**\n     * Create a DataSet\n     * @param {Object} [config]\n     * @param {Array} [config.fields=[]] List of field names\n     * @param {Array[]} [config.columns=[]] List of column data\n     * @return {DataSet}\n     */\n    // eslint-disable-next-line class-methods-use-this\n    toDataSet({ fields = [], columns = [] }: JSONCols): DataSet {\n        return DataSet.fromJSONCols(fields, columns);\n    }\n\n    /**\n     * Calculate the partial results for a dataset\n     * @returns {DataSet}\n     */\n    getData(requestParams?: RequestParams): DataSet {\n        if (this.progress >= 100) {\n            // for now, we only allow pagination for completed data source\n            return this.toDataSet(this.data).getPage({\n                count: requestParams?.count,\n                offset: requestParams?.offset,\n            });\n        }\n\n        const data: JSONCols = { fields: this.data.fields, columns: [] };\n        const size = Math.floor(\n            this.data.columns[0].length * (this.progress / 100)\n        );\n        this.data.columns.forEach((column) => {\n            if (!size) {\n                data.columns.push([]);\n            } else {\n                data.columns.push(column.slice(0, size));\n            }\n        });\n        return this.toDataSet(data);\n    }\n\n    /**\n     * Calculate the content of meta\n     * @return {Object}\n     */\n    getMeta(): Meta {\n        const meta = { ...this.meta, status: this.status };\n\n        if (this.status === 'failed') {\n            return meta;\n        }\n\n        meta.percentComplete = this.progress;\n        // Number of results produced so far...\n        meta.totalCount = Math.floor(\n            this.data.columns[0].length * (this.progress / 100)\n        );\n\n        if (this.status !== 'queued') {\n            meta.lastUpdated = new Date().toISOString();\n        }\n\n        return meta;\n    }\n\n    /**\n     * Creates loop to request and return results\n     * @return {Function} Given an observable, schedule data updates over time\n     */\n    request(requestParams?: RequestParams) {\n        return (observer?: Subscriber<ObservableData>): (() => void) => {\n            if (!observer) {\n                return () => undefined;\n            }\n\n            if (this.error) {\n                this.status = 'failed';\n                observer.error({\n                    level: this.errorLevel,\n                    message: this.error,\n                    meta: this.getMeta(),\n                });\n                return () => undefined;\n            }\n            let resultScheduler: SimpleScheduler;\n\n            const timer = setTimeout(() => {\n                this.status = 'running';\n                resultScheduler = SimpleScheduler.createScheduler(async () => {\n                    if (this.progress >= 100) {\n                        this.status = 'done';\n                    }\n\n                    observer.next({\n                        data: this.getData(requestParams),\n                        meta: this.getMeta(),\n                    });\n\n                    if (this.progress >= 100) {\n                        observer.complete();\n                    }\n\n                    this.progress = Math.min(\n                        this.progress + this.incrementSize,\n                        100\n                    );\n\n                    return this.timePerUpdate;\n                });\n                // kick off the loop\n                resultScheduler.start();\n            }, this.timeToStart);\n\n            return () => {\n                clearTimeout(timer);\n                if (this.status === 'running') {\n                    this.status = 'canceled';\n                }\n                if (resultScheduler) {\n                    resultScheduler.stop();\n                }\n            };\n        };\n    }\n}\n"],"sourceRoot":""}