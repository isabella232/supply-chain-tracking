/*!
 * Copyright © 2020 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 41);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable class-methods-use-this,no-unused-vars, @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function */
var isEqual_1 = __importDefault(__webpack_require__(1));
var isEmpty_1 = __importDefault(__webpack_require__(2));
var deprecated_1 = __importDefault(__webpack_require__(3));
/**
 * Base class of a DataSource
 */
var DataSource = /** @class */ (function () {
    /**
     * Create a new DataSource Instance
     * @param {Object} options DataSource options such as search string, earliest/latest time
     * @param {Object} context contextual information such as api key or scope
     * @param {Object} meta metadata of this datasource
     * @param {Object} baseChainModel base chain definition
     */
    function DataSource(options, context, meta, baseChainModel) {
        if (options === void 0) { options = {}; }
        if (context === void 0) { context = {}; }
        if (meta === void 0) { meta = {}; }
        if (baseChainModel === void 0) { baseChainModel = {}; }
        this.options = options;
        this.context = context;
        this.meta = meta;
        this.baseChainModel = baseChainModel;
        if (!isEmpty_1.default(meta)) {
            deprecated_1.default('Property "meta" has been deprecated');
        }
        if (!isEmpty_1.default(baseChainModel)) {
            deprecated_1.default('Property "baseChainModel" has been deprecated');
        }
    }
    /**
     * setup the DataSource, this is the place where you can setup your connection or create the search job.
     * setup will be called only once per DataSource.
     * @return {Promise}
     * @public
     */
    DataSource.prototype.setup = function () {
        return Promise.resolve(null);
    };
    /**
     * Request a Data Stream represent by an Observable.
     * Once the Observable was created and returned,
     * it's the DataSource itself responsible for 'pushing' the data out via Observable.next() function.
     * Override this function to implement your own data fetching logic.
     *
     * @param {Object} [requestParams] RequestParams
     * @param {Number} [requestParams.offset] result offset
     * @param {Number} [requestParams.count] result count, use with offset to return data in pages
     * @param {Object} [requestParams.sort] result sorting, key indicate the sorting fields and value must be one of ['none', 'asc', 'desc']
     * @param {Boolean} [requestParams.requireTotalCount] true if TotalCount is required in meta
     * @param {Boolean} [requestParams.progress] true to emit progress data, false to only return data when search is finalized
     * @return {Observable}
     * @public
     */
    DataSource.prototype.request = function (requestParams) {
        return function (observer) {
            if (observer) {
                observer.complete();
            }
            return function () {
                // cleanup
            };
        };
    };
    /**
     * teardown the DataSource, clear up connection or other resources
     * @return {Promise}
     * @public
     */
    DataSource.prototype.teardown = function () {
        return Promise.resolve(null);
    };
    /**
     * @param {DataSource} another another DataSource to compare with
     * @return {Boolean} true if the these two DataSources are considered equal.
     * @public
     */
    DataSource.prototype.equals = function (another) {
        return (this.constructor === another.constructor &&
            isEqual_1.default(this.options, another.options));
    };
    /**
     * return an observer that can be used to chain with other data source
     * @return {Object}
     * @public
     */
    DataSource.prototype.getObserver = function () {
        return {
            next: function (_a) {
                var requestParams = _a.requestParams, data = _a.data, meta = _a.meta;
                // next
            },
            error: function (_a) {
                var level = _a.level, message = _a.message;
                // error
            },
            complete: function () {
                // complete
            },
        };
    };
    /**
     * flag used to show if the subscription for this data source should be refresh
     * @return {Boolean}
     * @public
     */
    DataSource.prototype.shouldRefreshSubscription = function () {
        return false;
    };
    return DataSource;
}());
exports.default = DataSource;


/***/ }),

/***/ 1:
/***/ (function(module, exports) {

module.exports = require("lodash/isEqual");

/***/ }),

/***/ 11:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var isNumber_1 = __importDefault(__webpack_require__(17));
/**
 * A Simple task scheduler
 */
var SimpleScheduler = /** @class */ (function () {
    /**
     *
     * @param {*} tickFunc a function that will be executed by scheduler, its return value will be used to schedule next execution.
     * return false from this function will stop the execution
     * @param {*} options
     */
    function SimpleScheduler(tickFunc, options) {
        if (tickFunc === void 0) { tickFunc = function () { }; }
        if (options === void 0) { options = {}; }
        this.tickFunc = tickFunc;
        this.minDelay = options.minDelay || 0;
        this.loop = this.loop.bind(this);
        this.t = null;
        this.stopped = false;
    }
    SimpleScheduler.createScheduler = function (tickFunc, options) {
        return new SimpleScheduler(tickFunc, options);
    };
    /**
     * execute tick function and stop next execution if error catched
     */
    SimpleScheduler.prototype.tick = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.tickFunc()];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        ex_1 = _a.sent();
                        return [2 /*return*/, false];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * start scheduler
     */
    SimpleScheduler.prototype.start = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.stopped = false;
                        return [4 /*yield*/, this.loop()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    SimpleScheduler.prototype.loop = function () {
        return __awaiter(this, void 0, void 0, function () {
            var delay;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.tick()];
                    case 1:
                        delay = _a.sent();
                        if (!this.stopped && delay !== false && isNumber_1.default(delay)) {
                            this.t = setTimeout(this.loop, Math.max(this.minDelay, delay));
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * stop scheduler
     */
    SimpleScheduler.prototype.stop = function () {
        this.stopped = true;
        if (this.t) {
            clearTimeout(this.t);
            this.t = null;
        }
    };
    return SimpleScheduler;
}());
exports.default = SimpleScheduler;


/***/ }),

/***/ 13:
/***/ (function(module, exports) {

module.exports = require("@splunk/datasource-utils");

/***/ }),

/***/ 17:
/***/ (function(module, exports) {

module.exports = require("lodash/isNumber");

/***/ }),

/***/ 2:
/***/ (function(module, exports) {

module.exports = require("lodash/isEmpty");

/***/ }),

/***/ 23:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    data: {
        type: 'object',
    },
    vizOptions: {
        type: 'object',
    },
    meta: {
        type: 'object',
    },
    errorLevel: {
        type: 'string',
        enum: ['info', 'warning', 'error'],
    },
    error: {
        type: 'string',
    },
    delay: {
        type: 'number',
    },
    timeToStart: {
        type: 'number',
    },
    timeToComplete: {
        type: 'number',
    },
    increments: {
        type: 'number',
    },
};


/***/ }),

/***/ 3:
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-utils/deprecated");

/***/ }),

/***/ 41:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var datasource_utils_1 = __webpack_require__(13);
var DataSource_1 = __importDefault(__webpack_require__(0));
var TestDataSourceOptionsSchema_1 = __importDefault(__webpack_require__(23));
var SimpleScheduler_1 = __importDefault(__webpack_require__(11));
/**
 * @class TestDataSource
 */
var TestDataSource = /** @class */ (function (_super) {
    __extends(TestDataSource, _super);
    /**
     * Test Datasource
     * @param {Object} options.data static data set
     * @param {Number} [options.delay=0] time before first results return (deprecated)
     * @param {Object} [options.meta] Return meta, merged with search progress
     * @param {*} [options.errorLevel] Passthrough data for errors
     * @param {String} [options.error] Passthrough error message - Set to create an erroring datasource
     * @param {Number} [options.timeToStart=0] time before first results return (same as delay)
     * @param {Number} [options.timeToComplete=0] time before all results return (same as delay)
     * @param {Number} [options.timeToStart=0] time before results return (same as delay)
     * @param {Number} [options.increments=10] Number of times to return partial results after initial delay
     * @param {Object} context
     */
    function TestDataSource(options, context) {
        if (options === void 0) { options = {}; }
        if (context === void 0) { context = {}; }
        var _a;
        var _this = _super.call(this, options, context) || this;
        _this.data = options.data ? options.data : { fields: [], columns: [] };
        _this.meta = (_a = options.meta) !== null && _a !== void 0 ? _a : {};
        _this.timeToStart = options.delay || options.timeToStart || 0;
        _this.errorLevel = options.errorLevel;
        _this.error = options.error;
        var timeToComplete = options.timeToComplete || 0;
        var increments = Math.max(options.increments || 10, 1);
        _this.timePerUpdate = timeToComplete / increments;
        _this.incrementSize = Math.ceil(100 / increments);
        _this.progress = timeToComplete ? 0 : 100;
        _this.status = 'queued';
        return _this;
    }
    /**
     * Create a DataSet
     * @param {Object} [config]
     * @param {Array} [config.fields=[]] List of field names
     * @param {Array[]} [config.columns=[]] List of column data
     * @return {DataSet}
     */
    // eslint-disable-next-line class-methods-use-this
    TestDataSource.prototype.toDataSet = function (_a) {
        var _b = _a.fields, fields = _b === void 0 ? [] : _b, _c = _a.columns, columns = _c === void 0 ? [] : _c;
        return datasource_utils_1.DataSet.fromJSONCols(fields, columns);
    };
    /**
     * Calculate the partial results for a dataset
     * @returns {DataSet}
     */
    TestDataSource.prototype.getData = function (requestParams) {
        if (this.progress >= 100) {
            // for now, we only allow pagination for completed data source
            return this.toDataSet(this.data).getPage({
                count: requestParams === null || requestParams === void 0 ? void 0 : requestParams.count,
                offset: requestParams === null || requestParams === void 0 ? void 0 : requestParams.offset,
            });
        }
        var data = { fields: this.data.fields, columns: [] };
        var size = Math.floor(this.data.columns[0].length * (this.progress / 100));
        this.data.columns.forEach(function (column) {
            if (!size) {
                data.columns.push([]);
            }
            else {
                data.columns.push(column.slice(0, size));
            }
        });
        return this.toDataSet(data);
    };
    /**
     * Calculate the content of meta
     * @return {Object}
     */
    TestDataSource.prototype.getMeta = function () {
        var meta = __assign(__assign({}, this.meta), { status: this.status });
        if (this.status === 'failed') {
            return meta;
        }
        meta.percentComplete = this.progress;
        // Number of results produced so far...
        meta.totalCount = Math.floor(this.data.columns[0].length * (this.progress / 100));
        if (this.status !== 'queued') {
            meta.lastUpdated = new Date().toISOString();
        }
        return meta;
    };
    /**
     * Creates loop to request and return results
     * @return {Function} Given an observable, schedule data updates over time
     */
    TestDataSource.prototype.request = function (requestParams) {
        var _this = this;
        return function (observer) {
            if (!observer) {
                return function () { return undefined; };
            }
            if (_this.error) {
                _this.status = 'failed';
                observer.error({
                    level: _this.errorLevel,
                    message: _this.error,
                    meta: _this.getMeta(),
                });
                return function () { return undefined; };
            }
            var resultScheduler;
            var timer = setTimeout(function () {
                _this.status = 'running';
                resultScheduler = SimpleScheduler_1.default.createScheduler(function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        if (this.progress >= 100) {
                            this.status = 'done';
                        }
                        observer.next({
                            data: this.getData(requestParams),
                            meta: this.getMeta(),
                        });
                        if (this.progress >= 100) {
                            observer.complete();
                        }
                        this.progress = Math.min(this.progress + this.incrementSize, 100);
                        return [2 /*return*/, this.timePerUpdate];
                    });
                }); });
                // kick off the loop
                resultScheduler.start();
            }, _this.timeToStart);
            return function () {
                clearTimeout(timer);
                if (_this.status === 'running') {
                    _this.status = 'canceled';
                }
                if (resultScheduler) {
                    resultScheduler.stop();
                }
            };
        };
    };
    /**
     * List of valid configuration options
     * @static
     */
    TestDataSource.schema = TestDataSourceOptionsSchema_1.default;
    TestDataSource.config = {
        optionsSchema: TestDataSourceOptionsSchema_1.default,
    };
    return TestDataSource;
}(DataSource_1.default));
exports.default = TestDataSource;


/***/ })

/******/ });
//# sourceMappingURL=TestDataSource.js.map