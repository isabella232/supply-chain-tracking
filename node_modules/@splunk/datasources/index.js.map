{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/DataSource.ts","webpack:///external \"lodash/isEqual\"","webpack:///external \"lodash/isEmpty\"","webpack:///external \"@splunk/dashboard-utils/deprecated\"","webpack:///external \"lodash/get\"","webpack:///external \"@splunk/ui-utils/i18n\"","webpack:///external \"rxjs\"","webpack:///external \"lodash/pick\"","webpack:///external \"@splunk/datasource-utils/DataSet\"","webpack:///external \"@splunk/splunk-utils/config\"","webpack:///external \"@splunk/moment\"","webpack:///./src/utils/SimpleScheduler.js","webpack:///./src/utils/SearchConfigUtils.js","webpack:///external \"@splunk/datasource-utils\"","webpack:///external \"@splunk/dashboard-utils/console\"","webpack:///external \"@splunk/search-job\"","webpack:///./src/utils/SplunkSearchUtils.js","webpack:///external \"lodash/isNumber\"","webpack:///./src/CloudSearchOptionsSchema.js","webpack:///external \"lodash/memoize\"","webpack:///external \"@splunk/dashboard-definition/DashboardDefinition\"","webpack:///./src/SplunkSavedSearchOptionsSchema.js","webpack:///./src/SplunkSearchOptionsSchema.js","webpack:///./src/TestDataSourceOptionsSchema.ts","webpack:///./src/CloudSearch.js","webpack:///external \"lodash/map\"","webpack:///external \"lodash/has\"","webpack:///external \"lodash/isUndefined\"","webpack:///external \"memoize-one\"","webpack:///external \"moment\"","webpack:///external \"query-string\"","webpack:///external \"@splunkdev/cloud-sdk/services/search\"","webpack:///external \"@splunkdev/cloud-sdk/client\"","webpack:///./src/utils/addLeadingSearchCommand.js","webpack:///./src/SnapshotDataSource.ts","webpack:///./src/SplunkSavedSearch.js","webpack:///external \"@splunk/splunk-utils/savedSearch\"","webpack:///./src/SplunkSearch.js","webpack:///external \"lodash/mapKeys\"","webpack:///external \"hash-it\"","webpack:///external \"@splunk/datasource-utils/BaseChainUtils\"","webpack:///./src/TestDataSource.ts","webpack:///./src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 42);\n","/* eslint-disable class-methods-use-this,no-unused-vars, @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function */\nimport isEqual from 'lodash/isEqual';\nimport isEmpty from 'lodash/isEmpty';\nimport type { ExtendableDataSourceDefinition } from '@splunk/dashboard-types';\nimport type { Observable, Subscriber, Observer } from 'rxjs';\nimport deprecated from '@splunk/dashboard-utils/deprecated';\nimport type { RequestParams, ObservableData } from './types';\n\n/**\n * Base class of a DataSource\n */\nexport default class DataSource {\n    options: Record<string, unknown>;\n\n    context: Record<string, unknown>;\n\n    // deprecated property\n    meta: Record<string, unknown>;\n\n    // deprecated property\n    baseChainModel: Record<string, ExtendableDataSourceDefinition>;\n\n    /**\n     * Create a new DataSource Instance\n     * @param {Object} options DataSource options such as search string, earliest/latest time\n     * @param {Object} context contextual information such as api key or scope\n     * @param {Object} meta metadata of this datasource\n     * @param {Object} baseChainModel base chain definition\n     */\n    constructor(options = {}, context = {}, meta = {}, baseChainModel = {}) {\n        this.options = options;\n        this.context = context;\n        this.meta = meta;\n        this.baseChainModel = baseChainModel;\n        if (!isEmpty(meta)) {\n            deprecated('Property \"meta\" has been deprecated');\n        }\n        if (!isEmpty(baseChainModel)) {\n            deprecated('Property \"baseChainModel\" has been deprecated');\n        }\n    }\n\n    /**\n     * setup the DataSource, this is the place where you can setup your connection or create the search job.\n     * setup will be called only once per DataSource.\n     * @return {Promise}\n     * @public\n     */\n    setup(): Promise<string | null> {\n        return Promise.resolve(null);\n    }\n\n    /**\n     * Request a Data Stream represent by an Observable.\n     * Once the Observable was created and returned,\n     * it's the DataSource itself responsible for 'pushing' the data out via Observable.next() function.\n     * Override this function to implement your own data fetching logic.\n     *\n     * @param {Object} [requestParams] RequestParams\n     * @param {Number} [requestParams.offset] result offset\n     * @param {Number} [requestParams.count] result count, use with offset to return data in pages\n     * @param {Object} [requestParams.sort] result sorting, key indicate the sorting fields and value must be one of ['none', 'asc', 'desc']\n     * @param {Boolean} [requestParams.requireTotalCount] true if TotalCount is required in meta\n     * @param {Boolean} [requestParams.progress] true to emit progress data, false to only return data when search is finalized\n     * @return {Observable}\n     * @public\n     */\n    request(\n        requestParams?: RequestParams\n    ):\n        | Observable<ObservableData>\n        | ((observer?: Subscriber<ObservableData>) => () => void) {\n        return (observer) => {\n            if (observer) {\n                observer.complete();\n            }\n            return () => {\n                // cleanup\n            };\n        };\n    }\n\n    /**\n     * teardown the DataSource, clear up connection or other resources\n     * @return {Promise}\n     * @public\n     */\n    teardown(): Promise<null> {\n        return Promise.resolve(null);\n    }\n\n    /**\n     * @param {DataSource} another another DataSource to compare with\n     * @return {Boolean} true if the these two DataSources are considered equal.\n     * @public\n     */\n    equals(another: InstanceType<typeof DataSource>): boolean {\n        return (\n            this.constructor === another.constructor &&\n            isEqual(this.options, another.options)\n        );\n    }\n\n    /**\n     * return an observer that can be used to chain with other data source\n     * @return {Object}\n     * @public\n     */\n    getObserver(): Observer<ObservableData> {\n        return {\n            next({ requestParams, data, meta }) {\n                // next\n            },\n            error({ level, message }) {\n                // error\n            },\n            complete() {\n                // complete\n            },\n        };\n    }\n\n    /**\n     * flag used to show if the subscription for this data source should be refresh\n     * @return {Boolean}\n     * @public\n     */\n    shouldRefreshSubscription(): boolean {\n        return false;\n    }\n}\n","module.exports = require(\"lodash/isEqual\");","module.exports = require(\"lodash/isEmpty\");","module.exports = require(\"@splunk/dashboard-utils/deprecated\");","module.exports = require(\"lodash/get\");","module.exports = require(\"@splunk/ui-utils/i18n\");","module.exports = require(\"rxjs\");","module.exports = require(\"lodash/pick\");","module.exports = require(\"@splunk/datasource-utils/DataSet\");","module.exports = require(\"@splunk/splunk-utils/config\");","module.exports = require(\"@splunk/moment\");","import isNumber from 'lodash/isNumber';\n\n/**\n * A Simple task scheduler\n */\nclass SimpleScheduler {\n    static createScheduler(tickFunc, options) {\n        return new SimpleScheduler(tickFunc, options);\n    }\n\n    /**\n     *\n     * @param {*} tickFunc a function that will be executed by scheduler, its return value will be used to schedule next execution.\n     * return false from this function will stop the execution\n     * @param {*} options\n     */\n    constructor(tickFunc = () => {}, options = {}) {\n        this.tickFunc = tickFunc;\n        this.minDelay = options.minDelay || 0;\n        this.loop = this.loop.bind(this);\n        this.t = null;\n        this.stopped = false;\n    }\n\n    /**\n     * execute tick function and stop next execution if error catched\n     */\n    async tick() {\n        try {\n            return await this.tickFunc();\n        } catch (ex) {\n            return false;\n        }\n    }\n\n    /**\n     * start scheduler\n     */\n    async start() {\n        this.stopped = false;\n        await this.loop();\n    }\n\n    async loop() {\n        const delay = await this.tick();\n        if (!this.stopped && delay !== false && isNumber(delay)) {\n            this.t = setTimeout(this.loop, Math.max(this.minDelay, delay));\n        }\n    }\n\n    /**\n     * stop scheduler\n     */\n    stop() {\n        this.stopped = true;\n        if (this.t) {\n            clearTimeout(this.t);\n            this.t = null;\n        }\n    }\n}\n\nexport default SimpleScheduler;\n","import memoize from 'lodash/memoize';\nimport DashboardDefinition from '@splunk/dashboard-definition/DashboardDefinition';\n\nexport const getDefaultOptionsForSearchQuery = memoize(\n    (definition) => {\n        const def = DashboardDefinition.fromJSON(definition);\n\n        const timeRange = def.getDefaultTimeRangeForNewSearch();\n\n        if (timeRange.earliest || timeRange.latest) {\n            return {\n                queryParameters: {\n                    ...timeRange,\n                },\n            };\n        }\n\n        return {};\n    },\n    // note: this is the resolver function that uses a dirty trick to avoid re-creating the object\n    (definition) => {\n        const def = DashboardDefinition.fromJSON(definition);\n\n        const timeRange = def.getDefaultTimeRangeForNewSearch();\n        return JSON.stringify(timeRange);\n    }\n);\n","module.exports = require(\"@splunk/datasource-utils\");","module.exports = require(\"@splunk/dashboard-utils/console\");","module.exports = require(\"@splunk/search-job\");","import pick from 'lodash/pick';\nimport get from 'lodash/get';\nimport { Observable } from 'rxjs';\nimport { _ } from '@splunk/ui-utils/i18n';\nimport DataSet from '@splunk/datasource-utils/DataSet';\nimport moment from '@splunk/moment';\nimport { app } from '@splunk/splunk-utils/config';\n\n/**\n * Get status message based on search job properties\n * @param {String} status the status returned by the search job\n * @param {Boolean} isRealTimeSearch\n * @param {Number} totalCount the total number of search results retrieved\n * @returns {String} status message\n */\nexport const getStatusMessage = ({ status, isRealTimeSearch, totalCount }) => {\n    if (status === 'running') {\n        if (isRealTimeSearch) {\n            return _('Real-time search is running');\n        }\n        if (totalCount === 0) {\n            return _(\n                'Search is running, but not enough data to render visualization'\n            );\n        }\n    }\n    if (status === 'queued') {\n        return _('Search is not yet running, queued on server');\n    }\n    if (status === 'parsing') {\n        return _('Search is not yet running, queued on server');\n    }\n    if (status === 'done' && totalCount === 0) {\n        return _('Search ran successfully, but no results were returned');\n    }\n\n    return '';\n};\n\n// this is a list of properties that will be removed or normalized in the future. Refer to the RFC 2020_05_05-search_job_metadata.md\nconst deprecatedSearchMetas = ['resultCount', 'isDone', 'dispatchState'];\n\n/**\n * Formats the results of a Splunk SearchJob to use in UDF\n * @param {Object} results search results object\n * @param {Object} progress search progress object\n * @param {String} search search query\n * @returns {Object} Formatted data and metadata\n */\nexport const projectFunc = (results, progress, search) => {\n    const { fields, columns, post_process_count: postProcessCount } = results;\n    const {\n        isRealTimeSearch,\n        resultPreviewCount,\n        resultCount,\n    } = progress.content;\n\n    // totalCount is required for pagination.\n    let totalCount;\n    if (postProcessCount != null) {\n        // for post process searches, the totalCount is post_process_count in the results, NOT the resultPreviewCount/resultCount in the jobProperties.\n        totalCount = postProcessCount;\n    } else if (resultPreviewCount != null) {\n        // we look at resultPreviewCount since that is always set when preview = true.\n        // when search job is done, resultPreviewCount can be null,\n        // see https://splunk.slack.com/archives/C8YPWKC4U/p1591290195175900 for more context.\n        totalCount = resultPreviewCount;\n    } else {\n        totalCount = resultCount;\n    }\n    const status = progress.content.dispatchState.toLowerCase();\n\n    return {\n        data: new DataSet(fields, columns),\n        meta: {\n            ...pick(progress.content, deprecatedSearchMetas),\n            sid: progress.content.sid,\n            totalCount,\n            status,\n            statusMessage: getStatusMessage({\n                status,\n                isRealTimeSearch,\n                totalCount,\n            }),\n            // need to manually convert progress from [0, 1] to [0, 100]\n            percentComplete:\n                status === 'done'\n                    ? 100\n                    : Math.round(progress.content.doneProgress * 100),\n            isRealTimeSearch,\n            lastUpdated: moment(progress.published)\n                .add(pick(progress.content, 'runDuration'), 'seconds')\n                .toISOString(),\n            search,\n        },\n    };\n};\n\n/**\n * return an Observable that will emit intermediate search result\n * @param {Observable} resultsObservable observable for the search results\n * @param {Observable} progressObservable observable for the search progress so far\n * @param {Function} callback project function to transform the values emitted by the Observable\n */\nexport const combineResultWhenProgress = (\n    resultsObservable,\n    progressObservable,\n    callback\n) => Observable.combineLatest(resultsObservable, progressObservable, callback);\n\n/**\n * return an Observable that will emit final search result\n * @param {Observable} resultsObservable observable for the search results\n * @param {Observable} progressObservable observable for the search progress so far\n * @param {Function} callback project function to transform the values emitted by the Observable\n */\nexport const combineResultWhenFinalized = (\n    resultsObservable,\n    progressObservable,\n    callback\n) => Observable.forkJoin(resultsObservable, progressObservable, callback);\n\n/**\n * Wraps the observer to improve the error handling\n * @param {Observer} observer the observer to be wrapped\n * @param {string} search the search query\n * @returns {Observer} the wrapped observer\n */\nexport const transformObserver = (observer, search) => ({\n    next: (response) => observer.next(response),\n    error: (err) =>\n        observer.error({\n            level: 'error',\n            message: err.message,\n            meta: {\n                search,\n            },\n        }),\n    complete: () => observer.complete(),\n});\n\n/**\n * Determine if a fetch is needed based on the given search preview state\n * @param {Object} searchState search preview state\n * @returns {Boolean}\n */\nexport const previewFetchPredicate = (searchState) => {\n    if (get(searchState, ['content', 'isRealTimeSearch'], false)) {\n        return true;\n    }\n    // we do a fetch when\n    // 1. result count > 0\n    // 2. search is done so we can make sure we always return the result\n    return (\n        get(searchState, ['content', 'resultPreviewCount'], 0) > 0 ||\n        !!get(searchState, ['content', 'isDone'])\n    );\n};\n\n/**\n * Provides common options for splunk search dispatch options\n * @param {Object} context Object containing any configurable dispatchOptions from splunk/search-job\n * @returns {Object}\n */\nexport const getEnterpriseSearchContext = (context) => {\n    return { keepAlive: true, cache: false, app, ...context };\n};\n","module.exports = require(\"lodash/isNumber\");","export default {\n    query: {\n        type: 'string',\n        description: 'An SPL search string.',\n    },\n    queryParameters: {\n        type: 'object',\n        properties: {\n            earliest: {\n                type: 'string',\n                description: 'Specify the earliest time to search for events.',\n            },\n            latest: {\n                type: 'string',\n                description: 'Specify the latest time to search for events.',\n            },\n            timezone: {\n                type: 'string',\n                description: 'Specify the timezone.',\n            },\n        },\n        additionalProperties: false,\n        description: 'SPL query parameters.',\n    },\n    refresh: {\n        anyOf: [\n            {\n                type: 'number',\n                minimum: 0,\n            },\n            {\n                type: 'string',\n            },\n        ],\n        description:\n            'Specify the refresh interval in seconds or with a time expression.',\n    },\n    refreshType: {\n        type: 'string',\n        enum: ['delay', 'interval'],\n        default: 'delay',\n        description:\n            'Indicate the starting time for counting down to a refresh. Use delay to start counting when the search is done. Use interval to count down when the search is dispatched.',\n    },\n    requiredFreshness: {\n        type: 'number',\n        description:\n            'Specify the freshness range in seconds to enable search job caching',\n    },\n    module: {\n        type: 'string',\n        description: 'Dataset module for search isolation',\n    },\n};\n","module.exports = require(\"lodash/memoize\");","module.exports = require(\"@splunk/dashboard-definition/DashboardDefinition\");","export default {\n    ref: {\n        type: 'string',\n        description:\n            'The name of the saved search to retrieve the results from.',\n    },\n    app: {\n        type: 'string',\n        description: 'The name of the app that the saved search belongs to.',\n    },\n    refresh: {\n        type: ['number', 'string'],\n        description:\n            'Specify the refresh interval in seconds or with a time expression. Ignored if saved search is scheduled.',\n    },\n    refreshType: {\n        type: 'string',\n        enum: ['delay', 'interval'],\n        default: 'delay',\n        description:\n            'Indicate the starting time for counting down to a refresh. Use delay to start counting when the search is done. Use interval to count down when the search is dispatched. Ignored if saved search is scheduled.',\n    },\n};\n","export default {\n    query: {\n        type: 'string',\n        description: 'An SPL search string.',\n    },\n    queryParameters: {\n        type: 'object',\n        properties: {\n            earliest: {\n                type: 'string',\n                description: `Specify the earliest time to search for events. Choose from year (y), month (m), week (w), day (d), minute, (m), or second (s), or 0 for all time.\n                See the examples below.`,\n            },\n            latest: {\n                type: 'string',\n                description: `Specify the earliest time to search for events. Choose from year (y), month (m), week (w), day (d), minute, (m), second (s), or now.\n                See the examples below.`,\n            },\n        },\n        additionalProperties: false,\n        description:\n            'SPL query parameters, only contains earliest and latest for now.',\n    },\n    refresh: {\n        type: ['number', 'string'],\n        description:\n            'Specify the refresh interval in seconds or with a time expression.',\n    },\n    refreshType: {\n        type: 'string',\n        enum: ['delay', 'interval'],\n        default: 'delay',\n        description:\n            'Indicate the starting time for counting down to a refresh. Use delay to start counting when the search is done. Use interval to count down when the search is dispatched.',\n    },\n};\n","export default {\n    data: {\n        type: 'object',\n    },\n    vizOptions: {\n        type: 'object',\n    },\n    meta: {\n        type: 'object',\n    },\n    errorLevel: {\n        type: 'string',\n        enum: ['info', 'warning', 'error'],\n    },\n    error: {\n        type: 'string',\n    },\n    delay: {\n        type: 'number',\n    },\n    timeToStart: {\n        type: 'number',\n    },\n    timeToComplete: {\n        type: 'number',\n    },\n    increments: {\n        type: 'number',\n    },\n};\n","import { Observable } from 'rxjs';\nimport pick from 'lodash/pick';\nimport map from 'lodash/map';\nimport has from 'lodash/has';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport isUndefined from 'lodash/isUndefined';\nimport memoizeOne from 'memoize-one';\nimport moment from 'moment';\nimport qs from 'query-string';\nimport { SearchService } from '@splunkdev/cloud-sdk/services/search';\nimport {\n    ServiceClient,\n    RequestQueueManagerParams,\n} from '@splunkdev/cloud-sdk/client';\nimport DataSet from '@splunk/datasource-utils/DataSet';\nimport { _ } from '@splunk/ui-utils/i18n';\nimport DataSource from './DataSource';\nimport addLeadingSearchCommand from './utils/addLeadingSearchCommand';\nimport SimpleScheduler from './utils/SimpleScheduler';\nimport CloudSearchOptionsSchema from './CloudSearchOptionsSchema';\nimport { getDefaultOptionsForSearchQuery } from './utils/SearchConfigUtils';\n\n/**\n * Get status message based on search job properties\n * @private\n */\nexport const getStatusMessage = ({ status, totalCount }) => {\n    if (status === 'running' && totalCount === 0) {\n        return _(\n            'Search is running, but not enough data to render visualization'\n        );\n    }\n\n    if (status === 'done' && totalCount === 0) {\n        return _('Search ran successfully, but no results were returned');\n    }\n\n    if (status == null) {\n        return _('Search is not yet running, queued on client');\n    }\n\n    return '';\n};\n\n/**\n * get sdk client\n * @param {String} cloudApiUrl cloud api url\n * @param {String} accessToken access token as string\n * @param {CloudAuthClient} authClient cloud-auth instance\n * @param {String} tenantId tenant id\n */\nconst getSdkClient = ({\n    cloudApiUrl,\n    accessToken,\n    authClient,\n    tenantId,\n    searchSubmitQueueParams = {},\n    searchQueueParams = {},\n}) => {\n    const serviceClient = new ServiceClient({\n        urls: { api: cloudApiUrl },\n        tokenSource: () => accessToken || authClient.getAccessToken(),\n        defaultTenant: tenantId,\n        requestQueueManagerParams: new RequestQueueManagerParams(\n            {\n                // These are taken from overrides in DefaultQueueManagerParams (https://github.com/splunk/splunk-cloud-sdk-js) (src/client.ts)\n                retries: 6,\n                initialTimeout: 1000,\n                exponent: 1.6,\n                maxInFlight: 3,\n            },\n            // FYI 'search-submit' queue is to start search job while 'search' queue is for search status and results requests.\n            new Map([\n                [\n                    'search-submit', // SEARCH_SUBMIT_QUEUE is not exported (https://github.com/splunk/splunk-cloud-sdk-js) (src/client.ts)\n                    {\n                        retries: get(searchSubmitQueueParams, 'retries', 10),\n                        initialTimeout: get(\n                            searchSubmitQueueParams,\n                            'initialTimeout',\n                            1000\n                        ),\n                        exponent: get(searchSubmitQueueParams, 'exponent', 1.6),\n                        maxInFlight: get(\n                            searchSubmitQueueParams,\n                            'maxInFlight',\n                            10\n                        ),\n                    },\n                ],\n                [\n                    'search',\n                    {\n                        retries: get(searchQueueParams, 'retries', 10),\n                        initialTimeout: get(\n                            searchQueueParams,\n                            'initialTimeout',\n                            500\n                        ),\n                        exponent: get(searchQueueParams, 'exponent', 2),\n                        maxInFlight: get(searchQueueParams, 'maxInFlight', 10),\n                    },\n                ],\n            ])\n        ),\n    });\n    return new SearchService(serviceClient);\n};\n\n/**\n * a cached version of getSdkClient;\n */\nconst getCachedSdkClient = memoizeOne(getSdkClient, isEqual);\n\n/**\n * polling intervals\n */\nconst JOB_POLLING_INTERVAL = 400;\nconst RESULTS_POLLING_INTERVAL = 500;\nconst OTHER_SEARCH_PARAMS = [\n    'extractAllFields',\n    'timeFormat',\n    'maxTime',\n    'timeOfSearch',\n    'enablePreview',\n    'requiredFreshness',\n];\n\n/**\n * @fixme, this is a placeholder as search service does not return any messages now.\n\n * Find message in job status\n * @param {Array} messages\n * @param {String} type\n */\nconst findMessages = (messages = [], type = 'INFO') =>\n    messages.find((m) => m.type === type);\n\n/**\n * Extract error message from messages lists\n */\nconst extractErrorMessage = (messages = []) =>\n    map(findMessages(messages, 'ERROR'), (m) => m.text).join(',');\n\nconst wait = (time) => new Promise((resolve) => setTimeout(resolve, time));\n\n/**\n * check if job is done\n * @param {Object} job job properties\n */\nexport const isJobDone = (job) => job.status === 'done';\n\n/**\n * check if job is failed\n * @param {Object} job job instance\n * @returns {Boolean}\n */\nexport const isJobFailed = (job) => job.status === 'failed';\n\n/**\n * check if job is either done or failed\n * @param {Object} job job instance\n * @returns {Boolean}\n */\nexport const isJobCompleted = (job) =>\n    job && (isJobDone(job) || isJobFailed(job));\n\n/**\n * should update job stats\n * @param {Object} job job instance\n * @returns {Boolean}\n */\nexport const shouldUpdateJob = (job) => !job || !isJobCompleted(job);\n\n/**\n * return true if we need to fetch current result.\n * @param {Object} job job instance\n * @param {Boolean} [progress=true] whether allow fetching intermediate data\n * @private\n */\nexport const shouldFetch = (job, progress = true) => {\n    // disable fetch when search is running\n    return progress || isJobDone(job);\n};\n\n/**\n * Normalize queryParameters so that search API v1beta1 doesn't throw error\n * @param {Object} queryParameters\n */\nexport const normalizeQueryParameters = (queryParameters = {}) => {\n    const result = {};\n    if (queryParameters.earliest != null) {\n        result.earliest = queryParameters.earliest;\n    }\n    if (queryParameters.latest != null) {\n        result.latest = queryParameters.latest;\n    }\n\n    if (queryParameters.earliest == null) {\n        if (has(queryParameters, 'earliestTime')) {\n            result.earliest = queryParameters.earliestTime;\n        } else if (has(queryParameters, 'earliest_time')) {\n            result.earliest = queryParameters.earliest_time;\n        }\n    }\n\n    if (queryParameters.latest == null) {\n        if (has(queryParameters, 'latestTime')) {\n            result.latest = queryParameters.latestTime;\n        } else if (has(queryParameters, 'latest_time')) {\n            result.latest = queryParameters.latest_time;\n        }\n    }\n\n    if (queryParameters.timezone) {\n        result.timezone = queryParameters.timezone;\n    } else {\n        result.timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    }\n\n    if (result.earliest === '') {\n        // another normalization to make both customers and search service API happy\n        result.earliest = '0';\n    }\n    if (result.latest === '') {\n        // This is to make sure current react time range picker works. Remove at your own peril!\n        result.latest = 'now';\n    }\n\n    // this is to be compliant with the `v2beta1` version of SCP search API, sigh...\n    // here's its requirement: \"When specifying an absolute time specify either UNIX time, or UTC in seconds using the ISO-8601 (%FT%T.%Q) format. For example 2019-01-25T13:15:30Z. GMT is the default timezone. You must specify GMT when you specify UTC. Any offset specified is ignored.\"\n    // so basically it is saying if the time format is ISO it must ends with 'Z'\n    // additionally, SCP doesn't support user timezone setting, so we agreed on setting to browser's timezone!\n    if (\n        moment(result.earliest, moment.ISO_8601, true).isValid() &&\n        !result.earliest.endsWith('Z')\n    ) {\n        result.earliest = moment(result.earliest).toISOString();\n    }\n    if (\n        moment(result.latest, moment.ISO_8601, true).isValid() &&\n        !result.latest.endsWith('Z')\n    ) {\n        result.latest = moment(result.latest).toISOString();\n    }\n\n    return result;\n};\n\n/**\n * an object with supported time durations and their multiplier\n * to convert to milliseconds. don't expect wait time to be > minutes\n */\nconst supportedTimeDurations = {\n    ms: 1,\n    s: 1000,\n    m: 60000,\n};\nconst numberUnitRegex = /(\\d+)(\\w+)/;\n/**\n * convert the wait string returned by the endpoint to milliseconds\n * @param {String} wait time as string e.g. '5s' is 5 seconds, '500ms' is 500 milliseconds\n */\nexport const getWaitTimeInMs = (waitStr) => {\n    if (!waitStr) {\n        return 0;\n    }\n    const matches = waitStr.match(numberUnitRegex);\n    if (!matches || matches.length !== 3) {\n        return 0;\n    }\n    const unit = matches[2]; // this assumes we always have a unit\n    const time = parseInt(matches[1], 10);\n    if (supportedTimeDurations[unit]) {\n        return time * supportedTimeDurations[unit];\n    }\n    return time;\n};\n\n/**\n * Split a relative url into pathname and query string parts\n * @param {String} relativeUrl A relative url\n * @returns {Object} { pathname, query }\n */\nconst parseNextLink = (relativeUrl) => qs.parseUrl(relativeUrl);\n\n/**\n * fetch paged data or data that is not ready yet\n *\n * @param {SDKClient} client sdk client\n * @param {String} link to page to be fetched\n * @param {Number} time to wait in milliseconds (if result set is not ready yet)\n */\nexport const fetchPagedData = async (\n    client,\n    link,\n    timeToWait = 0,\n    queryData = {}\n) => {\n    if (timeToWait) {\n        await wait(timeToWait);\n    }\n    // sdk is using { query: {} } to instruct query parameters lol.\n    const pageResponse = await client.get('api', link, { query: queryData });\n    const pageData = pageResponse.body;\n    let { fields = [], results = [] } = pageData;\n    if (pageData.nextLink) {\n        const { url, query } = parseNextLink(pageData.nextLink);\n        const nextPageData = await fetchPagedData(\n            client,\n            url,\n            getWaitTimeInMs(pageData.wait),\n            query\n        );\n\n        results = results.concat(nextPageData.results);\n        fields = fields || nextPageData.fields;\n    }\n    return {\n        fields,\n        results,\n    };\n};\n\n/**\n * fetch actual data from 'source' endpoint.\n * @param {SDKClient} client search service sdk client\n * @param {Object} requestParams requestParams from request function.\n * @param {Object} job search job\n */\nexport const fetchData = async (searchServiceClient, requestParams, job) => {\n    let data = null;\n    const fetchParams = pick(requestParams, ['offset', 'count', 'f', 'search']);\n    const fetchResultFn = job.enablePreview\n        ? searchServiceClient.listPreviewResults\n        : searchServiceClient.listResults;\n    const response = await fetchResultFn(job.sid, fetchParams);\n    let { fields = [], results = [] } = response;\n    // if there is a nextLink\n    // the result set either exceeds the maximum page size or is not ready yet\n    // https://confluence.splunk.com/display/PROD/Implementation+of+Server+Driven+Paging+for+Search+Service\n    if (response.nextLink) {\n        const { url, query } = parseNextLink(response.nextLink);\n        const pageData = await fetchPagedData(\n            searchServiceClient.client,\n            url,\n            getWaitTimeInMs(response.wait),\n            query\n        );\n\n        fields = fields.length ? fields : pageData.fields;\n        results = results.concat(pageData.results);\n    }\n    // We will emit data out when\n    // 1) response contains data (fields.length && results.length)\n    // 2) job is complete, in this case we need to emit dataset even it's empty\n    if (isJobCompleted(job) || (fields.length && results.length)) {\n        data = DataSet.fromJSONArray(fields, results);\n    }\n    return data;\n};\n\n/**\n * pick datasource metadata from job properties.\n * @param {Object} job job properties\n * @returns {Object} job metadata object normalized as per go/search-job-metadata\n */\nexport const fetchMetaData = (job) => {\n    const jobProperties = pick(job, ['status', 'sid', 'percentComplete']);\n    // we always include totalCount to show warning on viz if 0 results returned\n    jobProperties.totalCount = job.resultsAvailable;\n    // Enterprise has real-time searches, SCS does not so always set to false.\n    jobProperties.isRealTimeSearch = false;\n    jobProperties.statusMessage = getStatusMessage(\n        pick(jobProperties, ['status', 'totalCount', 'isRealTimeSearch'])\n    );\n    jobProperties.lastUpdated =\n        get(job, 'completionTime') || get(job, 'dispatchTime');\n    return jobProperties;\n};\n\n/**\n * Create a new `CloudSearch` datasource instance. Datasource is a module that provides data into a visualization.\n * One datasource can bind to multiple viz while one viz can be powered by multiple datasources.\n * This is specific to SDC search framework and use js-sdk search framework.\n * Examples:\n * ```js\n *      try {\n *          const datasource = new CloudSearch(options, context);\n *      } catch (e) {\n *          // Handle error here.\n *      }\n *```\n * @param {Object} options - Search parameters.\n * @param {String} options.query - The search string. This is the only required search param.\n * @param {String} options.queryParameters.earliestTime - earliest time of the query\n * @param {String} options.queryParameters.latestTime - latest time of the query\n * @param {String} options.requiredFreshness - freshness of search used for search job caching\n * @param {String} options.module - search module\n * @param {Object} context - ssc config parameters.\n * @param {Object} context.authClient - instance of @splunk/ssc-auth\n * @param {String} context.tenantId - current user tenantId to make the request to sdc search service\n * @returns {CloudSearch} A new CloudSearch datasource instance.\n * @public\n */\nclass CloudSearch extends DataSource {\n    static schema = CloudSearchOptionsSchema;\n\n    constructor(options = {}, context = {}) {\n        super(options, context);\n        this.currentJob = null;\n        this.caughtError = null;\n        this.isTeardown = false;\n        this.updateJob = this.updateJob.bind(this);\n\n        if (!this.options.query && !this.options.sid) {\n            throw Error('search string or sid is required!');\n        }\n        if (!this.context.tenantId) {\n            throw Error('tenantId is required');\n        }\n        if (\n            this.context.accessToken == null &&\n            this.context.authClient == null\n        ) {\n            throw Error('authClient or accessToken is required');\n        }\n    }\n\n    /**\n     * create a sdk client\n     */\n    getServiceClient() {\n        if (this.client == null) {\n            const {\n                cloudApiUrl,\n                accessToken,\n                authClient,\n                tenantId,\n                cacheClient = true,\n                searchQueueParams,\n            } = this.context;\n            // For backwards compatibility, previously it was 'requestQueueManagerParams'. Now it's renamed since we have 2 queues with diff params.\n            const searchSubmitQueueParams =\n                this.context.searchSubmitQueueParams ||\n                this.context.requestQueueManagerParams;\n\n            const getFn = cacheClient ? getCachedSdkClient : getSdkClient;\n            this.client = getFn({\n                cloudApiUrl,\n                accessToken,\n                authClient,\n                tenantId,\n                searchSubmitQueueParams,\n                searchQueueParams,\n            });\n        }\n        return this.client;\n    }\n\n    /**\n     * Creates a search job and returns a jobId.\n     *\n     * Examples:\n     * ```js\n     *      const datasource = new CloudSearch(options, context);\n     *      const sid = await datasource.setup();\n     *```\n     * @throws {error} If request to sdk endpoint fails\n     * @returns {Promise<string>} The SID of created search.\n     * @public\n     */\n    async setup() {\n        // Must do an explicit undefined check to allow the user specified default module value of empty string \"\"\n        const module = isUndefined(this.options.module)\n            ? this.context.defaultModule\n            : this.options.module;\n        const jobParams = {\n            // we by default enable preview unless user set `enablePreview` to false in options\n            enablePreview: true,\n            ...pick(this.options, OTHER_SEARCH_PARAMS),\n            module,\n            query: this.options.query\n                ? addLeadingSearchCommand(this.options.query)\n                : null,\n        };\n        if (this.options.queryParameters) {\n            jobParams.queryParameters = normalizeQueryParameters(\n                this.options.queryParameters\n            );\n        }\n        try {\n            const job = this.options.sid\n                ? await this.getServiceClient().getJob(this.options.sid)\n                : await this.getServiceClient().createJob(jobParams);\n            this.jobId = job.sid;\n            this.updateJobScheduler = SimpleScheduler.createScheduler(\n                this.updateJob\n            );\n            this.updateJobScheduler.start();\n        } catch (ex) {\n            if (this.options.sid) {\n                // eslint-disable-next-line no-console\n                console.error('failed to retrieve search job:', ex);\n            } else {\n                // eslint-disable-next-line no-console\n                console.error('failed to create search job:', ex);\n            }\n            this.caughtError = ex.message;\n            return null;\n        }\n        return this.jobId;\n    }\n\n    /**\n     * Compute the next fetch interval, return false to terminal the loop\n     */\n    computeNextFetchDelay = () => {\n        if (isJobCompleted(this.currentJob) || this.isTeardown) {\n            return false; // no next fetch;\n        }\n        return RESULTS_POLLING_INTERVAL;\n    };\n\n    /**\n     * Supports getResults as exposed\n     * by [@splunk/cloud-sdk](https://github.com/splunk/splunk-cloud-sdk-js) (src/search.ts)\n     *\n     * Examples:\n     * ```js\n     *      const datasource = new CloudSearch(options, context);\n     *      datasource.setup().then(() => {\n     *          datasource.request().subscribe({\n     *              complete() {\n     *                 // search completed\n     *              },\n     *              next(obj) {\n     *                  // Process results\n     *              },\n     *              error() {\n     *                  // Handle error\n     *              },\n     *         });\n     *     });\n     * ```\n     * @param {Object} requestParams search request parameters.\n     * @param {Number} requestParams.offset data offset.\n     * @param {Number} requestParams.count data count.\n     * @param {String} requestParams.progress whether to return intermediate search result\n     * @returns {function(*)}\n     * @public\n     */\n    request(requestParams = {}) {\n        const params = {\n            offset: 0,\n            count: 0,\n            progress: true,\n            ...requestParams,\n        };\n        return Observable.create((observer) => {\n            let resultScheduler = null;\n            let data = null;\n            if (this.caughtError) {\n                observer.error({\n                    level: 'error',\n                    message: this.caughtError,\n                });\n            } else {\n                resultScheduler = SimpleScheduler.createScheduler(async () => {\n                    try {\n                        /**\n                         * This function will perform following tasks in order:\n                         * 1. given the latest job state, fetch results and compute metadata\n                         * 2. compute the next fetch delay or stop the scheduler\n                         */\n                        if (this.currentJob) {\n                            switch (this.currentJob.status) {\n                                case 'failed':\n                                    observer.error({\n                                        level: 'error',\n                                        message: extractErrorMessage(\n                                            this.currentJob.messages\n                                        ),\n                                    });\n                                    break;\n                                case 'running':\n                                case 'finalizing':\n                                case 'done':\n                                    if (\n                                        shouldFetch(\n                                            this.currentJob,\n                                            params.progress\n                                        )\n                                    ) {\n                                        data = await fetchData(\n                                            this.getServiceClient(),\n                                            params,\n                                            this.currentJob\n                                        );\n                                        if (data) {\n                                            observer.next({\n                                                data,\n                                                meta: fetchMetaData(\n                                                    this.currentJob\n                                                ),\n                                            });\n                                        }\n                                    }\n                                    break;\n                                default:\n                                    break;\n                            }\n                            if (isJobDone(this.currentJob)) {\n                                observer.complete();\n                            }\n                        }\n                        return this.computeNextFetchDelay();\n                    } catch (ex) {\n                        observer.error({\n                            level: 'error',\n                            message: ex.message,\n                        });\n                        return false; // stop next fetch once we have error\n                    }\n                });\n                // kick off the loop\n                resultScheduler.start();\n            }\n            return () => {\n                // clean up function when no consumer subscribe to this observable\n                if (resultScheduler) {\n                    resultScheduler.stop();\n                    resultScheduler = null;\n                }\n            };\n        });\n    }\n\n    /**\n     * This is how the search sdk expects delete to work,\n     * but it is commented out on ssc-search spec which means that this method can't really be used right now.\n     * When available to use, it will delete the search job with the given jobId\n     *\n     * Examples:\n     * ```js\n     *   const response = await datasource.teardown().then(\n     *      value => {\n     *          console.log(`Should have deleted the job: ${value}`);\n     *          },\n     *      reason => {\n     *          console.log(`Failed to delete the job: ${reason}`);\n     *         }\n     *   );\n     *```\n     * @returns {Promise<*>}\n     * @public\n     */\n    async teardown() {\n        if (this.updateJobScheduler) {\n            this.updateJobScheduler.stop();\n        }\n        /**\n         * cancelling a non-running search will return 400... i'm sick with search service\n         * that push all server state to client that make the system complicated as HELL\n         */\n        if (this.jobId && !isJobCompleted(this.currentJob)) {\n            await this.getServiceClient().updateJob(this.jobId, {\n                status: 'canceled',\n            });\n        }\n        this.isTeardown = true;\n        return null;\n    }\n\n    /**\n     * Given the job id, update the job stats and compute the next update delay\n     */\n    async updateJob() {\n        try {\n            if (this.jobId && shouldUpdateJob(this.currentJob)) {\n                this.currentJob = await this.getServiceClient().getJob(\n                    this.jobId\n                );\n                return JOB_POLLING_INTERVAL;\n            }\n        } catch (ex) {\n            this.caughtError = ex.message;\n        }\n        return false;\n    }\n}\n\nCloudSearch.config = {\n    title: _('Search'),\n    displayDataSourceItemListByDefault: true,\n    canCreateDataSource: true,\n    dataSourceRemoveVerb: 'delete',\n    isDataSourceNameEditable: true,\n    getDataSourceName: ({ dataSource }) =>\n        get(dataSource, 'name', _('Unnamed')),\n    defaultOptions: ({ definition }) =>\n        getDefaultOptionsForSearchQuery(definition),\n    editorConfig: [],\n    optionsSchema: CloudSearchOptionsSchema,\n};\n\nexport default CloudSearch;\n","module.exports = require(\"lodash/map\");","module.exports = require(\"lodash/has\");","module.exports = require(\"lodash/isUndefined\");","module.exports = require(\"memoize-one\");","module.exports = require(\"moment\");","module.exports = require(\"query-string\");","module.exports = require(\"@splunkdev/cloud-sdk/services/search\");","module.exports = require(\"@splunkdev/cloud-sdk/client\");","/**\n * Returns a fully qualified search string by prepending the 'search'\n * command of unqualified searches.  This method deems strings as unqualified\n * if it does not start with a '|', 'search ', or 'from '\n *\n * @param {String} search - The search string.\n * @returns {String}\n * @public\n */\nexport default function addLeadingSearchCommand(search) {\n    const trimmedSearch = search.trim();\n    if (trimmedSearch.startsWith('|')) {\n        return search;\n    }\n    if (\n        (trimmedSearch.startsWith('search ') && trimmedSearch.length > 7) ||\n        (trimmedSearch.startsWith('from ') && trimmedSearch.length > 5)\n    ) {\n        return search;\n    }\n    return `search ${trimmedSearch}`;\n}\n","import { DataSet } from '@splunk/datasource-utils';\nimport type { JSONCols } from '@splunk/dashboard-types';\nimport type { Subscriber } from 'rxjs';\nimport type { Meta, ObservableData, RequestParams, ErrorLevel } from './types';\nimport DataSource from './DataSource';\n\nexport interface Options {\n    data?: JSONCols;\n    meta?: Meta;\n    delay?: number;\n    errorLevel?: ErrorLevel;\n    error?: string;\n}\n\nexport default class SnapshotDataSource extends DataSource {\n    data: DataSet;\n\n    delay: number;\n\n    meta: Meta;\n\n    errorLevel?: ErrorLevel;\n\n    error?: string;\n\n    constructor(options: Options = {}, context = {}) {\n        super(options, context);\n        if (options.data) {\n            this.data = DataSet.fromJSONCols(\n                options.data.fields,\n                options.data.columns\n            );\n        } else {\n            this.data = DataSet.fromJSONCols([], []);\n        }\n        this.meta = options.meta ?? {};\n        this.delay = options.delay ?? 0;\n        this.errorLevel = options.errorLevel;\n        this.error = options.error;\n    }\n\n    request(requestParams?: RequestParams) {\n        return (observer?: Subscriber<ObservableData>): (() => void) => {\n            let timer: ReturnType<typeof setTimeout>;\n            if (observer) {\n                if (this.error) {\n                    observer.error({\n                        level: this.errorLevel,\n                        message: this.error,\n                    });\n                    return () => undefined;\n                }\n\n                timer = setTimeout(() => {\n                    observer.next({\n                        data: this.data.getPage({\n                            count: requestParams?.count,\n                            offset: requestParams?.offset,\n                        }),\n                        meta: {\n                            ...this.meta,\n                            totalCount: this.data.getTotalCount(),\n                        },\n                    });\n                    observer.complete();\n                }, this.delay);\n            }\n\n            return () => {\n                clearTimeout(timer);\n            };\n        };\n    }\n}\n","import get from 'lodash/get';\nimport { _ } from '@splunk/ui-utils/i18n';\nimport console from '@splunk/dashboard-utils/console';\nimport SearchJob from '@splunk/search-job';\nimport {\n    username as CURRENT_USER,\n    app as CURRENT_APP,\n} from '@splunk/splunk-utils/config';\nimport {\n    get as getSavedSearch,\n    dispatch as dispatchSavedSearch,\n    getLatest as getLatestSavedSearch,\n} from '@splunk/splunk-utils/savedSearch';\nimport moment from '@splunk/moment';\nimport DataSource from './DataSource';\nimport SplunkSavedSearchOptionsSchema from './SplunkSavedSearchOptionsSchema';\nimport {\n    combineResultWhenProgress,\n    combineResultWhenFinalized,\n    previewFetchPredicate,\n    projectFunc,\n    transformObserver,\n    getEnterpriseSearchContext,\n} from './utils/SplunkSearchUtils';\n\nexport const ownRequestParams = {\n    output_mode: 'json_cols',\n};\n\nexport const defaultParams = {\n    // Note: if preview is changed to false, we will not get resultPreviewCount below and\n    // may break search status icon behavior\n    preview: true,\n};\n\nexport const defaultRequestParams = {\n    count: 0,\n    offset: 0,\n    progress: true,\n};\n\nexport const getSecondsBetweenDates = (date1, date2) => {\n    if (!(date1 instanceof moment) || !(date2 instanceof moment)) {\n        throw Error('Parameters must be @splunk/moment types');\n    }\n    return Math.ceil((date2 - date1) / 1000);\n};\n\nexport const calculateRefreshTime = (nextScheduledTime) => {\n    // SCP-39715\n    // `nextScheduledTime` is in the format like '2021-05-05 01:32:00 CEST' where CEST is a non-standard abbreviation which cannot be recognized by moment() or Date().\n    // To handle this issue, we remove the timezone from the timestamp and let `.newSplunkTime()` handle it.\n    // Note the timezone depends on Splunk Enterprise user settings, it could be CEST, UTC or some other timezone abbreviations.\n    const nextScheduledTimeWithoutTimezone = nextScheduledTime\n        .split(' ')\n        .slice(0, -1)\n        .join(' ');\n\n    const timeOfSavedSearchRetrieval = moment.newSplunkTime();\n    const secondsUntilNextSchedule = getSecondsBetweenDates(\n        timeOfSavedSearchRetrieval,\n        moment.newSplunkTime({ time: nextScheduledTimeWithoutTimezone })\n    );\n    // Give a slight buffer of 5 seconds to allow the scheduled job to kick off in an ideal environment,\n    // making it less likely to require multiple calls to retrieve the newest job.\n    return secondsUntilNextSchedule + 5;\n};\n\n/**\n * A DataSource that talks to splunk enterprise\n * @param {Object} options\n * @param {String} options.ref name of saved search\n * @param {String} options.app name of app saved search belongs to\n * @param {Object} context See [search-job api](https://splunkui.sv.splunk.com/Packages/search-job/API) dispatchOptions object\n * @param {Boolean} [context.keepAlive=true] If true, keep the job alive before teardown\n * @param {Boolean} [context.cache=false] If true, will try and reuse an existing search job if it has the same request params.\n * @param {String} [context.app] The current app in use as defined in the page url and @splunk/splunk-utils/Config\n * @param {String} [context.splunkdPath] splunk rest endpoint path\n * @param {String} [context.sessionKey] current session key\n * @param {String} [context.auditProvenance] provenance value to appear in the splunk audit log\n * @param {String} [context.id] ID of the dashboard performing the query\n * @returns {SplunkSavedSearch} A new SplunkSavedSearch datasource instance.\n * @public\n */\nclass SplunkSavedSearch extends DataSource {\n    static schema = SplunkSavedSearchOptionsSchema;\n\n    constructor(options = {}, context = {}) {\n        super(options, context);\n        if (!this.options.ref) {\n            throw Error('saved search ref is required!');\n        }\n        this.context = getEnterpriseSearchContext(this.context);\n    }\n\n    /**\n     * Creates a search job and returns sid once the job is created on the server.\n     * @returns {Promise} The sid of the created job.\n     * @public\n     */\n    async setup() {\n        try {\n            /**\n             * SearchJob can only modify config and fetch params globally.\n             */\n            const { splunkdPath, sessionKey } = this.context;\n            if (splunkdPath) {\n                SearchJob.setSplunkConfig({\n                    splunkdPath,\n                });\n            }\n            if (sessionKey) {\n                SearchJob.setBaseFetchInit({\n                    headers: {\n                        Authorization: `Splunk ${sessionKey}`,\n                    },\n                });\n            }\n            const { app, ref } = this.options;\n            const savedSearchParams = {\n                name: ref,\n                app: app || CURRENT_APP,\n                owner: CURRENT_USER,\n            };\n            const requestParams = {\n                'dispatch.check_risky_command': this.options.checkRiskyCommand,\n                'dispatch.label': this.context.id,\n            };\n            if (this.context.auditProvenance) {\n                requestParams[\n                    'dispatch.provenance'\n                ] = this.context.auditProvenance;\n            }\n            let sid = null;\n\n            // fetch report definition\n            this.savedSearch = await getSavedSearch(savedSearchParams);\n            const isScheduled = get(this.savedSearch, [\n                'entry',\n                0,\n                'content',\n                'is_scheduled',\n            ]);\n            this.searchQuery = get(this.savedSearch, [\n                'entry',\n                0,\n                'content',\n                'search',\n            ]);\n            if (isScheduled) {\n                const params = { search: 'isScheduled=true' };\n                const lastSearchJob = await getLatestSavedSearch(\n                    savedSearchParams,\n                    params,\n                    SearchJob.splunkConfig,\n                    SearchJob.baseFetchInit\n                );\n                sid = get(lastSearchJob, ['name'], null);\n                if (!sid) {\n                    ({ sid } = await dispatchSavedSearch(\n                        savedSearchParams,\n                        requestParams,\n                        SearchJob.splunkConfig,\n                        SearchJob.baseFetchInit\n                    ));\n                }\n            } else {\n                ({ sid } = await dispatchSavedSearch(\n                    savedSearchParams,\n                    requestParams,\n                    SearchJob.splunkConfig,\n                    SearchJob.baseFetchInit\n                ));\n            }\n\n            this.searchJob = SearchJob.fromSid(sid);\n            return sid;\n        } catch (e) {\n            console.error('failed to retrieve search job:', e);\n            this.setupError = e;\n            return null;\n        }\n    }\n\n    /**\n     * Returns an Observable that emits job information and search results.\n     *\n     * @param requestParams {Object} - [See documentation for available parameters.\n     * ](http://docs.splunk.com/Documentation/Splunk/latest/RESTREF/RESTsearch#search.2Fjobs.2F.7Bsearch_id.7D.2Fresults)\n     * @returns {Observable}\n     * @public\n     */\n    request(requestParams = {}) {\n        if (this.setupError) {\n            return (observer) => {\n                observer.error({\n                    level: 'error',\n                    message: this.setupError.message,\n                    meta: {\n                        search: this.searchQuery,\n                    },\n                });\n\n                return () => {};\n            };\n        }\n\n        const params = {\n            ...defaultRequestParams,\n            ...requestParams,\n            ...ownRequestParams,\n        };\n\n        if (params.sort) {\n            Object.keys(params.sort).forEach((sortKey) => {\n                const sortDir = params.sort[sortKey];\n                if (sortDir) {\n                    if (!params.search) {\n                        params.search = '| sort 0';\n                    }\n                    if (sortDir === 'desc') {\n                        params.search += ` -\"${sortKey}\"`;\n                    } else if (sortDir === 'asc') {\n                        params.search += ` +\"${sortKey}\"`;\n                    }\n                }\n            });\n\n            delete params.sort;\n        }\n\n        const progressObservable = this.searchJob.getProgress();\n        const result = params.progress\n            ? combineResultWhenProgress(\n                  this.searchJob.getResultsPreview(params, {\n                      fetchPredicate: previewFetchPredicate,\n                  }),\n                  progressObservable,\n                  projectFunc\n              )\n            : combineResultWhenFinalized(\n                  this.searchJob.getResults(params),\n                  progressObservable,\n                  projectFunc\n              );\n\n        return (observer) => {\n            // note: due to the nature that 'data' and 'meta' are from two different endpoints, there's no\n            // way to guarantee that they always match. But they'll eventually match when search is done.\n\n            const subscription = result.subscribe(transformObserver(observer));\n\n            return () => {\n                subscription.unsubscribe();\n            };\n        };\n    }\n\n    getRefreshConfig() {\n        let refresh = get(this.options, 'refresh');\n        let refreshType = get(this.options, 'refreshType');\n        if (this.savedSearch) {\n            const isScheduled = get(this.savedSearch, [\n                'entry',\n                0,\n                'content',\n                'is_scheduled',\n            ]);\n            if (isScheduled) {\n                const nextScheduledTime = get(this.savedSearch, [\n                    'entry',\n                    0,\n                    'content',\n                    'next_scheduled_time',\n                ]);\n                refresh = `${calculateRefreshTime(nextScheduledTime)}s`;\n                refreshType = 'interval';\n            }\n        }\n        return {\n            refresh,\n            refreshType,\n        };\n    }\n\n    getMetaData() {\n        const {\n            author,\n            updated,\n            acl: { app, sharing } = {},\n            content: {\n                is_scheduled: isScheduled,\n                next_scheduled_time: nextScheduledTime,\n                search: savedSearchQuery,\n                'dispatch.earliest_time': earliestTime,\n                'dispatch.latest_time': latestTime,\n            } = {},\n        } = get(this.savedSearch, ['entry', 0], {});\n\n        return {\n            author,\n            updated,\n            app,\n            sharing,\n            isScheduled,\n            nextScheduledTime,\n            savedSearchQuery,\n            earliestTime,\n            latestTime,\n        };\n    }\n\n    /**\n     * Cancel the search job and returns the server response.\n     * Job will not be cancelled if `context.cache` is true.\n     * @returns {Promise}\n     * @public\n     */\n    async teardown() {\n        const { cache } = this.context;\n        if (!cache && this.searchJob) {\n            this.searchJob = null;\n            this.savedSearch = null;\n        }\n        return null;\n    }\n}\n\nSplunkSavedSearch.config = {\n    title: _('Saved Search'),\n    displayDataSourceItemListByDefault: true,\n    canCreateDataSource: false,\n    dataSourceRemoveVerb: 'remove',\n    isDataSourceNameEditable: false,\n    getDataSourceName: ({ dataSource }) =>\n        get(dataSource, ['options', 'ref']) ||\n        get(dataSource, 'name', _('Unnamed')),\n    defaultOptions: {},\n    editorConfig: [],\n    optionsSchema: SplunkSavedSearchOptionsSchema,\n};\n\nexport default SplunkSavedSearch;\n","module.exports = require(\"@splunk/splunk-utils/savedSearch\");","import mapKeys from 'lodash/mapKeys';\nimport get from 'lodash/get';\nimport hash from 'hash-it';\nimport console from '@splunk/dashboard-utils/console';\nimport SearchJob from '@splunk/search-job';\nimport { _ } from '@splunk/ui-utils/i18n';\nimport { Observable } from 'rxjs';\nimport {\n    createPostSearchQueryArray,\n    mergeSearches,\n} from '@splunk/datasource-utils/BaseChainUtils';\nimport DataSource from './DataSource';\nimport SplunkSearchOptionsSchema from './SplunkSearchOptionsSchema';\nimport {\n    combineResultWhenProgress,\n    combineResultWhenFinalized,\n    previewFetchPredicate,\n    projectFunc,\n    transformObserver,\n    getEnterpriseSearchContext,\n} from './utils/SplunkSearchUtils';\nimport { getDefaultOptionsForSearchQuery } from './utils/SearchConfigUtils';\n\nexport const ownRequestParams = {\n    output_mode: 'json_cols',\n};\n\nexport const defaultParams = {\n    // Note: if preview is changed to false, we will not get resultPreviewCount below and\n    // may break search status icon behavior\n    preview: true,\n};\n\nexport const defaultRequestParams = {\n    count: 0,\n    offset: 0,\n    progress: true,\n};\n\nconst paramsMapping = {\n    earliest: 'earliest_time',\n    latest: 'latest_time',\n};\n\nconst parseQueryParameters = (options) => ({\n    ...defaultParams,\n    ...mapKeys(options.queryParameters, (v, k) =>\n        paramsMapping[k] ? paramsMapping[k] : k\n    ),\n});\n\nconst noCollectInSplRegex = new RegExp(/\\|\\s*collect/gi);\n\n/**\n * A DataSource that talks to splunk enterprise\n * @param {Object} options\n * @param {String} options.query spl query string\n * @param {String} options.queryParameters.earliest earliest time\n * @param {String} options.queryParameters.latest latest time\n * @param {Object} context See [search-job api](https://splunkui.sv.splunk.com/Packages/search-job/API) dispatchOptions object\n * @param {Boolean} [context.keepAlive=true] If true, keep the job alive before teardown\n * @param {Boolean} [context.cache=false] If true, will try and reuse an existing search job if it has the same request params.\n * @param {String} [context.app] The current app in use as defined in the page url and @splunk/splunk-utils/Config\n * @param {String} [context.splunkdPath] splunk rest endpoint path\n * @param {String} [context.sessionKey] current session key\n * @param {String} [context.auditProvenance] provenance value to appear in the splunk audit log\n * @param {String} [context.id] ID of the dashboard performing the query\n * @param {Object} meta\n * @param {Object} baseChainModel base chain definition\n * @returns {SplunkSearch} A new SplunkSearch datasource instance.\n * @public\n */\nclass SplunkSearch extends DataSource {\n    static schema = SplunkSearchOptionsSchema;\n\n    constructor(options = {}, context = {}, meta = {}, baseChainModel = {}) {\n        super(options, context);\n        if (!this.options.query && !this.options.sid) {\n            throw Error('query string or sid is required!');\n        }\n        // if there is extend, then this is chain search\n        this.extend = this.options.extend;\n        this.context = getEnterpriseSearchContext(this.context);\n        this.options = {\n            ...parseQueryParameters(this.options),\n            search: this.options.query, // map query to search\n            sid: this.options.sid,\n            check_risky_command: this.options.checkRiskyCommand,\n            label: this.context.id,\n        };\n        if (this.context.auditProvenance) {\n            this.options.provenance = this.context.auditProvenance;\n        }\n        this.baseChainModel = baseChainModel;\n        this.meta = meta;\n        this.results = {};\n    }\n\n    /**\n     * Creates a search job and returns sid once the job is created on the server.\n     * @returns {Promise} The sid of the created job.\n     * @public\n     */\n    async setup() {\n        try {\n            /**\n             * SearchJob can only modify config and fetch params globally.\n             */\n            const { splunkdPath, sessionKey } = this.context;\n            if (splunkdPath) {\n                SearchJob.setSplunkConfig({\n                    splunkdPath,\n                });\n            }\n            if (sessionKey) {\n                SearchJob.setBaseFetchInit({\n                    headers: {\n                        Authorization: `Splunk ${sessionKey}`,\n                    },\n                });\n            }\n\n            if (this.baseChainModel && this.baseChainModel[this.context.id]) {\n                // this is base data source\n                this.validation();\n                this.options = {\n                    ...this.options,\n                    postprocess_searches: JSON.stringify(\n                        createPostSearchQueryArray(\n                            this.context.id,\n                            this.baseChainModel\n                        )\n                    ),\n                    auto_cancel: 90, // cancel search job after 90 seconds of inactivity,\n                    label: this.context.id,\n                };\n            }\n\n            let sid = null;\n\n            if (this.extend) {\n                if (this.options.sid) {\n                    this.searchJob = SearchJob.fromSid(this.options.sid);\n                }\n            } else {\n                this.searchJob = this.options.sid\n                    ? SearchJob.fromSid(this.options.sid)\n                    : SearchJob.create(this.options, this.context);\n                sid = await this.searchJob.getSid().first().toPromise();\n            }\n\n            return sid;\n        } catch (e) {\n            if (this.options.sid) {\n                console.error('failed to retrieve search job:', e);\n            } else {\n                console.error('failed to create search job:', e);\n            }\n            this.setupError = e;\n            return null;\n        }\n    }\n\n    /**\n     * Returns an Observable that emits job information and search results.\n     *\n     * @param requestParams {Object} - [See documentation for available parameters.\n     * ](http://docs.splunk.com/Documentation/Splunk/latest/RESTREF/RESTsearch#search.2Fjobs.2F.7Bsearch_id.7D.2Fresults)\n     * @returns {Observable}\n     * @public\n     */\n    request(requestParams = {}) {\n        if (this.setupError) {\n            return (observer) => {\n                observer.error({\n                    level: 'error',\n                    message: this.setupError.message,\n                    meta: {\n                        search: this.options.search,\n                    },\n                });\n\n                return () => {};\n            };\n        }\n        const key = hash(requestParams);\n\n        let requestResult = this.results[key];\n\n        // One observable serves for all viz and ds subscription with same requestParams\n        if (!requestResult && this.searchJob) {\n            let searchRequestParams = requestParams;\n            if (this.extend) {\n                searchRequestParams = {\n                    ...requestParams,\n                    check_risky_command: this.options.check_risky_command,\n                    search: this.parentChainQuery\n                        ? mergeSearches(\n                              this.parentChainQuery,\n                              this.options.search\n                          )\n                        : this.options.search,\n                };\n            }\n\n            const params = {\n                ...defaultRequestParams,\n                ...searchRequestParams,\n                ...ownRequestParams,\n            };\n\n            if (params.sort) {\n                let sortStr = '';\n\n                Object.keys(params.sort).forEach((sortKey) => {\n                    const sortDir = params.sort[sortKey];\n                    if (sortDir) {\n                        if (sortDir === 'desc') {\n                            sortStr += ` -\"${sortKey}\"`;\n                        } else if (sortDir === 'asc') {\n                            sortStr += ` +\"${sortKey}\"`;\n                        }\n                    }\n                });\n\n                if (sortStr) {\n                    if (params.search) {\n                        params.search += ' | sort 0';\n                    } else {\n                        params.search = '| sort 0';\n                    }\n                    params.search += sortStr;\n                }\n\n                delete params.sort;\n            }\n\n            const progressObservable = this.searchJob.getProgress();\n            requestResult = params.progress\n                ? combineResultWhenProgress(\n                      this.searchJob.getResultsPreview(params, {\n                          fetchPredicate: previewFetchPredicate,\n                      }),\n                      progressObservable,\n                      // populate the search query to the chained data source for construct the chain-chain query\n                      (results, progress) =>\n                          projectFunc(\n                              results,\n                              progress,\n                              searchRequestParams.search\n                          )\n                  )\n                : combineResultWhenFinalized(\n                      this.searchJob.getResults(params),\n                      progressObservable,\n                      (results, progress) =>\n                          projectFunc(\n                              results,\n                              progress,\n                              searchRequestParams.search\n                          )\n                  );\n\n            this.results[key] = requestResult;\n        }\n\n        return (observer) => {\n            // note: due to the nature that 'data' and 'meta' are from two different endpoints, there's no\n            // way to guarantee that they always match. But they'll eventually match when search is done.\n            // no search job? then return a empty Observable\n            const result = requestResult || Observable.of();\n            const subscription = result.subscribe(\n                transformObserver(\n                    observer,\n                    this.completeSearchQuery || this.options.search\n                )\n            );\n\n            return () => {\n                subscription.unsubscribe();\n            };\n        };\n    }\n\n    /**\n     * Cancel the search job and returns the server response.\n     * Job will not be cancelled if `context.cache` is true.\n     * @returns {Promise}\n     * @public\n     */\n    async teardown() {\n        this.results = null;\n        // chain search does not cancel search job\n        if (this.extend) {\n            return null;\n        }\n        try {\n            const { cache } = this.context;\n            if (!cache && this.searchJob) {\n                return this.searchJob.cancel().first().toPromise();\n            }\n            return null;\n        } catch (ex) {\n            console.error('failed to cancel search job:', ex);\n            return null;\n        }\n    }\n\n    getObserver() {\n        return {\n            next: ({\n                meta: { sid, search, checkRiskyCommand, completeSearchQuery },\n            }) => {\n                this.parentChainQuery = search;\n                this.completeSearchQuery = completeSearchQuery;\n                if (\n                    this.options.sid !== sid ||\n                    this.options.check_risky_command !== checkRiskyCommand\n                ) {\n                    this.options.sid = sid;\n                    this.options.check_risky_command = checkRiskyCommand;\n                    this.results = {};\n                    this.shouldRefreshSub = true;\n                    // re-create SearchJob. setup() is async but should be fine here\n                    this.setup();\n                } else {\n                    this.shouldRefreshSub = false;\n                }\n            },\n            error: (error) => {\n                console.log(error);\n            },\n        };\n    }\n\n    shouldRefreshSubscription() {\n        return this.shouldRefreshSub;\n    }\n\n    validation() {\n        if (\n            this.options.search &&\n            noCollectInSplRegex.test(this.options.search)\n        ) {\n            throw new Error(\n                _(\n                    `The \"collect\" command cannot be used in a base search. Use an ad-hoc search for data source ${this.context.id} to use the \"collect\" command.`\n                )\n            );\n        }\n    }\n}\n\nSplunkSearch.config = {\n    title: ({ searchType }) =>\n        searchType === 'ds.search' ? _('Search') : _('Chain Search'),\n    displayDataSourceItemListByDefault: true,\n    canCreateDataSource: true,\n    dataSourceRemoveVerb: 'delete',\n    isDataSourceNameEditable: true,\n    getDataSourceName: ({ dataSource }) =>\n        get(dataSource, 'name', _('Unnamed')),\n    defaultOptions: ({ searchType, definition }) =>\n        searchType === 'ds.search'\n            ? getDefaultOptionsForSearchQuery(definition)\n            : {},\n    editorConfig: [],\n    optionsSchema: SplunkSearchOptionsSchema,\n    isChainEnabled: true,\n};\n\nexport default SplunkSearch;\n","module.exports = require(\"lodash/mapKeys\");","module.exports = require(\"hash-it\");","module.exports = require(\"@splunk/datasource-utils/BaseChainUtils\");","import type { Subscriber } from 'rxjs';\nimport type { JSONCols } from 'dashboard-types';\nimport { DataSet } from '@splunk/datasource-utils';\nimport type {\n    Meta,\n    Status,\n    ErrorLevel,\n    ObservableData,\n    RequestParams,\n} from './types';\nimport DataSource from './DataSource';\nimport TestDataSourceOptionsSchema from './TestDataSourceOptionsSchema';\nimport SimpleScheduler from './utils/SimpleScheduler';\n\nexport interface TestDataSourceOptions {\n    data?: JSONCols;\n    meta?: Meta;\n    delay?: number;\n    timeToStart?: number;\n    errorLevel?: ErrorLevel;\n    error?: string;\n    timeToComplete?: number;\n    increments?: number;\n}\n\n/**\n * @class TestDataSource\n */\nexport default class TestDataSource extends DataSource {\n    /**\n     * List of valid configuration options\n     * @static\n     */\n    static schema = TestDataSourceOptionsSchema;\n\n    static config = {\n        optionsSchema: TestDataSourceOptionsSchema,\n    };\n\n    readonly data: JSONCols;\n\n    readonly meta: Meta;\n\n    readonly timeToStart: number;\n\n    readonly errorLevel?: ErrorLevel;\n\n    readonly error?: string;\n\n    readonly timePerUpdate: number;\n\n    readonly incrementSize: number;\n\n    progress: number;\n\n    status: Status;\n\n    /**\n     * Test Datasource\n     * @param {Object} options.data static data set\n     * @param {Number} [options.delay=0] time before first results return (deprecated)\n     * @param {Object} [options.meta] Return meta, merged with search progress\n     * @param {*} [options.errorLevel] Passthrough data for errors\n     * @param {String} [options.error] Passthrough error message - Set to create an erroring datasource\n     * @param {Number} [options.timeToStart=0] time before first results return (same as delay)\n     * @param {Number} [options.timeToComplete=0] time before all results return (same as delay)\n     * @param {Number} [options.timeToStart=0] time before results return (same as delay)\n     * @param {Number} [options.increments=10] Number of times to return partial results after initial delay\n     * @param {Object} context\n     */\n    constructor(options: TestDataSourceOptions = {}, context = {}) {\n        super(options, context);\n        this.data = options.data ? options.data : { fields: [], columns: [] };\n        this.meta = options.meta ?? {};\n        this.timeToStart = options.delay || options.timeToStart || 0;\n        this.errorLevel = options.errorLevel;\n        this.error = options.error;\n        const timeToComplete = options.timeToComplete || 0;\n        const increments = Math.max(options.increments || 10, 1);\n        this.timePerUpdate = timeToComplete / increments;\n        this.incrementSize = Math.ceil(100 / increments);\n        this.progress = timeToComplete ? 0 : 100;\n        this.status = 'queued';\n    }\n\n    /**\n     * Create a DataSet\n     * @param {Object} [config]\n     * @param {Array} [config.fields=[]] List of field names\n     * @param {Array[]} [config.columns=[]] List of column data\n     * @return {DataSet}\n     */\n    // eslint-disable-next-line class-methods-use-this\n    toDataSet({ fields = [], columns = [] }: JSONCols): DataSet {\n        return DataSet.fromJSONCols(fields, columns);\n    }\n\n    /**\n     * Calculate the partial results for a dataset\n     * @returns {DataSet}\n     */\n    getData(requestParams?: RequestParams): DataSet {\n        if (this.progress >= 100) {\n            // for now, we only allow pagination for completed data source\n            return this.toDataSet(this.data).getPage({\n                count: requestParams?.count,\n                offset: requestParams?.offset,\n            });\n        }\n\n        const data: JSONCols = { fields: this.data.fields, columns: [] };\n        const size = Math.floor(\n            this.data.columns[0].length * (this.progress / 100)\n        );\n        this.data.columns.forEach((column) => {\n            if (!size) {\n                data.columns.push([]);\n            } else {\n                data.columns.push(column.slice(0, size));\n            }\n        });\n        return this.toDataSet(data);\n    }\n\n    /**\n     * Calculate the content of meta\n     * @return {Object}\n     */\n    getMeta(): Meta {\n        const meta = { ...this.meta, status: this.status };\n\n        if (this.status === 'failed') {\n            return meta;\n        }\n\n        meta.percentComplete = this.progress;\n        // Number of results produced so far...\n        meta.totalCount = Math.floor(\n            this.data.columns[0].length * (this.progress / 100)\n        );\n\n        if (this.status !== 'queued') {\n            meta.lastUpdated = new Date().toISOString();\n        }\n\n        return meta;\n    }\n\n    /**\n     * Creates loop to request and return results\n     * @return {Function} Given an observable, schedule data updates over time\n     */\n    request(requestParams?: RequestParams) {\n        return (observer?: Subscriber<ObservableData>): (() => void) => {\n            if (!observer) {\n                return () => undefined;\n            }\n\n            if (this.error) {\n                this.status = 'failed';\n                observer.error({\n                    level: this.errorLevel,\n                    message: this.error,\n                    meta: this.getMeta(),\n                });\n                return () => undefined;\n            }\n            let resultScheduler: SimpleScheduler;\n\n            const timer = setTimeout(() => {\n                this.status = 'running';\n                resultScheduler = SimpleScheduler.createScheduler(async () => {\n                    if (this.progress >= 100) {\n                        this.status = 'done';\n                    }\n\n                    observer.next({\n                        data: this.getData(requestParams),\n                        meta: this.getMeta(),\n                    });\n\n                    if (this.progress >= 100) {\n                        observer.complete();\n                    }\n\n                    this.progress = Math.min(\n                        this.progress + this.incrementSize,\n                        100\n                    );\n\n                    return this.timePerUpdate;\n                });\n                // kick off the loop\n                resultScheduler.start();\n            }, this.timeToStart);\n\n            return () => {\n                clearTimeout(timer);\n                if (this.status === 'running') {\n                    this.status = 'canceled';\n                }\n                if (resultScheduler) {\n                    resultScheduler.stop();\n                }\n            };\n        };\n    }\n}\n","export { default as DataSource } from './DataSource';\nexport { default as CloudSearch } from './CloudSearch';\nexport { default as SnapshotDataSource } from './SnapshotDataSource';\nexport { default as SplunkSavedSearch } from './SplunkSavedSearch';\nexport { default as SplunkSearch } from './SplunkSearch';\nexport { default as TestDataSource } from './TestDataSource';\nexport * from './types';\n"],"sourceRoot":""}