/*!
 * Copyright © 2020 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEnterpriseSearchContext = exports.previewFetchPredicate = exports.transformObserver = exports.combineResultWhenFinalized = exports.combineResultWhenProgress = exports.projectFunc = exports.getStatusMessage = void 0;
var pick_1 = __importDefault(__webpack_require__(6));
var get_1 = __importDefault(__webpack_require__(7));
var rxjs_1 = __webpack_require__(8);
var i18n_1 = __webpack_require__(9);
var DataSet_1 = __importDefault(__webpack_require__(10));
var moment_1 = __importDefault(__webpack_require__(11));
var config_1 = __webpack_require__(12);
/**
 * Get status message based on search job properties
 * @param {String} status the status returned by the search job
 * @param {Boolean} isRealTimeSearch
 * @param {Number} totalCount the total number of search results retrieved
 * @returns {String} status message
 */
var getStatusMessage = function (_a) {
    var status = _a.status, isRealTimeSearch = _a.isRealTimeSearch, totalCount = _a.totalCount;
    if (status === 'running') {
        if (isRealTimeSearch) {
            return i18n_1._('Real-time search is running');
        }
        if (totalCount === 0) {
            return i18n_1._('Search is running, but not enough data to render visualization');
        }
    }
    if (status === 'queued') {
        return i18n_1._('Search is not yet running, queued on server');
    }
    if (status === 'parsing') {
        return i18n_1._('Search is not yet running, queued on server');
    }
    if (status === 'done' && totalCount === 0) {
        return i18n_1._('Search ran successfully, but no results were returned');
    }
    return '';
};
exports.getStatusMessage = getStatusMessage;
// this is a list of properties that will be removed or normalized in the future. Refer to the RFC 2020_05_05-search_job_metadata.md
var deprecatedSearchMetas = ['resultCount', 'isDone', 'dispatchState'];
/**
 * Formats the results of a Splunk SearchJob to use in UDF
 * @param {Object} results search results object
 * @param {Object} progress search progress object
 * @param {String} search search query
 * @returns {Object} Formatted data and metadata
 */
var projectFunc = function (results, progress, search) {
    var fields = results.fields, columns = results.columns, postProcessCount = results.post_process_count;
    var _a = progress.content, isRealTimeSearch = _a.isRealTimeSearch, resultPreviewCount = _a.resultPreviewCount, resultCount = _a.resultCount;
    // totalCount is required for pagination.
    var totalCount;
    if (postProcessCount != null) {
        // for post process searches, the totalCount is post_process_count in the results, NOT the resultPreviewCount/resultCount in the jobProperties.
        totalCount = postProcessCount;
    }
    else if (resultPreviewCount != null) {
        // we look at resultPreviewCount since that is always set when preview = true.
        // when search job is done, resultPreviewCount can be null,
        // see https://splunk.slack.com/archives/C8YPWKC4U/p1591290195175900 for more context.
        totalCount = resultPreviewCount;
    }
    else {
        totalCount = resultCount;
    }
    var status = progress.content.dispatchState.toLowerCase();
    return {
        data: new DataSet_1.default(fields, columns),
        meta: __assign(__assign({}, pick_1.default(progress.content, deprecatedSearchMetas)), { sid: progress.content.sid, totalCount: totalCount,
            status: status, statusMessage: exports.getStatusMessage({
                status: status,
                isRealTimeSearch: isRealTimeSearch,
                totalCount: totalCount,
            }), 
            // need to manually convert progress from [0, 1] to [0, 100]
            percentComplete: status === 'done'
                ? 100
                : Math.round(progress.content.doneProgress * 100), isRealTimeSearch: isRealTimeSearch, lastUpdated: moment_1.default(progress.published)
                .add(pick_1.default(progress.content, 'runDuration'), 'seconds')
                .toISOString(), search: search }),
    };
};
exports.projectFunc = projectFunc;
/**
 * return an Observable that will emit intermediate search result
 * @param {Observable} resultsObservable observable for the search results
 * @param {Observable} progressObservable observable for the search progress so far
 * @param {Function} callback project function to transform the values emitted by the Observable
 */
var combineResultWhenProgress = function (resultsObservable, progressObservable, callback) { return rxjs_1.Observable.combineLatest(resultsObservable, progressObservable, callback); };
exports.combineResultWhenProgress = combineResultWhenProgress;
/**
 * return an Observable that will emit final search result
 * @param {Observable} resultsObservable observable for the search results
 * @param {Observable} progressObservable observable for the search progress so far
 * @param {Function} callback project function to transform the values emitted by the Observable
 */
var combineResultWhenFinalized = function (resultsObservable, progressObservable, callback) { return rxjs_1.Observable.forkJoin(resultsObservable, progressObservable, callback); };
exports.combineResultWhenFinalized = combineResultWhenFinalized;
/**
 * Wraps the observer to improve the error handling
 * @param {Observer} observer the observer to be wrapped
 * @param {string} search the search query
 * @returns {Observer} the wrapped observer
 */
var transformObserver = function (observer, search) { return ({
    next: function (response) { return observer.next(response); },
    error: function (err) {
        return observer.error({
            level: 'error',
            message: err.message,
            meta: {
                search: search,
            },
        });
    },
    complete: function () { return observer.complete(); },
}); };
exports.transformObserver = transformObserver;
/**
 * Determine if a fetch is needed based on the given search preview state
 * @param {Object} searchState search preview state
 * @returns {Boolean}
 */
var previewFetchPredicate = function (searchState) {
    if (get_1.default(searchState, ['content', 'isRealTimeSearch'], false)) {
        return true;
    }
    // we do a fetch when
    // 1. result count > 0
    // 2. search is done so we can make sure we always return the result
    return (get_1.default(searchState, ['content', 'resultPreviewCount'], 0) > 0 ||
        !!get_1.default(searchState, ['content', 'isDone']));
};
exports.previewFetchPredicate = previewFetchPredicate;
/**
 * Provides common options for splunk search dispatch options
 * @param {Object} context Object containing any configurable dispatchOptions from splunk/search-job
 * @returns {Object}
 */
var getEnterpriseSearchContext = function (context) {
    return __assign({ keepAlive: true, cache: false, app: config_1.app }, context);
};
exports.getEnterpriseSearchContext = getEnterpriseSearchContext;


/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("lodash/pick");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("lodash/get");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = require("rxjs");

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = require("@splunk/ui-utils/i18n");

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = require("@splunk/datasource-utils/DataSet");

/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports = require("@splunk/moment");

/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = require("@splunk/splunk-utils/config");

/***/ })
/******/ ]);
//# sourceMappingURL=SplunkSearchUtils.js.map