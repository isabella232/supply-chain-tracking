/*!
 * Copyright © 2018 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 22);
/******/ })
/************************************************************************/
/******/ ({

/***/ 22:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createTestSchema", function() { return createTestSchema; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOKEN_PATTERN", function() { return TOKEN_PATTERN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rgbColorPattern", function() { return rgbColorPattern; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rgbaColorPattern", function() { return rgbaColorPattern; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "colorPattern", function() { return colorPattern; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "colorPatternWithRGBA", function() { return colorPatternWithRGBA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COLOR_OR_TOKEN_PATTERN", function() { return COLOR_OR_TOKEN_PATTERN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COLOR_OR_TOKEN_PATTERN_WITH_RGBA", function() { return COLOR_OR_TOKEN_PATTERN_WITH_RGBA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DYNAMIC_OPTIONS_DSL_PATTERN", function() { return DYNAMIC_OPTIONS_DSL_PATTERN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPattern", function() { return getPattern; });
/* harmony default export */ __webpack_exports__["default"] = ({
  $schema: 'http://json-schema.org/draft-07/schema#',
  $id: 'http://json-schema.org/draft-07/schema#',
  title: 'Core schema meta-schema',
  definitions: {
    schemaArray: {
      type: 'array',
      minItems: 1,
      items: {
        $ref: '#'
      }
    },
    nonNegativeInteger: {
      type: 'integer',
      minimum: 0
    },
    nonNegativeIntegerDefault0: {
      allOf: [{
        $ref: '#/definitions/nonNegativeInteger'
      }, {
        default: 0
      }]
    },
    simpleTypes: {
      enum: ['array', 'boolean', 'integer', 'null', 'number', 'object', 'string']
    },
    stringArray: {
      type: 'array',
      items: {
        type: 'string'
      },
      uniqueItems: true,
      default: []
    }
  },
  type: ['object', 'boolean'],
  properties: {
    $id: {
      type: 'string',
      format: 'uri-reference'
    },
    $schema: {
      type: 'string',
      format: 'uri'
    },
    $ref: {
      type: 'string',
      format: 'uri-reference'
    },
    $comment: {
      type: 'string'
    },
    title: {
      type: 'string'
    },
    description: {
      type: 'string'
    },
    default: true,
    readOnly: {
      type: 'boolean',
      default: false
    },
    examples: {
      type: 'array',
      items: true
    },
    multipleOf: {
      type: 'number',
      exclusiveMinimum: 0
    },
    maximum: {
      type: 'number'
    },
    exclusiveMaximum: {
      type: 'number'
    },
    minimum: {
      type: 'number'
    },
    exclusiveMinimum: {
      type: 'number'
    },
    maxLength: {
      $ref: '#/definitions/nonNegativeInteger'
    },
    minLength: {
      $ref: '#/definitions/nonNegativeIntegerDefault0'
    },
    pattern: {
      type: 'string',
      format: 'regex'
    },
    additionalItems: {
      $ref: '#'
    },
    items: {
      anyOf: [{
        $ref: '#'
      }, {
        $ref: '#/definitions/schemaArray'
      }],
      default: true
    },
    maxItems: {
      $ref: '#/definitions/nonNegativeInteger'
    },
    minItems: {
      $ref: '#/definitions/nonNegativeIntegerDefault0'
    },
    uniqueItems: {
      type: 'boolean',
      default: false
    },
    contains: {
      $ref: '#'
    },
    maxProperties: {
      $ref: '#/definitions/nonNegativeInteger'
    },
    minProperties: {
      $ref: '#/definitions/nonNegativeIntegerDefault0'
    },
    required: {
      $ref: '#/definitions/stringArray'
    },
    additionalProperties: {
      $ref: '#'
    },
    definitions: {
      type: 'object',
      additionalProperties: {
        $ref: '#'
      },
      default: {}
    },
    properties: {
      type: 'object',
      additionalProperties: {
        $ref: '#'
      },
      default: {}
    },
    patternProperties: {
      type: 'object',
      additionalProperties: {
        $ref: '#'
      },
      propertyNames: {
        format: 'regex'
      },
      default: {}
    },
    dependencies: {
      type: 'object',
      additionalProperties: {
        anyOf: [{
          $ref: '#'
        }, {
          $ref: '#/definitions/stringArray'
        }]
      }
    },
    propertyNames: {
      $ref: '#'
    },
    const: true,
    enum: {
      type: 'array',
      items: true,
      minItems: 1,
      uniqueItems: true
    },
    type: {
      anyOf: [{
        $ref: '#/definitions/simpleTypes'
      }, {
        type: 'array',
        items: {
          $ref: '#/definitions/simpleTypes'
        },
        minItems: 1,
        uniqueItems: true
      }]
    },
    format: {
      type: 'string'
    },
    contentMediaType: {
      type: 'string'
    },
    contentEncoding: {
      type: 'string'
    },
    if: {
      $ref: '#'
    },
    then: {
      $ref: '#'
    },
    else: {
      $ref: '#'
    },
    allOf: {
      $ref: '#/definitions/schemaArray'
    },
    anyOf: {
      $ref: '#/definitions/schemaArray'
    },
    oneOf: {
      $ref: '#/definitions/schemaArray'
    },
    not: {
      $ref: '#'
    }
  },
  default: true
});
var createTestSchema = function createTestSchema(optionsSchema) {
  return {
    $schema: 'http://json-schema.org/draft-07/schema#',
    $id: 'http://www.splunk.com/dashboard.schema.json',
    title: 'Dashboard Definition',
    description: 'Dashboard Definition',
    type: 'object',
    properties: optionsSchema
  };
}; // Below 2 regexs are copied from dashboard-framework/packages/dashboard-utils/src/token.jsc

var TOKEN_NAMESPACE_PREFIX_PATTERN = /(\w+:)?/.source; // ex: token.name|suh               (old-style filter chain)
// ex: token.name|lower|capitalize  (new-style filter chain)

var TOKEN_NAME_CHARS_PATTERN = /([^$|:]+?)(\|[|\w]+)?/.source;
var TOKEN_PATTERN = /\$/.source + TOKEN_NAMESPACE_PREFIX_PATTERN + TOKEN_NAME_CHARS_PATTERN + /\$/.source; // rgb and rgba regexes were derived from:
// https://stackoverflow.com/questions/9585973/javascript-regular-expression-for-rgb-values/9586150
// https://github.com/regexhq/rgba-regex
// NOTE: this will incorrectly accept values like rgb(999,999,999), but may be overkill to specify a regex that limits values to <= 255

var rgbColorPattern = /^rgb\(\s*(\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/;
var rgbaColorPattern = /^rgba\(\s*(\d{1,3}%?),\s*(\d{1,3}%?),\s*(\d{1,3}%?),\s*(\d*(?:\.\d+)?)\)$/; // todo: rename this to COLOR_PATTERN and replace all occurences.

var colorPattern = '^#[0-9a-fA-F]{6}$|transparent';
var colorPatternWithRGBA = "".concat(colorPattern, "|").concat(rgbColorPattern, "|").concat(rgbaColorPattern);
var COLOR_OR_TOKEN_PATTERN = "".concat(colorPattern, "|").concat(TOKEN_PATTERN);
var COLOR_OR_TOKEN_PATTERN_WITH_RGBA = "".concat(colorPatternWithRGBA, "|").concat(TOKEN_PATTERN); // dynamic option DSL expressions always start with a >

var DYNAMIC_OPTIONS_DSL_PATTERN = /^>.*/.source;
/**
 * Returns the regex string that matches each passed in value as well as tokens.
 * @param {Array.<string>} values
 * @returns {string}
 */

var getPattern = function getPattern(values) {
  return values.reduce(function (accumulator, value) {
    return "".concat(accumulator, "|^").concat(value, "$");
  }, TOKEN_PATTERN);
};

/***/ })

/******/ });
//# sourceMappingURL=schemaUtils.js.map