/*!
 * Copyright © 2018 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 57);
/******/ })
/************************************************************************/
/******/ ({

/***/ 14:
/***/ (function(module, exports) {

module.exports = require("@splunk/moment");

/***/ }),

/***/ 41:
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/typeof");

/***/ }),

/***/ 57:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNumerialStr", function() { return isNumerialStr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNumerial", function() { return isNumerial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseNumber", function() { return parseNumber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatNumber", function() { return formatNumber; });
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41);
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _splunk_moment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(14);
/* harmony import */ var _splunk_moment__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_splunk_moment__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7);
/* harmony import */ var _splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_3__);



 // Todo: need break out this utils after breaking out all visualizations

/**
 * @file
 * A set of number formatting function used in Table
 */

var DECIMAL_OR_SCIENTIFIC_REGEX = /(^[-+]?[0-9]*[.]?[0-9]*$)|(^[-+]?[0-9][.]?[0-9]*e[-+]?[0-9][0-9]*$)/i;
var COMMA_SEPARATED_NUMBER_REGEX = /(^[-+]?([0]|([1-9][0-9]{0,2})|(([1-9][0-9]{0,2}[,])([0-9]{3}[,])*[0-9]{3}))(([.][0-9]+)?)$)/;

function isDecimalOrExpo(str) {
  return DECIMAL_OR_SCIENTIFIC_REGEX.test(str);
}

function isCommaSeparatedNumber(str) {
  return COMMA_SEPARATED_NUMBER_REGEX.test(str);
}
/**
 * Check if a string can be considered as numeric, this includes decimal, scientific number and number with comma separator
 *
 * Examples:
 * ```js
 * const { isNumerialStr } from '@splunk/react-visualizations/utils/numberUtils';
 * assert.ok(isNumerialStr('11.123'));
 * ```
 * @param {String} str input value
 * @return {Boolean}
 * @public
 */


function isNumerialStr(str) {
  return isDecimalOrExpo(str) || isCommaSeparatedNumber(str);
}
/**
 * Check if a value can be considered as numeric
 *
 * Examples:
 * ```js
 * const { isNumerial } from '@splunk/react-visualizations/utils/numberUtils';
 * assert.equal(isNumerial('11.123') == 11.123);
 * ```
 * @param {any} value input value
 * @return {Boolean}
 * @public
 */

function isNumerial(value) {
  return Object(lodash__WEBPACK_IMPORTED_MODULE_2__["isFinite"])(value) || Object(lodash__WEBPACK_IMPORTED_MODULE_2__["isString"])(value) && isNumerialStr(value);
}
/**
 * Parse input value into number, return NaN for not numercial value
 * @param {*} value input value
 * @return {Number}
 * @public
 */

function parseNumber(value) {
  if (Object(lodash__WEBPACK_IMPORTED_MODULE_2__["isFinite"])(value) || Object(lodash__WEBPACK_IMPORTED_MODULE_2__["isString"])(value) && isDecimalOrExpo(value)) {
    // only parses the value consider as numeric.
    return parseFloat(value);
  }

  if (Object(lodash__WEBPACK_IMPORTED_MODULE_2__["isString"])(value) && isCommaSeparatedNumber(value)) {
    return parseFloat(value.replace(/,/g, ''));
  }

  return NaN;
}
/**
 *
 */

var getThousandSeparatorDecimalPrecisionFormatter = Object(lodash__WEBPACK_IMPORTED_MODULE_2__["memoize"])(function () {
  var locale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'en';
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return new Intl.NumberFormat(locale, options);
}, function (locale, options) {
  return "".concat(locale).concat(JSON.stringify(options));
});
/**
- * Format number into string with precision and/or grouping
- *
- * Examples:
- * ```js
- * const { formatNumber } from '@splunk/react-visualizations/utils/numberUtils';
- * assert.equal(formatNumber('1100’, 2, { useThousandSeparators: true }), '1,100.00’)
- * ```
- * @param {Number} number                                  // value to format
- * @param {Number} [precision]                             // number of digits after the decimal point
- * @param {Object} [options]
- * @param {Boolean} [options.useThousandSeparators=false]  // flag to determine if grouping is desired
- * @param {Object} [options.locale=moment.locale()]        // Locale of the user for determinining how numbers are grouped
- * @param {Number} [options.defaultPrecision=0]            // The default precision to use if none is defined
- * @param {Number} [options.useTrendUnits=false]           // Add K, M, B, T to end of value, and divide by the appropriate order of magnitude
- * @return {String}
- * @public
- */

function formatNumber(number, precision) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var formatOptions = {}; // Precision is optional, so check if precision is an object, and use it as the options, otherwise load from options

  var _ref = precision && _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0___default()(precision) === 'object' ? precision : options,
      _ref$useThousandSepar = _ref.useThousandSeparators,
      useThousandSeparators = _ref$useThousandSepar === void 0 ? false : _ref$useThousandSepar,
      _ref$locale = _ref.locale,
      locale = _ref$locale === void 0 ? _splunk_moment__WEBPACK_IMPORTED_MODULE_1___default.a.locale() : _ref$locale,
      _ref$defaultPrecision = _ref.defaultPrecision,
      defaultPrecision = _ref$defaultPrecision === void 0 ? 0 : _ref$defaultPrecision,
      _ref$useTrendUnits = _ref.useTrendUnits,
      useTrendUnits = _ref$useTrendUnits === void 0 ? false : _ref$useTrendUnits; // Apply precision only when it is a positive integer


  if (Object(lodash__WEBPACK_IMPORTED_MODULE_2__["isInteger"])(precision) && precision >= 0) {
    // Validate precision is within acceptable bounds
    var p = precision > 20 ? 20 : precision;
    formatOptions.minimumFractionDigits = p;
    formatOptions.maximumFractionDigits = p;
  } else {
    formatOptions.maximumFractionDigits = defaultPrecision;
  }

  formatOptions.useGrouping = useThousandSeparators === true;
  var trendUnit = '';
  var value = number;
  var units = [{
    letter: 'T',
    power: 12
  }, {
    letter: 'B',
    power: 9
  }, {
    letter: 'M',
    power: 6
  }, {
    letter: 'K',
    power: 3
  }];

  if (useTrendUnits) {
    var found = units.find(function (unit) {
      return Math.abs(value) > Math.pow(10, unit.power);
    });

    if (found) {
      value /= Math.pow(10, found.power);
      trendUnit = found.letter;
      formatOptions.maximumFractionDigits = 2;
      formatOptions.minimumFractionDigits = 0;
    }
  }

  var formatter = getThousandSeparatorDecimalPrecisionFormatter(locale, formatOptions);
  return "".concat(formatter.format(value)).concat(trendUnit ? Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_3__["_"])(trendUnit) : '');
}

/***/ }),

/***/ 6:
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),

/***/ 7:
/***/ (function(module, exports) {

module.exports = require("@splunk/ui-utils/i18n");

/***/ })

/******/ });
//# sourceMappingURL=numberUtils.js.map