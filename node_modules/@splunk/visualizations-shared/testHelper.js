/*!
 * Copyright © 2018 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 61);
/******/ })
/************************************************************************/
/******/ ({

/***/ 61:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultAreaProps", function() { return defaultAreaProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultColumnProps", function() { return defaultColumnProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultLineProps", function() { return defaultLineProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultBarProps", function() { return defaultBarProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultPunchcardProps", function() { return defaultPunchcardProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultBubbleProps", function() { return defaultBubbleProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultScatterProps", function() { return defaultScatterProps; });
var defaultAreaProps = {
  legendPlacement: 'right',
  legendLabelOverflowMode: 'ellipsisMiddle',
  legendMode: 'standard',
  masterLegend: null,
  resultTruncationLimit: 50000,
  xAxisVisibility: 'hide',
  yAxisVisibility: 'hide',
  yAxisExtendsAxisRange: true,
  xAxisMajorLabelVisibility: 'auto',
  yAxisMajorLabelVisibility: 'auto',
  xAxisMajorTickSize: 6,
  yAxisMajorTickSize: 6,
  yAxisMinorTickSize: 6,
  xAxisMajorTickVisibility: 'hide',
  yAxisMajorTickVisibility: 'hide',
  yAxisMajorUnit: 'auto',
  yAxisMinorTickVisibility: 'auto',
  yAxisAbbreviation: 'none',
  yAxisIncludeZero: false,
  xAxisMax: 'auto',
  yAxisMax: 'auto',
  yAxisMin: 'auto',
  yAxisScale: 'linear',
  xAxisTitleVisibility: 'visible',
  yAxisTitleVisibility: 'visible',
  showMajorYGridLines: true,
  showMinorYGridLines: false,
  y2AxisMajorLabelVisibility: 'auto',
  y2AxisMajorTickSize: 6,
  y2AxisMinorTickSize: 6,
  y2AxisMajorTickVisibility: 'hide',
  y2AxisMajorUnit: 'auto',
  y2AxisMinorTickVisibility: 'auto',
  y2AxisAbbreviation: 'none',
  roundY2AxisLabelsToInteger: false,
  y2AxisIncludeZero: false,
  y2AxisMax: 'auto',
  y2AxisMin: 'auto',
  y2AxisScale: 'linear',
  y2AxisTitleVisibility: 'visible',
  showMajorY2GridLines: true,
  showMinorY2GridLines: false,
  y2AxisVisibility: 'hide',
  enableY2Axis: false,
  fieldListMode: 'hide_show',
  xAxisMajorLabelRotation: 0,
  showMajorXGridLines: true,
  splitSeries: false,
  allowIndependentYRanges: false,
  showDataLabels: 'none',
  stackMode: 'default',
  areaFillOpacity: 0.75,
  nullValueMode: 'gaps',
  showLines: true,
  xAxisTitleAlignment: 'low',
  yAxisTitleAlignment: 'low',
  y2AxisTitleAlignment: 'low',
  areaLineCap: 'round',
  areaLineWidth: 1.5,
  lineWidth: 2,
  xAxisMaxLabelParts: 3
};
var defaultColumnProps = {
  legendPlacement: 'right',
  legendLabelOverflowMode: 'ellipsisMiddle',
  masterLegend: null,
  resultTruncationLimit: 50000,
  xAxisVisibility: 'hide',
  yAxisVisibility: 'hide',
  yAxisExtendsAxisRange: true,
  xAxisMajorLabelVisibility: 'auto',
  yAxisMajorLabelVisibility: 'auto',
  xAxisMajorTickSize: 6,
  yAxisMajorTickSize: 6,
  yAxisMinorTickSize: 6,
  xAxisMajorTickVisibility: 'auto',
  yAxisMajorTickVisibility: 'auto',
  yAxisMajorUnit: 'auto',
  yAxisMinorTickVisibility: 'auto',
  yAxisAbbreviation: 'none',
  yAxisIncludeZero: false,
  xAxisMax: 'auto',
  yAxisMax: 'auto',
  yAxisMin: 'auto',
  yAxisScale: 'linear',
  xAxisTitleVisibility: 'visible',
  yAxisTitleVisibility: 'visible',
  showMajorYGridLines: true,
  showMinorYGridLines: false,
  y2AxisMajorLabelVisibility: 'auto',
  y2AxisMajorTickSize: 6,
  y2AxisMinorTickSize: 6,
  y2AxisMajorTickVisibility: 'auto',
  y2AxisMajorUnit: 'auto',
  y2AxisMinorTickVisibility: 'auto',
  y2AxisAbbreviation: 'none',
  roundY2AxisLabelsToInteger: false,
  y2AxisIncludeZero: false,
  y2AxisMax: 'auto',
  y2AxisMin: 'auto',
  y2AxisScale: 'linear',
  y2AxisTitleVisibility: 'visible',
  showMajorY2GridLines: true,
  showMinorY2GridLines: false,
  y2AxisVisibility: 'hide',
  enableY2Axis: false,
  fieldListMode: 'hide_show',
  xAxisMajorLabelRotation: 0,
  showMajorXGridLines: false,
  splitSeries: false,
  allowIndependentYRanges: false,
  showDataLabels: 'none',
  stackMode: 'default',
  columnGrouping: 'default',
  columnFillOpacity: 1,
  lineWidth: 2,
  xAxisMaxLabelParts: 3,
  showTooltip: true
};
var defaultLineProps = {
  legendPlacement: 'right',
  legendLabelOverflowMode: 'ellipsisMiddle',
  legendMode: 'standard',
  masterLegend: null,
  resultTruncationLimit: 50000,
  xAxisVisibility: 'hide',
  yAxisVisibility: 'hide',
  yAxisExtendsAxisRange: true,
  xAxisMajorLabelVisibility: 'auto',
  yAxisMajorLabelVisibility: 'auto',
  xAxisMajorTickSize: 6,
  yAxisMajorTickSize: 6,
  yAxisMinorTickSize: 6,
  xAxisMajorTickVisibility: 'hide',
  yAxisMajorTickVisibility: 'hide',
  yAxisMajorUnit: 'auto',
  yAxisMinorTickVisibility: 'auto',
  yAxisAbbreviation: 'none',
  yAxisIncludeZero: false,
  xAxisMax: 'auto',
  yAxisMax: 'auto',
  yAxisMin: 'auto',
  yAxisScale: 'linear',
  xAxisTitleVisibility: 'visible',
  yAxisTitleVisibility: 'visible',
  showMajorYGridLines: true,
  showMinorYGridLines: false,
  y2AxisMajorLabelVisibility: 'auto',
  y2AxisMajorTickSize: 6,
  y2AxisMinorTickSize: 6,
  y2AxisMajorTickVisibility: 'hide',
  y2AxisMajorUnit: 'auto',
  y2AxisMinorTickVisibility: 'auto',
  y2AxisAbbreviation: 'none',
  roundYAxisLabelsToInteger: false,
  roundY2AxisLabelsToInteger: false,
  y2AxisIncludeZero: false,
  y2AxisMax: 'auto',
  y2AxisMin: 'auto',
  y2AxisScale: 'linear',
  y2AxisTitleVisibility: 'visible',
  showMajorY2GridLines: true,
  showMinorY2GridLines: false,
  y2AxisVisibility: 'hide',
  enableY2Axis: false,
  fieldListMode: 'hide_show',
  xAxisMajorLabelRotation: 0,
  showMajorXGridLines: true,
  splitSeries: false,
  allowIndependentYRanges: false,
  showDataLabels: 'none',
  nullValueMode: 'gaps',
  lineDashStyle: 'solid',
  lineWidth: 2,
  showMarkers: true,
  showMarkerHalo: false,
  lineMarkerStyle: 'hollow',
  xAxisTitleAlignment: 'low',
  yAxisTitleAlignment: 'low',
  y2AxisTitleAlignment: 'low',
  xAxisMaxLabelParts: 3
};
var defaultBarProps = {
  legendPlacement: 'right',
  legendLabelOverflowMode: 'ellipsisMiddle',
  masterLegend: null,
  resultTruncationLimit: 50000,
  xAxisVisibility: 'hide',
  yAxisVisibility: 'hide',
  yAxisExtendsAxisRange: true,
  xAxisMajorLabelVisibility: 'auto',
  yAxisMajorLabelVisibility: 'auto',
  xAxisMajorTickSize: 6,
  yAxisMajorTickSize: 6,
  yAxisMinorTickSize: 6,
  xAxisMajorTickVisibility: 'auto',
  yAxisMajorTickVisibility: 'auto',
  yAxisMajorUnit: 'auto',
  yAxisMinorTickVisibility: 'auto',
  yAxisAbbreviation: 'none',
  yAxisIncludeZero: false,
  xAxisMax: 'auto',
  yAxisMax: 'auto',
  yAxisMin: 'auto',
  yAxisScale: 'linear',
  xAxisTitleVisibility: 'visible',
  yAxisTitleVisibility: 'visible',
  showMajorYGridLines: true,
  showMinorYGridLines: false,
  y2AxisMajorLabelVisibility: 'auto',
  y2AxisMajorTickSize: 6,
  y2AxisMinorTickSize: 6,
  y2AxisMajorTickVisibility: 'auto',
  y2AxisMajorUnit: 'auto',
  y2AxisMinorTickVisibility: 'auto',
  y2AxisAbbreviation: 'none',
  roundY2AxisLabelsToInteger: false,
  y2AxisIncludeZero: false,
  y2AxisMax: 'auto',
  y2AxisMin: 'auto',
  y2AxisScale: 'linear',
  y2AxisTitleVisibility: 'visible',
  showMajorY2GridLines: true,
  showMinorY2GridLines: false,
  y2AxisVisibility: 'hide',
  enableY2Axis: false,
  fieldListMode: 'hide_show',
  splitSeries: false,
  allowIndependentYRanges: false,
  showDataLabels: 'none',
  stackMode: 'default',
  lineWidth: 2,
  xAxisMaxLabelParts: 3
};
var defaultPunchcardProps = {
  theme: undefined,
  backgroundColor: 'transparent',
  showBubbleLabels: 'all',
  bubbleRowScale: 'global',
  bubbleScale: 'area',
  category: null,
  colorMode: 'categorical',
  seriesColors: ['#7B56DB', '#0089CF', '#00CDAF', '#DD9900', '#FF677B', '#CB2196', '#813193', '#0051B5', '#008C80', '#99B100', '#FFA476', '#FF6ACE', '#AE8CFF', '#00689D', '#00490A', '#465D00', '#9D6300', '#F6540B', '#FF969E', '#E47BFE'],
  bubbleColor: '#7B56DB',
  minBubbleColorIntensity: 0.25,
  showMaxValuePulsation: true,
  height: 500,
  width: '100%',
  isBubbleSizeDynamic: true,
  minBubbleSize: 0.25,
  maxBubbleSize: 1,
  maxBubbleRadius: 15,
  minBubbleRadius: 1,
  showLegend: true,
  useDefaultSort: false
};
var defaultBubbleProps = {
  legendPlacement: 'right',
  legendLabelOverflowMode: 'ellipsisMiddle',
  masterLegend: null,
  resultTruncationLimit: 50000,
  xAxisVisibility: 'hide',
  yAxisVisibility: 'hide',
  yAxisExtendsAxisRange: true,
  xAxisMajorLabelVisibility: 'auto',
  yAxisMajorLabelVisibility: 'auto',
  xAxisMajorTickSize: 6,
  yAxisMajorTickSize: 6,
  yAxisMinorTickSize: 6,
  xAxisMajorTickVisibility: 'auto',
  yAxisMajorTickVisibility: 'auto',
  yAxisMajorUnit: 'auto',
  yAxisMinorTickVisibility: 'auto',
  yAxisAbbreviation: 'none',
  yAxisIncludeZero: false,
  xAxisMax: 'auto',
  yAxisMax: 'auto',
  yAxisMin: 'auto',
  yAxisScale: 'linear',
  xAxisTitleVisibility: 'visible',
  yAxisTitleVisibility: 'visible',
  showMajorYGridLines: true,
  showMinorYGridLines: false,
  xAxisExtendsAxisRange: true,
  xAxisMajorLabelRotation: 0,
  xAxisMajorUnit: 'auto',
  xAxisAbbreviation: 'none',
  roundXAxisLabelsToInteger: false,
  xAxisMinorTickSize: 6,
  xAxisMinorTickVisibility: 'auto',
  xAxisIncludeZero: false,
  xAxisMin: 'auto',
  xAxisScale: 'linear',
  bubbleMaxSize: 50,
  bubbleMinSize: 10,
  bubbleSizeBy: 'area',
  showMinorXGridLines: false,
  xAxisMaxLabelParts: 3
};
var defaultScatterProps = {
  legendPlacement: 'right',
  legendLabelOverflowMode: 'ellipsisMiddle',
  masterLegend: null,
  resultTruncationLimit: 50000,
  xAxisVisibility: 'hide',
  yAxisVisibility: 'hide',
  yAxisExtendsAxisRange: true,
  xAxisMajorLabelVisibility: 'auto',
  yAxisMajorLabelVisibility: 'auto',
  xAxisMajorTickSize: 6,
  yAxisMajorTickSize: 6,
  yAxisMinorTickSize: 6,
  xAxisMajorTickVisibility: 'auto',
  yAxisMajorTickVisibility: 'auto',
  yAxisMajorUnit: 'auto',
  yAxisMinorTickVisibility: 'auto',
  yAxisAbbreviation: 'none',
  yAxisIncludeZero: false,
  xAxisMax: 'auto',
  yAxisMax: 'auto',
  yAxisMin: 'auto',
  yAxisScale: 'linear',
  xAxisTitleVisibility: 'visible',
  yAxisTitleVisibility: 'visible',
  showMajorYGridLines: true,
  showMinorYGridLines: false,
  xAxisExtendsAxisRange: true,
  xAxisMajorLabelRotation: 0,
  xAxisMajorUnit: 'auto',
  xAxisAbbreviation: 'none',
  roundXAxisLabelsToInteger: false,
  xAxisMinorTickSize: 6,
  xAxisMinorTickVisibility: 'auto',
  xAxisIncludeZero: false,
  xAxisMin: 'auto',
  xAxisScale: 'linear',
  showMinorXGridLines: false,
  markerSize: 4,
  xAxisMaxLabelParts: 3
};

/***/ })

/******/ });
//# sourceMappingURL=testHelper.js.map