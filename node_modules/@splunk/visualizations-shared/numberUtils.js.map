{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@splunk/moment\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///./src/numberUtils.js","webpack:///external \"lodash\"","webpack:///external \"@splunk/ui-utils/i18n\""],"names":["DECIMAL_OR_SCIENTIFIC_REGEX","COMMA_SEPARATED_NUMBER_REGEX","isDecimalOrExpo","isCommaSeparatedNumber","isFinite","isString","isNumerialStr","parseFloat","value","getThousandSeparatorDecimalPrecisionFormatter","memoize","locale","options","Intl","JSON","formatOptions","precision","useThousandSeparators","moment","defaultPrecision","useTrendUnits","isInteger","p","trendUnit","units","letter","power","found","Math","unit","formatter","_"],"mappings":"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","file":"numberUtils.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 57);\n","module.exports = require(\"@splunk/moment\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","import moment from '@splunk/moment';\nimport { isFinite, isString, isInteger, memoize } from 'lodash';\nimport { _ } from '@splunk/ui-utils/i18n';\n\n// Todo: need break out this utils after breaking out all visualizations\n/**\n * @file\n * A set of number formatting function used in Table\n */\nconst DECIMAL_OR_SCIENTIFIC_REGEX = /(^[-+]?[0-9]*[.]?[0-9]*$)|(^[-+]?[0-9][.]?[0-9]*e[-+]?[0-9][0-9]*$)/i;\nconst COMMA_SEPARATED_NUMBER_REGEX = /(^[-+]?([0]|([1-9][0-9]{0,2})|(([1-9][0-9]{0,2}[,])([0-9]{3}[,])*[0-9]{3}))(([.][0-9]+)?)$)/;\nfunction isDecimalOrExpo(str) {\n    return DECIMAL_OR_SCIENTIFIC_REGEX.test(str);\n}\nfunction isCommaSeparatedNumber(str) {\n    return COMMA_SEPARATED_NUMBER_REGEX.test(str);\n}\n\n/**\n * Check if a string can be considered as numeric, this includes decimal, scientific number and number with comma separator\n *\n * Examples:\n * ```js\n * const { isNumerialStr } from '@splunk/react-visualizations/utils/numberUtils';\n * assert.ok(isNumerialStr('11.123'));\n * ```\n * @param {String} str input value\n * @return {Boolean}\n * @public\n */\nexport function isNumerialStr(str) {\n    return isDecimalOrExpo(str) || isCommaSeparatedNumber(str);\n}\n\n/**\n * Check if a value can be considered as numeric\n *\n * Examples:\n * ```js\n * const { isNumerial } from '@splunk/react-visualizations/utils/numberUtils';\n * assert.equal(isNumerial('11.123') == 11.123);\n * ```\n * @param {any} value input value\n * @return {Boolean}\n * @public\n */\nexport function isNumerial(value) {\n    return isFinite(value) || (isString(value) && isNumerialStr(value));\n}\n\n/**\n * Parse input value into number, return NaN for not numercial value\n * @param {*} value input value\n * @return {Number}\n * @public\n */\nexport function parseNumber(value) {\n    if (isFinite(value) || (isString(value) && isDecimalOrExpo(value))) {\n        // only parses the value consider as numeric.\n        return parseFloat(value);\n    }\n    if (isString(value) && isCommaSeparatedNumber(value)) {\n        return parseFloat(value.replace(/,/g, ''));\n    }\n    return NaN;\n}\n\n/**\n *\n */\nconst getThousandSeparatorDecimalPrecisionFormatter = memoize(\n    (locale = 'en', options = {}) => new Intl.NumberFormat(locale, options),\n    (locale, options) => `${locale}${JSON.stringify(options)}`\n);\n\n/**\n- * Format number into string with precision and/or grouping\n- *\n- * Examples:\n- * ```js\n- * const { formatNumber } from '@splunk/react-visualizations/utils/numberUtils';\n- * assert.equal(formatNumber('1100’, 2, { useThousandSeparators: true }), '1,100.00’)\n- * ```\n- * @param {Number} number                                  // value to format\n- * @param {Number} [precision]                             // number of digits after the decimal point\n- * @param {Object} [options]\n- * @param {Boolean} [options.useThousandSeparators=false]  // flag to determine if grouping is desired\n- * @param {Object} [options.locale=moment.locale()]        // Locale of the user for determinining how numbers are grouped\n- * @param {Number} [options.defaultPrecision=0]            // The default precision to use if none is defined\n- * @param {Number} [options.useTrendUnits=false]           // Add K, M, B, T to end of value, and divide by the appropriate order of magnitude\n- * @return {String}\n- * @public\n- */\nexport function formatNumber(number, precision, options = {}) {\n    const formatOptions = {};\n\n    // Precision is optional, so check if precision is an object, and use it as the options, otherwise load from options\n    const {\n        useThousandSeparators = false,\n        locale = moment.locale(),\n        defaultPrecision = 0,\n        useTrendUnits = false,\n    } = precision && typeof precision === 'object' ? precision : options;\n\n    // Apply precision only when it is a positive integer\n    if (isInteger(precision) && precision >= 0) {\n        // Validate precision is within acceptable bounds\n        const p = precision > 20 ? 20 : precision;\n\n        formatOptions.minimumFractionDigits = p;\n        formatOptions.maximumFractionDigits = p;\n    } else {\n        formatOptions.maximumFractionDigits = defaultPrecision;\n    }\n\n    formatOptions.useGrouping = useThousandSeparators === true;\n\n    let trendUnit = '';\n    let value = number;\n    const units = [\n        { letter: 'T', power: 12 },\n        { letter: 'B', power: 9 },\n        { letter: 'M', power: 6 },\n        { letter: 'K', power: 3 },\n    ];\n\n    if (useTrendUnits) {\n        const found = units.find(unit => Math.abs(value) > 10 ** unit.power);\n\n        if (found) {\n            value /= 10 ** found.power;\n            trendUnit = found.letter;\n            formatOptions.maximumFractionDigits = 2;\n            formatOptions.minimumFractionDigits = 0;\n        }\n    }\n\n    const formatter = getThousandSeparatorDecimalPrecisionFormatter(locale, formatOptions);\n\n    return `${formatter.format(value)}${trendUnit ? _(trendUnit) : ''}`;\n}\n","module.exports = require(\"lodash\");","module.exports = require(\"@splunk/ui-utils/i18n\");"],"sourceRoot":""}