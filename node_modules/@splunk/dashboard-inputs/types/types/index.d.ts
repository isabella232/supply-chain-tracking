/// <reference types="react" />
export interface InputProps {
    id: string;
    context?: Record<string, unknown>;
    options?: Record<string, unknown>;
    encoding?: Record<string, unknown>;
    dataSources?: Record<string, unknown>;
    value?: string | number;
    onValueChange: (...args: unknown[]) => void;
    isDisabled?: boolean;
    disabledMessage?: string;
    isError?: boolean;
    errorMessage?: string;
    isSelected?: boolean;
    loading?: boolean;
    onUpdateWidth?: React.Dispatch<React.SetStateAction<number>>;
    skipEncoding?: boolean;
}
export interface HOCProps extends InputProps {
    mode?: 'view' | 'edit';
    title?: string;
    onRemove?: (id: string) => void;
    width?: number;
}
export interface InputStaticProps {
    config?: Record<string, unknown>;
    valueToTokens?: (value: string, { token, prefix, suffix, }: {
        token: string;
        prefix?: string;
        suffix?: string;
    }) => Record<string, unknown>;
    tokensToValue?: (props: {
        tokens: Record<string, Record<string, unknown>>;
        tokenName?: string;
        tokenNamespace?: string;
    }) => number | null;
    validate?: (props: {
        options?: Record<string, unknown>;
    }) => {
        errorMessages: string[];
    };
}
export interface DynamicItemEditorProps {
    name: string;
    value: StaticItem[] | string;
    label: string;
    labelPosition?: 'top' | 'left';
    labelWidth?: number;
    onChange: (event: React.SyntheticEvent | null, updatedConfig: DropdownConfig) => void;
    context: DropdownContext;
    dataSourceBindings: {
        primary?: string;
    };
    help?: string;
    [key: string]: unknown;
}
export interface StaticItem {
    label: string;
    value: string;
}
export interface DropdownContext {
    label?: string | null;
    value?: string | null;
    statics?: string[][] | null;
    [key: string]: unknown;
}
export interface DropdownConfig {
    context?: DropdownContext;
    options?: Record<string, unknown>;
}
//# sourceMappingURL=index.d.ts.map