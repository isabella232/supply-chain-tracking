import React from 'react';
import { InputProps, HOCProps, InputStaticProps } from '../types';
interface InputContainerProps {
    showSelection: boolean;
    mode: 'edit' | 'view';
    width: number;
}
export declare const InputContainer: import("styled-components").StyledComponent<"div", any, {
    'data-test': string;
} & InputContainerProps, "data-test">;
declare type HOC = (props: HOCProps) => React.ReactElement<HOCProps>;
/**
 * HOC that wraps the Input component in a container displaying input title, error icon if error is present
 * and remove button if selected in edit mode. Also sets container style (backgroundColor, border) based on mode and isSelected
 * @param {ReactElement} InputComponent Input Component
 * @param {String} mode Dashboard mode - edit or view
 * @param {String} title Input title
 * @param {String} id Input id
 * @param {Object} options Input options
 * @param {Boolean} isSelected Input is selected in edit mode or not
 * @param {Boolean} isError Input has an error
 * @param {String} errorMessage Input error message
 * @param {Number} width Input Container width - TRP would override this
 */
export declare const withInputWrapper: (InputComponent: React.ComponentType<InputProps> & InputStaticProps) => HOC;
export {};
//# sourceMappingURL=enhancer.d.ts.map