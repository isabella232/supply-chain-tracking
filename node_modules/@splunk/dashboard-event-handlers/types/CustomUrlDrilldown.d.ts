interface CustomUrlDrilldownOptions {
    url?: string;
    newTab?: boolean;
    events?: string[];
}
interface LinkToEvent {
    type: string;
    payload: {
        url?: string;
        newTab?: boolean;
    };
}
declare class CustomUrlDrilldown {
    private options;
    private events;
    /**
     * A configuration object is passed to the handler
     * @constructor
     * @param {Object} options
     */
    constructor(options?: CustomUrlDrilldownOptions);
    /**
     * Determines if the custom event handler is designed to convert the event
     * @method canHandle
     * @param {VisualizationEvent} event
     * @returns {Boolean} true if the event handler will convert the event
     */
    canHandle(event: {
        type: string;
    }): boolean;
    /**
     * Convert the event payload into a list of actionable tasks
     * @method handle
     * @param {VisualizationEvent} event
     * @returns {Array} List of action(s)
     */
    handle(): Promise<LinkToEvent[]>;
}
export default CustomUrlDrilldown;
//# sourceMappingURL=CustomUrlDrilldown.d.ts.map