{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/utils/events.ts","webpack:///./src/CustomUrlDrilldown.ts"],"names":[],"mappings":";;;;;;;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;AClFA,qDAAqD;AACrD,mGAAmG;AAC5F,IAAM,cAAc,GAAG,UAAC,KAAuB;IAClD,iBAAU,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;AAA3B,CAA2B,CAAC;AADnB,sBAAc,kBACK;;;;;;;;;;ACHhC,sCAAgD;AAgBhD;IAKI;;;;OAIG;IACH,4BAAY,OAAuC;QAAvC,sCAAuC;QAC/C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IAC3E,CAAC;IAED;;;;;OAKG;IACH,sCAAS,GAAT,UAAU,KAAuB;QAC7B,OAAO,CACH,KAAK;YACL,uBAAc,CAAC,KAAK,CAAC;YACrB,IAAI,CAAC,OAAO;YACZ,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG;YAClB,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CACpE,CAAC;IACN,CAAC;IAED;;;;;OAKG;IACH,mCAAM,GAAN;QACI,2FAA2F;QAC3F,OAAO,OAAO,CAAC,OAAO,CAAC;YACnB;gBACI,IAAI,EAAE,QAAQ;gBACd,OAAO,EAAE;oBACL,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG;oBACrB,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM;iBAC9B;aACJ;SACJ,CAAC,CAAC;IACP,CAAC;IACL,yBAAC;AAAD,CAAC;AAED,kBAAe,kBAAkB,CAAC","file":"CustomUrlDrilldown.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","// filter out range.select and non-click based events\n// every viz has a different prefix for their click events, some viz may have multiple click events\nexport const isEventAllowed = (event: { type: string }): boolean =>\n    /\\.click$/.test(event.type);\n","import { isEventAllowed } from './utils/events';\n\ninterface CustomUrlDrilldownOptions {\n    url?: string;\n    newTab?: boolean;\n    events?: string[];\n}\n\ninterface LinkToEvent {\n    type: string;\n    payload: {\n        url?: string;\n        newTab?: boolean;\n    };\n}\n\nclass CustomUrlDrilldown {\n    private options: CustomUrlDrilldownOptions;\n\n    private events: string[];\n\n    /**\n     * A configuration object is passed to the handler\n     * @constructor\n     * @param {Object} options\n     */\n    constructor(options: CustomUrlDrilldownOptions = {}) {\n        this.options = options;\n        this.events = Array.isArray(options.events) ? options.events : ['any'];\n    }\n\n    /**\n     * Determines if the custom event handler is designed to convert the event\n     * @method canHandle\n     * @param {VisualizationEvent} event\n     * @returns {Boolean} true if the event handler will convert the event\n     */\n    canHandle(event: { type: string }): boolean {\n        return (\n            event &&\n            isEventAllowed(event) &&\n            this.options &&\n            !!this.options.url &&\n            (this.events.includes('any') || this.events.includes(event.type))\n        );\n    }\n\n    /**\n     * Convert the event payload into a list of actionable tasks\n     * @method handle\n     * @param {VisualizationEvent} event\n     * @returns {Array} List of action(s)\n     */\n    handle(): Promise<LinkToEvent[]> {\n        // TODO: verify url token updates happen external to the handler eventSaga:findEventHandler\n        return Promise.resolve([\n            {\n                type: 'linkTo',\n                payload: {\n                    url: this.options.url,\n                    newTab: this.options.newTab,\n                },\n            },\n        ]);\n    }\n}\n\nexport default CustomUrlDrilldown;\n"],"sourceRoot":""}