/*!
 * Copyright © 2018 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 193);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("prop-types");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("@splunk/ui-utils/i18n");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("styled-components");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VizBehavior = void 0;
var VizBehavior;

(function (VizBehavior) {
  /**
   * Dynamic Options Behavior.
   * This allows visualization options to be powered by data
   *
   * **Example**
   *
   * sparklineValues: ">primary|seriesByIndex(0)"
   * would configure sparklineValues with an array of data points
   * coming from the first series in the primary datasource
   *
   */
  VizBehavior["DYNAMIC_OPTIONS"] = "dynamic-options";
  VizBehavior["EVENTS"] = "events";
  /**
   * Placeholder behavior: visualization will display a placeholder rather than fail if any of the `requiredProps` is
   * missing.
   * @type {string}
   */

  VizBehavior["PLACEHOLDER"] = "placeholder";
  VizBehavior["PAGE_AND_SORT"] = "page-and-sort";
})(VizBehavior = exports.VizBehavior || (exports.VizBehavior = {}));

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/defineProperty");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = __webpack_require__(22);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deepMergeWithArrayOverrides = exports.extendStaticWrapperProps = void 0;

var lodash_1 = __webpack_require__(2);
/**
 * @method extendStaticWrapperProps
 * @param {Object} props
 * @param {DashboardVizType} props.Wrapper
 * @param {DashboardVizType} props.Visualization
 */


var extendStaticWrapperProps = function extendStaticWrapperProps(_ref) {
  var Wrapper = _ref.Wrapper,
      Visualization = _ref.Visualization;
  var extendProperties = ['propTypes', 'defaultProps', 'config'];
  extendProperties.forEach(function (prop) {
    if (Visualization[prop]) {
      Wrapper[prop] = Visualization[prop];
    }
  });
};

exports.extendStaticWrapperProps = extendStaticWrapperProps;
/**
 * helper to deeply merge objects while preserving arrays in earlier source objects
 * deeply nested primitive keys are merged similarly to lodash's defaultsDeep, while keys with arrays will be preserved if already present in the resultant merged object
 * this prevents default arrays from appending values to user-defined arrays (this occurs if the default array is longer than the user-defined one)
 *
 * @method deepMergeWithArrayOverrides
 * @param {Object} initial - target object to merge values into
 * @param {Object[]} sources - other default options to be merged into the resultant object if no explicit value is provided, with earlier args taking precedence over later ones
 *
 * @returns {Object}
 */

var deepMergeWithArrayOverrides = function deepMergeWithArrayOverrides(initial) {
  var clone = lodash_1.cloneDeep(initial);

  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    sources[_key - 1] = arguments[_key];
  }

  sources.forEach(function (sourceToApply) {
    Object.keys(sourceToApply).forEach(function (sourceKey) {
      if (!clone.hasOwnProperty(sourceKey)) {
        clone[sourceKey] = lodash_1.cloneDeep(sourceToApply[sourceKey]);
      } // object merging excluding arrays


      if (clone[sourceKey] && _typeof(clone[sourceKey]) === 'object' && !Array.isArray(clone[sourceKey]) && _typeof(sourceToApply[sourceKey]) === 'object') {
        clone[sourceKey] = exports.deepMergeWithArrayOverrides(clone[sourceKey], sourceToApply[sourceKey]);
      }
    });
  });
  return clone;
};

exports.deepMergeWithArrayOverrides = deepMergeWithArrayOverrides;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _defineProperty = __webpack_require__(6);

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generatePrecisionValues = exports.getInitialPreset = exports.isDynamicOption = exports.enhanceOptionsSchemaWithDynamicOptions = exports.enhanceConfig = void 0;

var lodash_1 = __webpack_require__(2);

var schemaUtils_1 = __webpack_require__(14);

var VizBehavior_1 = __webpack_require__(5);

var dynamicOptionsDSLType = {
  type: 'string',
  pattern: schemaUtils_1.DYNAMIC_OPTIONS_DSL_PATTERN
};
/**
 * Helper function to extend an options schema with dynamic options DSL
 * @param optionsSchema a visualization's options schema
 * @returns an updated options schema that additionally allows strings starting with > for each option
 */

function enhanceOptionsSchemaWithDynamicOptions(optionsSchema) {
  var enhancedOptionsSchema = {};
  Object.keys(optionsSchema).forEach(function (key) {
    var _a = optionsSchema[key],
        title = _a.title,
        description = _a.description,
        readOnly = _a.readOnly,
        writeOnly = _a.writeOnly,
        examples = _a.examples,
        defaultValue = _a.default,
        type = _a.type,
        properties = _a.properties,
        patternProperties = _a.patternProperties,
        remainingSchemaEntry = __rest(_a, ["title", "description", "readOnly", "writeOnly", "examples", "default", "type", "properties", "patternProperties"]);

    var annotations = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, title !== undefined && {
      title: title
    }), description !== undefined && {
      description: description
    }), readOnly !== undefined && {
      readOnly: readOnly
    }), writeOnly !== undefined && {
      writeOnly: writeOnly
    }), examples !== undefined && {
      examples: examples
    }), defaultValue !== undefined && {
      default: defaultValue
    });

    if (type === 'object') {
      enhancedOptionsSchema[key] = Object.assign(Object.assign(Object.assign(Object.assign({}, remainingSchemaEntry), annotations), {
        type: type
      }), properties && {
        properties: enhanceOptionsSchemaWithDynamicOptions(properties)
      });

      if (patternProperties) {
        var enhancedPatternProperties = {};
        Object.keys(patternProperties).forEach(function (key) {
          enhancedPatternProperties = Object.assign(Object.assign({}, enhancedPatternProperties), enhanceOptionsSchemaWithDynamicOptions(_defineProperty({}, key, patternProperties[key])));
        });
        enhancedOptionsSchema[key].patternProperties = enhancedPatternProperties;
      }
    } else {
      enhancedOptionsSchema[key] = Object.assign(Object.assign({}, annotations), {
        anyOf: [Object.assign(Object.assign({}, type !== undefined && {
          type: type
        }), remainingSchemaEntry), dynamicOptionsDSLType]
      });
    }
  });
  return enhancedOptionsSchema;
}

exports.enhanceOptionsSchemaWithDynamicOptions = enhanceOptionsSchemaWithDynamicOptions;
/**
 * Helper function to enhance a Visualization Config as needed based on behaviors specified in supports block
 * @param vizConfig a Visualization Config
 * @returns an enhanced Visualization Config containing updated config entries based on behaviors it supports
 */

function enhanceConfig(vizConfig) {
  var enhancedConfig = vizConfig;

  if (vizConfig.supports.indexOf(VizBehavior_1.VizBehavior.DYNAMIC_OPTIONS) !== -1) {
    enhancedConfig.optionsSchema = enhanceOptionsSchemaWithDynamicOptions(vizConfig.optionsSchema);
  }

  return enhancedConfig;
}

exports.enhanceConfig = enhanceConfig;

function isDynamicOption(option) {
  return option && typeof option === 'string' && option.trim().startsWith('>') || false;
}

exports.isDynamicOption = isDynamicOption; // private helpers to improve readability of getInitialPreset
// this shouldn't be tested since this util isn't something that we expect to use outside of getInitialPreset

/**
 * this checks to make sure that all values within vizContext are compatible with the given preset's context to determine the initialPreset
 * if a preset has explicitly specified a key as being undefined, the vizContext must also has that key as undefined, or else this CANNOT be the initialPreset
 * the inverse is true; if a preset has key is NOT undefined, it must also be NOT undefined in the corresponding vizContext
 * the internal config contents are irrelevant (as the user could customize them in source), just as long as the presence of `undefined`s match up
 *
 * Since the presetConfigs have explicit undefined keys to override the existing config, we need to explicitly check the undefined values
 */

function hasCompatibleContexts(vizContext, presetContext) {
  var presetContextKeys = Object.keys(presetContext);
  return presetContextKeys.every(function (contextKey) {
    return presetContext[contextKey] === undefined && vizContext[contextKey] === undefined || presetContext[contextKey] !== undefined && vizContext[contextKey] !== undefined;
  });
}
/**
 * Checks to make sure that dynamic (non-dynamic) options in a given preset are also dynamic (non-dynamic) in the vizOptions
 */


function hasCompatibleOptions(vizOptions, presetOptions) {
  var presetOptionKeys = Object.keys(presetOptions);
  return presetOptionKeys.every(function (optionKey) {
    return isDynamicOption(presetOptions[optionKey]) === isDynamicOption(vizOptions[optionKey]);
  });
}
/**
 * Evaluates whether there is an initialPreset that fits the current state of vizContext + vizOptions
 * This function ignores extraneous vizOptions or vizContext keys, as they could be outside the scope of what the preset is intended to configure
 *
 * @param {Object} vizContext - the current vizContext definition
 * @param {Object} vizOptions - the current vizOptions definition
 * @param {PresetEntry[]} presets - the list of presets, one of which can be considered an initialPreset
 */


function getInitialPreset(vizContext, vizOptions, presets) {
  return presets.find(function (preset) {
    var presetContext = lodash_1.get(preset, ['value', 'context'], {});
    var presetOptions = lodash_1.get(preset, ['value', 'options'], {});
    var presetContextKeys = Object.keys(presetContext);
    var presetOptionKeys = Object.keys(presetOptions); // all presets have to explicitly specify which options to reset (i.e. need explicitly undefined keys)
    // if not, then the preset is invalid in config.ts

    if (presetContextKeys.length === 0 || presetOptionKeys.length === 0) return false;
    return hasCompatibleContexts(vizContext, presetContext) && hasCompatibleOptions(vizOptions, presetOptions);
  });
}

exports.getInitialPreset = getInitialPreset;
/**
 * generates number precision values for a Select editor
 *
 * @param {Number} numPrecisionValues - number of integer precision values to generate
 * @returns {{ label: string; value; string  }[]} array of { label, value } tuples
 */

function generatePrecisionValues(numPrecisionValues) {
  return lodash_1.range(0, numPrecisionValues + 1).map(function (i) {
    return {
      label: "".concat(i, " (0").concat(i > 0 ? '.' : '').concat('0'.repeat(i), ")"),
      value: i
    };
  });
}

exports.generatePrecisionValues = generatePrecisionValues;

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/Message");

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/classCallCheck");

/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/colorUtils");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var React = __webpack_require__(1);

var styled_components_1 = __webpack_require__(4);

var SizeAwareWrapper_1 = __webpack_require__(17);

var style_1 = __webpack_require__(13);

var colorUtils_1 = __webpack_require__(11);

var Item = styled_components_1.default.div.attrs(function (_ref) {
  var width = _ref.width;
  return {
    style: {
      width: style_1.toPx(width)
    }
  };
}).withConfig({
  displayName: "FixedSizeContainer__Item",
  componentId: "sc-1yhgpod-0"
})(["position:relative;background-color:", "};"], function (props) {
  return colorUtils_1.isColor(props.backgroundColor) && props.backgroundColor || props.theme.defaultBackgroundColor;
}); // Use `.attrs()` for highly dynamic styles. Ref: https://github.com/styled-components/styled-components/issues/134#issuecomment-312415291

var FixSizeItem = styled_components_1.default.div.attrs(function (_ref2) {
  var width = _ref2.width,
      height = _ref2.height;
  return {
    style: Object.assign(Object.assign({}, width && {
      width: style_1.toPx(width)
    }), height && {
      height: style_1.toPx(height)
    })
  };
}).withConfig({
  displayName: "FixedSizeContainer__FixSizeItem",
  componentId: "sc-1yhgpod-1"
})(["position:relative;flex-direction:column;flex:1;display:flex;background-color:", "};"], function (props) {
  return colorUtils_1.isColor(props.backgroundColor) && props.backgroundColor || props.theme.defaultBackgroundColor;
});
var ItemContent = styled_components_1.default.div.withConfig({
  displayName: "FixedSizeContainer__ItemContent",
  componentId: "sc-1yhgpod-2"
})(["position:relative;min-height:100px;width:100%;"]);
var FixSizeItemContent = styled_components_1.default.div.withConfig({
  displayName: "FixedSizeContainer__FixSizeItemContent",
  componentId: "sc-1yhgpod-3"
})(["min-height:0px;flex:1;position:relative;box-sizing:border-box;"]);

var withFixedSizeContainer = function withFixedSizeContainer(Viz) {
  var FixedSizeContainer = function FixedSizeContainer(props) {
    var width = props.width,
        height = props.height,
        backgroundColor = props.backgroundColor;

    if (!height) {
      return React.createElement(Item, {
        "data-test": "item",
        width: width,
        backgroundColor: backgroundColor
      }, React.createElement(ItemContent, null, React.createElement(Viz, Object.assign({}, props))));
    }

    return React.createElement(FixSizeItem, {
      "data-test": "fix-size-item",
      width: width,
      height: height,
      backgroundColor: backgroundColor
    }, React.createElement(FixSizeItemContent, null, React.createElement(SizeAwareWrapper_1.default, null, function (_ref3) {
      var newWidth = _ref3.width,
          newHeight = _ref3.height;
      return React.createElement(Viz, Object.assign({}, props, {
        width: newWidth,
        height: newHeight
      }));
    })));
  };

  FixedSizeContainer.displayName = 'withFixedSizeContainer';
  return FixedSizeContainer;
};

exports.default = withFixedSizeContainer;

/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/style");

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/schemaUtils");

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_FONT", function() { return DEFAULT_FONT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_FONT_FAMILY", function() { return DEFAULT_FONT_FAMILY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shouldShowTrend", function() { return shouldShowTrend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isLoadingOrNoColumns", function() { return isLoadingOrNoColumns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFormattedColor", function() { return getFormattedColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasBackground", function() { return hasBackground; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isIdenticalColor", function() { return isIdenticalColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDefaultColorWithBg", function() { return getDefaultColorWithBg; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMajorColor", function() { return getMajorColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTrendColor", function() { return getTrendColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeColors", function() { return computeColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeText", function() { return computeText; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMajorText", function() { return getMajorText; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTrendText", function() { return getTrendText; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeFontSize", function() { return computeFontSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMajorFontSize", function() { return getMajorFontSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTrendFontSize", function() { return getTrendFontSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getUnderLabelHeight", function() { return getUnderLabelHeight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getUnderLabel", function() { return getUnderLabel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMajorAndTrend", function() { return getMajorAndTrend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateVizInSmallSpace", function() { return updateVizInSmallSpace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeSingleValueContent", function() { return computeSingleValueContent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getGraphColors", function() { return getGraphColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "adjustRGB", function() { return adjustRGB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lighten", function() { return lighten; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "darken", function() { return darken; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "handleValueClickCallback", function() { return handleValueClickCallback; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _splunk_visualizations_shared_numberUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(20);
/* harmony import */ var _splunk_visualizations_shared_numberUtils__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_splunk_visualizations_shared_numberUtils__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _splunk_visualizations_shared_domUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(47);
/* harmony import */ var _splunk_visualizations_shared_domUtils__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_splunk_visualizations_shared_domUtils__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _splunk_visualizations_shared_propUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(18);
/* harmony import */ var _splunk_visualizations_shared_propUtils__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_splunk_visualizations_shared_propUtils__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _splunk_visualizations_shared_colorConstants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(40);
/* harmony import */ var _splunk_visualizations_shared_colorConstants__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_splunk_visualizations_shared_colorConstants__WEBPACK_IMPORTED_MODULE_5__);


function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}






var DEFAULT_FONT = 12;
var DEFAULT_FONT_FAMILY = '"Splunk Platform Sans", "Proxima Nova", "Helvetica Neue", Helvetica, Arial, sans-serif';
/**
 * @method shouldShowTrend
 * @param {String} trendDisplay
 * @returns {Bool}
 */

var shouldShowTrend = function shouldShowTrend(trendDisplay) {
  return trendDisplay === 'absolute' || trendDisplay === 'percent';
};
/**
 * @method isLoadingOrNoColumns
 * @param {Object} dataSources
 * @param {Boolean} loading
 * @returns {Boolean} return true if loading or without columns in dataSources
 */

var isLoadingOrNoColumns = function isLoadingOrNoColumns(dataSources, loading) {
  var data = Object(lodash__WEBPACK_IMPORTED_MODULE_1__["get"])(dataSources, 'primary.data.columns[0]', undefined);
  var noColumns = data === undefined;
  return loading || noColumns;
};
/**
 * Retrieve the valid formatted color
 * @method getFormattedColor
 * @param {String} color
 * @param {String} defaultColor
 * @returns {String} the formatted color
 */

var getFormattedColor = function getFormattedColor(color, defaultColor) {
  return Object(_splunk_visualizations_shared_propUtils__WEBPACK_IMPORTED_MODULE_4__["formatColor"])(color) || Object(_splunk_visualizations_shared_propUtils__WEBPACK_IMPORTED_MODULE_4__["formatColor"])(defaultColor);
};
/**
 * Determines if there is a background color
 * @method hasBackground
 * @param {String} backgroundColor
 * @returns true for non-transparent background color
 */

var hasBackground = function hasBackground(backgroundColor) {
  return !!backgroundColor && backgroundColor !== 'transparent';
};
/**
 * @method isIdenticalColor
 * @param {String} colorA
 * @param {String} colorB
 * @returns {Boolean}
 */

var isIdenticalColor = function isIdenticalColor(colorA, colorB) {
  return !!colorA && !!colorB && Object(_splunk_visualizations_shared_propUtils__WEBPACK_IMPORTED_MODULE_4__["formatColor"])(colorA.toLowerCase()) === Object(_splunk_visualizations_shared_propUtils__WEBPACK_IMPORTED_MODULE_4__["formatColor"])(colorB.toLowerCase());
};
/*
 * @method getDefaultColorWithBg
 * @param {Object} props
 * @param {String} props.backgroundColor
 * @param {String} props.defaultFontColor
 * @param {String} props.defaultBlockFontColor
 * @returns {String} defaultColor
 */

var getDefaultColorWithBg = function getDefaultColorWithBg(_ref) {
  var backgroundColor = _ref.backgroundColor,
      defaultFontColor = _ref.defaultFontColor,
      defaultBlockFontColor = _ref.defaultBlockFontColor;
  return isIdenticalColor(backgroundColor, defaultBlockFontColor) ? defaultFontColor : defaultBlockFontColor;
};
/*
 * @method getMajorColor
 * return formatted majorColor.
 * @param {Object} props
 * @param {String} props.majorColor
 * @param {String} props.backgroundColor
 * @param {String} props.defaultFontColor
 * @param {String} props.defaultBlockFontColor
 * @returns {String} majorColor
 */

var getMajorColor = function getMajorColor(_ref2) {
  var majorColor = _ref2.majorColor,
      backgroundColor = _ref2.backgroundColor,
      defaultFontColor = _ref2.defaultFontColor,
      defaultBlockFontColor = _ref2.defaultBlockFontColor; // If backgroundColor is set, but no majorColor,
  // the default majorColor will turn to be defaultBlockFontColor.
  // eg: major color will turn to be white in enterprise mode.
  // however, if the bgColor is the same as defaultBlockFontColor, use defaultFontColor.

  if (hasBackground(backgroundColor) && !majorColor) {
    return getDefaultColorWithBg({
      backgroundColor: backgroundColor,
      defaultFontColor: defaultFontColor,
      defaultBlockFontColor: defaultBlockFontColor
    });
  }

  return getFormattedColor(majorColor, defaultFontColor);
};
/**
 * Get the color for the trend components
 * @method getTrendColor
 * @param {Object} props
 * @param {String} props.trendColor                   The trendColor value determined from encoding
 * @param {Number} props.trendValue
 * @param {Number} props.majorValue
 * @param {String} props.customizedBgColor
 * @param {String} props.trendDisplay  absolute || percent || off
 * @param {Object} defaultColors
 * @returns {String} trendColor
 */

var getTrendColor = function getTrendColor(_ref3) {
  var trendColor = _ref3.trendColor,
      trendValue = _ref3.trendValue,
      majorValue = _ref3.majorValue,
      customizedBgColor = _ref3.customizedBgColor,
      trendDisplay = _ref3.trendDisplay,
      defaultColors = _ref3.defaultColors;

  if (trendColor) {
    return trendColor;
  }

  if (Number.isNaN(Number(trendValue))) {
    return undefined;
  }

  var defaultFontColor = defaultColors.defaultFontColor,
      defaultBlockFontColor = defaultColors.defaultBlockFontColor,
      defaultBackgroundColor = defaultColors.defaultBackgroundColor; // if user defined a backgroundColor, the default trend color will be defaultBlockFontColor

  if (hasBackground(customizedBgColor) && !isIdenticalColor(customizedBgColor, defaultBackgroundColor) && !isIdenticalColor(customizedBgColor, defaultBlockFontColor)) {
    return defaultBlockFontColor;
  } // if trendDisplay is percent, and trendValue === value
  // the trend percent = trendValue / (value - trendValue) will return Infinity


  var isInvalidTrend = trendDisplay === 'percent' && trendValue === parseFloat(majorValue);

  if (trendValue === 0 || isInvalidTrend) {
    return defaultFontColor;
  }

  return trendValue > 0 ? _splunk_visualizations_shared_colorConstants__WEBPACK_IMPORTED_MODULE_5__["DELTA_GREEN"] : _splunk_visualizations_shared_colorConstants__WEBPACK_IMPORTED_MODULE_5__["DELTA_RED"];
};
/**
 * Computes visualization properties for display component
 * @method computeColors
 * @param {Object} props    all viz props
 * @param {Object} defaultColors    defaultColors from theme
 * @returns {Object} result
 * @returns {Boolean} backgroundEnabled
 * @returns {String} backgroundColor
 * @returns {String} majorColor
 * @returns {String} trendColor
 * @returns {String} underLabelColor
 */

var computeColors = function computeColors(props, defaultColors) {
  var backgroundColor = getFormattedColor(props.backgroundColor, defaultColors.defaultBackgroundColor);
  var backgroundEnabled = hasBackground(backgroundColor);
  var majorColor = getMajorColor({
    majorColor: props.majorColor,
    backgroundColor: backgroundColor,
    defaultFontColor: defaultColors.defaultFontColor,
    defaultBlockFontColor: defaultColors.defaultBlockFontColor
  });
  var trendColor = getTrendColor({
    trendColor: props.trendColor,
    trendValue: props.trendValue,
    majorValue: props.majorValue,
    customizedBgColor: props.backgroundColor,
    trendDisplay: props.trendDisplay,
    defaultColors: defaultColors
  }); // todo: need change it to not depend on majorColor

  var underLabelColor = backgroundEnabled ? majorColor : defaultColors.defaultFontColor;
  return {
    backgroundColor: backgroundColor,
    backgroundEnabled: backgroundEnabled,
    majorColor: majorColor,
    trendColor: trendColor,
    underLabelColor: underLabelColor
  };
};
/**
 * Format and return the value (major/trend)
 * @method computeText
 * @param {Object} props
 * @param {Number} props.value                    // The major/trend value
 * @param {Number} props.numberPrecision
 * @param {Bool} props.shouldUseThousandSeparators
 * @param {Bool} props.shouldAbbreviateTrendValue
 * @returns {Number} major or trend text
 */

var computeText = function computeText(_ref4) {
  var value = _ref4.value,
      numberPrecision = _ref4.numberPrecision,
      shouldUseThousandSeparators = _ref4.shouldUseThousandSeparators,
      shouldAbbreviateTrendValue = _ref4.shouldAbbreviateTrendValue;
  var text = Object(_splunk_visualizations_shared_numberUtils__WEBPACK_IMPORTED_MODULE_2__["isNumerial"])(value) ? Object(_splunk_visualizations_shared_numberUtils__WEBPACK_IMPORTED_MODULE_2__["formatNumber"])(value, numberPrecision, {
    useThousandSeparators: shouldUseThousandSeparators,
    // todo: need update formatNumber
    useTrendUnits: shouldAbbreviateTrendValue
  }) : value; // When text is undefined, return empty string

  text = text || '';
  return text;
};
/*
 * @method getMajorText
 * @param {Object} props
 * @param {Number} props.majorValue
 * @param {Number} props.numberPrecision
 * @param {Bool} props.shouldUseThousandSeparators
 * @returns {String} majorText
 */

var getMajorText = function getMajorText(_ref5) {
  var majorValue = _ref5.majorValue,
      numberPrecision = _ref5.numberPrecision,
      shouldUseThousandSeparators = _ref5.shouldUseThousandSeparators;
  return computeText({
    value: majorValue === null ? 'N/A' : majorValue,
    // if majorValue is null, use `N/A`.
    numberPrecision: numberPrecision,
    shouldUseThousandSeparators: shouldUseThousandSeparators,
    shouldAbbreviateTrendValue: false
  });
};
/*
 * @method getTrendText
 * @param {Object} props
 * @param {Number} props.majorValue
 * @param {Number} props.trendValue
 * @param {String} props.trendDisplay
 * @param {Number} props.numberPrecision
 * @param {Bool} props.shouldUseThousandSeparators
 * @param {Bool} props.shouldAbbreviateTrendValue
 * @returns {String} trendText
 */

var getTrendText = function getTrendText(_ref6) {
  var majorValue = _ref6.majorValue,
      trendValue = _ref6.trendValue,
      trendDisplay = _ref6.trendDisplay,
      numberPrecision = _ref6.numberPrecision,
      shouldUseThousandSeparators = _ref6.shouldUseThousandSeparators,
      shouldAbbreviateTrendValue = _ref6.shouldAbbreviateTrendValue;

  var compute = function compute(value) {
    return computeText({
      value: value,
      numberPrecision: numberPrecision,
      shouldUseThousandSeparators: shouldUseThousandSeparators,
      shouldAbbreviateTrendValue: shouldAbbreviateTrendValue
    });
  };

  if (trendValue === '' || !Object(_splunk_visualizations_shared_numberUtils__WEBPACK_IMPORTED_MODULE_2__["isNumerial"])(trendValue)) {
    return '';
  }

  var showPercent = trendDisplay === 'percent';

  if (!showPercent) {
    return compute(trendValue);
  }

  var diff = Math.abs(trendValue - majorValue);
  var val = Math.round(trendValue / diff * 100);

  if (trendValue === 0 && diff === 0) {
    val = 0;
  }

  if (!Number.isFinite(val)) {
    return 'N/A';
  }

  var text = compute(val);
  return "".concat(text, "%");
};
/**
 * Helper to determine the font size for an element
 * @method computeFontSize
 * @param {String} text                     The string to find a size for
 * @param {Object} dimensions
 * @param {Number} dimensions.width         The width of the container
 * @param {Number} dimensions.height        The height of the container
 * @param {String} [fontFamily='"Splunk Platform Sans" ...'] The font being used
 * @param {String} [fontWeight='normal']    Boldness of font
 * @returns {Number} The size to use for fontSize styles
 */

var computeFontSize = function computeFontSize(text, _ref7) {
  var width = _ref7.width,
      height = _ref7.height;
  var fontFamily = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_FONT_FAMILY;
  var fontWeight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'normal';
  var widthInDefaultFont = Object(_splunk_visualizations_shared_domUtils__WEBPACK_IMPORTED_MODULE_3__["computeTextSize"])(text, "".concat(fontWeight, " ").concat(DEFAULT_FONT, "px ").concat(fontFamily));
  var fontSize = Math.min(width / widthInDefaultFont * DEFAULT_FONT, height / DEFAULT_FONT * DEFAULT_FONT);
  return parseInt(fontSize, 10);
};
/*
 * @method getMajorFontSize
 * @param {Object} props
 * @param {Number} props.width
 * @param {Number} props.height
 * @param {String} props.unit
 * @param {String} props.majorText
 * @param {Number} props.spaceRatio
 * @returns {Number} majorFontSize
 */

var getMajorFontSize = function getMajorFontSize(_ref8) {
  var width = _ref8.width,
      height = _ref8.height,
      unit = _ref8.unit,
      majorText = _ref8.majorText,
      _ref8$spaceRatio = _ref8.spaceRatio,
      spaceRatio = _ref8$spaceRatio === void 0 ? 1 : _ref8$spaceRatio;
  var majorTextCalc = unit ? "".concat(unit).concat(majorText) : majorText;
  return computeFontSize(majorTextCalc, {
    width: width * spaceRatio,
    height: height
  });
};
/*
 * @method getTrendFontSize
 * @param {Object} props
 * @param {Number} props.width
 * @param {Number} props.height
 * @param {String} props.trendText
 * @param {Number} props.spaceRatio
 * @returns {Number} trendFontSize
 */

var getTrendFontSize = function getTrendFontSize(_ref9) {
  var width = _ref9.width,
      height = _ref9.height,
      trendText = _ref9.trendText,
      _ref9$spaceRatio = _ref9.spaceRatio,
      spaceRatio = _ref9$spaceRatio === void 0 ? 1 : _ref9$spaceRatio;
  var trendFontSize = 12;

  if (spaceRatio > 0) {
    trendFontSize = computeFontSize(trendText, {
      width: width * spaceRatio,
      height: height
    });
    trendFontSize = parseInt(trendFontSize, 10) * spaceRatio;
  }

  return trendFontSize;
};
/*
 * The height of underLabel should no more than 12px
 * @param {Number} height
 * @return {Number} height || DEFAULT_FONT
 */

var getUnderLabelHeight = function getUnderLabelHeight(height) {
  return height > DEFAULT_FONT ? DEFAULT_FONT : height;
};
/*
 * @param {Object} config
 * @param {String} underLabel
 * @param {Number} width     width of underLabel
 * @param {Number} height    height of underLabel
 * @param {Number} fond size of underLabel
 */

var getUnderLabel = function getUnderLabel(_ref10) {
  var underLabel = _ref10.underLabel,
      width = _ref10.width,
      height = _ref10.height;
  return (// todo: may need truncate underLabel later
    computeFontSize(underLabel, {
      width: width,
      height: height
    })
  );
};
/**
 * Compute value and font size for major and trend
 * @method getMajorAndTrend
 * @param {Object} props
 * @param {Number} props.width                    // Width of the text container
 * @param {Number} props.height                   // Height of the text container
 * @param {Number} props.majorValue               // Major value
 * @param {Number} props.trendValue               // Trend value
 * @param {Number} props.majorFontSize
 * @param {Number} props.trendFontSize
 * @param {String} props.trendDisplay
 * @param {String} props.unit                     // Unit for the value
 * @param {Number} props.numberPrecision
 * @param {Bool} props.shouldUseThousandSeparators
 * @param {Bool} props.shouldAbbreviateTrendValue
 * @returns {Number, Number, Number, Number} Major text, trend text, major text size, trend text size
 */

var getMajorAndTrend = function getMajorAndTrend(_ref11) {
  var width = _ref11.width,
      height = _ref11.height,
      majorValue = _ref11.majorValue,
      trendValue = _ref11.trendValue,
      majorFontSize = _ref11.majorFontSize,
      trendFontSize = _ref11.trendFontSize,
      trendDisplay = _ref11.trendDisplay,
      unit = _ref11.unit,
      numberPrecision = _ref11.numberPrecision,
      shouldUseThousandSeparators = _ref11.shouldUseThousandSeparators,
      shouldAbbreviateTrendValue = _ref11.shouldAbbreviateTrendValue;
  var majorTextSpaceRatio = Object(_splunk_visualizations_shared_numberUtils__WEBPACK_IMPORTED_MODULE_2__["isNumerial"])(trendValue) && shouldShowTrend(trendDisplay) ? 0.6 : 1;
  var textContentWidth = width * 0.9;
  var textContentHeight = height * 0.9;
  var majorText = getMajorText({
    majorValue: majorValue,
    numberPrecision: numberPrecision,
    shouldUseThousandSeparators: shouldUseThousandSeparators
  });
  var majorTextFontSize = majorFontSize || getMajorFontSize({
    width: textContentWidth,
    height: textContentHeight,
    unit: unit,
    majorText: majorText,
    spaceRatio: majorTextSpaceRatio
  });
  var trendText = getTrendText({
    majorValue: majorValue,
    trendValue: trendValue,
    trendDisplay: trendDisplay,
    numberPrecision: numberPrecision,
    shouldUseThousandSeparators: shouldUseThousandSeparators,
    shouldAbbreviateTrendValue: shouldAbbreviateTrendValue
  });
  var trendTextFontSize = trendFontSize || getTrendFontSize({
    width: textContentWidth,
    height: textContentHeight,
    trendText: trendText,
    spaceRatio: 1 - majorTextSpaceRatio
  });
  return {
    majorText: majorText,
    majorTextFontSize: majorTextFontSize,
    trendText: trendText,
    trendTextFontSize: trendTextFontSize
  };
};
/*
 * @method updateVizInSmallSpace
 * @param {Object} props
 * @param {Number} props.width                    // Width of the text container
 * @param {Number} props.height                   // Height of the text container
 * @param {Object} props.toRemoveList
 * @param {Number} props.majorValue               // Major value
 * @param {Number} props.trendValue               // Trend value
 * @param {Number} props.majorFontSize
 * @param {Number} props.trendFontSize
 * @param {Number} props.majorTextFontSize
 * @param {String} props.unit                     // Unit for the value
 * @param {Number} props.numberPrecision
 * @param {Bool} props.shouldUseThousandSeparators
 * @param {Bool} props.shouldAbbreviateTrendValue
 * @returns {Object} results
 * @returns {Object} results.newMajorAndTrend
 * @returns {Object} results.updatedProps
 */

var updateVizInSmallSpace = function updateVizInSmallSpace(_ref12) {
  var width = _ref12.width,
      height = _ref12.height,
      toRemoveList = _ref12.toRemoveList,
      majorValue = _ref12.majorValue,
      trendValue = _ref12.trendValue,
      majorFontSize = _ref12.majorFontSize,
      trendFontSize = _ref12.trendFontSize,
      majorTextFontSize = _ref12.majorTextFontSize,
      unit = _ref12.unit,
      numberPrecision = _ref12.numberPrecision,
      shouldUseThousandSeparators = _ref12.shouldUseThousandSeparators,
      shouldAbbreviateTrendValue = _ref12.shouldAbbreviateTrendValue;
  var removeIndex = 0;
  var newProps = {}; // options need to be updated

  var newMajorAndTrend = {};
  var newTextSize = majorTextFontSize; // remove info on viz to make textFontSize >= 12px;

  while (newTextSize < 12 && removeIndex < toRemoveList.length) {
    var toRemove = toRemoveList[removeIndex];
    newProps = _objectSpread(_objectSpread({}, newProps), _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()({}, toRemove.key, toRemove.value));
    newMajorAndTrend = getMajorAndTrend(_objectSpread({
      majorValue: majorValue,
      trendValue: trendValue,
      majorFontSize: majorFontSize,
      trendFontSize: trendFontSize,
      width: width,
      height: height,
      unit: unit,
      numberPrecision: numberPrecision,
      shouldUseThousandSeparators: shouldUseThousandSeparators,
      shouldAbbreviateTrendValue: shouldAbbreviateTrendValue
    }, newProps));
    newTextSize = newMajorAndTrend.majorTextFontSize;
    removeIndex += 1;
  } // truncate text if textFontSize is still less than 12


  if (newTextSize < 12) {
    var truncateValue = "".concat(majorValue.toString().slice(0, 3), "...");
    newMajorAndTrend = getMajorAndTrend(_objectSpread({
      majorValue: truncateValue,
      trendValue: trendValue,
      majorFontSize: majorFontSize,
      trendFontSize: trendFontSize,
      width: width,
      height: height,
      unit: unit,
      numberPrecision: numberPrecision,
      shouldUseThousandSeparators: shouldUseThousandSeparators,
      shouldAbbreviateTrendValue: shouldAbbreviateTrendValue
    }, newProps));
  }

  return {
    newMajorAndTrend: newMajorAndTrend,
    updatedProps: newProps
  };
};
/*
 * @method computeSingleValueContent
 * @param {Object} props
 * @param {Number} props.contentWidth
 * @param {Number} props.contentHeight
 * @param {Number} props.containerWidth
 * @param {Number} props.containerHeight
 * @param {Number} props.majorValue               // Major value
 * @param {Number} props.trendValue               // Trend value
 * @param {Number} props.majorFontSize
 * @param {Number} props.trendFontSize
 * @param {String} props.trendDisplay
 * @param {String} props.unit                     // Unit for the value
 * @param {Number} props.numberPrecision
 * @param {Bool} props.shouldUseThousandSeparators
 * @param {Bool} props.shouldAbbreviateTrendValue
 * @param {Object} props.toRemoveList
 * @returns {Object} results
 * @returns {String} results.majorText
 * @returns {String} results.trendText
 * @returns {Number} results.majorTextFontSize
 * @returns {Number} results.trendTextFontSize
 * @returns {String} results.majorValueTitle
 * @returns {Object} results.smallVizProps
 */

var computeSingleValueContent = function computeSingleValueContent(_ref13) {
  var contentWidth = _ref13.contentWidth,
      contentHeight = _ref13.contentHeight,
      containerWidth = _ref13.containerWidth,
      containerHeight = _ref13.containerHeight,
      majorValue = _ref13.majorValue,
      trendValue = _ref13.trendValue,
      majorFontSize = _ref13.majorFontSize,
      trendFontSize = _ref13.trendFontSize,
      trendDisplay = _ref13.trendDisplay,
      unit = _ref13.unit,
      numberPrecision = _ref13.numberPrecision,
      shouldUseThousandSeparators = _ref13.shouldUseThousandSeparators,
      shouldAbbreviateTrendValue = _ref13.shouldAbbreviateTrendValue,
      toRemoveList = _ref13.toRemoveList;

  var _getMajorAndTrend = getMajorAndTrend({
    majorValue: majorValue,
    trendValue: trendValue,
    majorFontSize: majorFontSize,
    trendFontSize: trendFontSize,
    trendDisplay: trendDisplay,
    width: contentWidth,
    height: contentHeight,
    unit: unit,
    numberPrecision: numberPrecision,
    shouldUseThousandSeparators: shouldUseThousandSeparators,
    shouldAbbreviateTrendValue: shouldAbbreviateTrendValue
  }),
      majorText = _getMajorAndTrend.majorText,
      trendText = _getMajorAndTrend.trendText,
      majorTextFontSize = _getMajorAndTrend.majorTextFontSize,
      trendTextFontSize = _getMajorAndTrend.trendTextFontSize;

  var majorValueTitle = majorText;
  var smallVizProps = {}; // update viz in small space
  // if textFontSize is less than 12, remove extra info like sparkline, trendvalue, unit
  // or truncate major value to make the major font size >= 12

  if (majorTextFontSize < 12) {
    var _updateVizInSmallSpac = updateVizInSmallSpace({
      width: containerWidth,
      height: containerHeight,
      toRemoveList: toRemoveList,
      majorValue: majorValue,
      trendValue: trendValue,
      majorFontSize: majorFontSize,
      trendFontSize: trendFontSize,
      majorTextFontSize: majorTextFontSize,
      unit: unit,
      numberPrecision: numberPrecision,
      shouldUseThousandSeparators: shouldUseThousandSeparators,
      shouldAbbreviateTrendValue: shouldAbbreviateTrendValue
    }),
        newMajorAndTrend = _updateVizInSmallSpac.newMajorAndTrend,
        updatedProps = _updateVizInSmallSpac.updatedProps;

    majorText = newMajorAndTrend.majorText;
    trendText = newMajorAndTrend.trendText;
    majorTextFontSize = newMajorAndTrend.majorTextFontSize;
    trendTextFontSize = newMajorAndTrend.trendTextFontSize;
    smallVizProps = updatedProps;
  }

  return {
    majorText: majorText,
    trendText: trendText,
    majorTextFontSize: majorTextFontSize,
    trendTextFontSize: trendTextFontSize,
    majorValueTitle: majorValueTitle,
    smallVizProps: smallVizProps
  };
};
/**
 * Get the colors for a graph
 *
 * @method getGraphColors
 * @param {Object} options
 * @param {Bool} options.backgroundEnabled          // Flag to turn on color mode
 * @param {String} options.backgroundColor          // The current background color, overrides trend background color
 * @param {Object} options.defaultColors            // Default colors by severity
 * @param {Function} options.customColorFormatter   // must return { background, stroke } given a color
 * @returns {Object} { background, stroke } colors
 * @private
 */

var getGraphColors = function getGraphColors(_ref14) {
  var backgroundEnabled = _ref14.backgroundEnabled,
      backgroundColor = _ref14.backgroundColor,
      defaultColors = _ref14.defaultColors,
      customColorFormatter = _ref14.customColorFormatter; // Only do custom colors in block mode

  if (backgroundEnabled) {
    // Check if the user defined colors to use
    if (backgroundColor && typeof customColorFormatter === 'function') {
      return customColorFormatter(backgroundColor);
    }
  }

  return defaultColors.none;
};
/**
 * Adjust rgb value if it equals to 0 or 255
 * @method adjustRGB
 * @param {Number} rgb      [0 - 255]
 * @param {Number} delta
 * @returns {Number} adjusted rgb
 * @private
 */

var adjustRGB = function adjustRGB(rgb, delta) {
  if (rgb === 255) {
    return rgb - delta;
  }

  if (rgb === 0) {
    return rgb + delta;
  }

  return rgb;
};
/**
 * Modifies colors by multiplying by a given ratio
 * @method changeColor
 * @param {String} color    // Color to modify
 * @param {Number} ratio    // Float to modify color
 * @returns {String} new color
 * @private
 */

var changeColor = function changeColor(color, ratio) {
  var hex = color.replace(/(0x|#)/, '');
  var r = parseInt(hex.substr(0, 2), 16);
  var g = parseInt(hex.substr(2, 2), 16);
  var b = parseInt(hex.substr(4, 2), 16); // Multiply by given ratio, make sure is between 0 and 255;

  var newR = Math.max(Math.min(Math.floor(r * ratio), 255), 0);
  var newG = Math.max(Math.min(Math.floor(g * ratio), 255), 0);
  var newB = Math.max(Math.min(Math.floor(b * ratio), 255), 0); // If the color is not changed
  // case 1: the color is (0, 0 0)
  //         lighten color (80, 80, 80)
  //         darken color (40, 40, 40)
  // case 2: the color is (255, 255, 255)
  //         lighten color (235, 235, 235)
  //         darken color (175, 175, 175)
  // case 3: the color is e.g. (0, 255, 0)
  //         new color (20, 235, 20)

  if (newR === r && newG === g && newB === b) {
    if (newR === 0 && newG === 0 && newB === 0) {
      if (ratio > 1) {
        newR = adjustRGB(newR, 80);
        newG = adjustRGB(newG, 80);
        newB = adjustRGB(newB, 80);
      } else {
        newR = adjustRGB(newR, 40);
        newG = adjustRGB(newG, 40);
        newB = adjustRGB(newB, 40);
      }
    } else if (newR === 255 && newG === 255 && newB === 255) {
      if (ratio > 1) {
        newR = adjustRGB(newR, 20);
        newG = adjustRGB(newG, 20);
        newB = adjustRGB(newB, 20);
      } else {
        newR = adjustRGB(newR, 80);
        newG = adjustRGB(newG, 80);
        newB = adjustRGB(newB, 80);
      }
    } else {
      newR = adjustRGB(newR, 20);
      newG = adjustRGB(newG, 20);
      newB = adjustRGB(newB, 20);
    }
  }

  return "#".concat(newR.toString(16).padStart(2, 0)) + "".concat(newG.toString(16).padStart(2, 0)) + "".concat(newB.toString(16).padStart(2, 0));
};
/**
 * Lighten a given color
 * @method lighten
 * @param {String} color
 * @returns {String}
 * @private
 */


var lighten = function lighten(color) {
  return changeColor(color, 1.3);
};
/**
 * Darkens a given color
 * @method darken
 * @param {String} color
 * @returns {String}
 * @private
 */

var darken = function darken(color) {
  return changeColor(color, 0.5);
};
/** consistent token structure: handle callback to add value and name in event payload
 * @method handleValueClickCallback
 * @param {Object} ev
 * @param {String | Number} majorValue
 * @param {String} majorValueField
 * @param {Number} trendValue
 * @param {Function} onValueClick
 */

var handleValueClickCallback = function handleValueClickCallback(ev, majorValue, majorValueField, trendValue, onValueClick) {
  var payload = {
    trendValue: trendValue,
    value: majorValue,
    name: majorValueField
  };
  return onValueClick(_objectSpread(_objectSpread({}, ev), {}, {
    payload: payload
  }));
};

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/createClass");

/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/SizeAwareWrapper");

/***/ }),
/* 18 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/propUtils");

/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports = require("@splunk/themes/variables");

/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/numberUtils");

/***/ }),
/* 21 */
/***/ (function(module, exports) {

module.exports = require("@splunk/themes/pick");

/***/ }),
/* 22 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/typeof");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _defineProperty = __webpack_require__(6);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSortingParams = exports.SortParamsPropTypes = void 0;

var T = __webpack_require__(0);

var lodash_1 = __webpack_require__(2);

var DataSource_1 = __webpack_require__(33);

exports.SortParamsPropTypes = T.shape({
  currentSortKey: T.string,
  currentSortDir: T.oneOf(DataSource_1.validSortDirs),
  onSort: T.func
});

var getSortingParams = function getSortingParams(_ref) {
  var requestParams = _ref.requestParams,
      onRequestParamsChange = _ref.onRequestParamsChange;
  var currentSortKey;
  var currentSortDir;
  var nextSortDirMap = {
    asc: 'desc',
    desc: 'asc',
    none: 'asc'
  };
  var onSort;

  if (lodash_1.isFunction(onRequestParamsChange)) {
    if (requestParams && lodash_1.has(requestParams, 'sort')) {
      currentSortKey = Object.keys(requestParams.sort).shift();
      currentSortDir = requestParams.sort[currentSortKey];
    } // undid memoization since there is a dependency on requestParams, which is a deeply nested object


    onSort = function onSort(e, _ref2) {
      var sortKey = _ref2.sortKey,
          sortDir = _ref2.sortDir;

      if (typeof sortKey === 'string') {
        var nextSortDir = lodash_1.has(nextSortDirMap, sortDir) ? nextSortDirMap[sortDir] : 'none';
        onRequestParamsChange(Object.assign(Object.assign({}, requestParams), {
          offset: 0,
          sort: _defineProperty({}, sortKey, nextSortDir)
        }));
      } else {
        onRequestParamsChange(requestParams);
      }
    };
  }

  return {
    currentSortKey: currentSortKey,
    currentSortDir: currentSortDir,
    onSort: onSort
  };
};

exports.getSortingParams = getSortingParams;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPaginationParams = exports.PaginatorParamsPropTypes = void 0;

var T = __webpack_require__(0);

var lodash_1 = __webpack_require__(2);

exports.PaginatorParamsPropTypes = T.shape({
  isPaging: T.bool,
  current: T.number,
  totalPages: T.number,
  onChange: T.func
});

var getPaginationParams = function getPaginationParams(_ref) {
  var requestParams = _ref.requestParams,
      meta = _ref.meta,
      onRequestParamsChange = _ref.onRequestParamsChange;
  var totalCount = meta && meta.totalCount || 0;
  var offset = requestParams && requestParams.offset || 0;
  var count = requestParams && requestParams.count;
  var totalPages = typeof count === 'number' && count > 0 ? Math.ceil(totalCount / count) : 0;
  var current = typeof count === 'number' && count > 0 ? Math.floor(offset / count) + 1 : 0;
  var isPaging = totalPages > 1 && lodash_1.isFunction(onRequestParamsChange);

  var onChangeHandler = function onChangeHandler(e, _ref2) {
    var page = _ref2.page,
        countArg = _ref2.count;
    var newParams = lodash_1.cloneDeep(requestParams);

    if (typeof countArg === 'number') {
      newParams.count = countArg;
      newParams.offset = 0;
    }

    var pageCount = typeof newParams.count === 'number' ? newParams.count : 10;

    if (typeof page === 'number' && page > 0) {
      newParams.count = pageCount;
      newParams.offset = (page - 1) * pageCount;
    }

    onRequestParamsChange(newParams);
  };

  return {
    isPaging: isPaging,
    current: current,
    totalPages: totalPages,
    onChange: lodash_1.isFunction(onRequestParamsChange) ? onChangeHandler : lodash_1.noop
  };
};

exports.getPaginationParams = getPaginationParams;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shouldShowIconPlaceholder = void 0;

var React = __webpack_require__(1);

var T = __webpack_require__(0);

var lodash_1 = __webpack_require__(2);

var i18n_1 = __webpack_require__(3);

var Message_1 = __webpack_require__(9);

var FixedSizeContainer_1 = __webpack_require__(12);
/**
 * @method shouldShowIconPlaceholder
 * @param {object} dataSources
 * @param {boolean} loading
 * @returns {boolean}
 */


var shouldShowIconPlaceholder = function shouldShowIconPlaceholder(dataSources) {
  var loading = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var data = lodash_1.get(dataSources, 'primary.data.columns[0]', undefined);
  var noData = data === undefined;
  var fields = lodash_1.get(dataSources, 'primary.data.fields[0]', undefined);
  var noFields = fields === undefined;
  return loading || noData || noFields;
};

exports.shouldShowIconPlaceholder = shouldShowIconPlaceholder;
var propTypes = {
  icon: T.func,
  width: T.oneOfType([T.string, T.number]),
  height: T.oneOfType([T.string, T.number]),
  backgroundColor: T.string
};
/**
 * @method IconPlaceholder
 * @param {IconPlaceholderProps} props
 * @returns {React.ReactElement}
 */

var IconPlaceholder = function IconPlaceholder(props) {
  var width = props.width,
      height = props.height,
      icon = props.icon;

  if (icon) {
    return React.createElement(icon, {
      style: {
        left: '50%',
        top: '50%',
        color: 'grey',
        position: 'absolute',
        transform: 'translate(-50%, -50%)'
      },
      width: '50%',
      height: '50%'
    });
  }

  return React.createElement(Message_1.default, {
    width: width,
    height: height,
    level: "warning",
    message: i18n_1._('No DataSource Connected')
  });
};

IconPlaceholder.propTypes = propTypes;
IconPlaceholder.defaultProps = {
  width: '100%',
  height: 250
};
exports.default = FixedSizeContainer_1.default(IconPlaceholder);

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VizCategory = void 0;
var VizCategory;

(function (VizCategory) {
  VizCategory["SINGLE_VALUE"] = "Single Value";
  VizCategory["TRENDS"] = "Trends";
  VizCategory["COMPARISONS"] = "Comparisons";
  VizCategory["TABLE"] = "Table";
  VizCategory["GAUGE"] = "Gauge";
  VizCategory["DISTRIBUTIONS"] = "Distributions";
  VizCategory["CHOROPLETH"] = "Choropleth Maps";
  VizCategory["SHAPES"] = "Shapes";
  VizCategory["MISC"] = "misc";
  VizCategory["FLOW"] = "Flow";
  VizCategory["CORRELATION"] = "Correlation";
  VizCategory["SPATIAL"] = "Spatial";
})(VizCategory = exports.VizCategory || (exports.VizCategory = {}));

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var React = __webpack_require__(1);

var lodash_1 = __webpack_require__(2);

var getSettingsFromThemedProps_1 = __webpack_require__(28);

var Options_1 = __webpack_require__(29);

var SanitizeProps_1 = __webpack_require__(30);

var styled_components_1 = __webpack_require__(4);

var SplunkVisualization_1 = __webpack_require__(31);

var VizBehavior_1 = __webpack_require__(5);

var getSorting_1 = __webpack_require__(23);

var getPagination_1 = __webpack_require__(24);

var useDeepMemo_1 = __webpack_require__(34);

var JSONSchemaUtils_1 = __webpack_require__(35);

var MissingPropsMessage_1 = __webpack_require__(36);

var withEditModeCover_1 = __webpack_require__(37);

var withPlaceholder_1 = __webpack_require__(38);

var hocUtils_1 = __webpack_require__(7);
/**
 * hoc that wraps a pure react visualization in a Dashboard visualization
 * @param {DashboardVizOpts} opts
 * @returns {HOC}
 */


var withDashboardViz = function withDashboardViz(opts) {
  var ReactViz = opts.ReactViz,
      vizConfig = opts.vizConfig,
      _opts$computeVizProps = opts.computeVizProps,
      computeVizProps = _opts$computeVizProps === void 0 ? function () {} : _opts$computeVizProps,
      useIconPlaceholder = opts.useIconPlaceholder; // sanitizing props before sending them to reactviz.

  var SanitizedReactViz = SanitizeProps_1.withSanitizedProps(ReactViz);
  var defaultOptions = JSONSchemaUtils_1.pickFieldFromJSONSchema(vizConfig.optionsSchema, 'default');

  var DashboardViz = function DashboardViz(props) {
    var mode = props.mode,
        hasEventHandlers = props.hasEventHandlers,
        dataSources = props.dataSources,
        options = props.options,
        _props$context = props.context,
        context = _props$context === void 0 ? {} : _props$context,
        width = props.width,
        height = props.height,
        onComputedProps = props.onComputedProps,
        onEventTrigger = props.onEventTrigger,
        theme = props.theme,
        onRequestParamsChange = props.onRequestParamsChange;

    var themeFunc = function themeFunc(themeVar) {
      var _a, _b;

      return (_b = (_a = vizConfig.themes)[themeVar]) === null || _b === void 0 ? void 0 : _b.call(_a, props);
    };

    var bgColorFromTheme = themeFunc('defaultBackgroundColor');

    var _getSettingsFromTheme = getSettingsFromThemedProps_1.default({
      theme: theme
    }),
        currentThemeFamily = _getSettingsFromTheme.family,
        currentThemeColorScheme = _getSettingsFromTheme.colorScheme,
        currentThemeDensity = _getSettingsFromTheme.density;

    var evaluatedOptions = {}; // evaluatedOptions need to be initialized as an empty object

    evaluatedOptions = useDeepMemo_1.useDeepMemo(function () {
      try {
        return Options_1.Options.evaluate({
          context: lodash_1.defaultsDeep({}, context, vizConfig.defaultContext),
          options: hocUtils_1.deepMergeWithArrayOverrides({}, options, defaultOptions)
        }, dataSources, themeFunc);
      } catch (e) {
        console.error("unexpected error evaluating options:  + ".concat(e.message));
        return {};
      }
    }, [currentThemeFamily, currentThemeColorScheme, currentThemeDensity, options, context, dataSources]); // useEffect hook needs to be initialized before any early returns
    // this is in accordance with the order of hook calls being the same on each render https://reactjs.org/docs/hooks-rules.html#explanation

    React.useEffect(function () {
      onComputedProps(evaluatedOptions);
    }); // present warning message if any required props are missing

    var _vizConfig$requiredPr = vizConfig.requiredProps,
        requiredProps = _vizConfig$requiredPr === void 0 ? [] : _vizConfig$requiredPr,
        supports = vizConfig.supports;
    var missing = MissingPropsMessage_1.missingKeys(requiredProps, evaluatedOptions);

    if (missing.length > 0 && supports.includes(VizBehavior_1.VizBehavior.PLACEHOLDER)) {
      return React.createElement(MissingPropsMessage_1.default, {
        "data-test": "missing-props-message",
        width: width,
        height: height,
        missingProps: missing,
        backgroundColor: bgColorFromTheme
      });
    } // events


    var eventCallbackProps = {};

    if (hasEventHandlers && mode === 'view' && vizConfig.supports.indexOf(VizBehavior_1.VizBehavior.EVENTS) > -1) {
      var supportedEvents = vizConfig.events;
      Object.keys(supportedEvents).forEach(function (eventName) {
        var eventCallbackPropName = lodash_1.camelCase("on.".concat(eventName));
        eventCallbackProps[eventCallbackPropName] = null; // todo: refactor single value and single value icon to send payload from viz
        // then remove these lines

        var payloadKeys = supportedEvents[eventName].payloadKeys;
        var payload = {};

        if (Array.isArray(payloadKeys) && payloadKeys.length) {
          payloadKeys.forEach(function (p) {
            return payload[p] = evaluatedOptions[p];
          });
        }

        eventCallbackProps[eventCallbackPropName] = function (ev) {
          if (ev && ev.payload) {
            payload = ev.payload;
          }

          return onEventTrigger({
            originalEvent: ev,
            payload: payload,
            type: eventName
          });
        };
      });
    } // compute pure viz props which are not from options


    var computedVizProps = computeVizProps(Object.assign(Object.assign(Object.assign(Object.assign({}, props), evaluatedOptions), eventCallbackProps), {
      themeFunc: themeFunc
    }));
    /**
     * PAGE_AND_SORT behavior
     *
     * Some visualizations, like table, requires metadata about the datasource,
     * like total number of results, current count, offset, and sort, for rendering
     * paginator and sorting direction. In this approach, the visualization
     * allow users to set 'paginateDataSourceKey' to select which datasource
     * should the visualization extract the metadata from. It defaults to 'primary' datasource.
     * The visualization config should set the PAGE_AND_SORT behavior to receive
     * 'requestParams', 'meta' and onRequestParams callback as props.
     *
     * In future, we could automatically detect which all datasources are being used
     * and bind those magically to pagination/sorting behavior.
     */

    var dataSourceMetadata = {};
    var OptionKey = 'paginateDataSourceKey';
    var paginateDataSourceKey = lodash_1.has(evaluatedOptions, OptionKey) && evaluatedOptions[OptionKey] || 'primary';

    if (vizConfig.supports.indexOf(VizBehavior_1.VizBehavior.PAGE_AND_SORT) > -1 && lodash_1.has(dataSources, paginateDataSourceKey)) {
      var requestParams = lodash_1.get(dataSources, [paginateDataSourceKey, 'requestParams'], {});
      var meta = lodash_1.get(dataSources, [paginateDataSourceKey, 'meta'], {});

      var handleRequestParamsChange = function handleRequestParamsChange(payload) {
        return onRequestParamsChange(paginateDataSourceKey, payload);
      };

      var sortParams = getSorting_1.getSortingParams({
        requestParams: requestParams,
        meta: meta,
        onRequestParamsChange: handleRequestParamsChange
      });
      var paginatorParams = getPagination_1.getPaginationParams({
        requestParams: requestParams,
        meta: meta,
        onRequestParamsChange: handleRequestParamsChange
      });
      dataSourceMetadata = {
        sortParams: sortParams,
        paginatorParams: paginatorParams
      };
    }

    return React.createElement(SanitizedReactViz, Object.assign({
      mode: mode,
      width: width,
      height: height
    }, evaluatedOptions, computedVizProps, eventCallbackProps, dataSourceMetadata));
  };

  DashboardViz.propTypes = Object.assign(Object.assign({}, SplunkVisualization_1.default.propTypes), ReactViz.propTypes);
  DashboardViz.defaultProps = Object.assign(Object.assign(Object.assign({}, SplunkVisualization_1.default.defaultProps), ReactViz.defaultProps), {
    // using withTheme requires component to receive theme prop. In case the consumer did not provide ThemeProvider, a default empty object will prevent warnings.
    theme: {}
  }); // attach viz config

  DashboardViz.config = vizConfig; // @ts-ignore: TODO fix sc upgrade TS issues

  return styled_components_1.withTheme(withPlaceholder_1.default(withEditModeCover_1.default(DashboardViz), useIconPlaceholder));
};

exports.default = withDashboardViz;

/***/ }),
/* 28 */
/***/ (function(module, exports) {

module.exports = require("@splunk/themes/getSettingsFromThemedProps");

/***/ }),
/* 29 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualization-encoding/Options");

/***/ }),
/* 30 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/SanitizeProps");

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _classCallCheck = __webpack_require__(10);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.INITIAL_HEIGHT = exports.INITIAL_WIDTH = void 0;
/* eslint-disable react/no-unused-prop-types,react/prefer-stateless-function */

var T = __webpack_require__(0);

var lodash_1 = __webpack_require__(2);

var VizActionHandler_1 = __webpack_require__(32); // this is identical to the initial height and width we use in BaseVisualization in dashboard-visualizations


exports.INITIAL_WIDTH = 250;
exports.INITIAL_HEIGHT = 250;
/**
 * A Splunk visualization
 */

var SplunkVisualization = function SplunkVisualization() {
  _classCallCheck(this, SplunkVisualization);
};

SplunkVisualization.propTypes = {
  /**
   * display mode
   */
  mode: T.oneOf(['view', 'edit', 'export']).isRequired,

  /**
   * width in pixel or string, defaults to 100%
   */
  width: T.oneOfType([T.string, T.number]).isRequired,

  /**
   * height in pixel or string
   */
  height: T.oneOfType([T.string, T.number]).isRequired,

  /**
   * visualization context used for dynamic option evaluation
   */
  context: T.object,

  /**
   * visualization formatting options
   */
  options: T.object,

  /**
   * A callback to update formatting options
   */
  onOptionsChange: T.func,

  /**
   * datasource state which include data and request params, object key indicate the datasource type.
   */
  dataSources: T.objectOf(T.shape({
    /**
     * current request params
     */
    requestParams: T.object,

    /**
     * current dataset
     */
    data: T.shape({
      fields: T.array,
      columns: T.array
    }),

    /**
     * error
     */
    error: T.shape({
      level: T.string,
      message: T.string
    }),

    /**
     * meta data that came with the dataset
     */
    meta: T.object
  })),

  /**
   * A callback to trigger event
   */
  onEventTrigger: T.func,

  /**
   * Inform viz if there are handlers listening to events
   */
  hasEventHandlers: T.bool,

  /**
   * A callback to communicate computed props to a consumer
   */
  onComputedProps: T.func,

  /**
   * A callback to obtain visualization api
   */
  vizActionHandlerRef: T.func,
  loading: T.bool,
  theme: T.object,

  /**
   * A callback to request new data with updated request params
   */
  onRequestParamsChange: T.func
};
/**
 *
 */

SplunkVisualization.defaultProps = {
  // BaseVisualization in dashboard-visualizations uses 100% for width but 250 for height
  width: '100%',
  height: exports.INITIAL_HEIGHT,
  dataSources: {},
  onEventTrigger: function onEventTrigger() {
    return {};
  },
  mode: 'view',
  hasEventHandlers: false,
  options: {},
  context: {},
  onOptionsChange: function onOptionsChange() {
    return {};
  },
  vizActionHandlerRef: function vizActionHandlerRef() {
    return new VizActionHandler_1.DefaultVizActionHandler();
  },
  onComputedProps: function onComputedProps() {
    return {};
  },
  loading: false,
  onRequestParamsChange: lodash_1.noop
};
exports.default = SplunkVisualization;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _classCallCheck = __webpack_require__(10);

var _createClass = __webpack_require__(16);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultVizActionHandler = void 0;

var DefaultVizActionHandler = /*#__PURE__*/function () {
  function DefaultVizActionHandler() {
    _classCallCheck(this, DefaultVizActionHandler);
  }

  _createClass(DefaultVizActionHandler, [{
    key: "focus",
    value: function focus() {//noop
    }
  }, {
    key: "snapshot",
    value: function snapshot() {
      return null; //noop
    }
  }]);

  return DefaultVizActionHandler;
}();

exports.DefaultVizActionHandler = DefaultVizActionHandler;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validSortDirs = void 0;
exports.validSortDirs = ['asc', 'desc', 'none'];

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDeepMemo = void 0;

var react_1 = __webpack_require__(1);

var lodash_1 = __webpack_require__(2);
/**
 * This hook evaluates and stores the result of a passed function and only
 * re-evaluates the function when passed dependencies change.
 *
 * It is different from the internal React useMemo in the following aspects:
 * - it only stores the last evaluated result
 * - it uses a deep equality check to determine if dependencies have changed
 *
 * Inspired by apollo-client's useDeepMemo
 *
 * @param fn the function to be executed and
 * @param dependencies an array of dependencies
 */


var useDeepMemo = function useDeepMemo(fn, dependencies) {
  var ref = react_1.useRef();

  if (!ref.current || !lodash_1.isEqual(dependencies, ref.current.dependencies)) {
    ref.current = {
      dependencies: dependencies,
      value: fn()
    };
  }

  return ref.current.value;
};

exports.useDeepMemo = useDeepMemo;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pickFieldFromJSONSchema = void 0;

var lodash_1 = __webpack_require__(2);

var pickFieldFromJSONSchema = function pickFieldFromJSONSchema(optionsSchema) {
  var fieldName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
  return Object.keys(optionsSchema).reduce(function (accum, k) {
    if (lodash_1.has(optionsSchema[k], fieldName)) {
      accum[k] = optionsSchema[k][fieldName];
    } else if (lodash_1.get(optionsSchema, [k, 'type']) === 'object' && lodash_1.has(optionsSchema[k], 'properties')) {
      var nestedSchema = exports.pickFieldFromJSONSchema(optionsSchema[k].properties, fieldName);

      if (!lodash_1.isEmpty(nestedSchema)) {
        accum[k] = nestedSchema;
      }
    }

    return accum;
  }, {});
};

exports.pickFieldFromJSONSchema = pickFieldFromJSONSchema;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MissingPropsMessage = exports.missingKeys = exports.isMissing = void 0;

var React = __webpack_require__(1);

var T = __webpack_require__(0);

var i18n_1 = __webpack_require__(3);

var Message_1 = __webpack_require__(9);

var FixedSizeContainer_1 = __webpack_require__(12);
/**
 * @method isMissing
 * @param {any} v
 * @returns {boolean} true if the input value === null or undefined
 */


var isMissing = function isMissing(v) {
  return v === null || v === undefined;
};

exports.isMissing = isMissing;
/**
 * @method misskingKeys
 * @param {string[]} keys
 * @param {object} target
 * @returns {string[]} the keys of missing required props
 */

var missingKeys = function missingKeys(keys, target) {
  return keys.filter(function (k) {
    return exports.isMissing(target[k]);
  });
};

exports.missingKeys = missingKeys;
var propTypes = {
  width: T.oneOfType([T.string, T.number]),
  height: T.oneOfType([T.string, T.number]),
  backgroundColor: T.string,
  missingProps: T.arrayOf(T.string)
};
/**
 * @method MissingPropsMessage
 * @param {MissingPropsProps} props
 * @returns {React.ReactElement}
 */

var MissingPropsMessage = function MissingPropsMessage(props) {
  var width = props.width,
      height = props.height,
      missingProps = props.missingProps;
  return React.createElement(Message_1.default, {
    "data-test": "message",
    width: width,
    height: height,
    message: i18n_1._("Missing property: ".concat(missingProps.join(', ')))
  });
};

exports.MissingPropsMessage = MissingPropsMessage;
exports.MissingPropsMessage.propTypes = propTypes;
exports.MissingPropsMessage.defaultProps = {
  width: '100%',
  height: 250
};
exports.default = FixedSizeContainer_1.default(exports.MissingPropsMessage);

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var React = __webpack_require__(1);

var styled_components_1 = __webpack_require__(4);

var hocUtils_1 = __webpack_require__(7);

var Cover = styled_components_1.default.div.withConfig({
  displayName: "withEditModeCover__Cover",
  componentId: "sc-1gsbnxb-0"
})(["position:absolute;left:0;right:0;top:0;bottom:0;"]);
var Blocker = styled_components_1.default.div.withConfig({
  displayName: "withEditModeCover__Blocker",
  componentId: "sc-1gsbnxb-1"
})(["position:relative;width:100%;height:100%;"]);
/**
 * HOC that renders a cover layer in edit mode
 * @method withEditModeCover
 * @param {ExtendedDashViz} Visualization
 * @returns {ExtendedDashViz} Wrapper
 */

var withEditModeCover = function withEditModeCover(Visualization) {
  var Wrapper = function Wrapper(props) {
    var mode = props.mode;
    return React.createElement(Blocker, null, React.createElement(Visualization, Object.assign({}, props)), mode === 'edit' && React.createElement(Cover, {
      "data-test": "edit-mode-cover"
    }));
  };

  hocUtils_1.extendStaticWrapperProps({
    Wrapper: Wrapper,
    Visualization: Visualization
  });
  return Wrapper;
};

exports.default = withEditModeCover;

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var React = __webpack_require__(1);

var colorUtils_1 = __webpack_require__(11);

var IconPlaceholder_1 = __webpack_require__(25);

var VizBehavior_1 = __webpack_require__(5);

var hocUtils_1 = __webpack_require__(7);

var withPlaceholder = function withPlaceholder(Visualization) {
  var useIconPlaceholder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : IconPlaceholder_1.shouldShowIconPlaceholder;
  var config = Visualization.config;
  var themes = config.themes;

  var Wrapper = function Wrapper(props) {
    var _a;

    var dataSources = props.dataSources,
        loading = props.loading,
        options = props.options,
        height = props.height,
        width = props.width;
    var showPlaceholder = useIconPlaceholder(dataSources, loading, options);
    var bgColorFromTheme = colorUtils_1.isColor(options === null || options === void 0 ? void 0 : options.backgroundColor) ? options === null || options === void 0 ? void 0 : options.backgroundColor : (_a = themes === null || themes === void 0 ? void 0 : themes.defaultBackgroundColor) === null || _a === void 0 ? void 0 : _a.call(themes, props);

    if (config.supports.includes(VizBehavior_1.VizBehavior.PLACEHOLDER) && showPlaceholder) {
      return React.createElement(IconPlaceholder_1.default, {
        "data-test": "icon-placeholder",
        icon: config.icon,
        width: width,
        height: height,
        backgroundColor: bgColorFromTheme
      });
    }

    return React.createElement(Visualization, Object.assign({}, props));
  };

  hocUtils_1.extendStaticWrapperProps({
    Wrapper: Wrapper,
    Visualization: Visualization
  });
  return Wrapper;
};

exports.default = withPlaceholder;

/***/ }),
/* 39 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/toConsumableArray");

/***/ }),
/* 40 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/colorConstants");

/***/ }),
/* 41 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualization-color-palettes");

/***/ }),
/* 42 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualization-icons");

/***/ }),
/* 43 */,
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var i18n_1 = __webpack_require__(3);

var background = function background(_ref) {
  var label = _ref.label,
      themes = _ref.themes,
      labelPosition = _ref.labelPosition;
  return [{
    label: i18n_1._(label || 'Background'),
    option: 'backgroundColor',
    editor: 'editor.color',
    editorProps: {
      labelPosition: labelPosition || 'top',
      themes: themes
    }
  }];
};

exports.default = background;

/***/ }),
/* 45 */,
/* 46 */,
/* 47 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/domUtils");

/***/ }),
/* 48 */
/***/ (function(module, exports) {

module.exports = require("d3-array");

/***/ }),
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/slicedToArray");

/***/ }),
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */
/***/ (function(module, exports) {

module.exports = require("d3-scale");

/***/ }),
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */,
/* 110 */,
/* 111 */,
/* 112 */,
/* 113 */,
/* 114 */,
/* 115 */,
/* 116 */,
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */,
/* 121 */,
/* 122 */,
/* 123 */
/***/ (function(module, exports) {

module.exports = require("@mdhnpm/rgb-hex-converter");

/***/ }),
/* 124 */,
/* 125 */,
/* 126 */,
/* 127 */,
/* 128 */,
/* 129 */,
/* 130 */,
/* 131 */,
/* 132 */,
/* 133 */,
/* 134 */,
/* 135 */,
/* 136 */,
/* 137 */,
/* 138 */,
/* 139 */,
/* 140 */,
/* 141 */,
/* 142 */,
/* 143 */,
/* 144 */,
/* 145 */,
/* 146 */,
/* 147 */,
/* 148 */,
/* 149 */,
/* 150 */,
/* 151 */,
/* 152 */,
/* 153 */,
/* 154 */,
/* 155 */,
/* 156 */,
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */,
/* 161 */,
/* 162 */,
/* 163 */,
/* 164 */,
/* 165 */,
/* 166 */,
/* 167 */,
/* 168 */,
/* 169 */,
/* 170 */,
/* 171 */,
/* 172 */,
/* 173 */,
/* 174 */,
/* 175 */,
/* 176 */,
/* 177 */,
/* 178 */,
/* 179 */,
/* 180 */,
/* 181 */,
/* 182 */,
/* 183 */,
/* 184 */,
/* 185 */,
/* 186 */,
/* 187 */,
/* 188 */,
/* 189 */,
/* 190 */,
/* 191 */,
/* 192 */,
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.themes = exports.computeVizProps = exports.PureParallelCoordinates = exports.config = void 0;

var PureParallelCoordinates_1 = __webpack_require__(194);

var withDashboardViz_1 = __webpack_require__(27);

var config_1 = __webpack_require__(201);

var singleValueUtils_1 = __webpack_require__(15);

exports.config = config_1.default;
exports.PureParallelCoordinates = PureParallelCoordinates_1.default;

var computeVizProps = function computeVizProps(_a) {
  var themeFunc = _a.themeFunc,
      props = __rest(_a, ["themeFunc"]);

  var defaultThemeColorVariables = ['defaultBackgroundColor', 'axisLineColor', 'axisLineHighlightColor', 'axisLabelColor', 'axisTitleColor', 'filterButtonDisabledColor', 'filterButtonActiveColor', 'filterTextColor', 'truncatedTextColor', 'filterSelectionColor', 'textShadowColor'];
  var defaultThemeColors = {};
  defaultThemeColorVariables.forEach(function (variable) {
    defaultThemeColors[variable] = themeFunc(variable);
  });

  if (props.dataSources) {
    var _props$dataSources$pr = props.dataSources.primary.data,
        fields = _props$dataSources$pr.fields,
        columns = _props$dataSources$pr.columns;
    return Object.assign({
      fields: fields.map(function (field) {
        return field.name ? field.name : field;
      }),
      columns: columns
    }, defaultThemeColors);
  }

  return defaultThemeColors;
};

exports.computeVizProps = computeVizProps;
var viz = withDashboardViz_1.default({
  ReactViz: exports.PureParallelCoordinates,
  vizConfig: config_1.default,
  computeVizProps: exports.computeVizProps,
  useIconPlaceholder: function useIconPlaceholder(dataSources, loading) {
    return singleValueUtils_1.isLoadingOrNoColumns(dataSources, loading);
  }
});
exports.themes = config_1.default.themes;
exports.default = viz;

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _toConsumableArray = __webpack_require__(39);

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var React = __webpack_require__(1);

var d3_array_1 = __webpack_require__(48);

var d3_scale_1 = __webpack_require__(73);

var T = __webpack_require__(0);

var i18n_1 = __webpack_require__(3);

var Message_1 = __webpack_require__(9);

var ParallelCoordinatesChart_1 = __webpack_require__(195);

var PureParallelCoordinates = function PureParallelCoordinates(_a) {
  var props = __rest(_a, []);

  var width = props.width,
      height = props.height,
      columns = props.columns,
      fields = props.fields,
      showNullAxis = props.showNullAxis,
      lineColor = props.lineColor,
      backgroundColor = props.backgroundColor,
      axisLineHighlightColor = props.axisLineHighlightColor,
      axisLineColor = props.axisLineColor,
      axisTitleColor = props.axisTitleColor,
      axisLabelColor = props.axisLabelColor,
      lineOpacity = props.lineOpacity,
      filterButtonDisabledColor = props.filterButtonDisabledColor,
      filterButtonActiveColor = props.filterButtonActiveColor,
      filterTextColor = props.filterTextColor,
      truncatedTextColor = props.truncatedTextColor,
      filterSelectionColor = props.filterSelectionColor,
      textShadowColor = props.textShadowColor,
      mode = props.mode;
  var minWidth = 200;
  var minHieght = 150;

  if (width < minWidth || height < minHieght) {
    return React.createElement(Message_1.default, {
      width: width,
      height: height,
      message: i18n_1._('Too small to render content'),
      level: "info"
    });
  }

  var nullOffsetHeight = 30;
  var axisPadding = 0.3;
  var minLabelHeight = 16;
  var truncatedCategoriesFlag = false; // Set up chart margins

  var margin = {
    top: 27,
    right: 20,
    bottom: 40,
    left: 40
  };

  if (showNullAxis) {
    margin.bottom += nullOffsetHeight;
  }

  var chartWidth = +width - margin.left - margin.right;
  var chartHeight = +height - margin.top - margin.bottom; // Data processing logic:

  var data = [];

  var _loop = function _loop(i) {
    var newObj = {};
    fields.forEach(function (field, index) {
      if (columns[index][i] === '') {
        newObj[field] = null;
      } else {
        newObj[field] = columns[index][i];
      }
    });
    data.push(newObj);
  };

  for (var i = 0; i < columns[0].length; i += 1) {
    _loop(i);
  } // Calculate horizontal and vertical scales


  var keys = Object.keys(data[0]);
  var yPositionScale = {}; // check whether the value is numeric

  var quantVal = function quantVal(v) {
    return !Number.isNaN(Number(v)) || v === null;
  }; // const dimensions = keys.filter(key => key !== 'name');


  var dimensions = _toConsumableArray(keys);

  dimensions.forEach(function (d) {
    var val = data.map(function (p) {
      return p[d];
    });

    if (val.every(quantVal)) {
      // set numeric axis scale
      yPositionScale[d] = d3_scale_1.scaleLinear().domain(d3_array_1.extent(data, function (p) {
        return Number(p[d]);
      })).range([chartHeight, 0]);
    } else {
      // categorical axis scale
      var categoryDomain = val.filter(function (v, i) {
        return val.indexOf(v) === i;
      });
      var updatedDomain;

      if (chartHeight / categoryDomain.length > minLabelHeight) {
        updatedDomain = _toConsumableArray(categoryDomain);
      } else {
        updatedDomain = categoryDomain.slice(0, Math.round(chartHeight / minLabelHeight));
        truncatedCategoriesFlag = true;
        data = data.filter(function (row) {
          return updatedDomain.includes(row[d]);
        });
      }

      yPositionScale[d] = d3_scale_1.scalePoint().domain(updatedDomain).range([chartHeight, 0]);
    }
  });
  var xPositionScale = d3_scale_1.scalePoint().padding(axisPadding).range([0, chartWidth]);
  var nullAxisScale = d3_scale_1.scalePoint().padding(0);
  return React.createElement(ParallelCoordinatesChart_1.default, {
    backgroundColor: backgroundColor,
    width: chartWidth,
    height: chartHeight,
    margin: margin,
    axisPadding: axisPadding,
    xPositionScale: xPositionScale,
    yPositionScale: yPositionScale,
    data: data,
    dimensions: dimensions,
    showNullAxis: showNullAxis,
    nullOffsetHeight: nullOffsetHeight,
    nullAxisScale: nullAxisScale,
    lineColor: lineColor,
    lineOpacity: lineOpacity,
    axisLineHighlightColor: axisLineHighlightColor,
    axisLineColor: axisLineColor,
    axisTitleColor: axisTitleColor,
    axisLabelColor: axisLabelColor,
    filterButtonDisabledColor: filterButtonDisabledColor,
    filterButtonActiveColor: filterButtonActiveColor,
    filterTextColor: filterTextColor,
    filterSelectionColor: filterSelectionColor,
    truncatedCategoriesFlag: truncatedCategoriesFlag,
    truncatedTextColor: truncatedTextColor,
    textShadowColor: textShadowColor,
    mode: mode
  });
};

PureParallelCoordinates.propTypes = {
  backgroundColor: T.string,
  width: T.number,
  height: T.number,
  fields: T.array,
  columns: T.array,
  lineColor: T.string,
  lineOpacity: T.number,
  showNullAxis: T.bool,
  axisLineHighlightColor: T.string,
  axisLineColor: T.string,
  axisTitleColor: T.string,
  axisLabelColor: T.string,
  filterButtonDisabledColor: T.string,
  filterButtonActiveColor: T.string,
  filterTextColor: T.string,
  filterSelectionColor: T.string,
  truncatedCategoriesFlag: T.bool,
  truncatedTextColor: T.string,
  textShadowColor: T.string,
  mode: T.string
};
PureParallelCoordinates.defaultProps = {
  backgroundColor: '#0b0c0e',
  width: 700,
  height: 400,
  fields: null,
  columns: [],
  lineColor: '#7B56DB',
  lineOpacity: 0.5,
  showNullAxis: true,
  axisLineHighlightColor: 'rgba(255, 255, 255, 0.98)',
  axisLineColor: 'rgb(129, 130, 133)',
  axisTitleColor: 'rgba(255, 255, 255, 0.7)',
  axisLabelColor: 'rgba(255, 255, 255, 0.7)',
  filterButtonDisabledColor: 'rgba(255, 255, 255, 0.3)',
  filterButtonActiveColor: '#3993FF',
  filterTextColor: 'rgba(255, 255, 255, 0.7)',
  filterSelectionColor: '#FFFFFF',
  truncatedTextColor: 'rgba(255, 255, 255, 0.5)',
  textShadowColor: '#111215',
  truncatedCategoriesFlag: false
};
exports.default = PureParallelCoordinates;

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _toConsumableArray = __webpack_require__(39);

var _slicedToArray = __webpack_require__(60);

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var React = __webpack_require__(1);

var styled_components_1 = __webpack_require__(4);

var d3_selection_1 = __webpack_require__(196);

var d3_brush_1 = __webpack_require__(197);

var d3_axis_1 = __webpack_require__(198);

var d3_drag_1 = __webpack_require__(199);

var rgb_hex_converter_1 = __webpack_require__(123);

var ParallelCoordinatesCanvas_1 = __webpack_require__(200);

var ChartDiv = styled_components_1.default.div.withConfig({
  displayName: "ParallelCoordinatesChart__ChartDiv",
  componentId: "sc-1oivyc-0"
})(["background-color:", ";width:", "px;height:", "px;position:relative;"], function (props) {
  return props.backgroundColor;
}, function (props) {
  return props.width + props.margin.left + props.margin.right;
}, function (props) {
  return props.height + props.margin.top + props.margin.bottom;
});
var PromptDiv = styled_components_1.default.div.withConfig({
  displayName: "ParallelCoordinatesChart__PromptDiv",
  componentId: "sc-1oivyc-1"
})(["position:absolute;top:", "px;display:flex;flex-direction:row;justify-content:space-between;font-size:12px;vertical-align:middle;margin-left:0;width:", "px;"], function (props) {
  return props.height + props.margin.top + props.margin.bottom - 27;
}, function (props) {
  return props.margin.left + props.width + props.margin.right;
});
var FilterButton = styled_components_1.default.button.attrs({
  'data-testid': 'clear-filter-button'
}).withConfig({
  displayName: "ParallelCoordinatesChart__FilterButton",
  componentId: "sc-1oivyc-2"
})(["margin-left:16px;display:flex;border:none;background:none;color:", ";cursor:pointer;font-size:12px;padding-top:0;padding-bottom:0;padding-left:0;"], function (props) {
  return props.filterButtonColor;
});

var ParallelCoordinatesChart = function ParallelCoordinatesChart(_a) {
  var props = __rest(_a, []);

  var width = props.width,
      height = props.height,
      margin = props.margin,
      axisPadding = props.axisPadding,
      data = props.data,
      dimensions = props.dimensions,
      xPositionScale = props.xPositionScale,
      yPositionScale = props.yPositionScale,
      showNullAxis = props.showNullAxis,
      nullOffsetHeight = props.nullOffsetHeight,
      nullAxisScale = props.nullAxisScale,
      lineColor = props.lineColor,
      lineOpacity = props.lineOpacity,
      backgroundColor = props.backgroundColor,
      axisLineHighlightColor = props.axisLineHighlightColor,
      axisLineColor = props.axisLineColor,
      axisTitleColor = props.axisTitleColor,
      axisLabelColor = props.axisLabelColor,
      filterButtonDisabledColor = props.filterButtonDisabledColor,
      filterButtonActiveColor = props.filterButtonActiveColor,
      filterTextColor = props.filterTextColor,
      truncatedCategoriesFlag = props.truncatedCategoriesFlag,
      truncatedTextColor = props.truncatedTextColor,
      filterSelectionColor = props.filterSelectionColor,
      textShadowColor = props.textShadowColor;
  var brushWidth = 16;
  var maxStrLength = 7; // axis dragging storage variable

  var dragging = {}; // brushing event handling variables

  var brush = d3_brush_1.brushY().extent([[-brushWidth / 2, 0], [brushWidth / 2, height]]);
  var updatedTextShadowColor = backgroundColor === 'transparent' ? textShadowColor : backgroundColor; // axis dragging feature state declaration

  var _React$useState = React.useState(dimensions),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      currentDimensions = _React$useState2[0],
      setCurrentDimensions = _React$useState2[1];

  var _React$useState3 = React.useState(false),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      dragStatus = _React$useState4[0],
      setDragStatus = _React$useState4[1]; // brushing feature state declaration


  var _React$useState5 = React.useState(data),
      _React$useState6 = _slicedToArray(_React$useState5, 2),
      selectedData = _React$useState6[0],
      setSelectedData = _React$useState6[1];

  var _React$useState7 = React.useState(new Map()),
      _React$useState8 = _slicedToArray(_React$useState7, 2),
      selections = _React$useState8[0],
      setSelections = _React$useState8[1];

  var _React$useState9 = React.useState(false),
      _React$useState10 = _slicedToArray(_React$useState9, 2),
      filterPromptState = _React$useState10[0],
      setFilterPromptState = _React$useState10[1];

  var _React$useState11 = React.useState(filterButtonDisabledColor),
      _React$useState12 = _slicedToArray(_React$useState11, 2),
      filterButtonColor = _React$useState12[0],
      setFilterButtonColor = _React$useState12[1];

  var svgRef = React.useRef(null); // update xPositionScale

  xPositionScale.domain(currentDimensions);
  nullAxisScale.domain(currentDimensions).range([0, width - 2 * axisPadding * xPositionScale.step()]); // axis dragging helper functions

  var position = function position(d) {
    var v = dragging[d];
    return v == null ? xPositionScale(d) : v;
  };

  var transition = function transition(g) {
    return g.transition().duration(500);
  }; // clear filter button


  var clearAllFilters = function clearAllFilters() {
    d3_selection_1.select(svgRef.current).selectAll('.brush').call(brush.move, null);
    setSelections(new Map());
    setSelectedData(data);
    setFilterPromptState(false);
    setFilterButtonColor(filterButtonDisabledColor);
  }; // truncated string to a length for categorical axis label


  var truncate = function truncate(str, maxLength) {
    var updatedSuffix = '...';
    var updateStr = str || 'null';

    if (Array.isArray(updateStr)) {
      updateStr = updateStr.join(', ');
    }

    if (typeof updateStr === 'string' && updateStr.length > maxLength) {
      updateStr = updateStr.substring(0, maxLength - 1);
      updateStr += updatedSuffix;
    }

    return updateStr;
  };

  React.useEffect(function () {
    // clean svg before drawing
    var svg = d3_selection_1.select(svgRef.current).html('').attr('height', height + margin.top + margin.bottom).attr('width', width + margin.left + margin.right).append('g').attr('transform', "translate(".concat(margin.left, ",").concat(margin.top, ")")); // Add a group element for each dimension

    var g = svg.selectAll('.dimension').data(currentDimensions).join('g').attr('class', 'dimension').attr('data-test', 'dimension').attr('transform', function (d) {
      return "translate(".concat(xPositionScale(d), ")");
    }).style('cursor', 'ew-resize'); // axis dragging event handling

    var dragstarted = function dragstarted(event, d) {
      d3_selection_1.select(event.sourceEvent.currentTarget).selectAll('.axis path').style('stroke', axisLineHighlightColor);
      d3_selection_1.select(event.sourceEvent.currentTarget).selectAll('.axis line').style('stroke', axisLineHighlightColor);
      dragging[d] = xPositionScale(d);
      setDragStatus(true);
    };

    var dragged = function dragged(event, d) {
      dragging[d] = Math.min(width, Math.max(0, event.x));
      currentDimensions.sort(function (a, b) {
        return position(a) - position(b);
      });
      xPositionScale.domain(currentDimensions);
      setCurrentDimensions(_toConsumableArray(currentDimensions));
      g.attr('transform', function (p) {
        return "translate(".concat(position(p), ")");
      });
    };

    function dragended(_event, d) {
      delete dragging[d];
      d3_selection_1.select(this).select('.axis path').style('stroke', axisLineColor);
      d3_selection_1.select(this).selectAll('.axis line').style('stroke', axisLineColor);
      transition(d3_selection_1.select(this).attr('transform', "translate(".concat(xPositionScale(d), ")")));
      setDragStatus(false);
    } // Add vertical axis and title.


    g.append('g').attr('class', 'axis vertical-axis').each(function (d, i, nodes) {
      if (yPositionScale[d].ticks) {
        //numerical axis
        d3_selection_1.select(nodes[i]).call(d3_axis_1.axisLeft(yPositionScale[d])).selectAll('text').append('title').text(function (d) {
          return d && d.toString();
        });
      } else {
        //categorical axis and truncated long labels
        d3_selection_1.select(nodes[i]).call(d3_axis_1.axisLeft(yPositionScale[d]).tickFormat(function (p) {
          return truncate(p, maxStrLength);
        })) // add title to show full value upon hover
        .selectAll('text').append('title').text(function (d) {
          return d && d.toString();
        });
      }
    }).selectAll('text').attr('fill', axisLabelColor).clone(true).lower().attr('fill', 'none').attr('stroke-width', 2).attr('stroke-linejoin', 'round').attr('stroke', "rgba(".concat(rgb_hex_converter_1.convertHexToRgb(updatedTextShadowColor)[0], ",").concat(rgb_hex_converter_1.convertHexToRgb(updatedTextShadowColor)[1], ",").concat(rgb_hex_converter_1.convertHexToRgb(updatedTextShadowColor)[2], ", ", 0.8, ")"));
    g.append('text').attr('class', 'axisTitle').attr('fill', axisTitleColor).attr('font-size', '12px').attr('text-anchor', 'middle').attr('y', -9).text(function (d) {
      return d;
    }); // drawing the null axis

    if (showNullAxis) {
      var nullAxisOffsetHeight = yPositionScale[currentDimensions[0]].range()[0] + nullOffsetHeight; // append null axis and title

      svg.append('g').attr('class', 'axis null-axis').attr('transform', "translate(".concat(xPositionScale.step() * axisPadding, ", ").concat(nullAxisOffsetHeight, ")")).attr('fill', 'none').call(d3_axis_1.axisTop(nullAxisScale).tickFormat(function () {
        return '';
      }));
      svg.append('text').attr('text-anchor', 'end').attr('font-size', '11px').attr('x', axisPadding * xPositionScale.step() - 9).attr('y', height + nullOffsetHeight).text('null').attr('fill', axisLabelColor);
    } // customize axis line and ticks based on themes


    d3_selection_1.selectAll('.axis .domain').style('stroke', axisLineColor);
    d3_selection_1.selectAll('.axis line').style('stroke', axisLineColor); // added dragging event functions to each dimension

    svg.selectAll('.dimension').call(d3_drag_1.drag().on('start', dragstarted).on('drag', dragged).on('end', dragended)); // brushing event handling

    var brushStart = function brushStart(event) {
      // prevent brushing event trigger clicking event
      if (event.sourceEvent) {
        event.sourceEvent.stopPropagation();
      }

      setFilterPromptState(true);
      setFilterButtonColor(filterButtonActiveColor); // style filter selection box rect

      d3_selection_1.selectAll('rect.selection').attr('fill', filterSelectionColor).attr('fill-opacity', '0.3').attr('stroke', 'none').attr('rx', '4px');
    }; // updated selectedData after brushing


    var brushed = function brushed(_ref, key) {
      var selection = _ref.selection;

      if (selection === null) {
        selections.delete(key);

        if (selections.size === 0) {
          setFilterButtonColor(filterButtonDisabledColor);
          setFilterPromptState(false);
        }
      } else if (yPositionScale[key].ticks) {
        // numeric scale (aka scaleLinear)
        // use .ticks to differentiate categorical vs numeric axis
        // d3.scaleLinear().ticks = true
        // d3.scalePoint().ticks = undefined
        selections.set(key, selection.map(yPositionScale[key].invert));
      } else {
        // categorical scale (aka scalePoint)
        selections.set(key, [selection[1], selection[0]]);
      }

      var selected = [];
      data.forEach(function (d) {
        // Categorical Axis: convert ordinal dimension's values to pixels
        // Numerical Axis: compare numerical values with dataSources
        var active = Array.from(selections).every(function (_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2),
              key = _ref3[0],
              _ref3$ = _slicedToArray(_ref3[1], 2),
              max = _ref3$[0],
              min = _ref3$[1];

          var newP = yPositionScale[key].ticks ? d[key] : yPositionScale[key](d[key]);
          return newP >= min && newP <= max;
        });

        if (active) {
          selected.push(d);
        }
      });
      setSelectedData(selected);
    };

    brush.on('start', brushStart).on('brush end', brushed); // add and store a brush for each axis.

    g.append('g').attr('class', 'brush').each(function (_d, i, nodes) {
      d3_selection_1.select(nodes[i]).call(brush);
    });
  }, [data, width, height, margin, dimensions, xPositionScale, yPositionScale, selections, axisLabelColor, updatedTextShadowColor, axisTitleColor, showNullAxis, axisLineColor, axisLineHighlightColor, nullOffsetHeight, filterButtonActiveColor, filterButtonDisabledColor, truncatedCategoriesFlag, truncatedTextColor]);
  return React.createElement("div", null, React.createElement(ChartDiv, {
    width: width,
    height: height,
    margin: margin,
    backgroundColor: backgroundColor
  }, React.createElement(ParallelCoordinatesCanvas_1.default, {
    width: width,
    height: height,
    margin: margin,
    xPositionScale: xPositionScale,
    yPositionScale: yPositionScale,
    data: data,
    currentDimensions: currentDimensions,
    selectedData: selectedData,
    dragStatus: dragStatus,
    showNullAxis: showNullAxis,
    nullOffsetHeight: nullOffsetHeight,
    lineColor: lineColor,
    lineOpacity: lineOpacity,
    backgroundColor: backgroundColor
  }), React.createElement("svg", {
    ref: svgRef,
    style: {
      position: 'relative'
    },
    "data-testid": "svg-layer",
    "data-test-dimensions": currentDimensions.length
  }), React.createElement(PromptDiv, {
    width: width,
    height: height,
    margin: margin
  }, React.createElement("div", {
    style: {
      display: 'flex',
      flexDirection: 'row'
    }
  }, React.createElement(FilterButton, {
    filterButtonColor: filterButtonColor,
    onClick: clearAllFilters
  }, "Clear filters"), React.createElement("span", {
    style: {
      display: filterPromptState ? 'flex' : 'none',
      color: filterTextColor
    },
    "data-testid": "line-selection-prompt"
  }, selectedData.length, "/", data.length, " lines selected")), React.createElement("span", {
    style: {
      display: truncatedCategoriesFlag ? 'flex' : 'none',
      color: truncatedTextColor,
      marginRight: 16
    },
    "data-testid": "truncated-data-warning"
  }, "Note: Your data is currently truncated due to a high amount of categorical values"))));
};

exports.default = ParallelCoordinatesChart;

/***/ }),
/* 196 */
/***/ (function(module, exports) {

module.exports = require("d3-selection");

/***/ }),
/* 197 */
/***/ (function(module, exports) {

module.exports = require("d3-brush");

/***/ }),
/* 198 */
/***/ (function(module, exports) {

module.exports = require("d3-axis");

/***/ }),
/* 199 */
/***/ (function(module, exports) {

module.exports = require("d3-drag");

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var React = __webpack_require__(1);

var rgb_hex_converter_1 = __webpack_require__(123);

var ParallelCoordinatesCanvas = function ParallelCoordinatesCanvas(_a) {
  var props = __rest(_a, []);

  var width = props.width,
      height = props.height,
      margin = props.margin,
      data = props.data,
      selectedData = props.selectedData,
      currentDimensions = props.currentDimensions,
      xPositionScale = props.xPositionScale,
      yPositionScale = props.yPositionScale,
      dragStatus = props.dragStatus,
      showNullAxis = props.showNullAxis,
      nullOffsetHeight = props.nullOffsetHeight,
      lineColor = props.lineColor,
      lineOpacity = props.lineOpacity,
      backgroundColor = props.backgroundColor;
  var foregroundRef = React.useRef(null);
  var backgroundRef = React.useRef(null); // Get the device pixel ratio, falling back to 1.

  var dpr = window.devicePixelRatio || 1; // draw path on two layers of canvas

  var path = function path(d, ctx, dimensions) {
    if (showNullAxis) {
      ctx.beginPath();
      dimensions.forEach(function (p, i) {
        var updatedYPosition;

        if (d[p] == null) {
          // add nullOffsetHeight to the bottom position of each axes and make it as the new yPosition of the null data
          updatedYPosition = yPositionScale[p].range()[0] + nullOffsetHeight;
        } else {
          // otherwise, yPosition stays at the same scale
          updatedYPosition = yPositionScale[p](d[p]);
        }

        if (i === 0) {
          ctx.moveTo(xPositionScale(p), updatedYPosition);
        } else {
          ctx.lineTo(xPositionScale(p), updatedYPosition);
        }
      });
      ctx.stroke();
    } else {
      // if nullOffset option is false
      var prev = null;
      dimensions.forEach(function (p) {
        if (prev !== null && d[p] !== null) {
          ctx.beginPath();
          ctx.moveTo(xPositionScale(prev), yPositionScale[prev](d[prev]));
          ctx.lineTo(xPositionScale(p), yPositionScale[p](d[p]));
          ctx.stroke();
        }

        if (d[p] !== null) {
          prev = p;
        } else {
          prev = null;
        }
      });
    }
  }; // draw all the lines on background canvas


  React.useEffect(function () {
    var backgroundCanvas = backgroundRef.current;
    var background = backgroundCanvas.getContext('2d');
    backgroundCanvas.width = (width + margin.left + margin.right) * dpr;
    backgroundCanvas.height = (height + margin.top + margin.bottom) * dpr; // ensure all drawing operations are scaled

    background.scale(dpr, dpr);
    background.clearRect(0, 0, width + margin.left + margin.right, height + margin.top + margin.bottom);
    background.translate(margin.left, margin.top);

    if (backgroundColor !== 'transparent') {
      background.strokeStyle = "rgba(".concat(rgb_hex_converter_1.convertHexToRgb(lineColor)[0], ", ").concat(rgb_hex_converter_1.convertHexToRgb(lineColor)[1], ", ").concat(rgb_hex_converter_1.convertHexToRgb(lineColor)[2], ", ").concat(lineOpacity, ")");
      data.forEach(function (d) {
        return path(d, background, currentDimensions);
      }); // backgroundColor-ed or default page color mask btw background and foreground lines

      background.globalAlpha = 0.7;
      background.fillStyle = backgroundColor;
      background.fillRect(-10, -10, width + margin.right, height + margin.bottom);
    } else {
      // set the background lines color to be 0.1 if backgroundColor is transparent
      background.strokeStyle = "rgba(".concat(rgb_hex_converter_1.convertHexToRgb(lineColor)[0], ", ").concat(rgb_hex_converter_1.convertHexToRgb(lineColor)[1], ", ").concat(rgb_hex_converter_1.convertHexToRgb(lineColor)[2], ", 0.1)");
      data.forEach(function (d) {
        return path(d, background, currentDimensions);
      });
    }
  }, [data, height, margin, width, currentDimensions, showNullAxis, nullOffsetHeight, lineColor, lineOpacity, backgroundColor, dpr]); // draw lines on the foreground canvas
  // when selectedData is updated via brushing, re-draw the foreground canvas

  React.useEffect(function () {
    var foregroundCanvas = foregroundRef.current;
    var foreground = foregroundCanvas.getContext('2d');
    foregroundCanvas.width = (width + margin.left + margin.right) * dpr;
    foregroundCanvas.height = (height + margin.top + margin.bottom) * dpr; // ensure all drawing operations are scaled

    foreground.scale(dpr, dpr);
    foreground.clearRect(0, 0, width + margin.left + margin.right, height + margin.top + margin.bottom);
    foreground.translate(margin.left, margin.top);
    foreground.strokeStyle = "rgba(".concat(rgb_hex_converter_1.convertHexToRgb(lineColor)[0], ", ").concat(rgb_hex_converter_1.convertHexToRgb(lineColor)[1], ", ").concat(rgb_hex_converter_1.convertHexToRgb(lineColor)[2], ", ").concat(lineOpacity, ")");
    selectedData.forEach(function (d) {
      return path(d, foreground, currentDimensions);
    });
  }, [selectedData, width, height, margin, currentDimensions, showNullAxis, nullOffsetHeight, lineColor, lineOpacity, dpr]);
  return React.createElement("div", {
    "data-testid": "canvas-div"
  }, React.createElement("canvas", {
    "data-testid": "background-canvas-layer",
    ref: backgroundRef,
    style: {
      position: 'absolute',
      display: !dragStatus ? 'flex' : 'none',
      width: width + margin.left + margin.right,
      height: height + margin.top + margin.bottom
    }
  }), React.createElement("canvas", {
    "data-testid": "foreground-canvas-layer",
    ref: foregroundRef,
    style: {
      position: 'absolute',
      display: !dragStatus ? 'flex' : 'none',
      width: width + margin.left + margin.right,
      height: height + margin.top + margin.bottom
    }
  }));
};

exports.default = ParallelCoordinatesCanvas;

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var i18n_1 = __webpack_require__(3);

var schemaUtils_1 = __webpack_require__(14);

var pick_1 = __webpack_require__(21);

var variables_1 = __webpack_require__(19);

var visualization_color_palettes_1 = __webpack_require__(41);

var visualization_icons_1 = __webpack_require__(42);

var VizBehavior_1 = __webpack_require__(5);

var configUtils_1 = __webpack_require__(8);

var VizCategory_1 = __webpack_require__(26);

var BackgroundColor_1 = __webpack_require__(44);

var dataContract = {
  requiredDataSources: [{
    name: 'primary',
    description: 'DataSource that powers the visualization'
  }],
  optionalDataSources: [],
  initialRequestParams: {
    primary: {
      offset: 0,
      count: 10000
    }
  }
};
var size = {
  initialWidth: 700,
  initialHeight: 400
};
var optionsSchema = {
  backgroundColor: {
    default: '> themes.defaultBackgroundColor',
    description: 'Specify the color used for the background. The default for enterprise light is "#FFFFFF". The default for enterprise dark is "#000000". The default for prisma dark is "#0b0c0e".',
    pattern: schemaUtils_1.COLOR_OR_TOKEN_PATTERN_WITH_RGBA,
    type: 'string'
  },
  lineColor: {
    default: visualization_color_palettes_1.VIZ_CATEGORICAL[0],
    description: 'Specify the dataSource color for the lines. The hex value format should be #FFFFFF.',
    pattern: schemaUtils_1.COLOR_OR_TOKEN_PATTERN_WITH_RGBA,
    type: 'string'
  },
  lineOpacity: {
    default: 0.5,
    description: 'Specify the opacity of the lines. Choose a number in the range of 0 - 1 (inclusive). You can also express the value as a percentage. For example, "0.50" in source or "50%" in UI.',
    type: 'number'
  },
  showNullAxis: {
    default: true,
    description: 'Select whether you would like to show or hide the null value axis.',
    type: 'boolean'
  }
};
var themes = {
  defaultBackgroundColor: function defaultBackgroundColor(props) {
    return pick_1.default({
      enterprise: {
        dark: variables_1.default.black(props),
        light: variables_1.default.backgroundColor(props)
      },
      prisma: variables_1.default.backgroundColorSidebar(props)
    })(props);
  },
  axisLineColor: function axisLineColor(props) {
    return pick_1.default({
      enterprise: {
        dark: variables_1.default.gray45(props),
        light: variables_1.default.gray60(props)
      },
      prisma: {
        dark: variables_1.default.neutral400(props),
        light: variables_1.default.syntaxGray(props)
      }
    })(props);
  },
  axisLineHighlightColor: function axisLineHighlightColor(props) {
    return pick_1.default({
      enterprise: variables_1.default.textColor(props),
      prisma: variables_1.default.contentColorActive(props)
    })(props);
  },
  axisTitleColor: function axisTitleColor(props) {
    return pick_1.default({
      enterprise: {
        dark: variables_1.default.textGray(props),
        light: variables_1.default.textColor(props)
      },
      prisma: variables_1.default.contentColorDefault(props)
    })(props);
  },
  axisLabelColor: function axisLabelColor(props) {
    return pick_1.default({
      enterprise: {
        dark: variables_1.default.textGray(props),
        light: variables_1.default.textColor(props)
      },
      prisma: variables_1.default.contentColorDefault(props)
    })(props);
  },
  filterButtonDisabledColor: function filterButtonDisabledColor(props) {
    return pick_1.default({
      enterprise: variables_1.default.textDisabledColor(props),
      prisma: variables_1.default.contentColorDisabled(props)
    })(props);
  },
  filterButtonActiveColor: function filterButtonActiveColor(props) {
    return pick_1.default({
      enterprise: variables_1.default.focusColor(props),
      prisma: variables_1.default.interactiveColorPrimary(props)
    })(props);
  },
  filterTextColor: function filterTextColor(props) {
    return pick_1.default({
      enterprise: {
        dark: variables_1.default.textGray(props),
        light: variables_1.default.textColor(props)
      },
      prisma: variables_1.default.contentColorDefault(props)
    })(props);
  },
  truncatedTextColor: function truncatedTextColor(props) {
    return pick_1.default({
      enterprise: variables_1.default.textGray(props),
      prisma: variables_1.default.contentColorMuted(props)
    })(props);
  },
  filterSelectionColor: function filterSelectionColor(props) {
    return pick_1.default({
      enterprise: {
        dark: '#FFFFFF',
        light: '#000000'
      },
      prisma: {
        dark: '#FFFFFF',
        light: '#000000'
      }
    })(props);
  },
  textShadowColor: function textShadowColor(props) {
    return pick_1.default({
      enterprise: {
        dark: variables_1.default.black(props),
        light: variables_1.default.backgroundColor(props)
      },
      prisma: variables_1.default.backgroundColorSection(props)
    })(props);
  }
};
var EDITOR_LABEL_WIDTH = 100;
var editorConfig = [{
  label: i18n_1._('Coloring'),
  layout: [BackgroundColor_1.default({
    themes: themes
  }), [{
    label: i18n_1._('Line Color'),
    option: 'lineColor',
    editor: 'editor.color',
    editorProps: {
      themes: themes
    }
  }, {
    label: i18n_1._('Line Opacity (%)'),
    option: 'lineOpacity',
    editor: 'editor.percent',
    editorProps: {
      themes: themes,
      min: 0
    }
  }]]
}, {
  label: i18n_1._('Display'),
  layout: [[{
    label: i18n_1._('Show Null Axis'),
    option: 'showNullAxis',
    editor: 'editor.toggle',
    editorProps: {
      labelPosition: 'left',
      labelWidth: EDITOR_LABEL_WIDTH
    }
  }]]
}];
/**
 * visualization configuration
 */

var config = {
  /**
   * unique viz key
   */
  key: 'splunk.parallelcoordinates',

  /**
   * viz name
   */
  name: 'Parallel Coordinates',
  category: VizCategory_1.VizCategory.COMPARISONS,
  status: 'preview',

  /**
   * viz icon
   */
  icon: visualization_icons_1.ParallelCoordinates,
  dataContract: dataContract,
  size: size,
  optionsSchema: optionsSchema,
  editorConfig: editorConfig,
  events: {},
  supports: [VizBehavior_1.VizBehavior.DYNAMIC_OPTIONS, VizBehavior_1.VizBehavior.EVENTS, VizBehavior_1.VizBehavior.PLACEHOLDER],
  themes: themes,
  requiredProps: []
};
exports.default = configUtils_1.enhanceConfig(config);

/***/ })
/******/ ]);
//# sourceMappingURL=ParallelCoordinates.js.map