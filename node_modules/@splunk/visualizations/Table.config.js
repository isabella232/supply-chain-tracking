/*!
 * Copyright © 2018 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 66);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports) {

module.exports = require("@splunk/ui-utils/i18n");

/***/ }),

/***/ 1:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _defineProperty = __webpack_require__(6);

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generatePrecisionValues = exports.getInitialPreset = exports.isDynamicOption = exports.enhanceOptionsSchemaWithDynamicOptions = exports.enhanceConfig = void 0;

var lodash_1 = __webpack_require__(4);

var schemaUtils_1 = __webpack_require__(3);

var VizBehavior_1 = __webpack_require__(2);

var dynamicOptionsDSLType = {
  type: 'string',
  pattern: schemaUtils_1.DYNAMIC_OPTIONS_DSL_PATTERN
};
/**
 * Helper function to extend an options schema with dynamic options DSL
 * @param optionsSchema a visualization's options schema
 * @returns an updated options schema that additionally allows strings starting with > for each option
 */

function enhanceOptionsSchemaWithDynamicOptions(optionsSchema) {
  var enhancedOptionsSchema = {};
  Object.keys(optionsSchema).forEach(function (key) {
    var _a = optionsSchema[key],
        title = _a.title,
        description = _a.description,
        readOnly = _a.readOnly,
        writeOnly = _a.writeOnly,
        examples = _a.examples,
        defaultValue = _a.default,
        type = _a.type,
        properties = _a.properties,
        patternProperties = _a.patternProperties,
        remainingSchemaEntry = __rest(_a, ["title", "description", "readOnly", "writeOnly", "examples", "default", "type", "properties", "patternProperties"]);

    var annotations = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, title !== undefined && {
      title: title
    }), description !== undefined && {
      description: description
    }), readOnly !== undefined && {
      readOnly: readOnly
    }), writeOnly !== undefined && {
      writeOnly: writeOnly
    }), examples !== undefined && {
      examples: examples
    }), defaultValue !== undefined && {
      default: defaultValue
    });

    if (type === 'object') {
      enhancedOptionsSchema[key] = Object.assign(Object.assign(Object.assign(Object.assign({}, remainingSchemaEntry), annotations), {
        type: type
      }), properties && {
        properties: enhanceOptionsSchemaWithDynamicOptions(properties)
      });

      if (patternProperties) {
        var enhancedPatternProperties = {};
        Object.keys(patternProperties).forEach(function (key) {
          enhancedPatternProperties = Object.assign(Object.assign({}, enhancedPatternProperties), enhanceOptionsSchemaWithDynamicOptions(_defineProperty({}, key, patternProperties[key])));
        });
        enhancedOptionsSchema[key].patternProperties = enhancedPatternProperties;
      }
    } else {
      enhancedOptionsSchema[key] = Object.assign(Object.assign({}, annotations), {
        anyOf: [Object.assign(Object.assign({}, type !== undefined && {
          type: type
        }), remainingSchemaEntry), dynamicOptionsDSLType]
      });
    }
  });
  return enhancedOptionsSchema;
}

exports.enhanceOptionsSchemaWithDynamicOptions = enhanceOptionsSchemaWithDynamicOptions;
/**
 * Helper function to enhance a Visualization Config as needed based on behaviors specified in supports block
 * @param vizConfig a Visualization Config
 * @returns an enhanced Visualization Config containing updated config entries based on behaviors it supports
 */

function enhanceConfig(vizConfig) {
  var enhancedConfig = vizConfig;

  if (vizConfig.supports.indexOf(VizBehavior_1.VizBehavior.DYNAMIC_OPTIONS) !== -1) {
    enhancedConfig.optionsSchema = enhanceOptionsSchemaWithDynamicOptions(vizConfig.optionsSchema);
  }

  return enhancedConfig;
}

exports.enhanceConfig = enhanceConfig;

function isDynamicOption(option) {
  return option && typeof option === 'string' && option.trim().startsWith('>') || false;
}

exports.isDynamicOption = isDynamicOption; // private helpers to improve readability of getInitialPreset
// this shouldn't be tested since this util isn't something that we expect to use outside of getInitialPreset

/**
 * this checks to make sure that all values within vizContext are compatible with the given preset's context to determine the initialPreset
 * if a preset has explicitly specified a key as being undefined, the vizContext must also has that key as undefined, or else this CANNOT be the initialPreset
 * the inverse is true; if a preset has key is NOT undefined, it must also be NOT undefined in the corresponding vizContext
 * the internal config contents are irrelevant (as the user could customize them in source), just as long as the presence of `undefined`s match up
 *
 * Since the presetConfigs have explicit undefined keys to override the existing config, we need to explicitly check the undefined values
 */

function hasCompatibleContexts(vizContext, presetContext) {
  var presetContextKeys = Object.keys(presetContext);
  return presetContextKeys.every(function (contextKey) {
    return presetContext[contextKey] === undefined && vizContext[contextKey] === undefined || presetContext[contextKey] !== undefined && vizContext[contextKey] !== undefined;
  });
}
/**
 * Checks to make sure that dynamic (non-dynamic) options in a given preset are also dynamic (non-dynamic) in the vizOptions
 */


function hasCompatibleOptions(vizOptions, presetOptions) {
  var presetOptionKeys = Object.keys(presetOptions);
  return presetOptionKeys.every(function (optionKey) {
    return isDynamicOption(presetOptions[optionKey]) === isDynamicOption(vizOptions[optionKey]);
  });
}
/**
 * Evaluates whether there is an initialPreset that fits the current state of vizContext + vizOptions
 * This function ignores extraneous vizOptions or vizContext keys, as they could be outside the scope of what the preset is intended to configure
 *
 * @param {Object} vizContext - the current vizContext definition
 * @param {Object} vizOptions - the current vizOptions definition
 * @param {PresetEntry[]} presets - the list of presets, one of which can be considered an initialPreset
 */


function getInitialPreset(vizContext, vizOptions, presets) {
  return presets.find(function (preset) {
    var presetContext = lodash_1.get(preset, ['value', 'context'], {});
    var presetOptions = lodash_1.get(preset, ['value', 'options'], {});
    var presetContextKeys = Object.keys(presetContext);
    var presetOptionKeys = Object.keys(presetOptions); // all presets have to explicitly specify which options to reset (i.e. need explicitly undefined keys)
    // if not, then the preset is invalid in config.ts

    if (presetContextKeys.length === 0 || presetOptionKeys.length === 0) return false;
    return hasCompatibleContexts(vizContext, presetContext) && hasCompatibleOptions(vizOptions, presetOptions);
  });
}

exports.getInitialPreset = getInitialPreset;
/**
 * generates number precision values for a Select editor
 *
 * @param {Number} numPrecisionValues - number of integer precision values to generate
 * @returns {{ label: string; value; string  }[]} array of { label, value } tuples
 */

function generatePrecisionValues(numPrecisionValues) {
  return lodash_1.range(0, numPrecisionValues + 1).map(function (i) {
    return {
      label: "".concat(i, " (0").concat(i > 0 ? '.' : '').concat('0'.repeat(i), ")"),
      value: i
    };
  });
}

exports.generatePrecisionValues = generatePrecisionValues;

/***/ }),

/***/ 15:
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/toConsumableArray");

/***/ }),

/***/ 16:
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/colorConstants");

/***/ }),

/***/ 2:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VizBehavior = void 0;
var VizBehavior;

(function (VizBehavior) {
  /**
   * Dynamic Options Behavior.
   * This allows visualization options to be powered by data
   *
   * **Example**
   *
   * sparklineValues: ">primary|seriesByIndex(0)"
   * would configure sparklineValues with an array of data points
   * coming from the first series in the primary datasource
   *
   */
  VizBehavior["DYNAMIC_OPTIONS"] = "dynamic-options";
  VizBehavior["EVENTS"] = "events";
  /**
   * Placeholder behavior: visualization will display a placeholder rather than fail if any of the `requiredProps` is
   * missing.
   * @type {string}
   */

  VizBehavior["PLACEHOLDER"] = "placeholder";
  VizBehavior["PAGE_AND_SORT"] = "page-and-sort";
})(VizBehavior = exports.VizBehavior || (exports.VizBehavior = {}));

/***/ }),

/***/ 3:
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/schemaUtils");

/***/ }),

/***/ 4:
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),

/***/ 5:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VizCategory = void 0;
var VizCategory;

(function (VizCategory) {
  VizCategory["SINGLE_VALUE"] = "Single Value";
  VizCategory["TRENDS"] = "Trends";
  VizCategory["COMPARISONS"] = "Comparisons";
  VizCategory["TABLE"] = "Table";
  VizCategory["GAUGE"] = "Gauge";
  VizCategory["DISTRIBUTIONS"] = "Distributions";
  VizCategory["CHOROPLETH"] = "Choropleth Maps";
  VizCategory["SHAPES"] = "Shapes";
  VizCategory["MISC"] = "misc";
  VizCategory["FLOW"] = "Flow";
  VizCategory["CORRELATION"] = "Correlation";
  VizCategory["SPATIAL"] = "Spatial";
})(VizCategory = exports.VizCategory || (exports.VizCategory = {}));

/***/ }),

/***/ 6:
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/defineProperty");

/***/ }),

/***/ 66:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _toConsumableArray = __webpack_require__(15);

Object.defineProperty(exports, "__esModule", {
  value: true
});

var i18n_1 = __webpack_require__(0);

var lodash_1 = __webpack_require__(4);

var schemaUtils_1 = __webpack_require__(3);

var colorConstants_1 = __webpack_require__(16);

var visualization_icons_1 = __webpack_require__(9);

var variables_1 = __webpack_require__(8);

var pick_1 = __webpack_require__(7);

var configUtils_1 = __webpack_require__(1);

var VizBehavior_1 = __webpack_require__(2);

var consts_1 = __webpack_require__(67);

var VizCategory_1 = __webpack_require__(5);

var dataContract = {
  requiredDataSources: [{
    name: 'primary',
    description: 'DataSource that powers the visualization'
  }],
  optionalDataSources: [],
  initialRequestParams: {
    primary: function primary() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return {
        offset: 0,
        count: options.count ? options.count : 10,
        requestTotalCount: true
      };
    }
  }
};
var size = {
  initialWidth: 300,
  initialHeight: 300
};
var defaultContext = {
  tableAlignByType: [{
    match: 'string',
    value: 'left'
  }, {
    match: 'number',
    value: 'right'
  }, {
    match: 'time',
    value: 'left'
  }, {
    match: 'color',
    value: 'left'
  }, {
    match: 'array',
    value: 'left'
  }, {
    match: 'sparkline',
    value: 'center'
  }, {
    match: 'unknown',
    value: 'left'
  }],
  tableCellTypeByType: [{
    match: 'string',
    value: 'TextCell'
  }, {
    match: 'number',
    value: 'TextCell'
  }, {
    match: 'time',
    value: 'TextCell'
  }, {
    match: 'color',
    value: 'TextCell'
  }, {
    match: 'array',
    value: 'ArrayCell'
  }, {
    match: 'sparkline',
    value: 'SparklineCell'
  }, {
    match: 'unknown',
    value: 'TextCell'
  }],
  // NOTE: These contexts are used by the table background color editor.
  // Please be careful removing/renaming/altering them.
  // There are unit tests and visual test that will capture breakages.
  tableRowColorMaxContrast: {
    colors: ['> themes.textColor', '> themes.inverseTextColor'],
    default: '> themes.textColor'
  },
  tableRowBackgroundColorEvenConfig: {
    channel: 'hsv.v',
    value: '*0.96'
  },
  tableHeaderBackgroundColorConfig: {
    channel: 'hsv.v',
    value: '*0.9'
  },
  tableRowBackgroundColorsByTheme: ['> themes.rowBackgroundColorOdd'],
  tableAltRowBackgroundColorsByTheme: ['> themes.rowBackgroundColorOdd', '> themes.rowBackgroundColorEven'],
  tableRowBackgroundColorsByBackgroundColor: ['> backgroundColor'],
  tableAltRowBackgroundColorsByBackgroundColor: ['> backgroundColor', '> backgroundColor | setColorChannel(tableRowBackgroundColorEvenConfig)']
};
var unitPositionConfig = {
  label: i18n_1._('Units Position'),
  editor: 'editor.select',
  option: 'unitPosition',
  editorProps: {
    values: [{
      label: i18n_1._('Before'),
      value: 'before'
    }, {
      label: i18n_1._('After'),
      value: 'after'
    }]
  }
};
var unitLabelConfig = {
  label: i18n_1._('Unit Label'),
  option: 'unit',
  editor: 'editor.text'
};
var sequentialColorConfig = [{
  to: 20,
  value: '#D41F1F'
}, {
  from: 20,
  to: 40,
  value: '#D94E17'
}, {
  from: 40,
  to: 60,
  value: '#CBA700'
}, {
  from: 60,
  to: 80,
  value: '#669922'
}, {
  from: 80,
  value: '#118832'
}];
var optionsSchema = {
  backgroundColor: {
    default: '> themes.defaultBackgroundColor',
    description: 'Specify the color for the background. You may use a dataSource to apply the color. The default for enterprise light is "#ffffff". The default for enterprise dark is "#000000". The default for prisma dark is "#0b0c0e".',
    pattern: schemaUtils_1.COLOR_OR_TOKEN_PATTERN,
    type: 'string'
  },
  columnFormat: {
    description: 'Allows users to set column formatting for individual columns.',
    type: 'object',
    patternProperties: {
      '.*': {
        description: 'Customization for column property',
        type: 'object',
        properties: {
          align: {
            description: 'Alignment for each cell in the column. Valid alignments include "left", "center", and "right".',
            type: 'array',
            items: {
              type: 'string',
              enum: consts_1.validAlignments.concat()
            }
          },
          cellTypes: {
            description: 'Cell renderer for each cell in the column. Valid cell renders include "TextCell", "ArrayCell", "SparklineCell".',
            type: 'array',
            items: {
              type: 'string',
              enum: consts_1.validCellRenderers.concat()
            }
          },
          data: {
            description: 'Array of datapoint to be displayed in the column rows.',
            type: 'array',
            items: {
              oneOf: [{
                type: 'string'
              }, {
                type: 'number'
              }, {
                type: 'array',
                items: {
                  type: ['string', 'number']
                }
              }]
            }
          },
          rowBackgroundColors: {
            description: 'Array of colors for background color of each row of the column of the table.',
            type: 'array',
            items: {
              type: 'string',
              pattern: schemaUtils_1.COLOR_OR_TOKEN_PATTERN
            }
          },
          rowColors: {
            description: 'Array of colors for text color of each row of the column of the table.',
            type: 'array',
            items: {
              type: 'string',
              pattern: schemaUtils_1.COLOR_OR_TOKEN_PATTERN
            }
          },
          sparklineAreaColors: {
            description: 'Array of colors for sparkline area color of each row of the column of the table.',
            type: 'array',
            items: {
              type: 'string',
              pattern: schemaUtils_1.COLOR_OR_TOKEN_PATTERN
            }
          },
          sparklineColors: {
            description: 'Array of colors for sparkline line color of each row of the column of the table.',
            type: 'array',
            items: {
              type: 'string',
              pattern: schemaUtils_1.COLOR_OR_TOKEN_PATTERN
            }
          },
          sparklineTypes: {
            description: 'Area or Line Sparkline. Valid sparkline types include "line", "area".',
            type: 'array',
            items: {
              type: 'string',
              enum: consts_1.validSparklineTypes.concat()
            }
          },
          textOverflow: {
            description: 'Controls how the text should be truncated within a particular column. Valid types include "anywhere", "break-word", "ellipsis". Defaults width for ellipsis is 100px.',
            type: 'string',
            pattern: schemaUtils_1.getPattern(consts_1.validTextOverflows),
            enum: consts_1.validTextOverflows.concat()
          },
          width: {
            description: 'Controls how wide in pixels (where 1px = 1/96th of 1in) the column should be displayed.',
            type: 'number'
          }
        }
      }
    }
  },
  count: {
    description: 'Specify the maximum number of rows to display.',
    type: 'number',
    default: 10
  },
  headers: {
    default: '> table | getField()',
    description: 'Array of headers to display on the table.',
    type: 'array',
    items: {
      type: 'string'
    }
  },
  headerVisibility: {
    default: 'inline',
    description: 'Header visibility can be none, fixed (docked) or inline.',
    pattern: schemaUtils_1.getPattern(consts_1.validHeaderVisibilities),
    enum: consts_1.validHeaderVisibilities.concat(),
    type: 'string'
  },
  paginateDataSourceKey: {
    default: 'primary',
    description: 'Use the specified datasource key for pagination and sorting.',
    type: 'string'
  },
  showRowNumbers: {
    default: false,
    description: 'Show row numbers in the first column.',
    type: 'boolean'
  },
  showInternalFields: {
    default: true,
    description: 'Specify whether to show internal fields that start with an underscore. The _time field will still be shown if false.',
    type: 'boolean'
  },
  table: {
    default: '> primary',
    description: 'Two dimensional array of data to be displayed in the table.',
    type: 'array',
    items: {
      type: 'array',
      items: {
        oneOf: [{
          type: 'string'
        }, {
          type: 'number'
        }, {
          type: 'array',
          items: {
            type: ['string', 'number']
          }
        }]
      }
    }
  },
  tableFormat: {
    description: 'Allows users to set table wide options.',
    type: 'object',
    properties: {
      align: {
        default: '> table | type() | matchValue(tableAlignByType)',
        description: 'Alignment for each cell in the table. Valid alignments include "left", "center", and "right".',
        type: 'array',
        items: {
          type: 'array',
          items: {
            type: 'string',
            enum: consts_1.validAlignments.concat()
          }
        }
      },
      cellTypes: {
        default: '> table | type() | matchValue(tableCellTypeByType)',
        description: 'Render the data in one of the supported cell type. Valid cell renders include "TextCell", "ArrayCell", "SparklineCell".',
        type: 'array',
        items: {
          type: 'array',
          items: {
            type: 'string',
            enum: consts_1.validCellRenderers.concat()
          }
        }
      },
      data: {
        description: 'Two dimensional data to be displayed in the table. This is usually formatted data instead of raw data from search.',
        type: 'array',
        items: {
          type: 'array',
          items: {
            oneOf: [{
              type: 'string'
            }, {
              type: 'number'
            }, {
              type: 'array',
              items: {
                type: ['string', 'number']
              }
            }]
          }
        }
      },
      headerBackgroundColor: {
        default: '> themes.defaultHeaderBackgroundColor',
        description: 'Background color of table header.',
        pattern: schemaUtils_1.COLOR_OR_TOKEN_PATTERN,
        type: 'string'
      },
      headerColor: {
        description: 'Text color of the table header.',
        pattern: schemaUtils_1.COLOR_OR_TOKEN_PATTERN,
        type: 'string'
      },
      rowBackgroundColors: {
        default: '> table | seriesByIndex(0) | pick(tableAltRowBackgroundColorsByTheme)',
        description: 'Array of colors for background color of each row of the table.',
        type: 'array',
        items: {
          type: 'array',
          items: {
            type: 'string',
            pattern: schemaUtils_1.COLOR_OR_TOKEN_PATTERN
          }
        }
      },
      rowColors: {
        description: 'Array of colors for text color of each row of the table.',
        type: 'array',
        items: {
          type: 'array',
          items: {
            type: 'string',
            pattern: schemaUtils_1.COLOR_OR_TOKEN_PATTERN_WITH_RGBA
          }
        }
      },
      sparklineAreaColors: {
        description: 'Array of colors for sparkline area of each row of the table.',
        type: 'array',
        items: {
          type: 'array',
          items: {
            type: 'string',
            pattern: schemaUtils_1.COLOR_OR_TOKEN_PATTERN
          }
        }
      },
      sparklineColors: {
        description: 'Array of colors for sparkline line of each row of the table.',
        type: 'array',
        items: {
          type: 'array',
          items: {
            type: 'string',
            pattern: schemaUtils_1.COLOR_OR_TOKEN_PATTERN
          }
        }
      },
      sparklineTypes: {
        description: 'Area or Line Sparkline. Valid sparkline types include "line", "area".',
        type: 'array',
        items: {
          type: 'array',
          items: {
            type: 'string',
            enum: consts_1.validSparklineTypes.concat()
          }
        }
      }
    }
  }
};
var themes = {
  defaultBackgroundColor: function defaultBackgroundColor(props) {
    return pick_1.default({
      enterprise: {
        dark: variables_1.default.black(props),
        light: variables_1.default.backgroundColor(props)
      },
      prisma: variables_1.default.backgroundColorSidebar(props)
    })(props);
  },
  defaultHeaderBackgroundColor: function defaultHeaderBackgroundColor(props) {
    return pick_1.default({
      enterprise: {
        dark: variables_1.default.gray20(props),
        light: variables_1.default.gray92(props)
      },
      prisma: variables_1.default.backgroundColor(props)
    })(props);
  },
  rowBackgroundColorEven: function rowBackgroundColorEven(props) {
    return pick_1.default({
      enterprise: {
        dark: variables_1.default.black(props),
        light: variables_1.default.gray96(props)
      },
      prisma: variables_1.default.backgroundColorPage(props)
    })(props);
  },
  rowBackgroundColorOdd: function rowBackgroundColorOdd(props) {
    return pick_1.default({
      enterprise: {
        dark: '#0D1012',
        light: variables_1.default.backgroundColor(props)
      },
      prisma: variables_1.default.backgroundColorSidebar(props)
    })(props);
  },
  textColor: function textColor(props) {
    return pick_1.default({
      enterprise: variables_1.default.textColor(props),
      prisma: variables_1.default.contentColorDefault(props)
    })(props);
  },
  inverseTextColor: function inverseTextColor(props) {
    return pick_1.default({
      enterprise: {
        dark: variables_1.default.contentColorInverted(props),
        light: variables_1.default.white(props) // equal to textColor in enterpriseDark

      },
      prisma: variables_1.default.contentColorInverted(props)
    })(props);
  }
};
var backgroundColorPaletteSet = new Set([].concat(_toConsumableArray(colorConstants_1.COLOR_EDITOR_PALETTE), _toConsumableArray(lodash_1.map(themes, function (t) {
  return lodash_1.get(t, 'defaultBackgroundColor');
}))));
var EDITOR_LABEL_WIDTH = 100;
var editorConfig = [{
  label: i18n_1._('Global Formatting'),
  layout: [[{
    label: i18n_1._('Rows Displayed'),
    option: 'count',
    editor: 'editor.number',
    editorProps: {
      labelPosition: 'left',
      min: 0,
      labelWidth: EDITOR_LABEL_WIDTH
    }
  }], [{
    label: i18n_1._('Row Numbers'),
    option: 'showRowNumbers',
    editor: 'editor.toggle',
    editorProps: {
      labelPosition: 'left',
      labelWidth: EDITOR_LABEL_WIDTH
    }
  }], [{
    label: i18n_1._('Internal Fields'),
    option: 'showInternalFields',
    editor: 'editor.toggle',
    editorProps: {
      labelPosition: 'left',
      labelWidth: EDITOR_LABEL_WIDTH
    }
  }], [{
    label: i18n_1._('Header Row'),
    option: 'headerVisibility',
    editor: 'editor.radioBar',
    editorProps: {
      values: [{
        label: i18n_1._('Inline'),
        value: 'inline'
      }, {
        label: i18n_1._('Fixed'),
        value: 'fixed'
      }, {
        label: i18n_1._('Hidden'),
        value: 'none'
      }],
      labelPosition: 'left',
      labelWidth: EDITOR_LABEL_WIDTH
    }
  }], [{
    key: 'backgroundColor',
    editor: 'editor.tableBackgroundColor',
    editorProps: {
      themes: themes,
      labelPosition: 'left',
      labelWidth: EDITOR_LABEL_WIDTH,
      palette: _toConsumableArray(backgroundColorPaletteSet)
    }
  }]]
}, {
  label: i18n_1._('Column Formatting'),
  layout: [[{
    label: i18n_1._(''),
    editor: 'editor.tableColumnFormatter',
    editorProps: {
      // Table column coloring does not adhere to same DSL structure as other dynamically colored options
      // we use the FormatterEditor directly and not the DynamicColorEditor's provided DSL builders
      columnColoringConfig: {
        coloringTypes: [{
          label: i18n_1._('Text'),
          value: 'rowColors'
        }, {
          label: i18n_1._('Background'),
          value: 'rowBackgroundColors'
        }],
        formatters: [{
          label: i18n_1._('Ranges'),
          value: 'rangeValue',
          defaults: {
            rowBackgroundColors: sequentialColorConfig,
            rowColors: sequentialColorConfig
          }
        }],
        themes: themes
      },
      defaultOptionsByType: {
        number: {
          thousandSeparated: false,
          unitPosition: 'after'
        },
        string: {
          unitPosition: 'after'
        }
      },
      flyoutConfig: {
        number: [[Object.assign({}, unitPositionConfig), Object.assign({}, unitLabelConfig)], [{
          label: i18n_1._('Precision'),
          option: 'precision',
          editor: 'editor.select',
          editorProps: {
            values: configUtils_1.generatePrecisionValues(20)
          }
        }, {
          label: i18n_1._('Thousand Separators'),
          option: 'thousandSeparated',
          editor: 'editor.radioBar',
          editorProps: {
            values: [{
              label: i18n_1._('Off'),
              value: false
            }, {
              label: i18n_1._('On'),
              value: true
            }]
          }
        }]],
        // TODO(fkurniawan): fill in with proper editor components
        sparkline: [],
        string: [[Object.assign({}, unitPositionConfig), Object.assign({}, unitLabelConfig)]],
        time: []
      },
      value: function value(_ref) {
        var context = _ref.context,
            options = _ref.options;
        return {
          context: context,
          columnFormat: options.columnFormat,
          tableFormat: options.tableFormat
        };
      }
    },
    key: 'TableColumnFormatterEditor'
  }]]
}];
/**
 * visualization configuration
 */

var config = {
  /**
   * unique viz key
   */
  key: 'splunk.table',

  /**
   * viz name
   */
  name: 'Table',
  category: VizCategory_1.VizCategory.TABLE,

  /**
   * viz icon
   */
  icon: visualization_icons_1.Table,
  dataContract: dataContract,
  size: size,
  defaultContext: defaultContext,
  optionsSchema: optionsSchema,
  editorConfig: editorConfig,
  events: {
    'cell.click': {
      description: 'triggered when user clicks a table cell'
    }
  },
  supports: [VizBehavior_1.VizBehavior.DYNAMIC_OPTIONS, VizBehavior_1.VizBehavior.EVENTS, VizBehavior_1.VizBehavior.PAGE_AND_SORT, VizBehavior_1.VizBehavior.PLACEHOLDER],
  themes: themes
};
exports.default = configUtils_1.enhanceConfig(config);

/***/ }),

/***/ 67:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validTextOverflows = exports.validAlignments = exports.validHeaderVisibilities = exports.validSparklineTypes = exports.validCellRenderers = void 0;
exports.validCellRenderers = ['TextCell', 'ArrayCell', 'SparklineCell'];
exports.validSparklineTypes = ['line', 'area'];
exports.validHeaderVisibilities = ['none', 'fixed', 'inline'];
exports.validAlignments = ['left', 'center', 'right'];
exports.validTextOverflows = ['anywhere', 'break-word', 'ellipsis'];

/***/ }),

/***/ 7:
/***/ (function(module, exports) {

module.exports = require("@splunk/themes/pick");

/***/ }),

/***/ 8:
/***/ (function(module, exports) {

module.exports = require("@splunk/themes/variables");

/***/ }),

/***/ 9:
/***/ (function(module, exports) {

module.exports = require("@splunk/visualization-icons");

/***/ })

/******/ });
//# sourceMappingURL=Table.config.js.map