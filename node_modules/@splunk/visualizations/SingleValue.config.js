/*!
 * Copyright © 2018 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 60);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("@splunk/ui-utils/i18n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _defineProperty = __webpack_require__(6);

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generatePrecisionValues = exports.getInitialPreset = exports.isDynamicOption = exports.enhanceOptionsSchemaWithDynamicOptions = exports.enhanceConfig = void 0;

var lodash_1 = __webpack_require__(4);

var schemaUtils_1 = __webpack_require__(3);

var VizBehavior_1 = __webpack_require__(2);

var dynamicOptionsDSLType = {
  type: 'string',
  pattern: schemaUtils_1.DYNAMIC_OPTIONS_DSL_PATTERN
};
/**
 * Helper function to extend an options schema with dynamic options DSL
 * @param optionsSchema a visualization's options schema
 * @returns an updated options schema that additionally allows strings starting with > for each option
 */

function enhanceOptionsSchemaWithDynamicOptions(optionsSchema) {
  var enhancedOptionsSchema = {};
  Object.keys(optionsSchema).forEach(function (key) {
    var _a = optionsSchema[key],
        title = _a.title,
        description = _a.description,
        readOnly = _a.readOnly,
        writeOnly = _a.writeOnly,
        examples = _a.examples,
        defaultValue = _a.default,
        type = _a.type,
        properties = _a.properties,
        patternProperties = _a.patternProperties,
        remainingSchemaEntry = __rest(_a, ["title", "description", "readOnly", "writeOnly", "examples", "default", "type", "properties", "patternProperties"]);

    var annotations = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, title !== undefined && {
      title: title
    }), description !== undefined && {
      description: description
    }), readOnly !== undefined && {
      readOnly: readOnly
    }), writeOnly !== undefined && {
      writeOnly: writeOnly
    }), examples !== undefined && {
      examples: examples
    }), defaultValue !== undefined && {
      default: defaultValue
    });

    if (type === 'object') {
      enhancedOptionsSchema[key] = Object.assign(Object.assign(Object.assign(Object.assign({}, remainingSchemaEntry), annotations), {
        type: type
      }), properties && {
        properties: enhanceOptionsSchemaWithDynamicOptions(properties)
      });

      if (patternProperties) {
        var enhancedPatternProperties = {};
        Object.keys(patternProperties).forEach(function (key) {
          enhancedPatternProperties = Object.assign(Object.assign({}, enhancedPatternProperties), enhanceOptionsSchemaWithDynamicOptions(_defineProperty({}, key, patternProperties[key])));
        });
        enhancedOptionsSchema[key].patternProperties = enhancedPatternProperties;
      }
    } else {
      enhancedOptionsSchema[key] = Object.assign(Object.assign({}, annotations), {
        anyOf: [Object.assign(Object.assign({}, type !== undefined && {
          type: type
        }), remainingSchemaEntry), dynamicOptionsDSLType]
      });
    }
  });
  return enhancedOptionsSchema;
}

exports.enhanceOptionsSchemaWithDynamicOptions = enhanceOptionsSchemaWithDynamicOptions;
/**
 * Helper function to enhance a Visualization Config as needed based on behaviors specified in supports block
 * @param vizConfig a Visualization Config
 * @returns an enhanced Visualization Config containing updated config entries based on behaviors it supports
 */

function enhanceConfig(vizConfig) {
  var enhancedConfig = vizConfig;

  if (vizConfig.supports.indexOf(VizBehavior_1.VizBehavior.DYNAMIC_OPTIONS) !== -1) {
    enhancedConfig.optionsSchema = enhanceOptionsSchemaWithDynamicOptions(vizConfig.optionsSchema);
  }

  return enhancedConfig;
}

exports.enhanceConfig = enhanceConfig;

function isDynamicOption(option) {
  return option && typeof option === 'string' && option.trim().startsWith('>') || false;
}

exports.isDynamicOption = isDynamicOption; // private helpers to improve readability of getInitialPreset
// this shouldn't be tested since this util isn't something that we expect to use outside of getInitialPreset

/**
 * this checks to make sure that all values within vizContext are compatible with the given preset's context to determine the initialPreset
 * if a preset has explicitly specified a key as being undefined, the vizContext must also has that key as undefined, or else this CANNOT be the initialPreset
 * the inverse is true; if a preset has key is NOT undefined, it must also be NOT undefined in the corresponding vizContext
 * the internal config contents are irrelevant (as the user could customize them in source), just as long as the presence of `undefined`s match up
 *
 * Since the presetConfigs have explicit undefined keys to override the existing config, we need to explicitly check the undefined values
 */

function hasCompatibleContexts(vizContext, presetContext) {
  var presetContextKeys = Object.keys(presetContext);
  return presetContextKeys.every(function (contextKey) {
    return presetContext[contextKey] === undefined && vizContext[contextKey] === undefined || presetContext[contextKey] !== undefined && vizContext[contextKey] !== undefined;
  });
}
/**
 * Checks to make sure that dynamic (non-dynamic) options in a given preset are also dynamic (non-dynamic) in the vizOptions
 */


function hasCompatibleOptions(vizOptions, presetOptions) {
  var presetOptionKeys = Object.keys(presetOptions);
  return presetOptionKeys.every(function (optionKey) {
    return isDynamicOption(presetOptions[optionKey]) === isDynamicOption(vizOptions[optionKey]);
  });
}
/**
 * Evaluates whether there is an initialPreset that fits the current state of vizContext + vizOptions
 * This function ignores extraneous vizOptions or vizContext keys, as they could be outside the scope of what the preset is intended to configure
 *
 * @param {Object} vizContext - the current vizContext definition
 * @param {Object} vizOptions - the current vizOptions definition
 * @param {PresetEntry[]} presets - the list of presets, one of which can be considered an initialPreset
 */


function getInitialPreset(vizContext, vizOptions, presets) {
  return presets.find(function (preset) {
    var presetContext = lodash_1.get(preset, ['value', 'context'], {});
    var presetOptions = lodash_1.get(preset, ['value', 'options'], {});
    var presetContextKeys = Object.keys(presetContext);
    var presetOptionKeys = Object.keys(presetOptions); // all presets have to explicitly specify which options to reset (i.e. need explicitly undefined keys)
    // if not, then the preset is invalid in config.ts

    if (presetContextKeys.length === 0 || presetOptionKeys.length === 0) return false;
    return hasCompatibleContexts(vizContext, presetContext) && hasCompatibleOptions(vizOptions, presetOptions);
  });
}

exports.getInitialPreset = getInitialPreset;
/**
 * generates number precision values for a Select editor
 *
 * @param {Number} numPrecisionValues - number of integer precision values to generate
 * @returns {{ label: string; value; string  }[]} array of { label, value } tuples
 */

function generatePrecisionValues(numPrecisionValues) {
  return lodash_1.range(0, numPrecisionValues + 1).map(function (i) {
    return {
      label: "".concat(i, " (0").concat(i > 0 ? '.' : '').concat('0'.repeat(i), ")"),
      value: i
    };
  });
}

exports.generatePrecisionValues = generatePrecisionValues;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VizBehavior = void 0;
var VizBehavior;

(function (VizBehavior) {
  /**
   * Dynamic Options Behavior.
   * This allows visualization options to be powered by data
   *
   * **Example**
   *
   * sparklineValues: ">primary|seriesByIndex(0)"
   * would configure sparklineValues with an array of data points
   * coming from the first series in the primary datasource
   *
   */
  VizBehavior["DYNAMIC_OPTIONS"] = "dynamic-options";
  VizBehavior["EVENTS"] = "events";
  /**
   * Placeholder behavior: visualization will display a placeholder rather than fail if any of the `requiredProps` is
   * missing.
   * @type {string}
   */

  VizBehavior["PLACEHOLDER"] = "placeholder";
  VizBehavior["PAGE_AND_SORT"] = "page-and-sort";
})(VizBehavior = exports.VizBehavior || (exports.VizBehavior = {}));

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/schemaUtils");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VizCategory = void 0;
var VizCategory;

(function (VizCategory) {
  VizCategory["SINGLE_VALUE"] = "Single Value";
  VizCategory["TRENDS"] = "Trends";
  VizCategory["COMPARISONS"] = "Comparisons";
  VizCategory["TABLE"] = "Table";
  VizCategory["GAUGE"] = "Gauge";
  VizCategory["DISTRIBUTIONS"] = "Distributions";
  VizCategory["CHOROPLETH"] = "Choropleth Maps";
  VizCategory["SHAPES"] = "Shapes";
  VizCategory["MISC"] = "misc";
  VizCategory["FLOW"] = "Flow";
  VizCategory["CORRELATION"] = "Correlation";
  VizCategory["SPATIAL"] = "Spatial";
})(VizCategory = exports.VizCategory || (exports.VizCategory = {}));

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/defineProperty");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("@splunk/themes/pick");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = require("@splunk/themes/variables");

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualization-icons");

/***/ }),
/* 10 */,
/* 11 */,
/* 12 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualization-color-palettes/editors/PresetPalettes");

/***/ }),
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_configUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _utils_configUtils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_utils_configUtils__WEBPACK_IMPORTED_MODULE_1__);


var StaticBackgroundColorEditor = {
  label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Static Background'),
  option: 'backgroundColor',
  editor: 'editor.color',
  showEditor: function showEditor(_ref) {
    var options = _ref.options;
    return !Object(_utils_configUtils__WEBPACK_IMPORTED_MODULE_1__["isDynamicOption"])(options.backgroundColor);
  }
};
/* harmony default export */ __webpack_exports__["default"] = (StaticBackgroundColorEditor);

/***/ }),
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultContext = void 0;
exports.defaultContext = {
  trendColorConfig: [{
    to: 0,
    value: '#9E2520'
  }, {
    from: 0,
    value: '#1C6B2D'
  }],
  majorColorConfig: [{
    to: 20,
    value: '#D41F1F'
  }, {
    from: 20,
    to: 40,
    value: '#D94E17'
  }, {
    from: 40,
    to: 60,
    value: '#CBA700'
  }, {
    from: 60,
    to: 80,
    value: '#669922'
  }, {
    from: 80,
    value: '#118832'
  }]
};

/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDynamicMajorColorEditor", function() { return getDynamicMajorColorEditor; });
/* harmony import */ var _splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_configUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _utils_configUtils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_utils_configUtils__WEBPACK_IMPORTED_MODULE_1__);


var getDynamicMajorColorEditor = function getDynamicMajorColorEditor(_ref) {
  var defaultContext = _ref.defaultContext,
      defaultPalettesConfig = _ref.defaultPalettesConfig;
  return {
    label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Dynamic Major Value'),
    option: 'majorColor',
    context: 'majorColorEditorConfig',
    editor: 'editor.dynamicColor',
    showEditor: function showEditor(_ref2) {
      var options = _ref2.options;
      return Object(_utils_configUtils__WEBPACK_IMPORTED_MODULE_1__["isDynamicOption"])(options.majorColor);
    },
    editorProps: {
      labelPosition: 'left',
      flyoutTitle: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Dynamic Coloring: Major Value'),
      formatters: [{
        label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Ranges'),
        value: 'rangeValue',
        defaults: {
          majorValue: defaultContext.majorColorConfig
        }
      } // TODO(fkurniawan): add back in when FormatterEditor supports full MatchValue editor
      // {
      //     label: _('Matches'),
      //     value: 'matchValue',
      //     defaults: {
      //         majorValue: [{ match: 'foo', value: '#f00' }],
      //     },
      // },
      ],
      dataSelectors: [{
        label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Major Value'),
        value: 'majorValue'
      }],
      defaultPalettesConfig: defaultPalettesConfig
    }
  };
};

/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDynamicTrendColorEditor", function() { return getDynamicTrendColorEditor; });
/* harmony import */ var _splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_configUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _utils_configUtils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_utils_configUtils__WEBPACK_IMPORTED_MODULE_1__);


var getDynamicTrendColorEditor = function getDynamicTrendColorEditor(_ref) {
  var defaultContext = _ref.defaultContext,
      defaultPalettesConfig = _ref.defaultPalettesConfig;
  return {
    label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Dynamic Trend'),
    option: 'trendColor',
    context: 'trendColorEditorConfig',
    editor: 'editor.dynamicColor',
    showEditor: function showEditor(_ref2) {
      var options = _ref2.options;
      return Object(_utils_configUtils__WEBPACK_IMPORTED_MODULE_1__["isDynamicOption"])(options.trendColor);
    },
    editorProps: {
      labelPosition: 'left',
      flyoutTitle: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Dynamic Coloring: Trend'),
      formatters: [{
        label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Ranges'),
        value: 'rangeValue',
        defaults: {
          trendValue: defaultContext.trendColorConfig
        }
      }],
      dataSelectors: [{
        label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Trend'),
        value: 'trendValue'
      }],
      defaultPalettesConfig: defaultPalettesConfig
    }
  };
};

/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDynamicBackgroundColorEditor", function() { return getDynamicBackgroundColorEditor; });
/* harmony import */ var _splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_configUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _utils_configUtils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_utils_configUtils__WEBPACK_IMPORTED_MODULE_1__);


var getDynamicBackgroundColorEditor = function getDynamicBackgroundColorEditor(_ref) {
  var defaultContext = _ref.defaultContext,
      defaultPalettesConfig = _ref.defaultPalettesConfig;
  return {
    label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Dynamic Background'),
    option: 'backgroundColor',
    context: 'backgroundColorEditorConfig',
    editor: 'editor.dynamicColor',
    showEditor: function showEditor(_ref2) {
      var options = _ref2.options;
      return Object(_utils_configUtils__WEBPACK_IMPORTED_MODULE_1__["isDynamicOption"])(options.backgroundColor);
    },
    editorProps: {
      labelPosition: 'left',
      flyoutTitle: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Dynamic Coloring: Background'),
      formatters: [{
        label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Ranges'),
        value: 'rangeValue',
        defaults: {
          majorValue: defaultContext.majorColorConfig,
          trendValue: defaultContext.trendColorConfig
        }
      } // TODO(fkurniawan): add back in when FormatterEditor supports full MatchValue editor
      // {
      //     label: _('Matches'),
      //     value: 'matchValue',
      //     defaults: {
      //         majorValue: [{ match: 'foo', value: '#f00' }],
      //     },
      // },
      ],
      dataSelectors: [{
        label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Major Value'),
        value: 'majorValue'
      }, {
        label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Trend'),
        value: 'trendValue'
      }],
      defaultPalettesConfig: defaultPalettesConfig
    }
  };
};

/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__);

var StaticMajorAndTrendLayout = [[{
  label: 'Unit Position',
  // todo: we need a new editor combining unit and position
  option: 'unitPosition',
  editor: 'editor.select',
  editorProps: {
    values: [{
      label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Before'),
      value: 'before'
    }, {
      label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('After'),
      value: 'after'
    }]
  },
  showEditor: function showEditor(_ref) {
    var options = _ref.options;
    return options.showValue || options.showValue === undefined;
  }
}, {
  label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Unit Label'),
  option: 'unit',
  editor: 'editor.text',
  showEditor: function showEditor(_ref2) {
    var options = _ref2.options;
    return options.showValue || options.showValue === undefined;
  }
}], [{
  label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Precision'),
  option: 'numberPrecision',
  editor: 'editor.number',
  editorProps: {
    min: 0,
    max: 20
  },
  showEditor: function showEditor(_ref3) {
    var options = _ref3.options;
    return options.showValue || options.showValue === undefined;
  }
}, {
  label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Major Value Size (px)'),
  option: 'majorFontSize',
  editor: 'editor.number',
  editorProps: {
    min: 1
  },
  placeholder: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Auto'),
  showEditor: function showEditor(_ref4) {
    var options = _ref4.options;
    return options.showValue || options.showValue === undefined;
  }
}], [{
  label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Trend Display'),
  option: 'trendDisplay',
  editor: 'editor.select',
  editorProps: {
    values: [{
      label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Percent'),
      value: 'percent'
    }, {
      label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Absolute'),
      value: 'absolute'
    }, {
      label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Off'),
      value: 'off'
    }]
  },
  showEditor: function showEditor(_ref5) {
    var options = _ref5.options;
    return options.showValue || options.showValue === undefined;
  }
}, {
  label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Trend Size (px)'),
  option: 'trendFontSize',
  editor: 'editor.number',
  editorProps: {
    min: 1
  },
  placeholder: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Auto'),
  showEditor: function showEditor(_ref6) {
    var options = _ref6.options;
    return options.showValue || options.showValue === undefined;
  },
  isDisabled: function isDisabled(_ref7) {
    var options = _ref7.options;
    return options.trendDisplay === 'off';
  }
}]];
/* harmony default export */ __webpack_exports__["default"] = (StaticMajorAndTrendLayout);

/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_configUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _utils_configUtils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_utils_configUtils__WEBPACK_IMPORTED_MODULE_1__);


var StaticMajorColorEditor = {
  label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Static Major Value'),
  option: 'majorColor',
  editor: 'editor.color',
  showEditor: function showEditor(_ref) {
    var options = _ref.options;
    return !Object(_utils_configUtils__WEBPACK_IMPORTED_MODULE_1__["isDynamicOption"])(options.majorColor);
  }
};
/* harmony default export */ __webpack_exports__["default"] = (StaticMajorColorEditor);

/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_configUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _utils_configUtils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_utils_configUtils__WEBPACK_IMPORTED_MODULE_1__);


var StaticTrendColorEditor = {
  label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Static Trend'),
  option: 'trendColor',
  editor: 'editor.color',
  showEditor: function showEditor(_ref) {
    var options = _ref.options;
    return !Object(_utils_configUtils__WEBPACK_IMPORTED_MODULE_1__["isDynamicOption"])(options.trendColor);
  },
  isDisabled: function isDisabled(_ref2) {
    var options = _ref2.options;
    return options.trendDisplay === 'off';
  }
};
/* harmony default export */ __webpack_exports__["default"] = (StaticTrendColorEditor);

/***/ }),
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var i18n_1 = __webpack_require__(0);

var schemaUtils_1 = __webpack_require__(3);

var PresetPalettes_1 = __webpack_require__(12);

var variables_1 = __webpack_require__(61);

var pick_1 = __webpack_require__(7);

var variables_2 = __webpack_require__(8);

var visualization_icons_1 = __webpack_require__(9);

var singleValueContext_1 = __webpack_require__(30);

var VizBehavior_1 = __webpack_require__(2);

var DynamicMajorColorEditor_1 = __webpack_require__(31);

var DynamicTrendColorEditor_1 = __webpack_require__(32);

var DynamicBackgroundColorEditor_1 = __webpack_require__(33);

var StaticMajorAndTrendLayout_1 = __webpack_require__(34);

var StaticMajorColorEditor_1 = __webpack_require__(35);

var StaticTrendColorEditor_1 = __webpack_require__(36);

var StaticBackgroundColorEditor_1 = __webpack_require__(20);

var configUtils_1 = __webpack_require__(1);

var VizCategory_1 = __webpack_require__(5);

var dataContract = {
  requiredDataSources: [{
    name: 'primary',
    description: 'DataSource that powers the visualization'
  }],
  optionalDataSources: [],
  initialRequestParams: {
    primary: {
      offset: 0,
      count: 10000
    }
  }
};
var size = {
  initialWidth: 250,
  initialHeight: 250
};
var optionsSchema = {
  backgroundColor: {
    default: '> themes.defaultBackgroundColor',
    description: 'Specify the color for the background. You may use a dataSource to apply the color. The default for enterprise light is "#ffffff". The default for enterprise dark is "#000000". The default for prisma dark is "#0b0c0e".',
    pattern: schemaUtils_1.COLOR_OR_TOKEN_PATTERN_WITH_RGBA,
    type: 'string'
  },
  majorColor: {
    default: '> themes.defaultFontColor',
    description: 'Specify the color for the major value.  You may use a dataSource to apply the color. The hex value format should be “#FFFFFF”. The default for enterprise light is "#000000". The default for enterprise dark is "#ffffff". The default for prisma dark is "rgba(255, 255, 255, 0.98)".',
    pattern: schemaUtils_1.COLOR_OR_TOKEN_PATTERN_WITH_RGBA,
    type: 'string'
  },
  majorFontSize: {
    description: 'Specify the font size (px) for the major value. By default the major value font size is calculated dynamically based on the available space.',
    type: 'number'
  },
  majorValue: {
    default: '> sparklineValues|lastPoint()',
    description: 'The major value to display in the visualization.',
    type: ['string', 'number']
  },
  majorValueField: {
    default: '> majorValue | getField()',
    description: 'The field name of major value.',
    type: 'string'
  },
  numberPrecision: {
    default: 0,
    maximum: 20,
    minimum: 0,
    description: 'Specify the number of decimal places to display. For example, to display 3 decimal places, use a value of 3. The maximum value is 20.',
    type: 'number'
  },
  shouldAbbreviateTrendValue: {
    default: false,
    description: 'Specify whether to abbreviate the trend value to 2 decimal points. A magnitude unit will be displayed.',
    type: 'boolean'
  },
  shouldSparklineAcceptNullData: {
    default: true,
    description: 'Specify whether to convert null and non-numeric values in the sparkline to 0.',
    type: 'boolean'
  },
  shouldUseThousandSeparators: {
    default: true,
    description: 'Specify whether numeric values use commas as thousandths separators.',
    type: 'boolean'
  },
  showSparklineAreaGraph: {
    default: false,
    description: 'Specify whether to show the sparkline as an area graph rather than a line.',
    type: 'boolean'
  },
  showSparklineTooltip: {
    default: false,
    description: 'Show a tooltip to display values on the sparkline.',
    type: 'boolean'
  },
  sparklineAreaColor: {
    default: '> sparklineStrokeColor',
    description: 'Specify the color for the sparkline area fill. You may use a dataSource to apply the color. The hex value format should be “#FFFFFF”. The graph area will have an opacity of 20% and will blend with the background color.',
    pattern: schemaUtils_1.COLOR_OR_TOKEN_PATTERN,
    type: 'string'
  },
  sparklineDisplay: {
    default: 'below',
    description: 'Specify how to display a sparkline.',
    pattern: schemaUtils_1.getPattern(['before', 'after', 'below', 'off']),
    type: 'string'
  },
  sparklineHighlightDots: {
    default: 0,
    description: 'Specify the number of markers, or dots, to display at the top of a sparkline area graph.',
    type: 'number'
  },
  sparklineHighlightSegments: {
    default: 0,
    description: 'Specify the number of segments to be highlighted at the top of a sparkline area graph.',
    type: 'number'
  },
  sparklineStrokeColor: {
    default: '> themes.defaultSparklineStrokeColor',
    description: 'Specify the color for the sparkline stroke. You may use a dataSource to apply the color. The hex value format should be “#FFFFFF”. The default for enterprise light is "#000000". The default for enterprise dark is "#ffffff". The default for prisma dark is "rgba(255, 255, 255, 0.98)".',
    pattern: schemaUtils_1.COLOR_OR_TOKEN_PATTERN_WITH_RGBA,
    type: 'string'
  },
  sparklineValues: {
    default: '> primary|seriesByPrioritizedTypes("number", "string", "time")',
    description: 'List of numerical values to display on a sparkline. If the values are string type, the sparkline will not be shown.',
    type: 'array',
    items: {
      type: ['string', 'number']
    }
  },
  trendColor: {
    default: '> themes.defaultFontColor',
    description: 'Specify the color for the trend value. You may use a dataSource to apply the color. The hex value format should be “#FFFFFF”. The default for enterprise light is "#000000". The default for enterprise dark is "#ffffff". The default for prisma dark is "rgba(255, 255, 255, 0.98)".',
    pattern: schemaUtils_1.COLOR_OR_TOKEN_PATTERN_WITH_RGBA,
    type: 'string'
  },
  trendDisplay: {
    default: 'absolute',
    description: 'Specify how to display the trend value.',
    pattern: schemaUtils_1.getPattern(['percent', 'absolute', 'off']),
    type: 'string'
  },
  trendFontSize: {
    description: 'Specify the font size (px) for the trend value. By default the trend value font size is calculated dynamically based on the available space.',
    type: 'number'
  },
  trendValue: {
    default: '> sparklineValues|delta(-2)',
    description: 'The trend value to display in the visualization.',
    type: 'number'
  },
  underLabel: {
    description: 'Specify the text that appears below the major value.',
    type: 'string'
  },
  underLabelFontSize: {
    default: 12,
    description: 'Specify the font size (px) for the under label text.',
    type: 'number'
  },
  unit: {
    description: 'Specify text to show next to the major value.',
    type: 'string'
  },
  unitPosition: {
    default: 'after',
    description: 'Specify whether the unit text should appear before or after the major value.',
    pattern: schemaUtils_1.getPattern(['before', 'after']),
    type: 'string'
  }
};
var basePresetContext = {
  majorColorEditorConfig: undefined,
  trendColorEditorConfig: undefined,
  backgroundColorEditorConfig: undefined
};
var basePresetOptions = {
  majorColor: undefined,
  trendColor: undefined,
  backgroundColor: undefined
};
var presets = [{
  // dummy context variables to allow for resetting of unused context states
  label: i18n_1._('None'),
  name: 'singleValue.none',
  value: {
    context: Object.assign({}, basePresetContext),
    options: Object.assign({}, basePresetOptions)
  }
}, {
  label: i18n_1._('Major Value'),
  name: 'singleValue.majorValue',
  value: {
    context: Object.assign(Object.assign({}, basePresetContext), {
      majorColorEditorConfig: singleValueContext_1.defaultContext.majorColorConfig
    }),
    options: Object.assign(Object.assign({}, basePresetOptions), {
      majorColor: '> majorValue | rangeValue(majorColorEditorConfig)'
    })
  }
}, {
  label: i18n_1._('Trend'),
  name: 'singleValue.trend',
  value: {
    context: Object.assign(Object.assign({}, basePresetContext), {
      trendColorEditorConfig: singleValueContext_1.defaultContext.trendColorConfig
    }),
    options: Object.assign(Object.assign({}, basePresetOptions), {
      trendColor: '> trendValue | rangeValue(trendColorEditorConfig)'
    })
  }
}, {
  label: i18n_1._('Major Value & Trend'),
  name: 'singleValue.majorValueAndTrend',
  value: {
    context: Object.assign(Object.assign({}, basePresetContext), {
      majorColorEditorConfig: singleValueContext_1.defaultContext.majorColorConfig,
      trendColorEditorConfig: singleValueContext_1.defaultContext.trendColorConfig
    }),
    options: Object.assign(Object.assign({}, basePresetOptions), {
      majorColor: '> majorValue | rangeValue(majorColorEditorConfig)',
      trendColor: '> trendValue | rangeValue(trendColorEditorConfig)'
    })
  }
}, {
  label: i18n_1._('Background'),
  name: 'singleValue.background',
  value: {
    context: Object.assign(Object.assign({}, basePresetContext), {
      backgroundColorEditorConfig: singleValueContext_1.defaultContext.majorColorConfig
    }),
    options: Object.assign(Object.assign({}, basePresetOptions), {
      backgroundColor: '> majorValue | rangeValue(backgroundColorEditorConfig)'
    })
  }
}]; // @TODO(pwied):
// remove once react-visualizations/SV was deprecated
// including unused sparklineFillColor

var LIGHTMODE_SPARKLINE_AREA_COLOR = '#171D21';
var DARKMODE_SPARKLINE_AREA_COLOR = '#FFFFFF';
var themes = {
  defaultFontColor: function defaultFontColor(props) {
    return pick_1.default({
      enterprise: {
        dark: variables_2.default.textColor(props),
        light: variables_2.default.gray20(props)
      },
      prisma: variables_2.default.contentColorActive(props)
    })(props);
  },
  defaultBlockFontColor: function defaultBlockFontColor(props) {
    return pick_1.default({
      enterprise: variables_2.default.white(props),
      prisma: variables_2.default.contentColorActive(props)
    })(props);
  },
  defaultBackgroundColor: function defaultBackgroundColor(props) {
    return pick_1.default({
      enterprise: {
        dark: variables_2.default.black(props),
        light: variables_2.default.backgroundColor(props)
      },
      prisma: variables_2.default.backgroundColorSidebar(props)
    })(props);
  },
  defaultSparklineStrokeColor: function defaultSparklineStrokeColor(props) {
    return pick_1.default({
      enterprise: variables_2.default.textColor(props),
      prisma: variables_2.default.contentColorActive(props)
    })(props);
  },
  // TODO(fkurniawan): update with SCP-36839
  sparklineSeverityColors: function sparklineSeverityColors(props) {
    return pick_1.default({
      enterprise: {
        dark: JSON.stringify({
          none: {
            background: variables_1.enterpriseDark.gray60,
            stroke: variables_1.enterpriseDark.white
          },
          low: {
            background: variables_1.enterpriseDark.successColorD50,
            stroke: variables_1.enterpriseDark.white
          },
          guarded: {
            background: variables_1.enterpriseDark.infoColorD50,
            stroke: variables_1.enterpriseDark.white
          },
          elevated: {
            background: variables_1.enterpriseDark.warningColorD50,
            stroke: variables_1.enterpriseDark.white
          },
          high: {
            background: variables_1.enterpriseDark.alertColorD50,
            stroke: variables_1.enterpriseDark.white
          },
          severe: {
            background: variables_1.enterpriseDark.errorColorD50,
            stroke: variables_1.enterpriseDark.white
          }
        }),
        light: JSON.stringify({
          none: {
            background: variables_1.enterprise.gray60,
            stroke: variables_1.enterprise.gray20
          },
          low: {
            background: variables_1.enterprise.successColorD50,
            stroke: variables_1.enterprise.white
          },
          guarded: {
            background: variables_1.enterprise.infoColorD50,
            stroke: variables_1.enterprise.white
          },
          elevated: {
            background: variables_1.enterprise.warningColorD50,
            stroke: variables_1.enterprise.white
          },
          high: {
            background: variables_1.enterprise.alertColorD50,
            stroke: variables_1.enterprise.white
          },
          severe: {
            background: variables_1.enterprise.errorColorD50,
            stroke: variables_1.enterprise.white
          }
        })
      },
      prisma: JSON.stringify({
        none: {
          background: variables_1.scp.gray52,
          stroke: variables_1.scp.white
        },
        low: {
          background: variables_1.scp.successColorD50,
          stroke: variables_1.scp.white
        },
        guarded: {
          background: variables_1.scp.infoColorD50,
          stroke: variables_1.scp.white
        },
        elevated: {
          background: variables_1.scp.warningColorD50,
          stroke: variables_1.scp.white
        },
        high: {
          background: variables_1.scp.alertColorD50,
          stroke: variables_1.scp.white
        },
        severe: {
          background: variables_1.scp.errorColorD50,
          stroke: variables_1.scp.white
        }
      })
    })(props);
  },
  // TODO(fkurniawan): update with SCP-36839
  sparklineFillColor: function sparklineFillColor(props) {
    return pick_1.default({
      enterprise: {
        light: LIGHTMODE_SPARKLINE_AREA_COLOR,
        dark: DARKMODE_SPARKLINE_AREA_COLOR
      },
      prisma: DARKMODE_SPARKLINE_AREA_COLOR
    })(props);
  }
};
var editorConfig = [{
  label: i18n_1._('Selected Data Field'),
  layout: [[{
    label: '',
    editor: 'editor.columnSelector',
    option: 'sparklineValues',
    context: 'sparklineValuesContext',
    editorProps: {
      dataSourceKey: 'primary',
      prepareValue: function prepareValue(definition) {
        var sparklineValues = definition.options.sparklineValues;
        return {
          context: {},
          options: {
            majorValue: "> sparklineValues | lastPoint()",
            trendValue: "> sparklineValues | delta(-2)",
            sparklineValues: sparklineValues
          }
        };
      }
    }
  }]]
}, {
  label: i18n_1._('Major Value & Trend'),
  layout: StaticMajorAndTrendLayout_1.default
}, {
  label: i18n_1._('Sparkline'),
  layout: [[{
    label: '',
    option: 'sparklineDisplay',
    editor: 'editor.radioBar',
    editorProps: {
      values: [{
        label: i18n_1._('Off'),
        value: 'off'
      }, {
        label: i18n_1._('Before'),
        value: 'before'
      }, {
        label: i18n_1._('Below'),
        value: 'below'
      }, {
        label: i18n_1._('After'),
        value: 'after'
      }]
    }
  }]]
}, {
  label: i18n_1._('Coloring'),
  layout: [[{
    label: 'Dynamic Elements',
    key: 'presetSelector',
    editor: 'editor.presetSelector',
    editorProps: {
      presets: presets,
      value: function value(_ref) {
        var context = _ref.context,
            options = _ref.options;
        var initialPreset = configUtils_1.getInitialPreset(context, options, presets);
        return initialPreset && initialPreset.label || null;
      }
    }
  }], [Object.assign(Object.assign({}, StaticMajorColorEditor_1.default), {
    editorProps: {
      labelPosition: 'left',
      themes: themes
    }
  })], [DynamicMajorColorEditor_1.getDynamicMajorColorEditor({
    defaultContext: singleValueContext_1.defaultContext,
    defaultPalettesConfig: PresetPalettes_1.defaultPalettesConfig
  })], [Object.assign(Object.assign({}, StaticTrendColorEditor_1.default), {
    editorProps: {
      labelPosition: 'left',
      themes: themes
    }
  })], [DynamicTrendColorEditor_1.getDynamicTrendColorEditor({
    defaultContext: singleValueContext_1.defaultContext,
    defaultPalettesConfig: PresetPalettes_1.defaultPalettesConfig
  })], [Object.assign(Object.assign({}, StaticBackgroundColorEditor_1.default), {
    editorProps: {
      labelPosition: 'left',
      themes: themes
    }
  })], [DynamicBackgroundColorEditor_1.getDynamicBackgroundColorEditor({
    defaultContext: singleValueContext_1.defaultContext,
    defaultPalettesConfig: PresetPalettes_1.defaultPalettesConfig
  })]]
}];
/**
 * visualization configuration
 */

var config = {
  /**
   * unique viz key
   */
  key: 'splunk.singlevalue',

  /**
   * viz name
   */
  name: 'Single Value',
  category: VizCategory_1.VizCategory.SINGLE_VALUE,

  /**
   * viz icon
   */
  icon: visualization_icons_1.SingleValue,
  dataContract: dataContract,
  size: size,
  defaultContext: singleValueContext_1.defaultContext,
  optionsSchema: optionsSchema,
  editorConfig: editorConfig,
  events: {
    'value.click': {
      description: 'trigger when user clicks major value',
      payloadKeys: ['majorValue', 'trendValue']
    }
  },
  supports: [VizBehavior_1.VizBehavior.DYNAMIC_OPTIONS, VizBehavior_1.VizBehavior.EVENTS, VizBehavior_1.VizBehavior.PLACEHOLDER],
  themes: themes,
  requiredProps: ['majorValue']
};
exports.default = configUtils_1.enhanceConfig(config);

/***/ }),
/* 61 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualization-themes/variables");

/***/ })
/******/ ]);
//# sourceMappingURL=SingleValue.config.js.map