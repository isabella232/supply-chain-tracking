import React from 'react';
import T from 'prop-types';
import { MetricsCollector } from '@splunk/dashboard-telemetry';
import KeyboardListener from './KeyboardListener';
import { FeatureFlags } from './FeatureFlags';
import BaseContentExportClient from './BaseContentExportClient';
export declare type UserMessageArgs = {
    message: string;
    level: string;
    sender?: string;
    stackTrace?: string;
};
declare type DocumentationLinks = Record<string, string>;
declare type DashboardContextType = {
    featureFlags?: FeatureFlags;
    contentExportClient?: Partial<BaseContentExportClient>;
    dataSourceContext?: unknown;
    geoRegistry?: unknown;
    iconRegistry?: unknown;
    imageRegistry?: unknown;
    keyboardListener?: KeyboardListener;
    logger?: unknown;
    userMessage?: (props: UserMessageArgs) => void;
};
export declare const DashboardContext: React.Context<DashboardContextType>;
/**
 * dashboard context provider that provides contextual objects over the react render tree
 * @param {*} param01
 *
 */
export interface DashboardContextProviderType extends DashboardContextType {
    children: React.ReactElement;
    metricsCollectors?: MetricsCollector | MetricsCollector[];
    timezone: {
        ianaTimezone?: string;
        serializedTimezone?: string;
        utcOffset?: number;
    };
    documentationLinks: DocumentationLinks;
}
declare const DashboardContextProvider: {
    ({ children, contentExportClient, dataSourceContext, featureFlags, geoRegistry, iconRegistry, imageRegistry, keyboardListener, logger, userMessage, metricsCollectors, timezone, documentationLinks, }: DashboardContextProviderType): React.ReactElement;
    propTypes: {
        /**
         * an icon registry instance
         */
        iconRegistry: T.Requireable<object>;
        /**
         * an image registry instance
         */
        imageRegistry: T.Requireable<object>;
        /**
         * a geo registry instance
         */
        geoRegistry: T.Requireable<object>;
        /**
         * global keyboard listener
         */
        keyboardListener: T.Requireable<KeyboardListener>;
        /**
         * global dashboard context object
         */
        dataSourceContext: T.Requireable<object>;
        /**
         * Client implementation of API workflow with Content Export service
         */
        contentExportClient: T.Requireable<object>;
        /**
         * Collection of feature flags to override/introduce
         */
        featureFlags: T.Requireable<object>;
        /**
         * children node
         */
        children: T.Requireable<any>;
        /**
         * logger for error, warning, and info level events
         */
        logger: T.Requireable<object>;
        /**
         * Callback for messages to display to user.
         *
         * Callback function parameters can expect this object interface as a first parameter:
         * {
         *     level: 'error' | 'warning' | 'info'
         *     message: String
         *     sender?: String
         *     stackTrace?: String
         * }
         *
         * For example, the callback could expect this object to contain these parameters:
         * {
         *     level: 'error',
         *     message: 'Example message to deliver to user.',
         *     sender: 'GridLayout', // optional parameter.
         *     stackTrace: 'Example stack trace' // optional parameter.
         * }
         */
        userMessage: T.Requireable<(...args: any[]) => any>;
        /**
         * list of user defined metrics collectors that send telemetry data to their backend API
         */
        metricsCollectors: T.Requireable<object>;
        /**
         * Pass timezone data in at least one format to have time data formatted in charts
         */
        timezone: T.Requireable<T.InferProps<{
            ianaTimezone: T.Requireable<string>;
            serializedTimezone: T.Requireable<string>;
            utcOffset: T.Requireable<number>;
        }>>;
        /**
         * Documentation links
         */
        documentationLinks: T.Requireable<object>;
    };
    defaultProps: {
        keyboardListener: KeyboardListener;
        dataSourceContext: {};
        userMessage: ({ message }: {
            message: string;
        }) => void;
        timezone: {};
        documentationLinks: {};
    };
};
declare const DashboardContextConsumer: React.Consumer<DashboardContextType>;
export declare const useFeatureFlags: () => FeatureFlags;
export declare const useDocumentationLinks: () => DocumentationLinks;
export { DashboardContext as default, DashboardContextProvider, DashboardContextConsumer, };
//# sourceMappingURL=DashboardContext.d.ts.map