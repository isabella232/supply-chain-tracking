import EventListener from './EventListener';
interface KeyMap {
    event: string;
    keys: string;
    when?: string;
    meta?: {
        snap?: boolean;
        dir?: 'n' | 'e' | 's' | 'w' | 'in' | 'out' | 'reset';
    };
}
/**
 * default keymap
 */
declare const DEFAULT_KEYMAP: KeyMap[];
/**
 * Create a new KeyboardListener
 * @param {Object} keyMapConfig
 * @return {KeyboardListener} KeyboardListener instance
 * @public
 */
declare class KeyboardListener extends EventListener {
    keyMaps: Record<string, KeyMap>;
    constructor(keyMapConfig?: KeyMap[]);
    /**
     * update key mapping config
     * @param {Object} keyMapConfig
     * @public
     */
    updateKeyMap: (keyMapConfig?: KeyMap[]) => void;
    /**
     * build reverse key mapping, using keys as the mapping key
     * @param {Object} keyMapConfig
     * @private
     */
    buildKeyMaps: (keyMapConfig: KeyMap[]) => void;
    /**
     * set up keyboard listener
     * @public
     */
    setup(): void;
    /**
     * teardown all keyboard listener
     * @public
     */
    teardown(): void;
    /** publish keyboard action event(s)
     * @param {Object} event
     * @private
     */
    publishKeyEvent: (eventName: string, payload: {
        snap?: boolean | undefined;
        dir?: "s" | "n" | "e" | "w" | "in" | "out" | "reset" | undefined;
    } & {
        [key: string]: string | boolean | (() => void) | undefined;
    }) => void;
}
export { KeyboardListener as default, DEFAULT_KEYMAP };
//# sourceMappingURL=KeyboardListener.d.ts.map