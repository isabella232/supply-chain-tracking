module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("prop-types");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("styled-components");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("@splunk/react-ui/Popover");

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "default", function() { return /* reexport */ src_Line_Line; });

// EXTERNAL MODULE: external "prop-types"
var external_prop_types_ = __webpack_require__(0);
var external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);

// EXTERNAL MODULE: external "react"
var external_react_ = __webpack_require__(1);
var external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);

// EXTERNAL MODULE: external "lodash"
var external_lodash_ = __webpack_require__(2);

// EXTERNAL MODULE: external "@splunk/react-ui/Popover"
var Popover_ = __webpack_require__(4);
var Popover_default = /*#__PURE__*/__webpack_require__.n(Popover_);

// EXTERNAL MODULE: external "styled-components"
var external_styled_components_ = __webpack_require__(3);
var external_styled_components_default = /*#__PURE__*/__webpack_require__.n(external_styled_components_);

// CONCATENATED MODULE: ./src/Line/LineStyles.js
function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n    padding: 3px 8px;\n    font-size: 12px;\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n    /* For fixing IE11 shows overflow part line issue */\n    overflow: hidden;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


var StyledSvg = external_styled_components_default.a.svg(_templateObject());
var StyledTooltip = external_styled_components_default.a.div(_templateObject2());

// CONCATENATED MODULE: ./src/Line/Line.jsx
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }







var Line_Line = /*#__PURE__*/function (_Component) {
  _inherits(Line, _Component);

  var _super = _createSuper(Line);

  function Line(props) {
    var _this;

    _classCallCheck(this, Line);

    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rest[_key - 1] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this, props].concat(rest));

    _defineProperty(_assertThisInitialized(_this), "handleCursorMount", function (el) {
      _this.setState({
        anchor: el
      });
    });

    _this.state = {
      anchor: null,
      currentPointX: null,
      open: false,
      rectArea: null,
      tooltip: null
    };
    return _this;
  }

  _createClass(Line, [{
    key: "getMax",
    value: function getMax() {
      var _this2 = this;

      var _this$props = this.props,
          data = _this$props.data,
          acceptNull = _this$props.acceptNull,
          yMax = _this$props.yMax;

      var dataMax = function dataMax() {
        return acceptNull ? Object(external_lodash_["max"])(_this2.fillNull(data)) : Object(external_lodash_["max"])(data);
      };

      return yMax !== undefined ? yMax : dataMax();
    }
  }, {
    key: "getMin",
    value: function getMin() {
      var _this3 = this;

      var _this$props2 = this.props,
          data = _this$props2.data,
          acceptNull = _this$props2.acceptNull,
          yMin = _this$props2.yMin;

      var dataMin = function dataMin() {
        return acceptNull ? Object(external_lodash_["min"])(_this3.fillNull(data)) : Object(external_lodash_["min"])(data);
      };

      return yMin !== undefined ? yMin : dataMin();
    }
    /**
     * Gets unit value of x axis.
     * @param {Number} xMargin - margin of x axis.
     * @return {Number} unit value of x axis.
     * @private
     */

  }, {
    key: "getXUnit",
    value: function getXUnit(xMargin) {
      var _this$props3 = this.props,
          data = _this$props3.data,
          width = _this$props3.width; // Calculate xUnit. Width substract the left margin and right margin, then divide by data length.

      var xUnit = (width - xMargin * 2) / (data.length > 1 ? data.length - 1 : 1);
      return Math.max(0, xUnit);
    }
    /**
     * Gets unit value of y axis.
     * @param {String} yMargin - margin of y axis.
     * @return {Number} unit value of y axis.
     * @private
     */

  }, {
    key: "getYUnit",
    value: function getYUnit(yMargin) {
      var height = this.props.height;
      var maxValue = this.getMax();
      var minValue = this.getMin(); // Calculate yUnit. Height substract the upper margin and bottom margin, then divide by value range of values in data.
      // if the maxValue equals minValue, means all values in data are the same, then, we need to set the YUnit at the mid value of Height.
      // So, draws sparkline right in the mid of the container.

      var yUnit = (height - yMargin * 2) / (maxValue - minValue || 2);
      return Math.max(0, yUnit);
    }
    /**
     * Get a list of arrays of points for drawing lines, based on acceptNull property
     * @method getSegmentSets
     * @param {Array} data
     * @param {Array} points
     * @returns {Array} List of datapoint sets used for drawing lines
     */

  }, {
    key: "getSegmentSets",
    value: function getSegmentSets(data, points) {
      var acceptNull = this.props.acceptNull;
      var lines = [];
      var currentLine = [];
      data.forEach(function (p, idx) {
        // Found null data
        if (!acceptNull && Object(external_lodash_["isNull"])(p)) {
          // need at least 2 points to draw a segment
          if (currentLine.length > 1) {
            lines.push(currentLine);
          } // reset for the next segment


          currentLine = [];
        } else {
          // data is good, add point data
          currentLine.push(points[idx]);
        }
      }); // Add the last line

      if (currentLine.length > 1) {
        lines.push(currentLine);
      }

      return lines;
    }
  }, {
    key: "fillNull",

    /**
     * Utility for fill null value with number 0.
     * @private
     */
    value: function fillNull() {
      var data = this.props.data;
      return data.map(function (value) {
        return value === null ? 0 : value;
      });
    }
    /**
     * Converts data to points in svg
     * @param {Number} xMargin - margin of x axis.
     * @param {Number} yMargin - margin of x axis.
     * @return {Array} points coordination.
     * @private
     */

  }, {
    key: "dataToPoints",
    value: function dataToPoints(xMargin, yMargin) {
      var data = this.props.data;

      if (data.length === 0) {
        return [];
      }

      var xUnit = this.getXUnit(xMargin);
      var yUnit = this.getYUnit(yMargin);
      var maxValue = this.getMax();
      var minValue = this.getMin();
      return data.map(function (val, idx) {
        return {
          x: idx * xUnit + xMargin,
          y: maxValue === minValue ? yUnit + yMargin : (maxValue - val) * yUnit + yMargin
        };
      }).map(function (p) {
        return [p.x, p.y];
      });
    }
    /**
     * Renders rect area for helping figure out which is the nearest point so that
     * render related cursor and tooltip.
     * @param {Array} points - array of points coordination.
     * @param {Number} xMargin - margin of x axis.
     * @return {Array} array of svg rect objects
     * @private
     */

  }, {
    key: "renderRect",
    value: function renderRect(points, xMargin) {
      var _this4 = this;

      var _this$props4 = this.props,
          data = _this$props4.data,
          height = _this$props4.height;
      var xUnit = this.getXUnit(xMargin);
      return points.map(function (p, i) {
        return (
          /*#__PURE__*/

          /* eslint-disable react/no-array-index-key */
          external_react_default.a.createElement("rect", {
            // eslint-disable-line jsx-a11y/mouse-events-have-key-events
            key: "".concat(i, "_").concat(p[0]),
            "data-test": "rect-".concat(i),
            x: p[0] - xUnit / 2 <= 0 ? 0 : p[0] - xUnit / 2,
            y: 0,
            width: i === 0 && data.length !== 1 ? xUnit / 2 : xUnit,
            height: height,
            style: {
              fillOpacity: 0
            },
            onMouseOver: function onMouseOver(e) {
              _this4.setState({
                open: data[i] !== null,
                rectArea: data[i] === null ? null : e.target,
                tooltip: data[i],
                currentPointX: p[0]
              });
            }
          })
          /* eslint-enable react/no-array-index-key */

        );
      });
    } // Renders area chart

  }, {
    key: "renderArea",
    value: function renderArea(points) {
      var _this$props5 = this.props,
          data = _this$props5.data,
          fillColor = _this$props5.fillColor,
          fillOpacity = _this$props5.fillOpacity,
          height = _this$props5.height,
          isArea = _this$props5.isArea;

      if (!isArea || points.length === 0) {
        return null;
      }

      var segments = this.getSegmentSets(data, points);
      segments = segments.map(function (s) {
        return s.concat([[s[s.length - 1][0], height], // down to bottom of graph
        [s[0][0], height], // over to below first data point
        s[0] // up to first data point to close the box
        ]);
      });
      return /*#__PURE__*/external_react_default.a.createElement("g", {
        "data-test": "area"
      }, segments.map(function (s) {
        return /*#__PURE__*/external_react_default.a.createElement("polyline", {
          key: "area".concat(s.join('')),
          points: s.join(' '),
          "data-test": "area-line",
          style: {
            fill: fillColor,
            fillOpacity: fillOpacity,
            strokeWidth: '0'
          }
        });
      }));
    }
  }, {
    key: "renderCursor",
    value: function renderCursor() {
      var _this$props6 = this.props,
          cursorStroke = _this$props6.cursorStroke,
          cursorStrokeWidth = _this$props6.cursorStrokeWidth,
          cursorStrokeLinecap = _this$props6.cursorStrokeLinecap,
          cursorStrokeDasharray = _this$props6.cursorStrokeDasharray,
          height = _this$props6.height;
      return this.state.rectArea !== null && /*#__PURE__*/external_react_default.a.createElement("line", {
        "data-test": "cursor",
        ref: this.handleCursorMount,
        x1: this.state.currentPointX,
        y1: 0,
        x2: this.state.currentPointX,
        y2: height,
        style: {
          stroke: cursorStroke,
          strokeWidth: cursorStrokeWidth,
          strokeLinecap: cursorStrokeLinecap,
          strokeDasharray: cursorStrokeDasharray
        }
      });
    }
  }, {
    key: "renderTooltip",
    value: function renderTooltip() {
      return this.state.anchor !== null && /*#__PURE__*/external_react_default.a.createElement(Popover_default.a, {
        "data-test": "tooltip",
        open: this.state.open,
        anchor: this.state.anchor,
        "data-test-value": this.state.tooltip,
        appearance: "dark",
        defaultPlacement: "above",
        animation: false
      }, /*#__PURE__*/external_react_default.a.createElement(StyledTooltip, null, this.state.anchor !== null ? this.state.tooltip : undefined));
    }
    /**
     * Renders one or more svg circles to highlight values on the sparkline
     * @method renderEndDots
     * @param {Array[Array[Number]]} points // x,y coordinates of values
     * @param {Number} dotsToShow           // number of end dots to display
     * @param {Number} xMargin              // used when calculating the dot radius
     * @returns {Object} React representation of SVG group
     * @private
     */

  }, {
    key: "renderEndDots",
    value: function renderEndDots(points, dotsToShow, xMargin) {
      var _this$props7 = this.props,
          endDotFillColor = _this$props7.endDotFillColor,
          endDotRadius = _this$props7.endDotRadius,
          endDotStroke = _this$props7.endDotStroke,
          endDotStrokeWidth = _this$props7.endDotStrokeWidth;
      return /*#__PURE__*/external_react_default.a.createElement("g", null, points.slice(-dotsToShow).map(function (point) {
        return /*#__PURE__*/external_react_default.a.createElement("circle", {
          key: "end-dot".concat(point[0]).concat(point[1]),
          "data-test": "end-dot",
          cx: point[0],
          cy: point[1],
          r: endDotRadius === 0 ? xMargin : endDotRadius,
          style: {
            fill: endDotFillColor,
            stroke: endDotStroke,
            strokeWidth: endDotStrokeWidth
          }
        });
      }));
    }
    /**
     * Renders the line(s) above the area graph
     * @method renderPolyline
     * @param {Array} points
     * @returns {Object} SVG Group of polylines
     */

  }, {
    key: "renderPolyline",
    value: function renderPolyline(points) {
      var _this$props8 = this.props,
          data = _this$props8.data,
          lineColor = _this$props8.lineColor,
          lineLength = _this$props8.lineLength,
          lineStrokeWidth = _this$props8.lineStrokeWidth;
      var linePoints = Object(external_lodash_["isFinite"])(lineLength) && lineLength > 0 ? lineLength : points.length;
      var lines = this.getSegmentSets(data.slice(-linePoints), points.slice(-linePoints));
      return /*#__PURE__*/external_react_default.a.createElement("g", {
        "data-test": "sparkline"
      }, lines.map(function (lineData) {
        return /*#__PURE__*/external_react_default.a.createElement("polyline", {
          key: "line".concat(lineData.join('')),
          "data-test": "polyline",
          style: {
            fill: 'none',
            stroke: lineColor,
            strokeWidth: lineStrokeWidth,
            strokeLinejoin: 'round',
            strokeLinecap: 'round'
          },
          points: lineData.join(' ')
        });
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var _this5 = this;

      var _this$props9 = this.props,
          data = _this$props9.data,
          elementRef = _this$props9.elementRef,
          showTooltip = _this$props9.showTooltip,
          showEndDot = _this$props9.showEndDot,
          endDotRadius = _this$props9.endDotRadius,
          endDotStrokeWidth = _this$props9.endDotStrokeWidth,
          endDotCount = _this$props9.endDotCount,
          height = _this$props9.height,
          isArea = _this$props9.isArea,
          lineStrokeWidth = _this$props9.lineStrokeWidth,
          width = _this$props9.width;

      if (data.length === 0) {
        return null;
      } // Calculate horizontal and vertical margin so that fit line or end dot.


      var xMargin = endDotRadius + endDotStrokeWidth / 2;
      var yMargin = Math.max(lineStrokeWidth / 2, endDotRadius + endDotStrokeWidth / 2);
      var points = this.dataToPoints(xMargin, yMargin);
      var dotsToShow = Math.max(showEndDot && 1, Object(external_lodash_["isFinite"])(endDotCount) && endDotCount > 0 && endDotCount);
      return /*#__PURE__*/external_react_default.a.createElement("div", _extends({
        // eslint-disable-line jsx-a11y/mouse-events-have-key-events
        "data-test": "line",
        "data-test-type": isArea ? 'area' : 'line',
        onMouseOut: function onMouseOut() {
          _this5.setState({
            open: false,
            anchor: null,
            rectArea: null,
            currentPointX: null
          });
        },
        ref: elementRef
      }, Object(external_lodash_["omit"])(this.props, Object(external_lodash_["keys"])(Line.propTypes))), /*#__PURE__*/external_react_default.a.createElement(StyledSvg, {
        height: height,
        width: width
      }, /*#__PURE__*/external_react_default.a.createElement("g", null, this.renderCursor(), this.renderPolyline(points), this.renderArea(points), dotsToShow && this.renderEndDots(points, dotsToShow, xMargin), showTooltip ? this.renderRect(points, xMargin) : null, showTooltip ? this.renderTooltip() : null)));
    }
  }]);

  return Line;
}(external_react_["Component"]);

_defineProperty(Line_Line, "propTypes", {
  /**
   * If true, data can contain `null` as a value and is treated as `0`. If false, this throws error when data contains `null`.
   */
  acceptNull: external_prop_types_default.a.bool,

  /** Array of numbers. These data numbers are converted to points and show on sparkline. */
  data: function data(props) {
    if (!Object(external_lodash_["isArray"])(props.data)) {
      return new Error('Data provided to Sparkline must be an array.');
    }

    if (props.acceptNull && !props.data.every(function (value) {
      return Object(external_lodash_["isNull"])(value) || Object(external_lodash_["isFinite"])(value);
    })) {
      return new Error('Data provided to Sparkline must be finite numbers or null.');
    }

    if (!props.acceptNull && !props.data.every(function (value) {
      return Object(external_lodash_["isFinite"])(value);
    })) {
      return new Error('Data provided to Sparkline must be finite numbers.');
    }

    return null;
  },

  /** A React ref which is set to the DOM element when the component mounts and `null` when it unmounts. */
  elementRef: external_prop_types_default.a.oneOfType([external_prop_types_default.a.func, external_prop_types_default.a.object]),

  /** Sets the number of end dots to display. When showEndDot is set to `true`, endDotCount is at least 1. If set to a positive value, this overrides showEndDot. */
  endDotCount: external_prop_types_default.a.number,

  /** Fills color to the end dot. */
  endDotFillColor: external_prop_types_default.a.string,

  /**
   * Sets end dot radius. End dot radius must be less than or equal to the margin. By default, its value equals the margin.
   */
  endDotRadius: external_prop_types_default.a.number,

  /** Sets end dot circle stroke color. */
  endDotStroke: external_prop_types_default.a.string,

  /** Sets end dot circle stroke width in pixels. */
  endDotStrokeWidth: external_prop_types_default.a.number,

  /** Fills color to area. */
  fillColor: external_prop_types_default.a.string,

  /** Fills opacity to area. Value must be in 0 ~ 1. */
  fillOpacity: external_prop_types_default.a.string,

  /** Sets cursor stroke color. */
  cursorStroke: external_prop_types_default.a.string,

  /** Sets cursor stroke width in pixels. */
  cursorStrokeWidth: external_prop_types_default.a.number,

  /** Sets cursor line cap style. */
  cursorStrokeLinecap: external_prop_types_default.a.oneOf(['butt', 'round', 'square']),

  /** Sets cursor dash array style. */
  cursorStrokeDasharray: external_prop_types_default.a.string,

  /**
   * Container height. If this value is specified, sparkline calculates the size using this height. If height isn't specified,
   * sparkline figures out the container height by itself.
   */
  height: external_prop_types_default.a.number.isRequired,

  /** When set to `true`, sparkline shows as area. */
  isArea: external_prop_types_default.a.bool,

  /** The sparkline line color. */
  lineColor: external_prop_types_default.a.string,

  /** Allows user to draw only the last data points for the line. */
  lineLength: external_prop_types_default.a.number,

  /** The sparkline line stroke width in pixels. */
  lineStrokeWidth: external_prop_types_default.a.number,

  /** Enable to show end dot. */
  showEndDot: external_prop_types_default.a.bool,

  /** Enable to show tooltip. */
  showTooltip: external_prop_types_default.a.bool,

  /** Sets the data value range and maximum value shown on sparkline. */
  yMax: external_prop_types_default.a.number,

  /** Sets the data value range and minimum value shown on sparkline. */
  yMin: external_prop_types_default.a.number,

  /**
   * The width of the container.
   */
  width: external_prop_types_default.a.number.isRequired
});

_defineProperty(Line_Line, "defaultProps", {
  acceptNull: false,
  data: [],
  showTooltip: true,
  endDotCount: 0,
  showEndDot: false,
  endDotRadius: 0,
  endDotFillColor: 'white',
  endDotStroke: 'black',
  endDotStrokeWidth: 0,
  fillColor: '#65a637',
  fillOpacity: '.1',
  cursorStroke: '#5184AF',
  cursorStrokeWidth: 3,
  cursorStrokeLinecap: 'square',
  cursorStrokeDasharray: '1, 5',
  isArea: false,
  lineColor: '#65a637',
  lineStrokeWidth: 1
});

/* harmony default export */ var src_Line_Line = (Line_Line);
// CONCATENATED MODULE: ./src/Line/index.js


/***/ })
/******/ ]);