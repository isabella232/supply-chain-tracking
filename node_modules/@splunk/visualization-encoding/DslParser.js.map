{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///./src/DslParser.ts","webpack:///external \"nearley\"","webpack:///./src/nearley/generated/vizparser.js"],"names":["x","grammar","Lexer","ParserRules","name","symbols","postprocess","d","id","literal","JSON","parseInt","parseFloat","e","arg0","otherArgs","args","r","type","v","depth","stack","item","flat","ParserStart","module","window"],"mappings":"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","file":"DslParser.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","import { Expr } from './AST';\nimport { Parser } from 'nearley';\nimport grammar = require('./nearley/generated/vizparser.js');\n\nexport class DslParser {\n    static cache = {};\n    public static parse(dsl: string): Expr[] {\n        if (DslParser.cache[dsl]) {\n            return [...DslParser.cache[dsl]];\n        }\n        const parser = new Parser(grammar);\n        parser.feed(dsl);\n        if (parser.results.length > 1) {\n            console.warn(`Ambiguous parse of '${dsl}'`);\n        }\n        if (parser.results.length == 0) {\n            console.warn(`No parsed results for '${dsl}'`);\n        }\n        DslParser.cache[dsl] = [...parser.results[0]];\n        return parser.results[0];\n    }\n}\n","module.exports = require(\"nearley\");","// Generated automatically by nearley, version 2.19.5\n// http://github.com/Hardmath123/nearley\n(function () {\n    function id(x) {\n        return x[0];\n    }\n    var grammar = {\n        Lexer: undefined,\n        ParserRules: [\n            { name: '_$ebnf$1', symbols: [] },\n            {\n                name: '_$ebnf$1',\n                symbols: ['_$ebnf$1', 'wschar'],\n                postprocess: function arrpush(d) {\n                    return d[0].concat([d[1]]);\n                },\n            },\n            {\n                name: '_',\n                symbols: ['_$ebnf$1'],\n                postprocess: function (d) {\n                    return null;\n                },\n            },\n            { name: '__$ebnf$1', symbols: ['wschar'] },\n            {\n                name: '__$ebnf$1',\n                symbols: ['__$ebnf$1', 'wschar'],\n                postprocess: function arrpush(d) {\n                    return d[0].concat([d[1]]);\n                },\n            },\n            {\n                name: '__',\n                symbols: ['__$ebnf$1'],\n                postprocess: function (d) {\n                    return null;\n                },\n            },\n            { name: 'wschar', symbols: [/[ \\t\\n\\v\\f]/], postprocess: id },\n            { name: 'dqstring$ebnf$1', symbols: [] },\n            {\n                name: 'dqstring$ebnf$1',\n                symbols: ['dqstring$ebnf$1', 'dstrchar'],\n                postprocess: function arrpush(d) {\n                    return d[0].concat([d[1]]);\n                },\n            },\n            {\n                name: 'dqstring',\n                symbols: [{ literal: '\"' }, 'dqstring$ebnf$1', { literal: '\"' }],\n                postprocess: function (d) {\n                    return d[1].join('');\n                },\n            },\n            { name: 'sqstring$ebnf$1', symbols: [] },\n            {\n                name: 'sqstring$ebnf$1',\n                symbols: ['sqstring$ebnf$1', 'sstrchar'],\n                postprocess: function arrpush(d) {\n                    return d[0].concat([d[1]]);\n                },\n            },\n            {\n                name: 'sqstring',\n                symbols: [{ literal: \"'\" }, 'sqstring$ebnf$1', { literal: \"'\" }],\n                postprocess: function (d) {\n                    return d[1].join('');\n                },\n            },\n            { name: 'btstring$ebnf$1', symbols: [] },\n            {\n                name: 'btstring$ebnf$1',\n                symbols: ['btstring$ebnf$1', /[^`]/],\n                postprocess: function arrpush(d) {\n                    return d[0].concat([d[1]]);\n                },\n            },\n            {\n                name: 'btstring',\n                symbols: [{ literal: '`' }, 'btstring$ebnf$1', { literal: '`' }],\n                postprocess: function (d) {\n                    return d[1].join('');\n                },\n            },\n            { name: 'dstrchar', symbols: [/[^\\\\\"\\n]/], postprocess: id },\n            {\n                name: 'dstrchar',\n                symbols: [{ literal: '\\\\' }, 'strescape'],\n                postprocess: function (d) {\n                    return JSON.parse('\"' + d.join('') + '\"');\n                },\n            },\n            { name: 'sstrchar', symbols: [/[^\\\\'\\n]/], postprocess: id },\n            {\n                name: 'sstrchar',\n                symbols: [{ literal: '\\\\' }, 'strescape'],\n                postprocess: function (d) {\n                    return JSON.parse('\"' + d.join('') + '\"');\n                },\n            },\n            {\n                name: 'sstrchar$string$1',\n                symbols: [{ literal: '\\\\' }, { literal: \"'\" }],\n                postprocess: function joiner(d) {\n                    return d.join('');\n                },\n            },\n            {\n                name: 'sstrchar',\n                symbols: ['sstrchar$string$1'],\n                postprocess: function (d) {\n                    return \"'\";\n                },\n            },\n            { name: 'strescape', symbols: [/[\"\\\\\\/bfnrt]/], postprocess: id },\n            {\n                name: 'strescape',\n                symbols: [{ literal: 'u' }, /[a-fA-F0-9]/, /[a-fA-F0-9]/, /[a-fA-F0-9]/, /[a-fA-F0-9]/],\n                postprocess: function (d) {\n                    return d.join('');\n                },\n            },\n            { name: 'unsigned_int$ebnf$1', symbols: [/[0-9]/] },\n            {\n                name: 'unsigned_int$ebnf$1',\n                symbols: ['unsigned_int$ebnf$1', /[0-9]/],\n                postprocess: function arrpush(d) {\n                    return d[0].concat([d[1]]);\n                },\n            },\n            {\n                name: 'unsigned_int',\n                symbols: ['unsigned_int$ebnf$1'],\n                postprocess: function (d) {\n                    return parseInt(d[0].join(''));\n                },\n            },\n            { name: 'int$ebnf$1$subexpression$1', symbols: [{ literal: '-' }] },\n            { name: 'int$ebnf$1$subexpression$1', symbols: [{ literal: '+' }] },\n            { name: 'int$ebnf$1', symbols: ['int$ebnf$1$subexpression$1'], postprocess: id },\n            {\n                name: 'int$ebnf$1',\n                symbols: [],\n                postprocess: function (d) {\n                    return null;\n                },\n            },\n            { name: 'int$ebnf$2', symbols: [/[0-9]/] },\n            {\n                name: 'int$ebnf$2',\n                symbols: ['int$ebnf$2', /[0-9]/],\n                postprocess: function arrpush(d) {\n                    return d[0].concat([d[1]]);\n                },\n            },\n            {\n                name: 'int',\n                symbols: ['int$ebnf$1', 'int$ebnf$2'],\n                postprocess: function (d) {\n                    if (d[0]) {\n                        return parseInt(d[0][0] + d[1].join(''));\n                    } else {\n                        return parseInt(d[1].join(''));\n                    }\n                },\n            },\n            { name: 'unsigned_decimal$ebnf$1', symbols: [/[0-9]/] },\n            {\n                name: 'unsigned_decimal$ebnf$1',\n                symbols: ['unsigned_decimal$ebnf$1', /[0-9]/],\n                postprocess: function arrpush(d) {\n                    return d[0].concat([d[1]]);\n                },\n            },\n            { name: 'unsigned_decimal$ebnf$2$subexpression$1$ebnf$1', symbols: [/[0-9]/] },\n            {\n                name: 'unsigned_decimal$ebnf$2$subexpression$1$ebnf$1',\n                symbols: ['unsigned_decimal$ebnf$2$subexpression$1$ebnf$1', /[0-9]/],\n                postprocess: function arrpush(d) {\n                    return d[0].concat([d[1]]);\n                },\n            },\n            {\n                name: 'unsigned_decimal$ebnf$2$subexpression$1',\n                symbols: [{ literal: '.' }, 'unsigned_decimal$ebnf$2$subexpression$1$ebnf$1'],\n            },\n            {\n                name: 'unsigned_decimal$ebnf$2',\n                symbols: ['unsigned_decimal$ebnf$2$subexpression$1'],\n                postprocess: id,\n            },\n            {\n                name: 'unsigned_decimal$ebnf$2',\n                symbols: [],\n                postprocess: function (d) {\n                    return null;\n                },\n            },\n            {\n                name: 'unsigned_decimal',\n                symbols: ['unsigned_decimal$ebnf$1', 'unsigned_decimal$ebnf$2'],\n                postprocess: function (d) {\n                    return parseFloat(d[0].join('') + (d[1] ? '.' + d[1][1].join('') : ''));\n                },\n            },\n            { name: 'decimal$ebnf$1', symbols: [{ literal: '-' }], postprocess: id },\n            {\n                name: 'decimal$ebnf$1',\n                symbols: [],\n                postprocess: function (d) {\n                    return null;\n                },\n            },\n            { name: 'decimal$ebnf$2', symbols: [/[0-9]/] },\n            {\n                name: 'decimal$ebnf$2',\n                symbols: ['decimal$ebnf$2', /[0-9]/],\n                postprocess: function arrpush(d) {\n                    return d[0].concat([d[1]]);\n                },\n            },\n            { name: 'decimal$ebnf$3$subexpression$1$ebnf$1', symbols: [/[0-9]/] },\n            {\n                name: 'decimal$ebnf$3$subexpression$1$ebnf$1',\n                symbols: ['decimal$ebnf$3$subexpression$1$ebnf$1', /[0-9]/],\n                postprocess: function arrpush(d) {\n                    return d[0].concat([d[1]]);\n                },\n            },\n            {\n                name: 'decimal$ebnf$3$subexpression$1',\n                symbols: [{ literal: '.' }, 'decimal$ebnf$3$subexpression$1$ebnf$1'],\n            },\n            { name: 'decimal$ebnf$3', symbols: ['decimal$ebnf$3$subexpression$1'], postprocess: id },\n            {\n                name: 'decimal$ebnf$3',\n                symbols: [],\n                postprocess: function (d) {\n                    return null;\n                },\n            },\n            {\n                name: 'decimal',\n                symbols: ['decimal$ebnf$1', 'decimal$ebnf$2', 'decimal$ebnf$3'],\n                postprocess: function (d) {\n                    return parseFloat((d[0] || '') + d[1].join('') + (d[2] ? '.' + d[2][1].join('') : ''));\n                },\n            },\n            {\n                name: 'percentage',\n                symbols: ['decimal', { literal: '%' }],\n                postprocess: function (d) {\n                    return d[0] / 100;\n                },\n            },\n            { name: 'jsonfloat$ebnf$1', symbols: [{ literal: '-' }], postprocess: id },\n            {\n                name: 'jsonfloat$ebnf$1',\n                symbols: [],\n                postprocess: function (d) {\n                    return null;\n                },\n            },\n            { name: 'jsonfloat$ebnf$2', symbols: [/[0-9]/] },\n            {\n                name: 'jsonfloat$ebnf$2',\n                symbols: ['jsonfloat$ebnf$2', /[0-9]/],\n                postprocess: function arrpush(d) {\n                    return d[0].concat([d[1]]);\n                },\n            },\n            { name: 'jsonfloat$ebnf$3$subexpression$1$ebnf$1', symbols: [/[0-9]/] },\n            {\n                name: 'jsonfloat$ebnf$3$subexpression$1$ebnf$1',\n                symbols: ['jsonfloat$ebnf$3$subexpression$1$ebnf$1', /[0-9]/],\n                postprocess: function arrpush(d) {\n                    return d[0].concat([d[1]]);\n                },\n            },\n            {\n                name: 'jsonfloat$ebnf$3$subexpression$1',\n                symbols: [{ literal: '.' }, 'jsonfloat$ebnf$3$subexpression$1$ebnf$1'],\n            },\n            { name: 'jsonfloat$ebnf$3', symbols: ['jsonfloat$ebnf$3$subexpression$1'], postprocess: id },\n            {\n                name: 'jsonfloat$ebnf$3',\n                symbols: [],\n                postprocess: function (d) {\n                    return null;\n                },\n            },\n            { name: 'jsonfloat$ebnf$4$subexpression$1$ebnf$1', symbols: [/[+-]/], postprocess: id },\n            {\n                name: 'jsonfloat$ebnf$4$subexpression$1$ebnf$1',\n                symbols: [],\n                postprocess: function (d) {\n                    return null;\n                },\n            },\n            { name: 'jsonfloat$ebnf$4$subexpression$1$ebnf$2', symbols: [/[0-9]/] },\n            {\n                name: 'jsonfloat$ebnf$4$subexpression$1$ebnf$2',\n                symbols: ['jsonfloat$ebnf$4$subexpression$1$ebnf$2', /[0-9]/],\n                postprocess: function arrpush(d) {\n                    return d[0].concat([d[1]]);\n                },\n            },\n            {\n                name: 'jsonfloat$ebnf$4$subexpression$1',\n                symbols: [\n                    /[eE]/,\n                    'jsonfloat$ebnf$4$subexpression$1$ebnf$1',\n                    'jsonfloat$ebnf$4$subexpression$1$ebnf$2',\n                ],\n            },\n            { name: 'jsonfloat$ebnf$4', symbols: ['jsonfloat$ebnf$4$subexpression$1'], postprocess: id },\n            {\n                name: 'jsonfloat$ebnf$4',\n                symbols: [],\n                postprocess: function (d) {\n                    return null;\n                },\n            },\n            {\n                name: 'jsonfloat',\n                symbols: ['jsonfloat$ebnf$1', 'jsonfloat$ebnf$2', 'jsonfloat$ebnf$3', 'jsonfloat$ebnf$4'],\n                postprocess: function (d) {\n                    return parseFloat(\n                        (d[0] || '') +\n                            d[1].join('') +\n                            (d[2] ? '.' + d[2][1].join('') : '') +\n                            (d[3] ? 'e' + (d[3][1] || '+') + d[3][2].join('') : '')\n                    );\n                },\n            },\n            { name: 'Pipeline$ebnf$1', symbols: [] },\n            { name: 'Pipeline$ebnf$1$subexpression$1', symbols: [{ literal: '|' }, 'Expr'] },\n            {\n                name: 'Pipeline$ebnf$1',\n                symbols: ['Pipeline$ebnf$1', 'Pipeline$ebnf$1$subexpression$1'],\n                postprocess: function arrpush(d) {\n                    return d[0].concat([d[1]]);\n                },\n            },\n            {\n                name: 'Pipeline',\n                symbols: ['Expr', 'Pipeline$ebnf$1'],\n                postprocess: d => {\n                    return [d[0], ...d[1].map(e => e[1])];\n                },\n            },\n            { name: 'Expr', symbols: ['_', 'Identifier', '_'], postprocess: d => d[1] },\n            { name: 'Expr', symbols: ['_', 'Method', '_'], postprocess: d => d[1] },\n            { name: 'Expr', symbols: ['_', 'Literal', '_'], postprocess: d => d[1] },\n            { name: 'Method$ebnf$1', symbols: ['Arg'], postprocess: id },\n            {\n                name: 'Method$ebnf$1',\n                symbols: [],\n                postprocess: function (d) {\n                    return null;\n                },\n            },\n            { name: 'Method$ebnf$2', symbols: [] },\n            { name: 'Method$ebnf$2$subexpression$1', symbols: ['_', { literal: ',' }, '_', 'Arg'] },\n            {\n                name: 'Method$ebnf$2',\n                symbols: ['Method$ebnf$2', 'Method$ebnf$2$subexpression$1'],\n                postprocess: function arrpush(d) {\n                    return d[0].concat([d[1]]);\n                },\n            },\n            {\n                name: 'Method',\n                symbols: [\n                    'Identifier',\n                    { literal: '(' },\n                    '_',\n                    'Method$ebnf$1',\n                    'Method$ebnf$2',\n                    '_',\n                    { literal: ')' },\n                ],\n                postprocess: d => {\n                    let arg0 = d[3];\n                    let otherArgs = d[4];\n                    let args = [];\n                    arg0 && args.push(arg0);\n                    if (otherArgs) {\n                        args = args.concat(otherArgs.map(e => e[3]));\n                    }\n                    let r = { type: 'method', name: d[0].v, args };\n                    return r;\n                },\n            },\n            { name: 'Arg', symbols: ['Identifier'], postprocess: d => d[0] },\n            { name: 'Arg', symbols: ['Literal'], postprocess: d => d[0] },\n            { name: 'Identifier$ebnf$1', symbols: [] },\n            { name: 'Identifier$ebnf$1$subexpression$1', symbols: ['Letter'] },\n            { name: 'Identifier$ebnf$1$subexpression$1', symbols: ['Digit'] },\n            {\n                name: 'Identifier$ebnf$1',\n                symbols: ['Identifier$ebnf$1', 'Identifier$ebnf$1$subexpression$1'],\n                postprocess: function arrpush(d) {\n                    return d[0].concat([d[1]]);\n                },\n            },\n            {\n                name: 'Identifier',\n                symbols: ['Letter', 'Identifier$ebnf$1'],\n                postprocess: d => {\n                    return { type: 'identifier', v: d[0] + d[1].join('') };\n                },\n            },\n            { name: 'Identifier$ebnf$2', symbols: [] },\n            { name: 'Identifier$ebnf$2$subexpression$1', symbols: ['Letter'] },\n            { name: 'Identifier$ebnf$2$subexpression$1', symbols: ['Digit'] },\n            {\n                name: 'Identifier$ebnf$2',\n                symbols: ['Identifier$ebnf$2', 'Identifier$ebnf$2$subexpression$1'],\n                postprocess: function arrpush(d) {\n                    return d[0].concat([d[1]]);\n                },\n            },\n            { name: 'Identifier$ebnf$3$subexpression$1$ebnf$1', symbols: [] },\n            { name: 'Identifier$ebnf$3$subexpression$1$ebnf$1$subexpression$1', symbols: ['Letter'] },\n            { name: 'Identifier$ebnf$3$subexpression$1$ebnf$1$subexpression$1', symbols: ['Digit'] },\n            {\n                name: 'Identifier$ebnf$3$subexpression$1$ebnf$1',\n                symbols: [\n                    'Identifier$ebnf$3$subexpression$1$ebnf$1',\n                    'Identifier$ebnf$3$subexpression$1$ebnf$1$subexpression$1',\n                ],\n                postprocess: function arrpush(d) {\n                    return d[0].concat([d[1]]);\n                },\n            },\n            {\n                name: 'Identifier$ebnf$3$subexpression$1',\n                symbols: ['Dot', 'Letter', 'Identifier$ebnf$3$subexpression$1$ebnf$1'],\n            },\n            { name: 'Identifier$ebnf$3', symbols: ['Identifier$ebnf$3$subexpression$1'] },\n            { name: 'Identifier$ebnf$3$subexpression$2$ebnf$1', symbols: [] },\n            { name: 'Identifier$ebnf$3$subexpression$2$ebnf$1$subexpression$1', symbols: ['Letter'] },\n            { name: 'Identifier$ebnf$3$subexpression$2$ebnf$1$subexpression$1', symbols: ['Digit'] },\n            {\n                name: 'Identifier$ebnf$3$subexpression$2$ebnf$1',\n                symbols: [\n                    'Identifier$ebnf$3$subexpression$2$ebnf$1',\n                    'Identifier$ebnf$3$subexpression$2$ebnf$1$subexpression$1',\n                ],\n                postprocess: function arrpush(d) {\n                    return d[0].concat([d[1]]);\n                },\n            },\n            {\n                name: 'Identifier$ebnf$3$subexpression$2',\n                symbols: ['Dot', 'Letter', 'Identifier$ebnf$3$subexpression$2$ebnf$1'],\n            },\n            {\n                name: 'Identifier$ebnf$3',\n                symbols: ['Identifier$ebnf$3', 'Identifier$ebnf$3$subexpression$2'],\n                postprocess: function arrpush(d) {\n                    return d[0].concat([d[1]]);\n                },\n            },\n            {\n                name: 'Identifier',\n                symbols: ['Letter', 'Identifier$ebnf$2', 'Identifier$ebnf$3'],\n                postprocess: d => {\n                    function flat(input, depth = 1, stack = []) {\n                        for (let item of input) {\n                            if (item instanceof Array && depth > 0) {\n                                flat(item, depth - 1, stack);\n                            } else {\n                                stack.push(item);\n                            }\n                        }\n                        return stack;\n                    }\n                    const r = flat(d, Infinity);\n                    return { type: 'identifier', v: r.join('') };\n                },\n            },\n            {\n                name: 'Literal',\n                symbols: ['jsonfloat'],\n                postprocess: d => {\n                    return { type: 'number', v: d[0] };\n                },\n            },\n            {\n                name: 'Literal',\n                symbols: ['dqstring'],\n                postprocess: d => {\n                    return { type: 'string', v: d[0] };\n                },\n            },\n            {\n                name: 'Literal',\n                symbols: ['sqstring'],\n                postprocess: d => {\n                    return { type: 'string', v: d[0] };\n                },\n            },\n            {\n                name: 'Literal',\n                symbols: ['btstring'],\n                postprocess: d => {\n                    return { type: 'string', v: d[0] };\n                },\n            },\n            { name: 'Letter', symbols: [/[a-zA-Z_]/], postprocess: d => d[0] },\n            { name: 'Digit', symbols: [/[0-9]/], postprocess: d => d[0] },\n            { name: 'Dot', symbols: [/[\\.]/], postprocess: d => d[0] },\n        ],\n        ParserStart: 'Pipeline',\n    };\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n        module.exports = grammar;\n    } else {\n        window.grammar = grammar;\n    }\n})();\n"],"sourceRoot":""}