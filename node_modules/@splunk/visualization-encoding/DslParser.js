/*!
 * Copyright © 2018 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 18);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/classCallCheck");

/***/ }),

/***/ 1:
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/createClass");

/***/ }),

/***/ 15:
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/toConsumableArray");

/***/ }),

/***/ 18:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _toConsumableArray = __webpack_require__(15);

var _classCallCheck = __webpack_require__(0);

var _createClass = __webpack_require__(1);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DslParser = void 0;

var nearley_1 = __webpack_require__(22);

var grammar = __webpack_require__(23);

var DslParser = /*#__PURE__*/function () {
  function DslParser() {
    _classCallCheck(this, DslParser);
  }

  _createClass(DslParser, null, [{
    key: "parse",
    value: function parse(dsl) {
      if (DslParser.cache[dsl]) {
        return _toConsumableArray(DslParser.cache[dsl]);
      }

      var parser = new nearley_1.Parser(grammar);
      parser.feed(dsl);

      if (parser.results.length > 1) {
        console.warn("Ambiguous parse of '".concat(dsl, "'"));
      }

      if (parser.results.length == 0) {
        console.warn("No parsed results for '".concat(dsl, "'"));
      }

      DslParser.cache[dsl] = _toConsumableArray(parser.results[0]);
      return parser.results[0];
    }
  }]);

  return DslParser;
}();

exports.DslParser = DslParser;
DslParser.cache = {};

/***/ }),

/***/ 22:
/***/ (function(module, exports) {

module.exports = require("nearley");

/***/ }),

/***/ 23:
/***/ (function(module, exports, __webpack_require__) {

var _toConsumableArray = __webpack_require__(15);

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function F() {};

      return {
        s: F,
        n: function n() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function e(_e) {
          throw _e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function s() {
      it = o[Symbol.iterator]();
    },
    n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f() {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
} // Generated automatically by nearley, version 2.19.5
// http://github.com/Hardmath123/nearley


(function () {
  function id(x) {
    return x[0];
  }

  var grammar = {
    Lexer: undefined,
    ParserRules: [{
      name: '_$ebnf$1',
      symbols: []
    }, {
      name: '_$ebnf$1',
      symbols: ['_$ebnf$1', 'wschar'],
      postprocess: function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      name: '_',
      symbols: ['_$ebnf$1'],
      postprocess: function postprocess(d) {
        return null;
      }
    }, {
      name: '__$ebnf$1',
      symbols: ['wschar']
    }, {
      name: '__$ebnf$1',
      symbols: ['__$ebnf$1', 'wschar'],
      postprocess: function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      name: '__',
      symbols: ['__$ebnf$1'],
      postprocess: function postprocess(d) {
        return null;
      }
    }, {
      name: 'wschar',
      symbols: [/[ \t\n\v\f]/],
      postprocess: id
    }, {
      name: 'dqstring$ebnf$1',
      symbols: []
    }, {
      name: 'dqstring$ebnf$1',
      symbols: ['dqstring$ebnf$1', 'dstrchar'],
      postprocess: function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      name: 'dqstring',
      symbols: [{
        literal: '"'
      }, 'dqstring$ebnf$1', {
        literal: '"'
      }],
      postprocess: function postprocess(d) {
        return d[1].join('');
      }
    }, {
      name: 'sqstring$ebnf$1',
      symbols: []
    }, {
      name: 'sqstring$ebnf$1',
      symbols: ['sqstring$ebnf$1', 'sstrchar'],
      postprocess: function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      name: 'sqstring',
      symbols: [{
        literal: "'"
      }, 'sqstring$ebnf$1', {
        literal: "'"
      }],
      postprocess: function postprocess(d) {
        return d[1].join('');
      }
    }, {
      name: 'btstring$ebnf$1',
      symbols: []
    }, {
      name: 'btstring$ebnf$1',
      symbols: ['btstring$ebnf$1', /[^`]/],
      postprocess: function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      name: 'btstring',
      symbols: [{
        literal: '`'
      }, 'btstring$ebnf$1', {
        literal: '`'
      }],
      postprocess: function postprocess(d) {
        return d[1].join('');
      }
    }, {
      name: 'dstrchar',
      symbols: [/[^\\"\n]/],
      postprocess: id
    }, {
      name: 'dstrchar',
      symbols: [{
        literal: '\\'
      }, 'strescape'],
      postprocess: function postprocess(d) {
        return JSON.parse('"' + d.join('') + '"');
      }
    }, {
      name: 'sstrchar',
      symbols: [/[^\\'\n]/],
      postprocess: id
    }, {
      name: 'sstrchar',
      symbols: [{
        literal: '\\'
      }, 'strescape'],
      postprocess: function postprocess(d) {
        return JSON.parse('"' + d.join('') + '"');
      }
    }, {
      name: 'sstrchar$string$1',
      symbols: [{
        literal: '\\'
      }, {
        literal: "'"
      }],
      postprocess: function joiner(d) {
        return d.join('');
      }
    }, {
      name: 'sstrchar',
      symbols: ['sstrchar$string$1'],
      postprocess: function postprocess(d) {
        return "'";
      }
    }, {
      name: 'strescape',
      symbols: [/["\\\/bfnrt]/],
      postprocess: id
    }, {
      name: 'strescape',
      symbols: [{
        literal: 'u'
      }, /[a-fA-F0-9]/, /[a-fA-F0-9]/, /[a-fA-F0-9]/, /[a-fA-F0-9]/],
      postprocess: function postprocess(d) {
        return d.join('');
      }
    }, {
      name: 'unsigned_int$ebnf$1',
      symbols: [/[0-9]/]
    }, {
      name: 'unsigned_int$ebnf$1',
      symbols: ['unsigned_int$ebnf$1', /[0-9]/],
      postprocess: function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      name: 'unsigned_int',
      symbols: ['unsigned_int$ebnf$1'],
      postprocess: function postprocess(d) {
        return parseInt(d[0].join(''));
      }
    }, {
      name: 'int$ebnf$1$subexpression$1',
      symbols: [{
        literal: '-'
      }]
    }, {
      name: 'int$ebnf$1$subexpression$1',
      symbols: [{
        literal: '+'
      }]
    }, {
      name: 'int$ebnf$1',
      symbols: ['int$ebnf$1$subexpression$1'],
      postprocess: id
    }, {
      name: 'int$ebnf$1',
      symbols: [],
      postprocess: function postprocess(d) {
        return null;
      }
    }, {
      name: 'int$ebnf$2',
      symbols: [/[0-9]/]
    }, {
      name: 'int$ebnf$2',
      symbols: ['int$ebnf$2', /[0-9]/],
      postprocess: function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      name: 'int',
      symbols: ['int$ebnf$1', 'int$ebnf$2'],
      postprocess: function postprocess(d) {
        if (d[0]) {
          return parseInt(d[0][0] + d[1].join(''));
        } else {
          return parseInt(d[1].join(''));
        }
      }
    }, {
      name: 'unsigned_decimal$ebnf$1',
      symbols: [/[0-9]/]
    }, {
      name: 'unsigned_decimal$ebnf$1',
      symbols: ['unsigned_decimal$ebnf$1', /[0-9]/],
      postprocess: function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      name: 'unsigned_decimal$ebnf$2$subexpression$1$ebnf$1',
      symbols: [/[0-9]/]
    }, {
      name: 'unsigned_decimal$ebnf$2$subexpression$1$ebnf$1',
      symbols: ['unsigned_decimal$ebnf$2$subexpression$1$ebnf$1', /[0-9]/],
      postprocess: function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      name: 'unsigned_decimal$ebnf$2$subexpression$1',
      symbols: [{
        literal: '.'
      }, 'unsigned_decimal$ebnf$2$subexpression$1$ebnf$1']
    }, {
      name: 'unsigned_decimal$ebnf$2',
      symbols: ['unsigned_decimal$ebnf$2$subexpression$1'],
      postprocess: id
    }, {
      name: 'unsigned_decimal$ebnf$2',
      symbols: [],
      postprocess: function postprocess(d) {
        return null;
      }
    }, {
      name: 'unsigned_decimal',
      symbols: ['unsigned_decimal$ebnf$1', 'unsigned_decimal$ebnf$2'],
      postprocess: function postprocess(d) {
        return parseFloat(d[0].join('') + (d[1] ? '.' + d[1][1].join('') : ''));
      }
    }, {
      name: 'decimal$ebnf$1',
      symbols: [{
        literal: '-'
      }],
      postprocess: id
    }, {
      name: 'decimal$ebnf$1',
      symbols: [],
      postprocess: function postprocess(d) {
        return null;
      }
    }, {
      name: 'decimal$ebnf$2',
      symbols: [/[0-9]/]
    }, {
      name: 'decimal$ebnf$2',
      symbols: ['decimal$ebnf$2', /[0-9]/],
      postprocess: function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      name: 'decimal$ebnf$3$subexpression$1$ebnf$1',
      symbols: [/[0-9]/]
    }, {
      name: 'decimal$ebnf$3$subexpression$1$ebnf$1',
      symbols: ['decimal$ebnf$3$subexpression$1$ebnf$1', /[0-9]/],
      postprocess: function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      name: 'decimal$ebnf$3$subexpression$1',
      symbols: [{
        literal: '.'
      }, 'decimal$ebnf$3$subexpression$1$ebnf$1']
    }, {
      name: 'decimal$ebnf$3',
      symbols: ['decimal$ebnf$3$subexpression$1'],
      postprocess: id
    }, {
      name: 'decimal$ebnf$3',
      symbols: [],
      postprocess: function postprocess(d) {
        return null;
      }
    }, {
      name: 'decimal',
      symbols: ['decimal$ebnf$1', 'decimal$ebnf$2', 'decimal$ebnf$3'],
      postprocess: function postprocess(d) {
        return parseFloat((d[0] || '') + d[1].join('') + (d[2] ? '.' + d[2][1].join('') : ''));
      }
    }, {
      name: 'percentage',
      symbols: ['decimal', {
        literal: '%'
      }],
      postprocess: function postprocess(d) {
        return d[0] / 100;
      }
    }, {
      name: 'jsonfloat$ebnf$1',
      symbols: [{
        literal: '-'
      }],
      postprocess: id
    }, {
      name: 'jsonfloat$ebnf$1',
      symbols: [],
      postprocess: function postprocess(d) {
        return null;
      }
    }, {
      name: 'jsonfloat$ebnf$2',
      symbols: [/[0-9]/]
    }, {
      name: 'jsonfloat$ebnf$2',
      symbols: ['jsonfloat$ebnf$2', /[0-9]/],
      postprocess: function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      name: 'jsonfloat$ebnf$3$subexpression$1$ebnf$1',
      symbols: [/[0-9]/]
    }, {
      name: 'jsonfloat$ebnf$3$subexpression$1$ebnf$1',
      symbols: ['jsonfloat$ebnf$3$subexpression$1$ebnf$1', /[0-9]/],
      postprocess: function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      name: 'jsonfloat$ebnf$3$subexpression$1',
      symbols: [{
        literal: '.'
      }, 'jsonfloat$ebnf$3$subexpression$1$ebnf$1']
    }, {
      name: 'jsonfloat$ebnf$3',
      symbols: ['jsonfloat$ebnf$3$subexpression$1'],
      postprocess: id
    }, {
      name: 'jsonfloat$ebnf$3',
      symbols: [],
      postprocess: function postprocess(d) {
        return null;
      }
    }, {
      name: 'jsonfloat$ebnf$4$subexpression$1$ebnf$1',
      symbols: [/[+-]/],
      postprocess: id
    }, {
      name: 'jsonfloat$ebnf$4$subexpression$1$ebnf$1',
      symbols: [],
      postprocess: function postprocess(d) {
        return null;
      }
    }, {
      name: 'jsonfloat$ebnf$4$subexpression$1$ebnf$2',
      symbols: [/[0-9]/]
    }, {
      name: 'jsonfloat$ebnf$4$subexpression$1$ebnf$2',
      symbols: ['jsonfloat$ebnf$4$subexpression$1$ebnf$2', /[0-9]/],
      postprocess: function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      name: 'jsonfloat$ebnf$4$subexpression$1',
      symbols: [/[eE]/, 'jsonfloat$ebnf$4$subexpression$1$ebnf$1', 'jsonfloat$ebnf$4$subexpression$1$ebnf$2']
    }, {
      name: 'jsonfloat$ebnf$4',
      symbols: ['jsonfloat$ebnf$4$subexpression$1'],
      postprocess: id
    }, {
      name: 'jsonfloat$ebnf$4',
      symbols: [],
      postprocess: function postprocess(d) {
        return null;
      }
    }, {
      name: 'jsonfloat',
      symbols: ['jsonfloat$ebnf$1', 'jsonfloat$ebnf$2', 'jsonfloat$ebnf$3', 'jsonfloat$ebnf$4'],
      postprocess: function postprocess(d) {
        return parseFloat((d[0] || '') + d[1].join('') + (d[2] ? '.' + d[2][1].join('') : '') + (d[3] ? 'e' + (d[3][1] || '+') + d[3][2].join('') : ''));
      }
    }, {
      name: 'Pipeline$ebnf$1',
      symbols: []
    }, {
      name: 'Pipeline$ebnf$1$subexpression$1',
      symbols: [{
        literal: '|'
      }, 'Expr']
    }, {
      name: 'Pipeline$ebnf$1',
      symbols: ['Pipeline$ebnf$1', 'Pipeline$ebnf$1$subexpression$1'],
      postprocess: function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      name: 'Pipeline',
      symbols: ['Expr', 'Pipeline$ebnf$1'],
      postprocess: function postprocess(d) {
        return [d[0]].concat(_toConsumableArray(d[1].map(function (e) {
          return e[1];
        })));
      }
    }, {
      name: 'Expr',
      symbols: ['_', 'Identifier', '_'],
      postprocess: function postprocess(d) {
        return d[1];
      }
    }, {
      name: 'Expr',
      symbols: ['_', 'Method', '_'],
      postprocess: function postprocess(d) {
        return d[1];
      }
    }, {
      name: 'Expr',
      symbols: ['_', 'Literal', '_'],
      postprocess: function postprocess(d) {
        return d[1];
      }
    }, {
      name: 'Method$ebnf$1',
      symbols: ['Arg'],
      postprocess: id
    }, {
      name: 'Method$ebnf$1',
      symbols: [],
      postprocess: function postprocess(d) {
        return null;
      }
    }, {
      name: 'Method$ebnf$2',
      symbols: []
    }, {
      name: 'Method$ebnf$2$subexpression$1',
      symbols: ['_', {
        literal: ','
      }, '_', 'Arg']
    }, {
      name: 'Method$ebnf$2',
      symbols: ['Method$ebnf$2', 'Method$ebnf$2$subexpression$1'],
      postprocess: function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      name: 'Method',
      symbols: ['Identifier', {
        literal: '('
      }, '_', 'Method$ebnf$1', 'Method$ebnf$2', '_', {
        literal: ')'
      }],
      postprocess: function postprocess(d) {
        var arg0 = d[3];
        var otherArgs = d[4];
        var args = [];
        arg0 && args.push(arg0);

        if (otherArgs) {
          args = args.concat(otherArgs.map(function (e) {
            return e[3];
          }));
        }

        var r = {
          type: 'method',
          name: d[0].v,
          args: args
        };
        return r;
      }
    }, {
      name: 'Arg',
      symbols: ['Identifier'],
      postprocess: function postprocess(d) {
        return d[0];
      }
    }, {
      name: 'Arg',
      symbols: ['Literal'],
      postprocess: function postprocess(d) {
        return d[0];
      }
    }, {
      name: 'Identifier$ebnf$1',
      symbols: []
    }, {
      name: 'Identifier$ebnf$1$subexpression$1',
      symbols: ['Letter']
    }, {
      name: 'Identifier$ebnf$1$subexpression$1',
      symbols: ['Digit']
    }, {
      name: 'Identifier$ebnf$1',
      symbols: ['Identifier$ebnf$1', 'Identifier$ebnf$1$subexpression$1'],
      postprocess: function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      name: 'Identifier',
      symbols: ['Letter', 'Identifier$ebnf$1'],
      postprocess: function postprocess(d) {
        return {
          type: 'identifier',
          v: d[0] + d[1].join('')
        };
      }
    }, {
      name: 'Identifier$ebnf$2',
      symbols: []
    }, {
      name: 'Identifier$ebnf$2$subexpression$1',
      symbols: ['Letter']
    }, {
      name: 'Identifier$ebnf$2$subexpression$1',
      symbols: ['Digit']
    }, {
      name: 'Identifier$ebnf$2',
      symbols: ['Identifier$ebnf$2', 'Identifier$ebnf$2$subexpression$1'],
      postprocess: function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      name: 'Identifier$ebnf$3$subexpression$1$ebnf$1',
      symbols: []
    }, {
      name: 'Identifier$ebnf$3$subexpression$1$ebnf$1$subexpression$1',
      symbols: ['Letter']
    }, {
      name: 'Identifier$ebnf$3$subexpression$1$ebnf$1$subexpression$1',
      symbols: ['Digit']
    }, {
      name: 'Identifier$ebnf$3$subexpression$1$ebnf$1',
      symbols: ['Identifier$ebnf$3$subexpression$1$ebnf$1', 'Identifier$ebnf$3$subexpression$1$ebnf$1$subexpression$1'],
      postprocess: function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      name: 'Identifier$ebnf$3$subexpression$1',
      symbols: ['Dot', 'Letter', 'Identifier$ebnf$3$subexpression$1$ebnf$1']
    }, {
      name: 'Identifier$ebnf$3',
      symbols: ['Identifier$ebnf$3$subexpression$1']
    }, {
      name: 'Identifier$ebnf$3$subexpression$2$ebnf$1',
      symbols: []
    }, {
      name: 'Identifier$ebnf$3$subexpression$2$ebnf$1$subexpression$1',
      symbols: ['Letter']
    }, {
      name: 'Identifier$ebnf$3$subexpression$2$ebnf$1$subexpression$1',
      symbols: ['Digit']
    }, {
      name: 'Identifier$ebnf$3$subexpression$2$ebnf$1',
      symbols: ['Identifier$ebnf$3$subexpression$2$ebnf$1', 'Identifier$ebnf$3$subexpression$2$ebnf$1$subexpression$1'],
      postprocess: function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      name: 'Identifier$ebnf$3$subexpression$2',
      symbols: ['Dot', 'Letter', 'Identifier$ebnf$3$subexpression$2$ebnf$1']
    }, {
      name: 'Identifier$ebnf$3',
      symbols: ['Identifier$ebnf$3', 'Identifier$ebnf$3$subexpression$2'],
      postprocess: function arrpush(d) {
        return d[0].concat([d[1]]);
      }
    }, {
      name: 'Identifier',
      symbols: ['Letter', 'Identifier$ebnf$2', 'Identifier$ebnf$3'],
      postprocess: function postprocess(d) {
        function flat(input) {
          var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
          var stack = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

          var _iterator = _createForOfIteratorHelper(input),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var item = _step.value;

              if (item instanceof Array && depth > 0) {
                flat(item, depth - 1, stack);
              } else {
                stack.push(item);
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          return stack;
        }

        var r = flat(d, Infinity);
        return {
          type: 'identifier',
          v: r.join('')
        };
      }
    }, {
      name: 'Literal',
      symbols: ['jsonfloat'],
      postprocess: function postprocess(d) {
        return {
          type: 'number',
          v: d[0]
        };
      }
    }, {
      name: 'Literal',
      symbols: ['dqstring'],
      postprocess: function postprocess(d) {
        return {
          type: 'string',
          v: d[0]
        };
      }
    }, {
      name: 'Literal',
      symbols: ['sqstring'],
      postprocess: function postprocess(d) {
        return {
          type: 'string',
          v: d[0]
        };
      }
    }, {
      name: 'Literal',
      symbols: ['btstring'],
      postprocess: function postprocess(d) {
        return {
          type: 'string',
          v: d[0]
        };
      }
    }, {
      name: 'Letter',
      symbols: [/[a-zA-Z_]/],
      postprocess: function postprocess(d) {
        return d[0];
      }
    }, {
      name: 'Digit',
      symbols: [/[0-9]/],
      postprocess: function postprocess(d) {
        return d[0];
      }
    }, {
      name: 'Dot',
      symbols: [/[\.]/],
      postprocess: function postprocess(d) {
        return d[0];
      }
    }],
    ParserStart: 'Pipeline'
  };

  if ( true && typeof module.exports !== 'undefined') {
    module.exports = grammar;
  } else {
    window.grammar = grammar;
  }
})();

/***/ })

/******/ });
//# sourceMappingURL=DslParser.js.map