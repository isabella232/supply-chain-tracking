/*!
 * Copyright © 2018 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 143);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("@splunk/ui-utils/i18n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/schemaUtils");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/defineProperty");

/***/ }),
/* 4 */,
/* 5 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/getPrototypeOf");

/***/ }),
/* 6 */,
/* 7 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/classCallCheck");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/createClass");

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-visualizations/common/BaseVisualization");

/***/ }),
/* 10 */,
/* 11 */,
/* 12 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/inherits");

/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/possibleConstructorReturn");

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/extends");

/***/ }),
/* 15 */,
/* 16 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-visualizations/common/IconPlaceholder");

/***/ }),
/* 17 */,
/* 18 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-visualizations/common/VisualizationEvent");

/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-visualizations/utils/enhancer");

/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualization-themes/variables");

/***/ }),
/* 21 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualization-icons");

/***/ }),
/* 22 */
/***/ (function(module, exports) {

module.exports = require("lodash/get");

/***/ }),
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/toConsumableArray");

/***/ }),
/* 27 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-visualizations/utils/dataUtils");

/***/ }),
/* 28 */,
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getClickHandler", function() { return getClickHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enableClickHandler", function() { return enableClickHandler; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _splunk_dashboard_visualizations_common_VisualizationEvent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18);
/* harmony import */ var _splunk_dashboard_visualizations_common_VisualizationEvent__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_splunk_dashboard_visualizations_common_VisualizationEvent__WEBPACK_IMPORTED_MODULE_1__);


function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}


var getClickHandler = function getClickHandler(onEventTrigger, data) {
  var eventName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'value.click';
  return typeof onEventTrigger === 'function' && function (e) {
    return onEventTrigger(new _splunk_dashboard_visualizations_common_VisualizationEvent__WEBPACK_IMPORTED_MODULE_1___default.a({
      originalEvent: e,
      payload: _objectSpread({}, data),
      type: eventName
    }));
  };
};
var enableClickHandler = function enableClickHandler(hasEventHandlers, mode) {
  return !!hasEventHandlers && mode === 'view';
};

/***/ }),
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */
/***/ (function(module, exports) {

module.exports = require("lodash/zip");

/***/ }),
/* 37 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/themeUtils");

/***/ }),
/* 38 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/simpleXMLOptions");

/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _splunk_visualizations_shared_themeUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(37);
/* harmony import */ var _splunk_visualizations_shared_themeUtils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_splunk_visualizations_shared_themeUtils__WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _splunk_visualizations_shared_themeUtils__WEBPACK_IMPORTED_MODULE_0__["getChartingThemeKey"]; });



/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__);

var axes = {
  label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Axes'),
  layout: [[{
    label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('X Axis title'),
    option: 'axisTitleX.text',
    editor: 'editor.text'
  }], [{
    label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Y Axis title'),
    option: 'axisTitleY.text',
    editor: 'editor.text'
  }]]
};
/* harmony default export */ __webpack_exports__["a"] = (axes);

/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__);

var legend = {
  label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Legend'),
  layout: [[{
    label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Position'),
    option: 'legend.placement',
    editor: 'editor.select',
    editorProps: {
      values: [{
        label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Right'),
        value: 'right'
      }, {
        label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Left'),
        value: 'left'
      }, {
        label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Top'),
        value: 'top'
      }, {
        label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Bottom'),
        value: 'bottom'
      }, {
        label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('None'),
        value: 'none'
      }]
    }
  }], [{
    label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Truncation'),
    option: 'legend.labelStyle.overflowMode',
    editor: 'editor.radioBar',
    editorProps: {
      values: [{
        label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('A...'),
        value: 'ellipsisEnd'
      }, {
        label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('A...Z'),
        value: 'ellipsisMiddle'
      }, {
        label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('...Z'),
        value: 'ellipsisStart'
      }, {
        label: Object(_splunk_ui_utils_i18n__WEBPACK_IMPORTED_MODULE_0__["_"])('Off'),
        value: 'ellipsisNone'
      }]
    }
  }]]
};
/* harmony default export */ __webpack_exports__["a"] = (legend);

/***/ }),
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */
/***/ (function(module, exports) {

module.exports = require("lodash/isEqual");

/***/ }),
/* 48 */
/***/ (function(module, exports) {

module.exports = require("lodash/findIndex");

/***/ }),
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */
/***/ (function(module, exports) {

module.exports = require("lodash/omit");

/***/ }),
/* 57 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DataSet; });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(26);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var lodash_isEqual__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(47);
/* harmony import */ var lodash_isEqual__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_isEqual__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(58);
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_isString__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var lodash_zip__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(36);
/* harmony import */ var lodash_zip__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_zip__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var lodash_zipObject__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(59);
/* harmony import */ var lodash_zipObject__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(lodash_zipObject__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var lodash_findIndex__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(48);
/* harmony import */ var lodash_findIndex__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(lodash_findIndex__WEBPACK_IMPORTED_MODULE_7__);








/**
 * @file
 * DataSet represent a set of 2 dimensional data
 */

var DataSet = /*#__PURE__*/function () {
  function DataSet() {
    var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var columns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, DataSet);

    this.fields = fields.map(function (field) {
      if (lodash_isString__WEBPACK_IMPORTED_MODULE_4___default()(field)) {
        return {
          name: field
        };
      }

      return field;
    });
    this.columns = columns;
  }
  /**
   * Returns a empty Dataset
   *
   * Examples:
   * ```js
   * const empty = DataSet.empty();
   * ```
   * @return {DataSet} DataSet
   * @public
   */


  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(DataSet, [{
    key: "toJSONArray",
    value:
    /**
     * Convert data to json array
     * @return {Object} data in json array format
     * @public
     */
    function toJSONArray() {
      var _this = this;

      return {
        fields: this.fields,
        results: lodash_zip__WEBPACK_IMPORTED_MODULE_5___default.a.apply(void 0, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(this.columns)).map(function (row) {
          return lodash_zipObject__WEBPACK_IMPORTED_MODULE_6___default()(_this.fields.map(function (field) {
            return field.name;
          }), row);
        })
      };
    }
    /**
     * Convert data to json columns
     * @return {Object} data in json columns format
     * @public
     */

  }, {
    key: "toJSONCols",
    value: function toJSONCols() {
      var fields = this.fields,
          columns = this.columns;
      return {
        fields: fields,
        columns: columns
      };
    }
    /**
     * Convert data to json rows
     * @return {Object} data in json rows format
     * @public
     */

  }, {
    key: "toJSONRows",
    value: function toJSONRows() {
      return {
        fields: this.fields,
        rows: lodash_zip__WEBPACK_IMPORTED_MODULE_5___default.a.apply(void 0, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(this.columns))
      };
    }
    /**
     * List all fields
     * @return {Object} fields array
     * @public
     */

  }, {
    key: "getFields",
    value: function getFields() {
      return this.fields;
    }
    /**
     * List data columns
     * @return {Object} columns array
     * @public
     */

  }, {
    key: "getColumns",
    value: function getColumns() {
      return this.columns;
    }
    /**
     *
     * @param {String} fieldName
     * @return {Object} column data
     * @public
     */

  }, {
    key: "getColumnByField",
    value: function getColumnByField(fieldName) {
      var index = lodash_findIndex__WEBPACK_IMPORTED_MODULE_7___default()(this.fields, function (_ref) {
        var name = _ref.name;
        return name === fieldName;
      });
      return this.columns[index];
    }
    /**
     *
     * @param {String} fieldName
     * @return {Boolean}
     * @public
     */

  }, {
    key: "hasField",
    value: function hasField(fieldName) {
      return lodash_findIndex__WEBPACK_IMPORTED_MODULE_7___default()(this.fields, function (_ref2) {
        var name = _ref2.name;
        return name === fieldName;
      }) !== -1;
    }
    /**
     * @return {Boolean} true if DataSet has no data
     * @public
     */

  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return this.columns.length === 0;
    }
    /**
     *
     * @param {DataSet} dataSet DataSet to compare
     * @return {Boolean} true if another dataset is equals to current one
     * @public
     */

  }, {
    key: "equals",
    value: function equals(dataSet) {
      return lodash_isEqual__WEBPACK_IMPORTED_MODULE_3___default()(this.fields, dataSet.fields) && lodash_isEqual__WEBPACK_IMPORTED_MODULE_3___default()(this.columns, dataSet.columns);
    }
  }], [{
    key: "empty",
    value: function empty() {
      return new DataSet();
    }
    /**
     * Construct a Dataset with data in json array format
     *
     * Examples:
     * ```js
     *  const dataset = DataSet.fromJSONArray(
     *     [{ name: 'x' }, { name: 'y' }, { name: 'z' }],
     *     [{ x: 'a', y: 4, z: 70 }, { x: 'b', y: 5, z: 80 }, { x: 'c', y: 6, z: 90 }]
     *  );
     * ```
     * @return {DataSet} DataSet
     * @public
     */

  }, {
    key: "fromJSONArray",
    value: function fromJSONArray() {
      var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var results = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var fieldList = fields;

      if (fieldList == null || fieldList.length === 0) {
        if (results.length > 0) {
          var rowSample = results[0];
          fieldList = Object.keys(rowSample).map(function (field) {
            return {
              name: field
            };
          });
        } else {
          fieldList = [];
        }
      }

      var columns = fieldList.map(function (_ref3) {
        var name = _ref3.name;
        return results.reduce(function (col, row) {
          // if a field is not present on a result entry we set it to null
          col.push(row[name] === undefined ? null : row[name]);
          return col;
        }, []);
      });
      return new DataSet(fieldList, columns);
    }
    /**
     * Construct a Dataset with data in json columns format
     *
     * Examples:
     * ```js
     *  const dataset = DataSet.fromJSONCols(
     *     [{ name: 'x' }, { name: 'y' }, { name: 'z' }],
     *     [['a', 'b', 'c'], [4, 5, 6], [70, 80, 90]];
     *  );
     * ```
     * @return {DataSet} DataSet
     * @public
     */

  }, {
    key: "fromJSONCols",
    value: function fromJSONCols() {
      var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var columns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      return new DataSet(fields, columns);
    }
    /**
     * Construct a Dataset with data in json rows format
     *
     * Examples:
     * ```js
     *  const dataset = DataSet.fromJSONRows(
     *     [{ name: 'x' }, { name: 'y' }, { name: 'z' }],
     *     [['a', 4, 70], ['b', 5, 80], ['c', 6, 90]];
     *  );
     * ```
     * @return {DataSet} DataSet
     * @public
     */

  }, {
    key: "fromJSONRows",
    value: function fromJSONRows() {
      var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var rows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      return new DataSet(fields, lodash_zip__WEBPACK_IMPORTED_MODULE_5___default.a.apply(void 0, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(rows)));
    }
  }]);

  return DataSet;
}();



/***/ }),
/* 58 */
/***/ (function(module, exports) {

module.exports = require("lodash/isString");

/***/ }),
/* 59 */
/***/ (function(module, exports) {

module.exports = require("lodash/zipObject");

/***/ }),
/* 60 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/console");

/***/ }),
/* 61 */,
/* 62 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export getDataSet */
/* unused harmony export getRequestParams */
/* unused harmony export getMeta */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getAnnotationLabelAndColor; });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(26);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(22);
/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_get__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(63);
/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _splunk_visualizations_shared_console__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(60);
/* harmony import */ var _splunk_visualizations_shared_console__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_splunk_visualizations_shared_console__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _DataSet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(57);




 // Todo: can be removed/refactored in the future if we have data contract parser for all visualizations
// Some functions are still used by Gauges, we can remove them when gauges have been refreshed.

/**
 * Returns a dataset instance based on data from props
 * @param {object} vizProps
 * @param {string} [dataSourceType='primary']
 * @returns {DataSet}
 */

function getDataSet(vizProps) {
  var dataSourceType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'primary';
  var data = lodash_get__WEBPACK_IMPORTED_MODULE_1___default()(vizProps, ['dataSources', dataSourceType, 'data']);
  return data ? new _DataSet__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"](data.fields, data.columns) : null;
}
/**
 * Returns the request parameters for a dataSourceType in vizProps
 * @param {object} dataSourcesProps
 * @param {string} [dataSourceType='primary']
 * @returns {object}
 */

function getRequestParams(vizProps) {
  var dataSourceType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'primary';
  return lodash_get__WEBPACK_IMPORTED_MODULE_1___default()(vizProps, ['dataSources', dataSourceType, 'requestParams']);
}
/**
 * Returns the meta data for a dataSourceType in vizProps
 * @param {object} vizProps
 * @param {string} [dataSourceType='primary']
 * @returns {object}
 */

function getMeta(vizProps) {
  var dataSourceType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'primary';
  return lodash_get__WEBPACK_IMPORTED_MODULE_1___default()(vizProps, ['dataSources', dataSourceType, 'meta'], {});
}
/**
 * Returns the annotation label and color as arrays
 * If annotation.categoryColors is defined with labels, as an object in options, such as {"Server Stop":"#FF0000","Server Start":"00FF00"},
 * parse annotation color and labels from options, otherwise from encoding.
 * @param {Object} input
 * @param {(Object|String)} input.annotationCategoryColor  annotation.categoryColors option
 * @param {Array} input.annotationLabelEncoding
 * @param {Array} input.annotationColorEncoding
 * @returns {Object} annotation
 * @returns {Array} annotation.annotationLabel
 * @returns {Array} annotation.annotationColor
 */

function getAnnotationLabelAndColor(_ref) {
  var annotationCategoryColor = _ref.annotationCategoryColor,
      annotationLabelEncoding = _ref.annotationLabelEncoding,
      annotationColorEncoding = _ref.annotationColorEncoding;

  if (!lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default()(annotationCategoryColor) && typeof annotationCategoryColor !== 'string') {
    return {
      annotationLabel: annotationLabelEncoding,
      annotationColor: annotationColorEncoding
    };
  }

  var annotationObj = annotationCategoryColor;

  if (typeof annotationCategoryColor === 'string') {
    _splunk_visualizations_shared_console__WEBPACK_IMPORTED_MODULE_3___default.a.warn("The option type 'string' for 'annotation.categoryColors' has been deprecated.");

    try {
      annotationObj = JSON.parse(annotationCategoryColor);
    } catch (e) {
      _splunk_visualizations_shared_console__WEBPACK_IMPORTED_MODULE_3___default.a.warn("'annotation.categoryColors' option is not a valid JSON string.");
      return {
        annotationLabel: annotationLabelEncoding,
        annotationColor: annotationColorEncoding
      };
    }
  } // If no annotationLabel is defined in encoding, generate a sequence of annotationLabel from the keys of annotation.categoryColor option.


  var annotationLabel = annotationLabelEncoding && Array.isArray(annotationLabelEncoding) ? annotationLabelEncoding : Object.keys(annotationObj); // If annotationColor encoding and annotation.categoryColors option are both defined, take the colors defined in color option,
  // and the remaining colors from the encoding if they are not defined in option.
  // Or if annotationColor encoding is not defined, use annotation.categoryColors option to generate a color array.

  var annotationColor;

  if (annotationColorEncoding && Array.isArray(annotationColorEncoding)) {
    annotationColor = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(annotationColorEncoding);
    annotationLabel.forEach(function (label, i) {
      if (annotationObj[label]) {
        annotationColor[i] = annotationObj[label];
      }
    });
  } else {
    annotationColor = annotationLabel.map(function (label) {
      return annotationObj[label];
    });
  }

  return {
    annotationLabel: annotationLabel,
    annotationColor: annotationColor
  };
}

/***/ }),
/* 63 */
/***/ (function(module, exports) {

module.exports = require("lodash/isPlainObject");

/***/ }),
/* 64 */
/***/ (function(module, exports) {

module.exports = require("@splunk/react-icons/BarBeside");

/***/ }),
/* 65 */
/***/ (function(module, exports) {

module.exports = require("@splunk/react-icons/BarStacked");

/***/ }),
/* 66 */
/***/ (function(module, exports) {

module.exports = require("@splunk/react-icons/BarStacked100");

/***/ }),
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */
/***/ (function(module, exports) {

module.exports = require("@splunk/react-icons/MissingValueSkipped");

/***/ }),
/* 74 */
/***/ (function(module, exports) {

module.exports = require("@splunk/react-icons/MissingValueZero");

/***/ }),
/* 75 */
/***/ (function(module, exports) {

module.exports = require("@splunk/react-icons/MissingValueJoin");

/***/ }),
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualization-encoding-parsers/AreaParser");

/***/ }),
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */
/***/ (function(module, exports) {

module.exports = require("@splunk/react-visualizations/Area");

/***/ }),
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */,
/* 110 */,
/* 111 */,
/* 112 */,
/* 113 */,
/* 114 */,
/* 115 */,
/* 116 */,
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */,
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */,
/* 126 */,
/* 127 */,
/* 128 */,
/* 129 */,
/* 130 */,
/* 131 */,
/* 132 */,
/* 133 */,
/* 134 */,
/* 135 */,
/* 136 */,
/* 137 */,
/* 138 */,
/* 139 */,
/* 140 */,
/* 141 */,
/* 142 */,
/* 143 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "AreaComponent", function() { return /* binding */ Area_AreaComponent; });

// EXTERNAL MODULE: external "@babel/runtime/helpers/extends"
var extends_ = __webpack_require__(14);
var extends_default = /*#__PURE__*/__webpack_require__.n(extends_);

// EXTERNAL MODULE: external "@babel/runtime/helpers/classCallCheck"
var classCallCheck_ = __webpack_require__(7);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck_);

// EXTERNAL MODULE: external "@babel/runtime/helpers/createClass"
var createClass_ = __webpack_require__(8);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass_);

// EXTERNAL MODULE: external "@babel/runtime/helpers/inherits"
var inherits_ = __webpack_require__(12);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits_);

// EXTERNAL MODULE: external "@babel/runtime/helpers/possibleConstructorReturn"
var possibleConstructorReturn_ = __webpack_require__(13);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn_);

// EXTERNAL MODULE: external "@babel/runtime/helpers/getPrototypeOf"
var getPrototypeOf_ = __webpack_require__(5);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf_);

// EXTERNAL MODULE: external "@babel/runtime/helpers/defineProperty"
var defineProperty_ = __webpack_require__(3);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty_);

// EXTERNAL MODULE: external "react"
var external_react_ = __webpack_require__(2);
var external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);

// EXTERNAL MODULE: external "lodash/omit"
var omit_ = __webpack_require__(56);
var omit_default = /*#__PURE__*/__webpack_require__.n(omit_);

// EXTERNAL MODULE: external "@splunk/dashboard-visualizations/common/BaseVisualization"
var BaseVisualization_ = __webpack_require__(9);
var BaseVisualization_default = /*#__PURE__*/__webpack_require__.n(BaseVisualization_);

// EXTERNAL MODULE: external "@splunk/dashboard-visualizations/utils/dataUtils"
var dataUtils_ = __webpack_require__(27);

// EXTERNAL MODULE: external "@splunk/dashboard-visualizations/utils/enhancer"
var enhancer_ = __webpack_require__(19);

// EXTERNAL MODULE: external "@splunk/react-visualizations/Area"
var Area_ = __webpack_require__(96);
var Area_default = /*#__PURE__*/__webpack_require__.n(Area_);

// EXTERNAL MODULE: external "@splunk/visualization-encoding-parsers/AreaParser"
var AreaParser_ = __webpack_require__(85);

// EXTERNAL MODULE: external "@splunk/visualization-themes/variables"
var variables_ = __webpack_require__(20);

// EXTERNAL MODULE: external "@splunk/dashboard-visualizations/common/VisualizationEvent"
var VisualizationEvent_ = __webpack_require__(18);
var VisualizationEvent_default = /*#__PURE__*/__webpack_require__.n(VisualizationEvent_);

// EXTERNAL MODULE: external "@splunk/dashboard-visualizations/common/IconPlaceholder"
var IconPlaceholder_ = __webpack_require__(16);
var IconPlaceholder_default = /*#__PURE__*/__webpack_require__.n(IconPlaceholder_);

// EXTERNAL MODULE: external "@splunk/visualization-icons"
var visualization_icons_ = __webpack_require__(21);

// EXTERNAL MODULE: external "@splunk/visualizations-shared/simpleXMLOptions"
var simpleXMLOptions_ = __webpack_require__(38);

// EXTERNAL MODULE: ./src/utils/eventUtils.js
var eventUtils = __webpack_require__(29);

// EXTERNAL MODULE: ./src/utils/themeUtils.js
var themeUtils = __webpack_require__(39);

// EXTERNAL MODULE: ./src/utils/propUtils.js
var propUtils = __webpack_require__(62);

// EXTERNAL MODULE: external "@splunk/visualizations-shared/schemaUtils"
var schemaUtils_ = __webpack_require__(1);

// CONCATENATED MODULE: ./src/visualizations/Area/optionsSchema.js

/* harmony default export */ var optionsSchema = ({
  'annotation.categoryColors': {
    description: "Specify mapping of Hex code for colors to annotation categories. For example: {'Server Stop':'#FF0000','Server Start':'00FF00'}. Note: Option type 'string' has been deprecated.",
    type: ['object', 'string']
  },
  'axisLabelsX.maxLabelParts': {
    default: 3,
    minimum: 1,
    description: 'Specify the maximum number of time-parts that a tick label will have (the 3 possible parts are year, month, time).',
    type: 'number'
  },
  'axisLabelsX.axisVisibility': {
    default: 'hide',
    description: 'Specify whether to show the x-axis.',
    pattern: Object(schemaUtils_["getPattern"])(['show', 'hide']),
    type: 'string'
  },
  'axisLabelsY.axisVisibility': {
    default: 'hide',
    description: 'Specify whether the y-axis line is visible.',
    pattern: Object(schemaUtils_["getPattern"])(['show', 'hide']),
    type: 'string'
  },
  'axisLabelsY2.axisVisibility': {
    default: 'hide',
    description: 'Specify whether the y2-axis line is visible.',
    pattern: Object(schemaUtils_["getPattern"])(['show', 'hide']),
    type: 'string'
  },
  'axisLabelsY.extendsAxisRange': {
    default: true,
    description: 'Specify whether the y-axis should be extended to include whole major tick marks.',
    type: 'boolean'
  },
  'axisLabelsX.majorLabelStyle.rotation': {
    default: '0',
    description: 'Specify the rotation of the x-axis label in degrees.',
    enum: [-90, -45, 0, 45, 90],
    type: 'number'
  },
  'axisLabelsX.majorLabelVisibility': {
    default: 'auto',
    description: 'Specify whether labels for major tick marks are visible on the x-axis.',
    pattern: Object(schemaUtils_["getPattern"])(['auto', 'show', 'hide']),
    type: 'string'
  },
  'axisLabelsY2.integerUnits': {
    default: false,
    description: 'Specify whether the major unit of the y2-axis is rounded to the nearest integer.',
    type: 'boolean'
  },
  'axisLabelsY.majorLabelVisibility': {
    default: 'auto',
    description: 'Specify whether labels for major tick marks are visible on the y-axis.',
    pattern: Object(schemaUtils_["getPattern"])(['auto', 'show', 'hide']),
    type: 'string'
  },
  'axisLabelsY2.majorLabelVisibility': {
    default: 'auto',
    description: 'Specify whether labels for major tick marks are visible on the y2-axis.',
    pattern: Object(schemaUtils_["getPattern"])(['auto', 'show', 'hide']),
    type: 'string'
  },
  'axisLabelsX.majorTickSize': {
    default: 6,
    description: 'Specify the size, in pixels, of major tick marks on the x-axis.',
    type: 'number'
  },
  'axisLabelsY.majorTickSize': {
    default: 6,
    description: 'Specify the size, in pixels, of major tick marks on the y-axis.',
    type: 'number'
  },
  'axisLabelsY2.majorTickSize': {
    default: 6,
    description: 'Specify the size, in pixels, of major tick marks on the y2-axis.',
    type: 'number'
  },
  'axisLabelsY.minorTickSize': {
    default: 6,
    description: 'Specify the size, in pixels, of minor tick marks on the y-axis.',
    type: 'number'
  },
  'axisLabelsY2.minorTickSize': {
    default: 6,
    description: 'Specify the size, in pixels, of minor tick marks on the y2-axis.',
    type: 'number'
  },
  'axisLabelsX.majorTickVisibility': {
    default: 'hide',
    description: 'Specify whether major tick marks on the x-axis are visible.',
    pattern: Object(schemaUtils_["getPattern"])(['auto', 'show', 'hide']),
    type: 'string'
  },
  'axisLabelsY.majorTickVisibility': {
    default: 'hide',
    description: 'Specify whether major tick marks on the y-axis are visible.',
    pattern: Object(schemaUtils_["getPattern"])(['auto', 'show', 'hide']),
    type: 'string'
  },
  'axisLabelsY2.majorTickVisibility': {
    default: 'hide',
    description: 'Specify whether major tick marks on the y2-axis are visible.',
    pattern: Object(schemaUtils_["getPattern"])(['auto', 'show', 'hide']),
    type: 'string'
  },
  'axisLabelsY.majorUnit': {
    default: 'auto',
    description: 'Specify the spacing unit between major tick marks along the numeric y-axis.',
    type: ['number', 'string']
  },
  'axisLabelsY2.majorUnit': {
    default: 'auto',
    description: 'Specify the spacing unit between major tick marks along the numeric y2-axis.',
    type: ['number', 'string']
  },
  'axisLabelsY.minorTickVisibility': {
    default: 'auto',
    description: 'Specify whether minor tick marks on the y-axis are visible.',
    pattern: Object(schemaUtils_["getPattern"])(['auto', 'show', 'hide']),
    type: 'string'
  },
  'axisLabelsY2.minorTickVisibility': {
    default: 'auto',
    description: 'Specify whether minor tick marks on the y2-axis are visible.',
    pattern: Object(schemaUtils_["getPattern"])(['auto', 'show', 'hide']),
    type: 'string'
  },
  'axisY.abbreviation': {
    default: 'none',
    description: 'Specify whether to abbreviate large y-axis values with the closest SI prefix.',
    pattern: Object(schemaUtils_["getPattern"])(['none', 'auto']),
    type: 'string'
  },
  'axisY2.abbreviation': {
    default: 'none',
    description: 'Specify whether to abbreviate large y2-axis values with the closest SI prefix.',
    pattern: Object(schemaUtils_["getPattern"])(['none', 'auto']),
    type: 'string'
  },
  'axisY.includeZero': {
    default: false,
    description: 'Specify whether the y-axis range includes zero.',
    type: 'boolean'
  },
  'axisY2.includeZero': {
    default: false,
    description: 'Specify whether the y2-axis range includes zero.',
    type: 'boolean'
  },
  'axisY.maximumNumber': {
    default: 'auto',
    description: 'Specify the maximum number for the visible y-axis range.',
    type: ['number', 'string']
  },
  'axisY2.maximumNumber': {
    default: 'auto',
    description: 'Specify the maximum number for the visible y2-axis range.',
    type: ['number', 'string']
  },
  'axisY.minimumNumber': {
    default: 'auto',
    description: 'Specify the minimum number for the visible y-axis range.',
    type: ['number', 'string']
  },
  'axisY2.minimumNumber': {
    default: 'auto',
    description: 'Specify the minimum number for the visible y2-axis range.',
    type: ['number', 'string']
  },
  'axisY.scale': {
    default: 'linear',
    description: 'Specify the type of scale that applies to a numerical y-axis.',
    pattern: Object(schemaUtils_["getPattern"])(['liner', 'log']),
    type: 'string'
  },
  'axisY2.scale': {
    default: 'linear',
    description: 'Specify the type of scale that applies to a numerical y2-axis.',
    pattern: Object(schemaUtils_["getPattern"])(['liner', 'log']),
    type: 'string'
  },
  'axisTitleX.text': {
    description: 'Specify the title of the x-axis.',
    type: 'string'
  },
  'axisTitleY.text': {
    description: 'Specify the title of the y-axis.',
    type: 'string'
  },
  'axisTitleY2.text': {
    description: 'Specify the title of the y2-axis.',
    type: 'string'
  },
  'axisTitleX.visibility': {
    default: 'visible',
    description: 'Specify whether to show the title of the x-axis.',
    pattern: Object(schemaUtils_["getPattern"])(['visible', 'collapsed']),
    type: 'string'
  },
  'axisTitleY.visibility': {
    default: 'visible',
    description: 'Specify whether to show the title of the y-axis.',
    pattern: Object(schemaUtils_["getPattern"])(['visible', 'collapsed']),
    type: 'string'
  },
  'axisTitleY2.visibility': {
    default: 'visible',
    description: 'Specify whether to show the title of the y2-axis.',
    pattern: Object(schemaUtils_["getPattern"])(['visible', 'collapsed']),
    type: 'string'
  },
  'chart.resultTruncationLimit': {
    default: 50000,
    description: 'Specify the number of data points rendered in a chart.',
    type: 'number'
  },
  backgroundColor: {
    description: 'Specify the Hex code for color used for a background. For example: "#0000FF".',
    pattern: schemaUtils_["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  fontColor: {
    description: 'Specify the Hex code for color used for fonts (axis labels, legends). For example, "#0000FF".',
    pattern: schemaUtils_["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  foregroundColor: {
    description: 'Specify the Hex code for the color used for a foreground. For example, "#0000FF".',
    pattern: schemaUtils_["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  seriesColors: {
    description: "Specify the Hex code for colors used for a series. For example, ['#FF0000', '#0000FF', '#008000'].\n            The default for light and dark mode is ['#1E93C6', '#F2B827', '#D6563C', '#6A5C9E', '#31A35F'].\n            The default for SCP mode is ['#A9F5E7', '#A870EF',  '#1E6271', '#45D4BA', '#602CA1',  '#9AE6F7', '#6CD0F0', '#2F8AA7',  '#422879', '#F29BAC', '#E85B79', '#C6335F',  '#FDAF93', '#FB865C', '#E9643A',  '#7EEFDA', '#26AA92', '#207865', '#C093F9', '#8747DA',  '#4EB2D2', '#912344',  '#AD3F20', '#D44C20', '#FFC34E',  '#95651D',  '#C0891E', '#ECAE11', '#FCD9A4', '#78062A'].\n            Note: Option type 'string' has been deprecated.",
    type: ['array', 'string'],
    items: {
      type: 'string'
    }
  },
  fieldColors: {
    description: "Specify the Hex code for color used for a field. For example: {'count': '#008000', 'percent': '#FFA500'}. Note: Option type 'string' has been deprecated.",
    type: ['object', 'string']
  },
  'chart.showDataLabels': {
    default: 'none',
    description: 'Specify whether bar, line, area, or column charts should display no labels, all labels, or only the min and max labels.',
    pattern: Object(schemaUtils_["getPattern"])(['none', 'all', 'minmax']),
    type: 'string'
  },
  'data.fieldListMode': {
    default: 'hide_show',
    description: 'Specify the order in which to apply the fieldShowList and fieldHideList filters.',
    pattern: Object(schemaUtils_["getPattern"])(['show_hide', 'hide_show']),
    type: 'string'
  },
  'data.fieldShowList': {
    description: "Specify a list of fields to show in the results. For example: ['percent', 'count']. Note: Option type 'string' has been deprecated.",
    type: ['array', 'string'],
    items: {
      type: 'string'
    }
  },
  'data.fieldHideList': {
    description: "Specify a list of fields to hide in the results. For example: ['percent', 'count']. Note: Option type 'string' has been deprecated.",
    type: ['array', 'string'],
    items: {
      type: 'string'
    }
  },
  'gridLinesX.showMajorLines': {
    default: true,
    description: 'Specify whether major grid lines are visible on the x-axis.',
    type: 'boolean'
  },
  'gridLinesY.showMajorLines': {
    default: true,
    description: 'Specify whether major grid lines are visible on the y-axis.',
    type: 'boolean'
  },
  'gridLinesY2.showMajorLines': {
    default: true,
    description: 'Specify whether major grid lines are visible on the y2-axis.',
    type: 'boolean'
  },
  'gridLinesY.showMinorLines': {
    default: false,
    description: 'Specify whether minor grid lines are visible on the y-axis.',
    type: 'boolean'
  },
  'gridLinesY2.showMinorLines': {
    default: false,
    description: 'Specify whether minor grid lines are visible on y2-axis.',
    type: 'boolean'
  },
  'layout.splitSeries': {
    default: false,
    description: 'Set to "true" to split a multi-series chart into separate charts that are stacked from top to bottom; one for each series.',
    type: 'boolean'
  },
  'layout.splitSeries.allowIndependentYRanges': {
    default: false,
    description: 'Specify whether split series charts have independent y-ranges.',
    type: 'boolean'
  },
  'legend.labels': {
    description: "Specify a list of labels to pre-populate the legend. For example: ['percent', 'count']. Note: Option type 'string' has been deprecated.",
    type: ['array', 'string'],
    items: {
      type: 'string'
    }
  },
  'legend.labelStyle.overflowMode': {
    default: 'ellipsisMiddle',
    description: 'Specify how to display legend labels when they overflow the layout boundaries by replacing overflow text with an ellipsis.',
    pattern: Object(schemaUtils_["getPattern"])(['ellipsisEnd', 'ellipsisMiddle', 'ellipsisStart', 'ellipsisNone']),
    type: 'string'
  },
  'legend.mode': {
    default: 'standard',
    description: 'Provides visual and behavior settings for the tooltip and legend.',
    pattern: Object(schemaUtils_["getPattern"])(['standard', 'seriesCompare']),
    type: 'string'
  },
  'legend.placement': {
    default: 'right',
    description: 'Specify the location of the legend on the panel.',
    pattern: Object(schemaUtils_["getPattern"])(['right', 'left', 'top', 'bottom', 'none']),
    type: 'string'
  },
  'axisY2.enabled': {
    default: false,
    description: 'Enable a y2-axis for chart overlays.',
    type: 'boolean'
  },
  'axisY2.fields': {
    description: 'Specify a field that should be mapped to a second y-axis for chart overlays.',
    type: 'string'
  },
  'chart.overlayFields': {
    description: 'Specify a field or a space/comma-delimited list of fields that should be mapped to the y2-axis.',
    type: 'string'
  },
  areaFillOpacity: {
    default: 0.75,
    description: 'Specify the opacity of the area chart. Values can range from 0 (transparent) to 1 (opaque).',
    type: 'number'
  },
  'chart.nullValueMode': {
    default: 'gaps',
    description: 'Specify how area and line charts handle null values.',
    pattern: Object(schemaUtils_["getPattern"])(['gaps', 'zero', 'connect']),
    type: 'string'
  },
  'chart.showLines': {
    default: true,
    description: 'Specify whether lines should be shown in area charts.',
    type: 'boolean'
  },
  'chart.stackMode': {
    default: 'default',
    description: 'Specify stacking options for area, bar, and column charts.',
    pattern: Object(schemaUtils_["getPattern"])(['default', 'stacked', 'stacked100']),
    type: 'string'
  },
  lineWidth: {
    default: 2,
    description: 'Specify the line width, in pixels, for chart overlay.',
    type: 'number'
  }
});
// EXTERNAL MODULE: external "@splunk/ui-utils/i18n"
var i18n_ = __webpack_require__(0);

// EXTERNAL MODULE: external "@splunk/react-icons/MissingValueSkipped"
var MissingValueSkipped_ = __webpack_require__(73);
var MissingValueSkipped_default = /*#__PURE__*/__webpack_require__.n(MissingValueSkipped_);

// EXTERNAL MODULE: external "@splunk/react-icons/MissingValueZero"
var MissingValueZero_ = __webpack_require__(74);
var MissingValueZero_default = /*#__PURE__*/__webpack_require__.n(MissingValueZero_);

// EXTERNAL MODULE: external "@splunk/react-icons/MissingValueJoin"
var MissingValueJoin_ = __webpack_require__(75);
var MissingValueJoin_default = /*#__PURE__*/__webpack_require__.n(MissingValueJoin_);

// EXTERNAL MODULE: external "@splunk/react-icons/BarBeside"
var BarBeside_ = __webpack_require__(64);
var BarBeside_default = /*#__PURE__*/__webpack_require__.n(BarBeside_);

// EXTERNAL MODULE: external "@splunk/react-icons/BarStacked"
var BarStacked_ = __webpack_require__(65);
var BarStacked_default = /*#__PURE__*/__webpack_require__.n(BarStacked_);

// EXTERNAL MODULE: external "@splunk/react-icons/BarStacked100"
var BarStacked100_ = __webpack_require__(66);
var BarStacked100_default = /*#__PURE__*/__webpack_require__.n(BarStacked100_);

// EXTERNAL MODULE: ./src/common/editorConfig/Axes.js
var Axes = __webpack_require__(40);

// EXTERNAL MODULE: ./src/common/editorConfig/Legend.js
var Legend = __webpack_require__(41);

// CONCATENATED MODULE: ./src/visualizations/Area/editorConfig.js









var editorConfig = [{
  label: Object(i18n_["_"])('General'),
  layout: [[{
    label: Object(i18n_["_"])('Null Values'),
    option: 'chart.nullValueMode',
    editor: 'editor.radioBar',
    editorProps: {
      values: [{
        icon: MissingValueSkipped_default.a,
        label: Object(i18n_["_"])('Gaps'),
        value: 'gaps'
      }, {
        icon: MissingValueZero_default.a,
        label: Object(i18n_["_"])('Zero'),
        value: 'zero'
      }, {
        icon: MissingValueJoin_default.a,
        label: Object(i18n_["_"])('Connect'),
        value: 'connect'
      }]
    }
  }], [{
    label: Object(i18n_["_"])('Stack Mode'),
    option: 'chart.stackMode',
    editor: 'editor.radioBar',
    editorProps: {
      values: [{
        icon: BarBeside_default.a,
        label: Object(i18n_["_"])('Not stacked'),
        value: 'default'
      }, {
        icon: BarStacked_default.a,
        label: Object(i18n_["_"])('Stacked'),
        value: 'stacked'
      }, {
        icon: BarStacked100_default.a,
        label: Object(i18n_["_"])('Stacked 100%'),
        value: 'stacked100'
      }]
    }
  }], [{
    label: Object(i18n_["_"])('Show Data Values'),
    option: 'chart.showDataLabels',
    editor: 'editor.radioBar',
    editorProps: {
      values: [{
        label: Object(i18n_["_"])('Off'),
        value: 'none'
      }, {
        label: Object(i18n_["_"])('On'),
        value: 'all'
      }, {
        label: Object(i18n_["_"])('Min/Max'),
        value: 'minmax'
      }]
    }
  }]]
}, Axes["a" /* default */], Legend["a" /* default */]];
/* harmony default export */ var Area_editorConfig = (editorConfig);
// CONCATENATED MODULE: ./src/visualizations/Area/Area.jsx








function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        defineProperty_default()(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = getPrototypeOf_default()(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = getPrototypeOf_default()(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return possibleConstructorReturn_default()(this, result);
  };
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}


















var Area_AreaComponent = /*#__PURE__*/function (_Component) {
  inherits_default()(AreaComponent, _Component);

  var _super = _createSuper(AreaComponent);

  function AreaComponent() {
    classCallCheck_default()(this, AreaComponent);

    return _super.apply(this, arguments);
  }

  createClass_default()(AreaComponent, [{
    key: "render",
    value: function render() {
      var _this = this;

      var _this$props = this.props,
          dataSources = _this$props.dataSources,
          encoding = _this$props.encoding,
          options = _this$props.options,
          width = _this$props.width,
          height = _this$props.height,
          style = _this$props.style,
          hasEventHandlers = _this$props.hasEventHandlers,
          theme = _this$props.theme,
          mode = _this$props.mode;
      var themeKey = Object(themeUtils["a" /* getChartingThemeKey */])(theme);
      var areaProps = Object(AreaParser_["parse"])(dataSources, encoding); // todo: may need merge the truncateParsedData function with parse

      var truncationLimit = options && options['chart.resultTruncationLimit'];
      areaProps = Object(dataUtils_["truncateParsedData"])(areaProps, truncationLimit);

      var _getAnnotationLabelAn = Object(propUtils["a" /* getAnnotationLabelAndColor */])({
        annotationCategoryColor: options['annotation.categoryColors'],
        annotationLabelEncoding: areaProps.annotationLabel,
        annotationColorEncoding: areaProps.annotationColor
      }),
          annotationLabel = _getAnnotationLabelAn.annotationLabel,
          annotationColor = _getAnnotationLabelAn.annotationColor;

      var onPointClick = function onPointClick(evt) {
        if (Object(eventUtils["enableClickHandler"])(hasEventHandlers, mode)) {
          _this.props.onEventTrigger(new VisualizationEvent_default.a({
            originalEvent: evt.originalEvent,
            payload: evt.payload,
            type: 'point.click'
          }));
        }
      };

      var onLegendClick = function onLegendClick(evt) {
        if (Object(eventUtils["enableClickHandler"])(hasEventHandlers, mode)) {
          _this.props.onEventTrigger(new VisualizationEvent_default.a({
            originalEvent: evt.originalEvent,
            payload: evt.payload,
            type: 'legend.click'
          }));
        }
      };

      var onRangeSelect = function onRangeSelect(evt) {
        if (Object(eventUtils["enableClickHandler"])(hasEventHandlers, mode)) {
          _this.props.onEventTrigger(new VisualizationEvent_default.a({
            originalEvent: evt.originalEvent,
            payload: evt.payload,
            type: 'range.select'
          }));
        }
      };

      return /*#__PURE__*/external_react_default.a.createElement(Area_default.a, extends_default()({
        width: width,
        height: height,
        style: style,
        themeKey: themeKey,
        x: areaProps.x,
        y: areaProps.y,
        y2: areaProps.y2,
        annotationX: areaProps.annotationX,
        annotationLabel: annotationLabel,
        annotationColor: annotationColor,
        xFieldName: areaProps.xFieldName,
        yFieldName: areaProps.yFieldName,
        y2FieldName: areaProps.y2FieldName,
        onPointClick: onPointClick,
        onLegendClick: onLegendClick,
        onRangeSelect: onRangeSelect
      }, Object(simpleXMLOptions_["getPropsForSimpleXMLOptions"])(omit_default()(options, ['annotation.categoryColors']))));
    }
  }]);

  return AreaComponent;
}(external_react_["Component"]);

defineProperty_default()(Area_AreaComponent, "propTypes", BaseVisualization_default.a.propTypes);

defineProperty_default()(Area_AreaComponent, "defaultProps", _objectSpread(_objectSpread({}, BaseVisualization_default.a.defaultProps), {}, {
  height: 250
}));

defineProperty_default()(Area_AreaComponent, "dataContract", AreaParser_["dataContract"]);

defineProperty_default()(Area_AreaComponent, "vizContract", {
  initialDimension: {
    width: 300,
    height: 150
  }
});

defineProperty_default()(Area_AreaComponent, "schema", optionsSchema);

defineProperty_default()(Area_AreaComponent, "editor", Area_editorConfig);

/* harmony default export */ var Area = __webpack_exports__["default"] = (Object(enhancer_["withVisualizationAndThemeHOCs"])({
  defaultBackgroundColor: variables_["enterprise"].defaultBackgroundColor,
  placeholder: /*#__PURE__*/external_react_default.a.createElement(IconPlaceholder_default.a, {
    icon: /*#__PURE__*/external_react_default.a.createElement(visualization_icons_["Area"], null)
  })
})(Area_AreaComponent));

/***/ })
/******/ ]);
//# sourceMappingURL=Area.js.map