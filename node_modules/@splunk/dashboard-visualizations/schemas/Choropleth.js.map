{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@splunk/visualizations-shared/schemaUtils\"","webpack:///./src/visualizations/Choropleth/optionsSchema.js"],"names":["source","description","pattern","getPattern","type","projection","selector","default","fillColor","strokeColor","strokeHighlightColor","backgroundColor","name","sourceBounds","logicalBounds","geoFeatureGroups","items"],"mappings":";;;;;;;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;AClFA,sE;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAEe;AACXA,QAAM,EAAE;AACJC,eAAW,EADP;AAEJC,WAAO,EAAEC,4FAAU,CAAC,qBAFhB,qBAEgB,CAAD,CAFf;AAGJC,QAAI,EAAE;AAHF,GADG;AAMXC,YAAU,EAAE;AACRJ,eAAW,EADH;AAERC,WAAO,EAAEC,4FAAU,CAAC,aAFZ,iBAEY,CAAD,CAFX;AAGRC,QAAI,EAAE;AAHE,GAND;AAWXE,UAAQ,EAAE;AAAEC,WAAO,EAAT;AAAuBN,eAAW,EAAlC;AAAoEG,QAAI,EAAE;AAA1E,GAXC;AAYXI,WAAS,EAAE;AACPP,eAAW,EADJ;AAEPC,WAAO,EAFA;AAGPE,QAAI,EAAE;AAHC,GAZA;AAiBXK,aAAW,EAAE;AACTR,eAAW,EADF;AAGTC,WAAO,EAHE;AAITE,QAAI,EAAE;AAJG,GAjBF;AAuBXM,sBAAoB,EAAE;AAClBT,eAAW,EADO;AAGlBC,WAAO,EAHW;AAIlBE,QAAI,EAAE;AAJY,GAvBX;AA6BXO,iBAAe,EAAE;AACbV,eAAW,EADE;AAGbC,WAAO,EAHM;AAIbE,QAAI,EAAE;AAJO,GA7BN;AAmCXQ,MAAI,EAAE;AAAEX,eAAW,EAAb;AAA4CG,QAAI,EAAE;AAAlD,GAnCK;AAoCXS,cAAY,EAAE;AACVZ,eAAW,EADD;AAGVG,QAAI,EAAE;AAHI,GApCH;AAyCXU,eAAa,EAAE;AACXb,eAAW,EADA;AAGXG,QAAI,EAAE;AAHK,GAzCJ;AA8CXW,kBAAgB,EAAE;AACdX,QAAI,EADU;AAEdY,SAAK,EAAE;AAAEZ,UAAI,EAAE;AAAR,KAFO;AAGdH,eAAW,EACP;AAJU;AA9CP,CAAf,E","file":"Choropleth.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = require(\"@splunk/visualizations-shared/schemaUtils\");","import { COLOR_OR_TOKEN_PATTERN, getPattern } from '@splunk/visualizations-shared/schemaUtils';\n\nexport default {\n    source: {\n        description: 'Source for the geo data.',\n        pattern: getPattern(['geo://default/us', 'geo://default/world']),\n        type: 'string',\n    },\n    projection: {\n        description: 'Specifies the map projection.',\n        pattern: getPattern(['mercator', 'equirectangular']),\n        type: 'string',\n    },\n    selector: { default: '.feature', description: 'Selector to get all features', type: 'string' },\n    fillColor: {\n        description: 'Specify the Hex code for fill color of features with no data. For example: \"#0000FF\".',\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    strokeColor: {\n        description:\n            'Specify the Hex code for stroke color for all features that are not selected. For example: \"#0000FF\".',\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    strokeHighlightColor: {\n        description:\n            'Specify the Hex code for stroke highlight color for all features that are selected. For example: \"#0000FF\".',\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    backgroundColor: {\n        description:\n            'Specify the Hex code for the color used for the Choropleth background. For example: \"#0000FF\".',\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    name: { description: 'Name of the Visualization', type: 'string' },\n    sourceBounds: {\n        description:\n            'Specify the bounds of the geographic area as lat:{min:..., max:...}, long:{min:..., max:..}.',\n        type: 'object',\n    },\n    logicalBounds: {\n        description:\n            'Specify the logical bounds of the projected map as x:{min:..., max:...}, y:{min:..., max:..}.',\n        type: 'object',\n    },\n    geoFeatureGroups: {\n        type: 'array',\n        items: { type: 'object' },\n        description:\n            'A geo feature group consists of a name, logical bounds, sourcebounds and a featureMatcher, which consists of a property name and a regex to check against that property.',\n    },\n};\n"],"sourceRoot":""}