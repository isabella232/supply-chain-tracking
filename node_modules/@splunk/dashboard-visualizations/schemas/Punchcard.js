/*!
 * Copyright © 2018 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 14);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/schemaUtils");

/***/ }),

/***/ 14:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _splunk_visualizations_shared_schemaUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _splunk_visualizations_shared_schemaUtils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_splunk_visualizations_shared_schemaUtils__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["default"] = ({
  backgroundColor: {
    description: 'Specify the color used for the background using a Hex Code. The default for enterprise light mode is "#FFFFFF". The default for enterprise dark mode is "#000000". The default for prisma dark mode is "#0B0C0E".',
    pattern: _splunk_visualizations_shared_schemaUtils__WEBPACK_IMPORTED_MODULE_0__["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  showBubbleLabels: {
    default: 'all',
    description: 'Specify when the bubble label will be displayed, no labels, all labels or only the max labels.',
    pattern: Object(_splunk_visualizations_shared_schemaUtils__WEBPACK_IMPORTED_MODULE_0__["getPattern"])(['all', 'max', 'none']),
    type: 'string'
  },
  bubbleRowScale: {
    default: 'global',
    description: 'Specify how bubbles are scaled relative to other rows.',
    pattern: Object(_splunk_visualizations_shared_schemaUtils__WEBPACK_IMPORTED_MODULE_0__["getPattern"])(['global', 'row']),
    type: 'string'
  },
  bubbleScale: {
    default: 'area',
    description: 'Specify whether the bubble size should scale based on the value being proportional to the radius or the area.',
    pattern: Object(_splunk_visualizations_shared_schemaUtils__WEBPACK_IMPORTED_MODULE_0__["getPattern"])(['radius', 'area']),
    type: 'string'
  },
  colorMode: {
    default: 'categorical',
    description: "When category data is returned, 'categorical' option will color the bubbles by categories and 'sequential' option will color the bubbles by value.",
    pattern: Object(_splunk_visualizations_shared_schemaUtils__WEBPACK_IMPORTED_MODULE_0__["getPattern"])(['sequential', 'categorical']),
    type: 'string'
  },
  seriesColors: {
    type: 'array',
    items: {
      type: 'string'
    },
    description: "Specify the Hex code for colors used for bubbles when colorMode option is 'categorical'. For example, ['#C093F9', '#0000FF', '#D6563C'].",
    default: ['#1E93C6', '#F2B827', '#D6563C', '#6A5C9E', '#31A35F']
  },
  bubbleColor: {
    default: '#7B56DB',
    description: "Specify the Hex code for color used for bubbles when colorMode option is 'sequential'. For example: \"#0000FF\".",
    pattern: _splunk_visualizations_shared_schemaUtils__WEBPACK_IMPORTED_MODULE_0__["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  isBubbleSizeDynamic: {
    default: true,
    description: 'Specify whether the bubble size should be dynamic or fixed.',
    type: 'boolean'
  },
  minBubbleColorIntensity: {
    default: 0.25,
    description: "Specify the minimum opacity of the bubbles based on its value when the colorMode option is 'sequential' .\n            Values can range from 0 (transparent) to 1 (opaque).",
    type: 'number'
  },
  maxBubbleRadius: {
    default: 15,
    description: 'Specify the max radius (in pixels) of the bubbles when isBubbleSizeDynamic option is false. Greater than 0.',
    type: 'number'
  },
  maxBubbleSize: {
    default: 1,
    description: 'Specify the max percentage (in decimal format) of space a bubble should take up within a cell when isBubbleSizeDynamic option is true. The number specified must be between 0 and 1.',
    type: 'number'
  },
  minBubbleRadius: {
    default: 1,
    description: 'Specify the min radius (in pixels) of the bubbles when isBubbleSizeDynamic option is false. Greater than 0.',
    type: 'number'
  },
  minBubbleSize: {
    default: 0.25,
    description: 'Specify the min percentage (in decimal format) of space a bubble should take up within a cell when isBubbleSizeDynamic option is true. The number specified must be between 0 and 1.',
    type: 'number'
  },
  showMaxValuePulsation: {
    default: true,
    description: 'Specify whether the maximum bubble should pulsate.',
    type: 'boolean'
  },
  showLegend: {
    default: true,
    description: "Specify whether a legend should be rendered when colorMode option is 'categorical'.",
    type: 'boolean'
  },
  useDefaultSort: {
    default: false,
    description: 'If set to true, will sort axes based on order of time, digits and strings.',
    type: 'boolean'
  }
});

/***/ })

/******/ });
//# sourceMappingURL=Punchcard.js.map