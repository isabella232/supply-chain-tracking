{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@splunk/visualizations-shared/schemaUtils\"","webpack:///./src/visualizations/SingleValue/optionsSchema.js"],"names":["unit","description","type","unitPosition","default","pattern","getPattern","underLabel","backgroundColor","showTrendIndicator","useTrendUnits","showSparkline","sparklinePosition","sparklineFillColor","sparklineStrokeColor","showSparklineTooltip","sparklineAreaGraph","sparklineAcceptNullData","sparklineHighlightSegments","sparklineHighlightDots","trendDisplayMode","numberPrecision","maximum","minimum","useThousandSeparators","majorFontSize","deltaFontSize"],"mappings":"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","file":"SingleValue.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n","module.exports = require(\"@splunk/visualizations-shared/schemaUtils\");","import { COLOR_OR_TOKEN_PATTERN, getPattern } from '@splunk/visualizations-shared/schemaUtils';\n\nexport default {\n    unit: { description: 'Specify text to show next to the major value.', type: 'string' },\n    unitPosition: {\n        default: 'after',\n        description: 'Specify whether the unit text should appear before or after the major value.',\n        pattern: getPattern(['before', 'after']),\n        type: 'string',\n    },\n    underLabel: { description: 'Specify the text that appears below the major value.', type: 'string' },\n    backgroundColor: {\n        description:\n            'Specify the color to use for the background. The hex value format should be #FFFFFF. The default for light mode is \"#FFFFFF\". The default for dark mode is \"#171d21\". The default for prisma dark is \"#0b0c0e\".',\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    showTrendIndicator: {\n        default: true,\n        description: 'Specify whether to show or hide the trend indicator.',\n        type: 'boolean',\n    },\n    useTrendUnits: {\n        default: false,\n        description:\n            'Specify whether to truncate the trend value to 2 significant digits. A magnitude unit will be displayed.',\n        type: 'boolean',\n    },\n    showSparkline: {\n        default: true,\n        description: 'Specify whether to show or hide the single value sparkline.',\n        type: 'boolean',\n    },\n    sparklinePosition: {\n        default: 'below',\n        description: 'Specify the location to display a sparkline.',\n        pattern: getPattern(['before', 'after', 'below']),\n        type: 'string',\n    },\n    sparklineFillColor: {\n        default: '#6F7A87',\n        description:\n            'Specify a color to use as the fill for the sparkline graph. The hex value format should be #FFFFFF.',\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    sparklineStrokeColor: {\n        default: '#2F353C',\n        description:\n            'Specify a color to use for the sparkline stroke. The hex value format should be #FFFFFF.',\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    showSparklineTooltip: {\n        default: false,\n        description: 'Show a tooltip to display values on the sparkline.',\n        type: 'boolean',\n    },\n    sparklineAreaGraph: {\n        default: false,\n        description: 'Specify whether to show the sparkline as an area graph rather than a line.',\n        type: 'boolean',\n    },\n    sparklineAcceptNullData: {\n        default: true,\n        description: 'Specify whether to convert null and non-numeric values in the sparkline to 0.',\n        type: 'boolean',\n    },\n    sparklineHighlightSegments: {\n        default: 0,\n        description: 'Specify the number of segments to be highlighted at the top of a sparkline area graph.',\n        type: 'number',\n    },\n    sparklineHighlightDots: {\n        default: 0,\n        description:\n            'Specify the number of markers, or dots, to display at the top of a sparkline area graph.',\n        type: 'number',\n    },\n    trendDisplayMode: {\n        default: 'absolute',\n        description: 'Specify whether the trend value is displayed as a percentage or an absolute count.',\n        pattern: getPattern(['percent', 'absolute']),\n        type: 'string',\n    },\n    numberPrecision: {\n        default: 0,\n        maximum: 20,\n        minimum: 0,\n        description:\n            'Specify the number of decimal places to display. For example, to display 3 decimal places, use a value of 3. The maximum value is 20.',\n        type: 'number',\n    },\n    useThousandSeparators: {\n        default: true,\n        description: 'Specify whether numeric values use commas as thousandths separaters.',\n        type: 'boolean',\n    },\n    majorFontSize: {\n        description:\n            'Specify the font size (px) for the major value. By default the major value font size is calculated dynamically based on the available space.',\n        type: 'number',\n    },\n    deltaFontSize: {\n        description:\n            'Specify the font size (px) for the delta value. By default the delta value font size is calculated dynamically based on the available space.',\n        type: 'number',\n    },\n};\n"],"sourceRoot":""}