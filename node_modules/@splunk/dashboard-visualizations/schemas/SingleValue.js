/*!
 * Copyright © 2018 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 18);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/schemaUtils");

/***/ }),

/***/ 18:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _splunk_visualizations_shared_schemaUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _splunk_visualizations_shared_schemaUtils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_splunk_visualizations_shared_schemaUtils__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["default"] = ({
  unit: {
    description: 'Specify text to show next to the major value.',
    type: 'string'
  },
  unitPosition: {
    default: 'after',
    description: 'Specify whether the unit text should appear before or after the major value.',
    pattern: Object(_splunk_visualizations_shared_schemaUtils__WEBPACK_IMPORTED_MODULE_0__["getPattern"])(['before', 'after']),
    type: 'string'
  },
  underLabel: {
    description: 'Specify the text that appears below the major value.',
    type: 'string'
  },
  backgroundColor: {
    description: 'Specify the color to use for the background. The hex value format should be #FFFFFF. The default for light mode is "#FFFFFF". The default for dark mode is "#171d21". The default for prisma dark is "#0b0c0e".',
    pattern: _splunk_visualizations_shared_schemaUtils__WEBPACK_IMPORTED_MODULE_0__["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  showTrendIndicator: {
    default: true,
    description: 'Specify whether to show or hide the trend indicator.',
    type: 'boolean'
  },
  useTrendUnits: {
    default: false,
    description: 'Specify whether to truncate the trend value to 2 significant digits. A magnitude unit will be displayed.',
    type: 'boolean'
  },
  showSparkline: {
    default: true,
    description: 'Specify whether to show or hide the single value sparkline.',
    type: 'boolean'
  },
  sparklinePosition: {
    default: 'below',
    description: 'Specify the location to display a sparkline.',
    pattern: Object(_splunk_visualizations_shared_schemaUtils__WEBPACK_IMPORTED_MODULE_0__["getPattern"])(['before', 'after', 'below']),
    type: 'string'
  },
  sparklineFillColor: {
    default: '#6F7A87',
    description: 'Specify a color to use as the fill for the sparkline graph. The hex value format should be #FFFFFF.',
    pattern: _splunk_visualizations_shared_schemaUtils__WEBPACK_IMPORTED_MODULE_0__["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  sparklineStrokeColor: {
    default: '#2F353C',
    description: 'Specify a color to use for the sparkline stroke. The hex value format should be #FFFFFF.',
    pattern: _splunk_visualizations_shared_schemaUtils__WEBPACK_IMPORTED_MODULE_0__["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  showSparklineTooltip: {
    default: false,
    description: 'Show a tooltip to display values on the sparkline.',
    type: 'boolean'
  },
  sparklineAreaGraph: {
    default: false,
    description: 'Specify whether to show the sparkline as an area graph rather than a line.',
    type: 'boolean'
  },
  sparklineAcceptNullData: {
    default: true,
    description: 'Specify whether to convert null and non-numeric values in the sparkline to 0.',
    type: 'boolean'
  },
  sparklineHighlightSegments: {
    default: 0,
    description: 'Specify the number of segments to be highlighted at the top of a sparkline area graph.',
    type: 'number'
  },
  sparklineHighlightDots: {
    default: 0,
    description: 'Specify the number of markers, or dots, to display at the top of a sparkline area graph.',
    type: 'number'
  },
  trendDisplayMode: {
    default: 'absolute',
    description: 'Specify whether the trend value is displayed as a percentage or an absolute count.',
    pattern: Object(_splunk_visualizations_shared_schemaUtils__WEBPACK_IMPORTED_MODULE_0__["getPattern"])(['percent', 'absolute']),
    type: 'string'
  },
  numberPrecision: {
    default: 0,
    maximum: 20,
    minimum: 0,
    description: 'Specify the number of decimal places to display. For example, to display 3 decimal places, use a value of 3. The maximum value is 20.',
    type: 'number'
  },
  useThousandSeparators: {
    default: true,
    description: 'Specify whether numeric values use commas as thousandths separaters.',
    type: 'boolean'
  },
  majorFontSize: {
    description: 'Specify the font size (px) for the major value. By default the major value font size is calculated dynamically based on the available space.',
    type: 'number'
  },
  deltaFontSize: {
    description: 'Specify the font size (px) for the delta value. By default the delta value font size is calculated dynamically based on the available space.',
    type: 'number'
  }
});

/***/ })

/******/ });
//# sourceMappingURL=SingleValue.js.map