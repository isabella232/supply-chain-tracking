{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@splunk/visualizations-shared/schemaUtils\"","webpack:///./src/visualizations/Table/optionsSchema.js"],"names":["backgroundColor","description","pattern","type","count","default","rowNumbers","showHeader","headerBackgroundColor","headerTextColor","rowBackgroundColorEven","rowBackgroundColorOdd","rowTextColorEven","rowTextColorOdd","numberPrecision","maximum","minimum","useThousandSeparators","unit","unitPosition","getPattern","dataOverlayMode"],"mappings":";;;;;;;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;AClFA,sE;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAEe;AACXA,iBAAe,EAAE;AACbC,eAAW,EADE;AAGbC,WAAO,EAHM;AAIbC,QAAI,EAAE;AAJO,GADN;AAOXC,OAAK,EAAE;AACHH,eAAW,EADR;AAEHE,QAAI,EAFD;AAGHE,WAAO,EAAE;AAHN,GAPI;AAYXC,YAAU,EAAE;AACRL,eAAW,EADH;AAERE,QAAI,EAFI;AAGRE,WAAO,EAAE;AAHD,GAZD;AAiBXE,YAAU,EAAE;AACRN,eAAW,EADH;AAERE,QAAI,EAFI;AAGRE,WAAO,EAAE;AAHD,GAjBD;AAsBXG,uBAAqB,EAAE;AACnBP,eAAW,EADQ;AAEnBC,WAAO,EAFY;AAGnBC,QAAI,EAAE;AAHa,GAtBZ;AA2BXM,iBAAe,EAAE;AACbR,eAAW,EADE;AAEbC,WAAO,EAFM;AAGbC,QAAI,EAAE;AAHO,GA3BN;AAgCXO,wBAAsB,EAAE;AACpBT,eAAW,EADS;AAEpBC,WAAO,EAFa;AAGpBC,QAAI,EAAE;AAHc,GAhCb;AAqCXQ,uBAAqB,EAAE;AACnBV,eAAW,EADQ;AAEnBC,WAAO,EAFY;AAGnBC,QAAI,EAAE;AAHa,GArCZ;AA0CXS,kBAAgB,EAAE;AACdX,eAAW,EADG;AAEdC,WAAO,EAFO;AAGdC,QAAI,EAAE;AAHQ,GA1CP;AA+CXU,iBAAe,EAAE;AACbZ,eAAW,EADE;AAEbC,WAAO,EAFM;AAGbC,QAAI,EAAE;AAHO,GA/CN;AAoDXW,iBAAe,EAAE;AACbT,WAAO,EADM;AAEbU,WAAO,EAFM;AAGbC,WAAO,EAHM;AAIbf,eAAW,EAJE;AAMbE,QAAI,EAAE;AANO,GApDN;AA4DXc,uBAAqB,EAAE;AACnBZ,WAAO,EADY;AAEnBJ,eAAW,EAFQ;AAGnBE,QAAI,EAAE;AAHa,GA5DZ;AAiEXe,MAAI,EAAE;AACFjB,eAAW,EADT;AAGFE,QAAI,EAAE;AAHJ,GAjEK;AAsEXgB,cAAY,EAAE;AACVd,WAAO,EADG;AAEVJ,eAAW,EAFD;AAGVE,QAAI,EAHM;AAIVD,WAAO,EAAEkB,4FAAU,CAAC,WAAD,OAAC,CAAD;AAJT,GAtEH;AA4EXC,iBAAe,EAAE;AACbhB,WAAO,EADM;AAEbJ,eAAW,EAFE;AAGbE,QAAI,EAHS;AAIbD,WAAO,EAAEkB,4FAAU,CAAC,uBAAD,MAAC,CAAD;AAJN;AA5EN,CAAf,E","file":"Table.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n","module.exports = require(\"@splunk/visualizations-shared/schemaUtils\");","import { COLOR_OR_TOKEN_PATTERN, getPattern } from '@splunk/visualizations-shared/schemaUtils';\n\nexport default {\n    backgroundColor: {\n        description:\n            'Specify the color to use for the chart background using a Hex code. The default for light mode is \"#ffffff\". The default for dark mode is \"#212527\". The default for prisma dark mode is \"#0b0c0e\".',\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    count: {\n        description: 'Specify the maximum number of rows to display.',\n        type: 'number',\n        default: 20,\n    },\n    rowNumbers: {\n        description: 'Specify whether to display the row numbers.',\n        type: 'boolean',\n        default: false,\n    },\n    showHeader: {\n        description: 'Specify whether to display the table header.',\n        type: 'boolean',\n        default: true,\n    },\n    headerBackgroundColor: {\n        description: `Specify the table header background color using a Hex code. The default for light mode is \"#e1e6eb\". The default for dark mode is \"#171d21\". The default for prisma dark mode is \"#272a2f\".`,\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    headerTextColor: {\n        description: `Specify the table header text color using a Hex code. The default for light mode is \"#3C444D\". The default for dark mode is \"#FFFFFF\". The default for prisma dark mode is \"#f5f5f5\".`,\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    rowBackgroundColorEven: {\n        description: `Specify the background color for even table rows using a Hex code. The default for light mode is \"#F2F4F5\". The default for dark mode is \"#0D1012\". The default for prisma dark mode is \"#0b0c0e\".`,\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    rowBackgroundColorOdd: {\n        description: `Specify the background color for odd table rows using a Hex code. The default for light mode is \"#FFFFFF\". The default for dark mode is \"#000000\". The default for prisma dark mode is \"#111215\".`,\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    rowTextColorEven: {\n        description: `Specify the text color for even table rows using a Hex code. The default for light mode is \"#006EAA\". The default for dark mode is \"#00A4FD\". The default for prisma dark mode is \"#acacad\".`,\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    rowTextColorOdd: {\n        description: `Specify the text color for odd table rows using a Hex code. The default for light mode is \"#006EAA\". The default for dark mode is \"#00A4FD\". The default for prisma dark mode is \"#acacad\".`,\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    numberPrecision: {\n        default: 0,\n        maximum: 20,\n        minimum: 0,\n        description:\n            'Specify the number of decimal places to display. For example, to display 3 decimal places, use a value of 3. The maximum value is 20.',\n        type: 'number',\n    },\n    useThousandSeparators: {\n        default: true,\n        description: 'Specify whether numeric values use commas as thousandths separaters.',\n        type: 'boolean',\n    },\n    unit: {\n        description:\n            'Specify a label to show next to the cell value. The unit text should be brief. For example, an abbreviation such as MB, or a symbol such as $, can be used.',\n        type: 'string',\n    },\n    unitPosition: {\n        default: 'after',\n        description: 'Specify whether the unit label should appear before or after the cell value.',\n        type: 'string',\n        pattern: getPattern(['before', 'after']),\n    },\n    dataOverlayMode: {\n        default: 'none',\n        description: 'Specify which type of overlay to display. Overlays only apply to numerical columns.',\n        type: 'string',\n        pattern: getPattern(['heatmap', 'highlow', 'none']),\n    },\n};\n"],"sourceRoot":""}