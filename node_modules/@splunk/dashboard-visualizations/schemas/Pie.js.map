{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@splunk/visualizations-shared/schemaUtils\"","webpack:///./src/visualizations/Pie/optionsSchema.js"],"names":["backgroundColor","description","pattern","type","fontColor","foregroundColor","fieldColors","seriesColors","items","default","getPattern","hasDonutHole"],"mappings":";;;;;;;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;AClFA,sE;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAEe;AACXA,iBAAe,EAAE;AACbC,eAAW,EADE;AAEbC,WAAO,EAFM;AAGbC,QAAI,EAAE;AAHO,GADN;AAMXC,WAAS,EAAE;AACPH,eAAW,EADJ;AAGPC,WAAO,EAHA;AAIPC,QAAI,EAAE;AAJC,GANA;AAYXE,iBAAe,EAAE;AACbJ,eAAW,EADE;AAEbC,WAAO,EAFM;AAGbC,QAAI,EAAE;AAHO,GAZN;AAiBXG,aAAW,EAAE;AACTL,eAAW,EADF;AAETE,QAAI,EAAE;AAFG,GAjBF;AAqBXI,cAAY,EAAE;AACVN,eAAW,EADD;AAKVE,QAAI,EAAE,UALI,QAKJ,CALI;AAMVK,SAAK,EAAE;AAAEL,UAAI,EAAE;AAAR;AANG,GArBH;AA6BX,gCAA8B;AAC1BM,WAAO,EADmB;AAE1BR,eAAW,EAFe;AAG1BE,QAAI,EAAE;AAHoB,GA7BnB;AAkCX,oCAAkC;AAC9BM,WAAO,EADuB;AAE9BR,eAAW,EAFmB;AAI9BE,QAAI,EAAE;AAJwB,GAlCvB;AAwCX,iCAA+B;AAC3BM,WAAO,EADoB;AAE3BR,eAAW,EAFgB;AAG3BE,QAAI,EAAE;AAHqB,GAxCpB;AA6CX,sBAAoB;AAChBM,WAAO,EADS;AAEhBR,eAAW,EAFK;AAGhBE,QAAI,EAAE;AAHU,GA7CT;AAkDX,uBAAqB;AACjBM,WAAO,EADU;AAEjBR,eAAW,EAFM;AAGjBE,QAAI,EAAE;AAHW,GAlDV;AAuDX,sBAAoB;AAChBM,WAAO,EADS;AAEhBR,eAAW,EAFK;AAIhBC,WAAO,EAAEQ,4FAAU,CAAC,mCAJJ,MAII,CAAD,CAJH;AAKhBP,QAAI,EAAE;AALU,GAvDT;AA8DX,oCAAkC;AAC9BM,WAAO,EADuB;AAE9BR,eAAW,EAFmB;AAI9BC,WAAO,EAAEQ,4FAAU,CAAC,mDAJU,cAIV,CAAD,CAJW;AAK9BP,QAAI,EAAE;AALwB,GA9DvB;AAqEXQ,cAAY,EAAE;AACVF,WAAO,EADG;AAEVR,eAAW,EAFD;AAGVE,QAAI,EAAE;AAHI;AArEH,CAAf,E","file":"Pie.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","module.exports = require(\"@splunk/visualizations-shared/schemaUtils\");","import { COLOR_OR_TOKEN_PATTERN, getPattern } from '@splunk/visualizations-shared/schemaUtils';\n\nexport default {\n    backgroundColor: {\n        description: 'Specify the Hex code for color used for a background. For example: \"#0000FF\".',\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    fontColor: {\n        description:\n            'Specify the Hex code for color used for a fonts (axis labels, legends). For example: \"#0000FF\".',\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    foregroundColor: {\n        description: 'Specify the Hex code for color used for a foreground. For example, \"#0000FF\".',\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    fieldColors: {\n        description: `Specify the Hex code for color used for a field. For example: {'count': '#008000', 'percent': '#FFA500'}. Note: Option type 'string' has been deprecated.`,\n        type: ['object', 'string'],\n    },\n    seriesColors: {\n        description: `Specify the Hex code for colors used for a series. For example, ['#FF0000', '#0000FF', '#008000'].\n            The default for light and dark mode is ['#1E93C6', '#F2B827', '#D6563C', '#6A5C9E', '#31A35F'].\n            The default for SCP mode is ['#A9F5E7', '#A870EF',  '#1E6271', '#45D4BA', '#602CA1',  '#9AE6F7', '#6CD0F0', '#2F8AA7',  '#422879', '#F29BAC', '#E85B79', '#C6335F',  '#FDAF93', '#FB865C', '#E9643A',  '#7EEFDA', '#26AA92', '#207865', '#C093F9', '#8747DA',  '#4EB2D2', '#912344',  '#AD3F20', '#D44C20', '#FFC34E',  '#95651D',  '#C0891E', '#ECAE11', '#FCD9A4', '#78062A'].\n            Note: Option type 'string' has been deprecated.`,\n        type: ['array', 'string'],\n        items: { type: 'string' },\n    },\n    'chart.sliceCollapsingLabel': {\n        default: 'other',\n        description: 'Specify the label for the consolidated slice.',\n        type: 'string',\n    },\n    'chart.sliceCollapsingThreshold': {\n        default: 0.01,\n        description:\n            'Specify the size threshold as a number between 0 and 1 (inclusive), of the whole pie at which slices collapse into one consolidated slice.',\n        type: 'number',\n    },\n    'chart.resultTruncationLimit': {\n        default: 50000,\n        description: 'Specify a limit for the number of data points rendered in a chart.',\n        type: 'number',\n    },\n    'chart.showLabels': {\n        default: true,\n        description: 'Specify whether to display labels. This option has no effect when hasDonutHole=true.',\n        type: 'boolean',\n    },\n    'chart.showPercent': {\n        default: false,\n        description: 'Specify whether to display percentage values in the labels.',\n        type: 'boolean',\n    },\n    'legend.placement': {\n        default: 'right',\n        description:\n            'Specify how the legend should be aligned. This option only has an effect when hasDonutHole=true.',\n        pattern: getPattern(['right', 'left', 'top', 'bottom', 'none']),\n        type: 'string',\n    },\n    'legend.labelStyle.overflowMode': {\n        default: 'ellipsisMiddle',\n        description:\n            'Specify how to display legend labels when they overflow the layout boundaries by replacing overflow text with an ellipsis.',\n        pattern: getPattern(['ellipsisEnd', 'ellipsisMiddle', 'ellipsisStart', 'ellipsisNone']),\n        type: 'string',\n    },\n    hasDonutHole: {\n        default: false,\n        description: 'Specify whether the pie should be a donut.',\n        type: 'boolean',\n    },\n};\n"],"sourceRoot":""}