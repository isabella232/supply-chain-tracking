/*!
 * Copyright © 2018 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 67);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),

/***/ 1:
/***/ (function(module, exports) {

module.exports = require("@splunk/react-docs/DocExample");

/***/ }),

/***/ 10:
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-visualizations/common/OptionsDoc");

/***/ }),

/***/ 12:
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-visualizations/common/EncodingDoc");

/***/ }),

/***/ 2:
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/schemaUtils");

/***/ }),

/***/ 24:
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-visualizations/Choropleth");

/***/ }),

/***/ 25:
/***/ (function(module, exports) {

module.exports = require("@splunk/visualization-context/GeoRegistry");

/***/ }),

/***/ 26:
/***/ (function(module, exports) {

module.exports = require("@splunk/visualization-context/GeoJsonProvider");

/***/ }),

/***/ 27:
/***/ (function(module, exports) {

module.exports = require("@splunk/visualization-context/GeoContext");

/***/ }),

/***/ 67:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: external "react"
var external_react_ = __webpack_require__(0);
var external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);

// EXTERNAL MODULE: external "@splunk/visualizations-shared/VisualizationDocPage"
var VisualizationDocPage_ = __webpack_require__(9);
var VisualizationDocPage_default = /*#__PURE__*/__webpack_require__.n(VisualizationDocPage_);

// EXTERNAL MODULE: external "@splunk/dashboard-visualizations/common/EncodingDoc"
var EncodingDoc_ = __webpack_require__(12);
var EncodingDoc_default = /*#__PURE__*/__webpack_require__.n(EncodingDoc_);

// EXTERNAL MODULE: external "@splunk/dashboard-visualizations/common/OptionsDoc"
var OptionsDoc_ = __webpack_require__(10);
var OptionsDoc_default = /*#__PURE__*/__webpack_require__.n(OptionsDoc_);

// EXTERNAL MODULE: external "@splunk/react-docs/DocExample"
var DocExample_ = __webpack_require__(1);
var DocExample_default = /*#__PURE__*/__webpack_require__.n(DocExample_);

// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Choropleth/docs/examples/RangeValue.jsx
/* harmony default export */ var RangeValue = ("import React from 'react';\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\n\nconst geoRegistry = GeoRegistry.create();\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\n\nconst logBounds = { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } };\nconst croppedSrcBounds = {\n    lat: { min: 24, max: 50 },\n    long: { min: -130, max: -60 },\n};\n\nconst ChoroplethProps = {\n    mode: '',\n    style: {},\n    loading: false,\n    width: 800,\n    height: 600,\n    onOptionsChange: () => {},\n    onEventTrigger: () => {},\n    onRequestParamsChange: () => {},\n    options: {\n        name: 'USA',\n        source: 'geo://default/us',\n        projection: 'mercator',\n        sourceBounds: croppedSrcBounds,\n        logicalBounds: logBounds,\n        fillColor: '#EAEFF2',\n        strokeColor: '#689C8D',\n        strokeHighlightColor: '#000',\n        selector: '.feature',\n    },\n    encoding: {\n        featureId: 'primary[0]',\n        value: 'primary[1]',\n        fill: {\n            field: 'primary[1]',\n            format: {\n                type: 'rangevalue',\n                ranges: [\n                    { from: 200, value: 'red' },\n                    { from: 150, to: 200, value: 'orange' },\n                    { from: 50, to: 150, value: 'yellow' },\n                    { from: 0, to: 50, value: 'green' },\n                ],\n            },\n        },\n    },\n    dataSources: {\n        primary: {\n            data: {\n                columns: [\n                    [\n                        'US-AL',\n                        'US-AR',\n                        'US-AZ',\n                        'US-CA',\n                        'US-CO',\n                        'US-CT',\n                        'US-FL',\n                        'US-GA',\n                        'US-IA',\n                        'US-ID',\n                        'US-IL',\n                        'US-IN',\n                        'US-KS',\n                        'US-KY',\n                        'US-LA',\n                        'US-MA',\n                        'US-MD',\n                        'US-MI',\n                        'US-MN',\n                        'US-MO',\n                        'US-MT',\n                        'US-NC',\n                        'US-NE',\n                        'US-NJ',\n                        'US-NM',\n                        'US-NV',\n                        'US-NY',\n                        'US-OH',\n                        'US-OK',\n                        'US-OR',\n                        'US-PA',\n                        'US-RI',\n                        'US-SC',\n                        'US-SD',\n                        'US-TN',\n                        'US-TX',\n                        'US-UT',\n                        'US-VA',\n                        'US-WA',\n                        'US-WI',\n                    ],\n                    [\n                        17,\n                        3,\n                        65,\n                        385,\n                        69,\n                        9,\n                        142,\n                        23,\n                        11,\n                        6,\n                        28,\n                        43,\n                        12,\n                        33,\n                        12,\n                        8,\n                        9,\n                        23,\n                        6,\n                        14,\n                        10,\n                        70,\n                        8,\n                        3,\n                        23,\n                        28,\n                        62,\n                        58,\n                        17,\n                        28,\n                        43,\n                        6,\n                        8,\n                        6,\n                        33,\n                        225,\n                        9,\n                        49,\n                        48,\n                        29,\n                    ],\n                ],\n                fields: [\n                    {\n                        name: 'us_state',\n                    },\n                    {\n                        name: 'values',\n                    },\n                ],\n            },\n        },\n    },\n};\nexport default () => (\n    <GeoContextProvider value={geoRegistry}>\n        <Choropleth {...ChoroplethProps} />\n    </GeoContextProvider>\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Choropleth/docs/examples/USAInsets.jsx
/* harmony default export */ var USAInsets = ("import React from 'react';\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\n\nconst geoRegistry = GeoRegistry.create();\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\n\nconst logBounds = { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } };\n\nconst ChoroplethProps = {\n    mode: '',\n    style: {},\n    loading: false,\n    width: 800,\n    height: 600,\n    onOptionsChange: () => {},\n    onEventTrigger: () => {},\n    onRequestParamsChange: () => {},\n    options: {\n        name: 'USA',\n        source: 'geo://default/us',\n        projection: 'mercator',\n        sourceBounds: { lat: { min: -60, max: 85 }, long: { min: -180, max: 180 } },\n        logicalBounds: logBounds,\n        fillColor: '#EAEFF2',\n        strokeColor: '#689C8D',\n        strokeHighlightColor: '#000',\n        selector: '.feature',\n        geoFeatureGroups: [\n            {\n                name: 'lower48',\n                featureMatcher: {\n                    property: 'postal',\n                    regex: '^(?!(AK|HI))',\n                },\n                sourceBounds: {\n                    lat: { min: 24, max: 50 },\n                    long: { min: -130, max: -60 },\n                },\n            },\n            {\n                name: 'Alaska',\n                featureMatcher: {\n                    property: 'postal',\n                    regex: 'AK',\n                },\n                logicalBounds: {\n                    x: { min: 100, max: 200 },\n                    y: { min: 325, max: 425 },\n                },\n                sourceBounds: {\n                    lat: { min: 45, max: 72 },\n                    long: { min: -180, max: -120 }, // manually cutoff the Alaskan islands in the eastern hemisphere by taking only the western hemisphere parts\n                },\n            },\n            {\n                name: 'Hawaii',\n                featureMatcher: {\n                    property: 'postal',\n                    regex: 'HI',\n                },\n                logicalBounds: {\n                    x: { min: 250, max: 350 },\n                    y: { min: 375, max: 475 },\n                },\n                sourceBounds: {\n                    lat: { min: 18.665677, max: 22.461292 },\n                    long: { min: -160.921571, max: -154.242648 },\n                },\n            },\n        ],\n    },\n    encoding: {\n        featureId: 'primary[0]',\n        value: 'primary[1]',\n        fill: {\n            field: 'primary[1]',\n            format: {\n                type: 'gradient',\n                ranges: [5, 30, 45, 55, 150, 220, 300],\n                values: ['#b3fff0', '#99ffec', '#87f5df', '#7af5de', '#60ebd1', '#4be3c5', '#09D0AC'],\n            },\n        },\n    },\n    dataSources: {\n        primary: {\n            data: {\n                columns: [\n                    [\n                        'US-AL',\n                        'US-AR',\n                        'US-AZ',\n                        'US-CA',\n                        'US-CO',\n                        'US-CT',\n                        'US-FL',\n                        'US-GA',\n                        'US-IA',\n                        'US-ID',\n                        'US-IL',\n                        'US-IN',\n                        'US-KS',\n                        'US-KY',\n                        'US-LA',\n                        'US-MA',\n                        'US-MD',\n                        'US-MI',\n                        'US-MN',\n                        'US-MO',\n                        'US-MT',\n                        'US-NC',\n                        'US-NE',\n                        'US-NJ',\n                        'US-NM',\n                        'US-NV',\n                        'US-NY',\n                        'US-OH',\n                        'US-OK',\n                        'US-OR',\n                        'US-PA',\n                        'US-RI',\n                        'US-SC',\n                        'US-SD',\n                        'US-TN',\n                        'US-TX',\n                        'US-UT',\n                        'US-VA',\n                        'US-WA',\n                        'US-WI',\n                    ],\n                    [\n                        17,\n                        3,\n                        65,\n                        385,\n                        69,\n                        9,\n                        142,\n                        23,\n                        11,\n                        6,\n                        28,\n                        43,\n                        12,\n                        33,\n                        12,\n                        8,\n                        9,\n                        23,\n                        6,\n                        14,\n                        10,\n                        70,\n                        8,\n                        3,\n                        23,\n                        28,\n                        62,\n                        58,\n                        17,\n                        28,\n                        43,\n                        6,\n                        8,\n                        6,\n                        33,\n                        225,\n                        9,\n                        49,\n                        48,\n                        29,\n                    ],\n                ],\n                fields: [\n                    {\n                        name: 'us_state',\n                    },\n                    {\n                        name: 'values',\n                    },\n                ],\n            },\n        },\n    },\n};\n\nexport default () => (\n    <GeoContextProvider value={geoRegistry}>\n        <Choropleth {...ChoroplethProps} />\n    </GeoContextProvider>\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Choropleth/docs/examples/BasicUSA.jsx
/* harmony default export */ var BasicUSA = ("import React from 'react';\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\n\nconst geoRegistry = GeoRegistry.create();\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\n\nconst ChoroplethProps = {\n    mode: '',\n    style: {},\n    loading: false,\n    width: 800,\n    height: 600,\n    onOptionsChange: () => {},\n    onEventTrigger: () => {},\n    onRequestParamsChange: () => {},\n    options: {\n        name: 'USA',\n        source: 'geo://default/us',\n        projection: 'mercator',\n        sourceBounds: { lat: { min: 24, max: 50 }, long: { min: -130, max: -60 } },\n        logicalBounds: { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } },\n        fillColor: '#EAEFF2',\n        strokeColor: '#689C8D',\n        strokeHighlightColor: '#000000',\n        selector: '.feature',\n    },\n    encoding: {},\n};\n\nexport default () => (\n    <GeoContextProvider value={geoRegistry}>\n        <Choropleth {...ChoroplethProps} />\n    </GeoContextProvider>\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Choropleth/docs/examples/EquirectangularWorld.jsx
/* harmony default export */ var EquirectangularWorld = ("import React from 'react';\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\n\nconst geoRegistry = GeoRegistry.create();\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\n\nconst ChoroplethProps = {\n    mode: '',\n    style: {},\n    loading: false,\n    width: 800,\n    height: 600,\n    onOptionsChange: () => {},\n    onEventTrigger: () => {},\n    onRequestParamsChange: () => {},\n    options: {\n        name: 'USA',\n        source: 'geo://default/world',\n        projection: 'equirectangular',\n        sourceBounds: { lat: { min: -60, max: 85 }, long: { min: -180, max: 180 } },\n        logicalBounds: { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } },\n        fillColor: '#EAEFF2',\n        strokeColor: '#689C8D',\n        strokeHighlightColor: '#000',\n        selector: '.feature',\n    },\n    encoding: {\n        featureId: 'primary[0]',\n        fill: {\n            field: 'primary[1]',\n            format: {\n                type: 'gradient',\n            },\n        },\n    },\n    dataSources: {\n        primary: {\n            data: {\n                columns: [\n                    ['United States', 'Russia', 'Australia', 'Brazil', 'Japan', 'China', 'India', 'Canada'],\n                    [17, 3, 65, 385, 69, 9, 142, 23],\n                ],\n                fields: [\n                    {\n                        name: 'country',\n                    },\n                    {\n                        name: 'value',\n                    },\n                ],\n            },\n        },\n    },\n};\n\nexport default () => (\n    <GeoContextProvider value={geoRegistry}>\n        <Choropleth {...ChoroplethProps} />\n    </GeoContextProvider>\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Choropleth/docs/examples/WorldMap.jsx
/* harmony default export */ var WorldMap = ("import React from 'react';\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\n\nconst geoRegistry = GeoRegistry.create();\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\n\nconst ChoroplethProps = {\n    mode: '',\n    style: {},\n    loading: false,\n    width: 800,\n    height: 600,\n    onOptionsChange: () => {},\n    onEventTrigger: () => {},\n    onRequestParamsChange: () => {},\n    options: {\n        name: 'world',\n        source: 'geo://default/world',\n        projection: 'mercator',\n        sourceBounds: { lat: { min: -60, max: 85 }, long: { min: -180, max: 180 } },\n        logicalBounds: { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } },\n        fillColor: '#EAEFF2',\n        strokeColor: '#689C8D',\n        strokeHighlightColor: '#000',\n        selector: '.feature',\n    },\n    encoding: {\n        featureId: 'primary[0]',\n        value: 'primary[1]',\n        fill: {\n            field: 'primary[1]',\n            format: {\n                type: 'gradient',\n                values: ['#B3FFF0', '#99FFEC', '#87F5DF', '#7AF5DE', '#60EBD1', '#4BE3C5', '#09D0AC'],\n            },\n        },\n    },\n    dataSources: {\n        primary: {\n            data: {\n                columns: [\n                    ['United States', 'Russia', 'Australia', 'Brazil', 'Japan', 'China', 'India', 'Canada'],\n                    [17, 3, 65, 385, 69, 9, 142, 23],\n                ],\n                fields: [\n                    {\n                        name: 'country',\n                    },\n                    {\n                        name: 'value',\n                    },\n                ],\n            },\n        },\n    },\n};\n\nexport default () => (\n    <GeoContextProvider value={geoRegistry}>\n        <Choropleth {...ChoroplethProps} />\n    </GeoContextProvider>\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Choropleth/docs/examples/AutoGradient.jsx
/* harmony default export */ var AutoGradient = ("import React from 'react';\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\n\nconst geoRegistry = GeoRegistry.create();\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\n\nconst logBounds = { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } };\nconst croppedSrcBounds = {\n    lat: { min: 24, max: 50 },\n    long: { min: -130, max: -60 },\n};\n\nconst ChoroplethProps = {\n    mode: '',\n    style: {},\n    loading: false,\n    width: 800,\n    height: 600,\n    onOptionsChange: () => {},\n    onEventTrigger: () => {},\n    onRequestParamsChange: () => {},\n    options: {\n        name: 'USA',\n        source: 'geo://default/us',\n        projection: 'mercator',\n        sourceBounds: croppedSrcBounds,\n        logicalBounds: logBounds,\n        fillColor: '#EAEFF2',\n        strokeColor: '#689C8D',\n        strokeHighlightColor: '#000',\n        selector: '.feature',\n    },\n    encoding: {\n        featureId: 'primary[0]',\n        value: 'primary[1]',\n        fill: {\n            field: 'primary[1]',\n            format: {\n                type: 'gradient',\n            },\n        },\n    },\n    dataSources: {\n        primary: {\n            data: {\n                columns: [\n                    [\n                        'US-AL',\n                        'US-AR',\n                        'US-AZ',\n                        'US-CA',\n                        'US-CO',\n                        'US-CT',\n                        'US-FL',\n                        'US-GA',\n                        'US-IA',\n                        'US-ID',\n                        'US-IL',\n                        'US-IN',\n                        'US-KS',\n                        'US-KY',\n                        'US-LA',\n                        'US-MA',\n                        'US-MD',\n                        'US-MI',\n                        'US-MN',\n                        'US-MO',\n                        'US-MT',\n                        'US-NC',\n                        'US-NE',\n                        'US-NJ',\n                        'US-NM',\n                        'US-NV',\n                        'US-NY',\n                        'US-OH',\n                        'US-OK',\n                        'US-OR',\n                        'US-PA',\n                        'US-RI',\n                        'US-SC',\n                        'US-SD',\n                        'US-TN',\n                        'US-TX',\n                        'US-UT',\n                        'US-VA',\n                        'US-WA',\n                        'US-WI',\n                    ],\n                    [\n                        17,\n                        3,\n                        65,\n                        385,\n                        69,\n                        9,\n                        142,\n                        23,\n                        11,\n                        6,\n                        28,\n                        43,\n                        12,\n                        33,\n                        12,\n                        8,\n                        9,\n                        23,\n                        6,\n                        14,\n                        10,\n                        70,\n                        8,\n                        3,\n                        23,\n                        28,\n                        62,\n                        58,\n                        17,\n                        28,\n                        43,\n                        6,\n                        8,\n                        6,\n                        33,\n                        225,\n                        9,\n                        49,\n                        48,\n                        29,\n                    ],\n                ],\n                fields: [\n                    {\n                        name: 'us_state',\n                    },\n                    {\n                        name: 'values',\n                    },\n                ],\n            },\n        },\n    },\n};\nexport default () => (\n    <GeoContextProvider value={geoRegistry}>\n        <Choropleth {...ChoroplethProps} />\n    </GeoContextProvider>\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Choropleth/docs/examples/MultiGradient.jsx
/* harmony default export */ var MultiGradient = ("import React from 'react';\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\n\nconst geoRegistry = GeoRegistry.create();\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\n\nconst logBounds = { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } };\nconst croppedSrcBounds = {\n    lat: { min: 24, max: 50 },\n    long: { min: -130, max: -60 },\n};\n\nconst ChoroplethProps = {\n    mode: '',\n    style: {},\n    loading: false,\n    width: 800,\n    height: 600,\n    onOptionsChange: () => {},\n    onEventTrigger: () => {},\n    onRequestParamsChange: () => {},\n    options: {\n        name: 'USA',\n        source: 'geo://default/us',\n        projection: 'mercator',\n        sourceBounds: croppedSrcBounds,\n        logicalBounds: logBounds,\n        fillColor: '#EAEFF2',\n        strokeColor: '#689C8D',\n        strokeHighlightColor: '#000',\n        selector: '.feature',\n    },\n    encoding: {\n        featureId: 'primary[0]',\n        value: 'primary[1]',\n        fill: {\n            field: 'primary[1]',\n            format: {\n                type: 'gradient',\n                values: ['yellow', 'orange', 'red'],\n            },\n        },\n    },\n    dataSources: {\n        primary: {\n            data: {\n                columns: [\n                    [\n                        'US-AL',\n                        'US-AR',\n                        'US-AZ',\n                        'US-CA',\n                        'US-CO',\n                        'US-CT',\n                        'US-FL',\n                        'US-GA',\n                        'US-IA',\n                        'US-ID',\n                        'US-IL',\n                        'US-IN',\n                        'US-KS',\n                        'US-KY',\n                        'US-LA',\n                        'US-MA',\n                        'US-MD',\n                        'US-MI',\n                        'US-MN',\n                        'US-MO',\n                        'US-MT',\n                        'US-NC',\n                        'US-NE',\n                        'US-NJ',\n                        'US-NM',\n                        'US-NV',\n                        'US-NY',\n                        'US-OH',\n                        'US-OK',\n                        'US-OR',\n                        'US-PA',\n                        'US-RI',\n                        'US-SC',\n                        'US-SD',\n                        'US-TN',\n                        'US-TX',\n                        'US-UT',\n                        'US-VA',\n                        'US-WA',\n                        'US-WI',\n                    ],\n                    [\n                        17,\n                        3,\n                        65,\n                        385,\n                        69,\n                        9,\n                        142,\n                        23,\n                        11,\n                        6,\n                        28,\n                        43,\n                        12,\n                        33,\n                        12,\n                        8,\n                        9,\n                        23,\n                        6,\n                        14,\n                        10,\n                        70,\n                        8,\n                        3,\n                        23,\n                        28,\n                        62,\n                        58,\n                        17,\n                        28,\n                        43,\n                        6,\n                        8,\n                        6,\n                        33,\n                        225,\n                        9,\n                        49,\n                        48,\n                        29,\n                    ],\n                ],\n                fields: [\n                    {\n                        name: 'us_state',\n                    },\n                    {\n                        name: 'values',\n                    },\n                ],\n            },\n        },\n    },\n};\nexport default () => (\n    <GeoContextProvider value={geoRegistry}>\n        <Choropleth {...ChoroplethProps} />\n    </GeoContextProvider>\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Choropleth/docs/examples/GradientGreenBlue.jsx
/* harmony default export */ var GradientGreenBlue = ("import React from 'react';\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\n\nconst geoRegistry = GeoRegistry.create();\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\n\nconst logBounds = { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } };\nconst croppedSrcBounds = {\n    lat: { min: 24, max: 50 },\n    long: { min: -130, max: -60 },\n};\n\nconst ChoroplethProps = {\n    mode: '',\n    style: {},\n    loading: false,\n    width: 800,\n    height: 600,\n    onOptionsChange: () => {},\n    onEventTrigger: () => {},\n    onRequestParamsChange: () => {},\n    options: {\n        name: 'USA',\n        source: 'geo://default/us',\n        projection: 'mercator',\n        sourceBounds: croppedSrcBounds,\n        logicalBounds: logBounds,\n        fillColor: '#EAEFF2',\n        strokeColor: '#689C8D',\n        strokeHighlightColor: '#000',\n        selector: '.feature',\n    },\n    encoding: {\n        featureId: 'primary[0]',\n        value: 'primary[1]',\n        fill: {\n            field: 'primary[1]',\n            format: {\n                type: 'gradient',\n                values: ['green', 'blue'],\n            },\n        },\n    },\n    dataSources: {\n        primary: {\n            data: {\n                columns: [\n                    [\n                        'US-AL',\n                        'US-AR',\n                        'US-AZ',\n                        'US-CA',\n                        'US-CO',\n                        'US-CT',\n                        'US-FL',\n                        'US-GA',\n                        'US-IA',\n                        'US-ID',\n                        'US-IL',\n                        'US-IN',\n                        'US-KS',\n                        'US-KY',\n                        'US-LA',\n                        'US-MA',\n                        'US-MD',\n                        'US-MI',\n                        'US-MN',\n                        'US-MO',\n                        'US-MT',\n                        'US-NC',\n                        'US-NE',\n                        'US-NJ',\n                        'US-NM',\n                        'US-NV',\n                        'US-NY',\n                        'US-OH',\n                        'US-OK',\n                        'US-OR',\n                        'US-PA',\n                        'US-RI',\n                        'US-SC',\n                        'US-SD',\n                        'US-TN',\n                        'US-TX',\n                        'US-UT',\n                        'US-VA',\n                        'US-WA',\n                        'US-WI',\n                    ],\n                    [\n                        17,\n                        3,\n                        65,\n                        385,\n                        69,\n                        9,\n                        142,\n                        23,\n                        11,\n                        6,\n                        28,\n                        43,\n                        12,\n                        33,\n                        12,\n                        8,\n                        9,\n                        23,\n                        6,\n                        14,\n                        10,\n                        70,\n                        8,\n                        3,\n                        23,\n                        28,\n                        62,\n                        58,\n                        17,\n                        28,\n                        43,\n                        6,\n                        8,\n                        6,\n                        33,\n                        225,\n                        9,\n                        49,\n                        48,\n                        29,\n                    ],\n                ],\n                fields: [\n                    {\n                        name: 'us_state',\n                    },\n                    {\n                        name: 'values',\n                    },\n                ],\n            },\n        },\n    },\n};\nexport default () => (\n    <GeoContextProvider value={geoRegistry}>\n        <Choropleth {...ChoroplethProps} />\n    </GeoContextProvider>\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Choropleth/docs/examples/BackgroundColor.jsx
/* harmony default export */ var BackgroundColor = ("import React from 'react';\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\n\nconst geoRegistry = GeoRegistry.create();\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\n\nconst ChoroplethProps = {\n    mode: '',\n    style: {},\n    loading: false,\n    width: 800,\n    height: 600,\n    onOptionsChange: () => {},\n    onEventTrigger: () => {},\n    onRequestParamsChange: () => {},\n    options: {\n        name: 'USA',\n        source: 'geo://default/us',\n        projection: 'mercator',\n        sourceBounds: { lat: { min: 24, max: 50 }, long: { min: -130, max: -60 } },\n        logicalBounds: { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } },\n        fillColor: '#EAEFF2',\n        strokeColor: '#689C8D',\n        strokeHighlightColor: '#000000',\n        selector: '.feature',\n        backgroundColor: '#C0F3F3',\n    },\n    encoding: {},\n};\n\nexport default () => (\n    <GeoContextProvider value={geoRegistry}>\n        <Choropleth {...ChoroplethProps} />\n    </GeoContextProvider>\n);\n");
// EXTERNAL MODULE: external "@splunk/dashboard-visualizations/Choropleth"
var Choropleth_ = __webpack_require__(24);
var Choropleth_default = /*#__PURE__*/__webpack_require__.n(Choropleth_);

// EXTERNAL MODULE: external "@splunk/visualization-context/GeoRegistry"
var GeoRegistry_ = __webpack_require__(25);
var GeoRegistry_default = /*#__PURE__*/__webpack_require__.n(GeoRegistry_);

// EXTERNAL MODULE: external "@splunk/visualization-context/GeoJsonProvider"
var GeoJsonProvider_ = __webpack_require__(26);
var GeoJsonProvider_default = /*#__PURE__*/__webpack_require__.n(GeoJsonProvider_);

// EXTERNAL MODULE: external "@splunk/visualization-context/GeoContext"
var GeoContext_ = __webpack_require__(27);

// CONCATENATED MODULE: ./src/visualizations/Choropleth/docs/examples/RangeValue.jsx





var geoRegistry = GeoRegistry_default.a.create();
geoRegistry.addDefaultProvider(new GeoJsonProvider_default.a());
var logBounds = {
  x: {
    min: 0,
    max: 800
  },
  y: {
    min: 0,
    max: 600
  }
};
var croppedSrcBounds = {
  lat: {
    min: 24,
    max: 50
  },
  long: {
    min: -130,
    max: -60
  }
};
var ChoroplethProps = {
  mode: '',
  style: {},
  loading: false,
  width: 800,
  height: 600,
  onOptionsChange: function onOptionsChange() {},
  onEventTrigger: function onEventTrigger() {},
  onRequestParamsChange: function onRequestParamsChange() {},
  options: {
    name: 'USA',
    source: 'geo://default/us',
    projection: 'mercator',
    sourceBounds: croppedSrcBounds,
    logicalBounds: logBounds,
    fillColor: '#EAEFF2',
    strokeColor: '#689C8D',
    strokeHighlightColor: '#000',
    selector: '.feature'
  },
  encoding: {
    featureId: 'primary[0]',
    value: 'primary[1]',
    fill: {
      field: 'primary[1]',
      format: {
        type: 'rangevalue',
        ranges: [{
          from: 200,
          value: 'red'
        }, {
          from: 150,
          to: 200,
          value: 'orange'
        }, {
          from: 50,
          to: 150,
          value: 'yellow'
        }, {
          from: 0,
          to: 50,
          value: 'green'
        }]
      }
    }
  },
  dataSources: {
    primary: {
      data: {
        columns: [['US-AL', 'US-AR', 'US-AZ', 'US-CA', 'US-CO', 'US-CT', 'US-FL', 'US-GA', 'US-IA', 'US-ID', 'US-IL', 'US-IN', 'US-KS', 'US-KY', 'US-LA', 'US-MA', 'US-MD', 'US-MI', 'US-MN', 'US-MO', 'US-MT', 'US-NC', 'US-NE', 'US-NJ', 'US-NM', 'US-NV', 'US-NY', 'US-OH', 'US-OK', 'US-OR', 'US-PA', 'US-RI', 'US-SC', 'US-SD', 'US-TN', 'US-TX', 'US-UT', 'US-VA', 'US-WA', 'US-WI'], [17, 3, 65, 385, 69, 9, 142, 23, 11, 6, 28, 43, 12, 33, 12, 8, 9, 23, 6, 14, 10, 70, 8, 3, 23, 28, 62, 58, 17, 28, 43, 6, 8, 6, 33, 225, 9, 49, 48, 29]],
        fields: [{
          name: 'us_state'
        }, {
          name: 'values'
        }]
      }
    }
  }
};
/* harmony default export */ var examples_RangeValue = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(GeoContext_["GeoContextProvider"], {
    value: geoRegistry
  }, /*#__PURE__*/external_react_default.a.createElement(Choropleth_default.a, ChoroplethProps));
});
// CONCATENATED MODULE: ./src/visualizations/Choropleth/docs/examples/USAInsets.jsx





var USAInsets_geoRegistry = GeoRegistry_default.a.create();
USAInsets_geoRegistry.addDefaultProvider(new GeoJsonProvider_default.a());
var USAInsets_logBounds = {
  x: {
    min: 0,
    max: 800
  },
  y: {
    min: 0,
    max: 600
  }
};
var USAInsets_ChoroplethProps = {
  mode: '',
  style: {},
  loading: false,
  width: 800,
  height: 600,
  onOptionsChange: function onOptionsChange() {},
  onEventTrigger: function onEventTrigger() {},
  onRequestParamsChange: function onRequestParamsChange() {},
  options: {
    name: 'USA',
    source: 'geo://default/us',
    projection: 'mercator',
    sourceBounds: {
      lat: {
        min: -60,
        max: 85
      },
      long: {
        min: -180,
        max: 180
      }
    },
    logicalBounds: USAInsets_logBounds,
    fillColor: '#EAEFF2',
    strokeColor: '#689C8D',
    strokeHighlightColor: '#000',
    selector: '.feature',
    geoFeatureGroups: [{
      name: 'lower48',
      featureMatcher: {
        property: 'postal',
        regex: '^(?!(AK|HI))'
      },
      sourceBounds: {
        lat: {
          min: 24,
          max: 50
        },
        long: {
          min: -130,
          max: -60
        }
      }
    }, {
      name: 'Alaska',
      featureMatcher: {
        property: 'postal',
        regex: 'AK'
      },
      logicalBounds: {
        x: {
          min: 100,
          max: 200
        },
        y: {
          min: 325,
          max: 425
        }
      },
      sourceBounds: {
        lat: {
          min: 45,
          max: 72
        },
        long: {
          min: -180,
          max: -120
        } // manually cutoff the Alaskan islands in the eastern hemisphere by taking only the western hemisphere parts

      }
    }, {
      name: 'Hawaii',
      featureMatcher: {
        property: 'postal',
        regex: 'HI'
      },
      logicalBounds: {
        x: {
          min: 250,
          max: 350
        },
        y: {
          min: 375,
          max: 475
        }
      },
      sourceBounds: {
        lat: {
          min: 18.665677,
          max: 22.461292
        },
        long: {
          min: -160.921571,
          max: -154.242648
        }
      }
    }]
  },
  encoding: {
    featureId: 'primary[0]',
    value: 'primary[1]',
    fill: {
      field: 'primary[1]',
      format: {
        type: 'gradient',
        ranges: [5, 30, 45, 55, 150, 220, 300],
        values: ['#b3fff0', '#99ffec', '#87f5df', '#7af5de', '#60ebd1', '#4be3c5', '#09D0AC']
      }
    }
  },
  dataSources: {
    primary: {
      data: {
        columns: [['US-AL', 'US-AR', 'US-AZ', 'US-CA', 'US-CO', 'US-CT', 'US-FL', 'US-GA', 'US-IA', 'US-ID', 'US-IL', 'US-IN', 'US-KS', 'US-KY', 'US-LA', 'US-MA', 'US-MD', 'US-MI', 'US-MN', 'US-MO', 'US-MT', 'US-NC', 'US-NE', 'US-NJ', 'US-NM', 'US-NV', 'US-NY', 'US-OH', 'US-OK', 'US-OR', 'US-PA', 'US-RI', 'US-SC', 'US-SD', 'US-TN', 'US-TX', 'US-UT', 'US-VA', 'US-WA', 'US-WI'], [17, 3, 65, 385, 69, 9, 142, 23, 11, 6, 28, 43, 12, 33, 12, 8, 9, 23, 6, 14, 10, 70, 8, 3, 23, 28, 62, 58, 17, 28, 43, 6, 8, 6, 33, 225, 9, 49, 48, 29]],
        fields: [{
          name: 'us_state'
        }, {
          name: 'values'
        }]
      }
    }
  }
};
/* harmony default export */ var examples_USAInsets = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(GeoContext_["GeoContextProvider"], {
    value: USAInsets_geoRegistry
  }, /*#__PURE__*/external_react_default.a.createElement(Choropleth_default.a, USAInsets_ChoroplethProps));
});
// CONCATENATED MODULE: ./src/visualizations/Choropleth/docs/examples/BasicUSA.jsx





var BasicUSA_geoRegistry = GeoRegistry_default.a.create();
BasicUSA_geoRegistry.addDefaultProvider(new GeoJsonProvider_default.a());
var BasicUSA_ChoroplethProps = {
  mode: '',
  style: {},
  loading: false,
  width: 800,
  height: 600,
  onOptionsChange: function onOptionsChange() {},
  onEventTrigger: function onEventTrigger() {},
  onRequestParamsChange: function onRequestParamsChange() {},
  options: {
    name: 'USA',
    source: 'geo://default/us',
    projection: 'mercator',
    sourceBounds: {
      lat: {
        min: 24,
        max: 50
      },
      long: {
        min: -130,
        max: -60
      }
    },
    logicalBounds: {
      x: {
        min: 0,
        max: 800
      },
      y: {
        min: 0,
        max: 600
      }
    },
    fillColor: '#EAEFF2',
    strokeColor: '#689C8D',
    strokeHighlightColor: '#000000',
    selector: '.feature'
  },
  encoding: {}
};
/* harmony default export */ var examples_BasicUSA = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(GeoContext_["GeoContextProvider"], {
    value: BasicUSA_geoRegistry
  }, /*#__PURE__*/external_react_default.a.createElement(Choropleth_default.a, BasicUSA_ChoroplethProps));
});
// CONCATENATED MODULE: ./src/visualizations/Choropleth/docs/examples/EquirectangularWorld.jsx





var EquirectangularWorld_geoRegistry = GeoRegistry_default.a.create();
EquirectangularWorld_geoRegistry.addDefaultProvider(new GeoJsonProvider_default.a());
var EquirectangularWorld_ChoroplethProps = {
  mode: '',
  style: {},
  loading: false,
  width: 800,
  height: 600,
  onOptionsChange: function onOptionsChange() {},
  onEventTrigger: function onEventTrigger() {},
  onRequestParamsChange: function onRequestParamsChange() {},
  options: {
    name: 'USA',
    source: 'geo://default/world',
    projection: 'equirectangular',
    sourceBounds: {
      lat: {
        min: -60,
        max: 85
      },
      long: {
        min: -180,
        max: 180
      }
    },
    logicalBounds: {
      x: {
        min: 0,
        max: 800
      },
      y: {
        min: 0,
        max: 600
      }
    },
    fillColor: '#EAEFF2',
    strokeColor: '#689C8D',
    strokeHighlightColor: '#000',
    selector: '.feature'
  },
  encoding: {
    featureId: 'primary[0]',
    fill: {
      field: 'primary[1]',
      format: {
        type: 'gradient'
      }
    }
  },
  dataSources: {
    primary: {
      data: {
        columns: [['United States', 'Russia', 'Australia', 'Brazil', 'Japan', 'China', 'India', 'Canada'], [17, 3, 65, 385, 69, 9, 142, 23]],
        fields: [{
          name: 'country'
        }, {
          name: 'value'
        }]
      }
    }
  }
};
/* harmony default export */ var examples_EquirectangularWorld = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(GeoContext_["GeoContextProvider"], {
    value: EquirectangularWorld_geoRegistry
  }, /*#__PURE__*/external_react_default.a.createElement(Choropleth_default.a, EquirectangularWorld_ChoroplethProps));
});
// CONCATENATED MODULE: ./src/visualizations/Choropleth/docs/examples/WorldMap.jsx





var WorldMap_geoRegistry = GeoRegistry_default.a.create();
WorldMap_geoRegistry.addDefaultProvider(new GeoJsonProvider_default.a());
var WorldMap_ChoroplethProps = {
  mode: '',
  style: {},
  loading: false,
  width: 800,
  height: 600,
  onOptionsChange: function onOptionsChange() {},
  onEventTrigger: function onEventTrigger() {},
  onRequestParamsChange: function onRequestParamsChange() {},
  options: {
    name: 'world',
    source: 'geo://default/world',
    projection: 'mercator',
    sourceBounds: {
      lat: {
        min: -60,
        max: 85
      },
      long: {
        min: -180,
        max: 180
      }
    },
    logicalBounds: {
      x: {
        min: 0,
        max: 800
      },
      y: {
        min: 0,
        max: 600
      }
    },
    fillColor: '#EAEFF2',
    strokeColor: '#689C8D',
    strokeHighlightColor: '#000',
    selector: '.feature'
  },
  encoding: {
    featureId: 'primary[0]',
    value: 'primary[1]',
    fill: {
      field: 'primary[1]',
      format: {
        type: 'gradient',
        values: ['#B3FFF0', '#99FFEC', '#87F5DF', '#7AF5DE', '#60EBD1', '#4BE3C5', '#09D0AC']
      }
    }
  },
  dataSources: {
    primary: {
      data: {
        columns: [['United States', 'Russia', 'Australia', 'Brazil', 'Japan', 'China', 'India', 'Canada'], [17, 3, 65, 385, 69, 9, 142, 23]],
        fields: [{
          name: 'country'
        }, {
          name: 'value'
        }]
      }
    }
  }
};
/* harmony default export */ var examples_WorldMap = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(GeoContext_["GeoContextProvider"], {
    value: WorldMap_geoRegistry
  }, /*#__PURE__*/external_react_default.a.createElement(Choropleth_default.a, WorldMap_ChoroplethProps));
});
// CONCATENATED MODULE: ./src/visualizations/Choropleth/docs/examples/AutoGradient.jsx





var AutoGradient_geoRegistry = GeoRegistry_default.a.create();
AutoGradient_geoRegistry.addDefaultProvider(new GeoJsonProvider_default.a());
var AutoGradient_logBounds = {
  x: {
    min: 0,
    max: 800
  },
  y: {
    min: 0,
    max: 600
  }
};
var AutoGradient_croppedSrcBounds = {
  lat: {
    min: 24,
    max: 50
  },
  long: {
    min: -130,
    max: -60
  }
};
var AutoGradient_ChoroplethProps = {
  mode: '',
  style: {},
  loading: false,
  width: 800,
  height: 600,
  onOptionsChange: function onOptionsChange() {},
  onEventTrigger: function onEventTrigger() {},
  onRequestParamsChange: function onRequestParamsChange() {},
  options: {
    name: 'USA',
    source: 'geo://default/us',
    projection: 'mercator',
    sourceBounds: AutoGradient_croppedSrcBounds,
    logicalBounds: AutoGradient_logBounds,
    fillColor: '#EAEFF2',
    strokeColor: '#689C8D',
    strokeHighlightColor: '#000',
    selector: '.feature'
  },
  encoding: {
    featureId: 'primary[0]',
    value: 'primary[1]',
    fill: {
      field: 'primary[1]',
      format: {
        type: 'gradient'
      }
    }
  },
  dataSources: {
    primary: {
      data: {
        columns: [['US-AL', 'US-AR', 'US-AZ', 'US-CA', 'US-CO', 'US-CT', 'US-FL', 'US-GA', 'US-IA', 'US-ID', 'US-IL', 'US-IN', 'US-KS', 'US-KY', 'US-LA', 'US-MA', 'US-MD', 'US-MI', 'US-MN', 'US-MO', 'US-MT', 'US-NC', 'US-NE', 'US-NJ', 'US-NM', 'US-NV', 'US-NY', 'US-OH', 'US-OK', 'US-OR', 'US-PA', 'US-RI', 'US-SC', 'US-SD', 'US-TN', 'US-TX', 'US-UT', 'US-VA', 'US-WA', 'US-WI'], [17, 3, 65, 385, 69, 9, 142, 23, 11, 6, 28, 43, 12, 33, 12, 8, 9, 23, 6, 14, 10, 70, 8, 3, 23, 28, 62, 58, 17, 28, 43, 6, 8, 6, 33, 225, 9, 49, 48, 29]],
        fields: [{
          name: 'us_state'
        }, {
          name: 'values'
        }]
      }
    }
  }
};
/* harmony default export */ var examples_AutoGradient = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(GeoContext_["GeoContextProvider"], {
    value: AutoGradient_geoRegistry
  }, /*#__PURE__*/external_react_default.a.createElement(Choropleth_default.a, AutoGradient_ChoroplethProps));
});
// CONCATENATED MODULE: ./src/visualizations/Choropleth/docs/examples/MultiGradient.jsx





var MultiGradient_geoRegistry = GeoRegistry_default.a.create();
MultiGradient_geoRegistry.addDefaultProvider(new GeoJsonProvider_default.a());
var MultiGradient_logBounds = {
  x: {
    min: 0,
    max: 800
  },
  y: {
    min: 0,
    max: 600
  }
};
var MultiGradient_croppedSrcBounds = {
  lat: {
    min: 24,
    max: 50
  },
  long: {
    min: -130,
    max: -60
  }
};
var MultiGradient_ChoroplethProps = {
  mode: '',
  style: {},
  loading: false,
  width: 800,
  height: 600,
  onOptionsChange: function onOptionsChange() {},
  onEventTrigger: function onEventTrigger() {},
  onRequestParamsChange: function onRequestParamsChange() {},
  options: {
    name: 'USA',
    source: 'geo://default/us',
    projection: 'mercator',
    sourceBounds: MultiGradient_croppedSrcBounds,
    logicalBounds: MultiGradient_logBounds,
    fillColor: '#EAEFF2',
    strokeColor: '#689C8D',
    strokeHighlightColor: '#000',
    selector: '.feature'
  },
  encoding: {
    featureId: 'primary[0]',
    value: 'primary[1]',
    fill: {
      field: 'primary[1]',
      format: {
        type: 'gradient',
        values: ['yellow', 'orange', 'red']
      }
    }
  },
  dataSources: {
    primary: {
      data: {
        columns: [['US-AL', 'US-AR', 'US-AZ', 'US-CA', 'US-CO', 'US-CT', 'US-FL', 'US-GA', 'US-IA', 'US-ID', 'US-IL', 'US-IN', 'US-KS', 'US-KY', 'US-LA', 'US-MA', 'US-MD', 'US-MI', 'US-MN', 'US-MO', 'US-MT', 'US-NC', 'US-NE', 'US-NJ', 'US-NM', 'US-NV', 'US-NY', 'US-OH', 'US-OK', 'US-OR', 'US-PA', 'US-RI', 'US-SC', 'US-SD', 'US-TN', 'US-TX', 'US-UT', 'US-VA', 'US-WA', 'US-WI'], [17, 3, 65, 385, 69, 9, 142, 23, 11, 6, 28, 43, 12, 33, 12, 8, 9, 23, 6, 14, 10, 70, 8, 3, 23, 28, 62, 58, 17, 28, 43, 6, 8, 6, 33, 225, 9, 49, 48, 29]],
        fields: [{
          name: 'us_state'
        }, {
          name: 'values'
        }]
      }
    }
  }
};
/* harmony default export */ var examples_MultiGradient = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(GeoContext_["GeoContextProvider"], {
    value: MultiGradient_geoRegistry
  }, /*#__PURE__*/external_react_default.a.createElement(Choropleth_default.a, MultiGradient_ChoroplethProps));
});
// CONCATENATED MODULE: ./src/visualizations/Choropleth/docs/examples/GradientGreenBlue.jsx





var GradientGreenBlue_geoRegistry = GeoRegistry_default.a.create();
GradientGreenBlue_geoRegistry.addDefaultProvider(new GeoJsonProvider_default.a());
var GradientGreenBlue_logBounds = {
  x: {
    min: 0,
    max: 800
  },
  y: {
    min: 0,
    max: 600
  }
};
var GradientGreenBlue_croppedSrcBounds = {
  lat: {
    min: 24,
    max: 50
  },
  long: {
    min: -130,
    max: -60
  }
};
var GradientGreenBlue_ChoroplethProps = {
  mode: '',
  style: {},
  loading: false,
  width: 800,
  height: 600,
  onOptionsChange: function onOptionsChange() {},
  onEventTrigger: function onEventTrigger() {},
  onRequestParamsChange: function onRequestParamsChange() {},
  options: {
    name: 'USA',
    source: 'geo://default/us',
    projection: 'mercator',
    sourceBounds: GradientGreenBlue_croppedSrcBounds,
    logicalBounds: GradientGreenBlue_logBounds,
    fillColor: '#EAEFF2',
    strokeColor: '#689C8D',
    strokeHighlightColor: '#000',
    selector: '.feature'
  },
  encoding: {
    featureId: 'primary[0]',
    value: 'primary[1]',
    fill: {
      field: 'primary[1]',
      format: {
        type: 'gradient',
        values: ['green', 'blue']
      }
    }
  },
  dataSources: {
    primary: {
      data: {
        columns: [['US-AL', 'US-AR', 'US-AZ', 'US-CA', 'US-CO', 'US-CT', 'US-FL', 'US-GA', 'US-IA', 'US-ID', 'US-IL', 'US-IN', 'US-KS', 'US-KY', 'US-LA', 'US-MA', 'US-MD', 'US-MI', 'US-MN', 'US-MO', 'US-MT', 'US-NC', 'US-NE', 'US-NJ', 'US-NM', 'US-NV', 'US-NY', 'US-OH', 'US-OK', 'US-OR', 'US-PA', 'US-RI', 'US-SC', 'US-SD', 'US-TN', 'US-TX', 'US-UT', 'US-VA', 'US-WA', 'US-WI'], [17, 3, 65, 385, 69, 9, 142, 23, 11, 6, 28, 43, 12, 33, 12, 8, 9, 23, 6, 14, 10, 70, 8, 3, 23, 28, 62, 58, 17, 28, 43, 6, 8, 6, 33, 225, 9, 49, 48, 29]],
        fields: [{
          name: 'us_state'
        }, {
          name: 'values'
        }]
      }
    }
  }
};
/* harmony default export */ var examples_GradientGreenBlue = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(GeoContext_["GeoContextProvider"], {
    value: GradientGreenBlue_geoRegistry
  }, /*#__PURE__*/external_react_default.a.createElement(Choropleth_default.a, GradientGreenBlue_ChoroplethProps));
});
// CONCATENATED MODULE: ./src/visualizations/Choropleth/docs/examples/BackgroundColor.jsx





var BackgroundColor_geoRegistry = GeoRegistry_default.a.create();
BackgroundColor_geoRegistry.addDefaultProvider(new GeoJsonProvider_default.a());
var BackgroundColor_ChoroplethProps = {
  mode: '',
  style: {},
  loading: false,
  width: 800,
  height: 600,
  onOptionsChange: function onOptionsChange() {},
  onEventTrigger: function onEventTrigger() {},
  onRequestParamsChange: function onRequestParamsChange() {},
  options: {
    name: 'USA',
    source: 'geo://default/us',
    projection: 'mercator',
    sourceBounds: {
      lat: {
        min: 24,
        max: 50
      },
      long: {
        min: -130,
        max: -60
      }
    },
    logicalBounds: {
      x: {
        min: 0,
        max: 800
      },
      y: {
        min: 0,
        max: 600
      }
    },
    fillColor: '#EAEFF2',
    strokeColor: '#689C8D',
    strokeHighlightColor: '#000000',
    selector: '.feature',
    backgroundColor: '#C0F3F3'
  },
  encoding: {}
};
/* harmony default export */ var examples_BackgroundColor = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(GeoContext_["GeoContextProvider"], {
    value: BackgroundColor_geoRegistry
  }, /*#__PURE__*/external_react_default.a.createElement(Choropleth_default.a, BackgroundColor_ChoroplethProps));
});
// CONCATENATED MODULE: ./src/visualizations/Choropleth/docs/definition.js
/* harmony default export */ var definition = ({
  encoding: [{
    name: 'featureId',
    type: '[string]',
    desc: 'Specify the dataSource field that should be used to identify each area in the Choropleth map.',
    isRequired: 'false'
  }, {
    name: 'value',
    type: '[number]',
    desc: 'Specify the dataSource field that indicates the value of each area in the Choropleth map.',
    isRequired: 'false'
  }, {
    name: 'fill',
    type: '[string]',
    desc: 'Specify the dataSource field that should be used to select the color of each area in the Choropleth Map.',
    isRequired: 'false'
  }],
  events: [{
    name: 'feature.hover',
    desc: 'trigger when user hovers over a feature or leaves'
  }, {
    name: 'map.click',
    desc: 'trigger when user clicks on a map'
  }]
});
// EXTERNAL MODULE: external "@splunk/visualizations-shared/schemaUtils"
var schemaUtils_ = __webpack_require__(2);

// CONCATENATED MODULE: ./src/visualizations/Choropleth/optionsSchema.js

/* harmony default export */ var optionsSchema = ({
  source: {
    description: 'Source for the geo data.',
    pattern: Object(schemaUtils_["getPattern"])(['geo://default/us', 'geo://default/world']),
    type: 'string'
  },
  projection: {
    description: 'Specifies the map projection.',
    pattern: Object(schemaUtils_["getPattern"])(['mercator', 'equirectangular']),
    type: 'string'
  },
  selector: {
    default: '.feature',
    description: 'Selector to get all features',
    type: 'string'
  },
  fillColor: {
    description: 'Specify the Hex code for fill color of features with no data. For example: "#0000FF".',
    pattern: schemaUtils_["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  strokeColor: {
    description: 'Specify the Hex code for stroke color for all features that are not selected. For example: "#0000FF".',
    pattern: schemaUtils_["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  strokeHighlightColor: {
    description: 'Specify the Hex code for stroke highlight color for all features that are selected. For example: "#0000FF".',
    pattern: schemaUtils_["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  backgroundColor: {
    description: 'Specify the Hex code for the color used for the Choropleth background. For example: "#0000FF".',
    pattern: schemaUtils_["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  name: {
    description: 'Name of the Visualization',
    type: 'string'
  },
  sourceBounds: {
    description: 'Specify the bounds of the geographic area as lat:{min:..., max:...}, long:{min:..., max:..}.',
    type: 'object'
  },
  logicalBounds: {
    description: 'Specify the logical bounds of the projected map as x:{min:..., max:...}, y:{min:..., max:..}.',
    type: 'object'
  },
  geoFeatureGroups: {
    type: 'array',
    items: {
      type: 'object'
    },
    description: 'A geo feature group consists of a name, logical bounds, sourcebounds and a featureMatcher, which consists of a property name and a regex to check against that property.'
  }
});
// CONCATENATED MODULE: ./src/visualizations/Choropleth/docs/index.jsx

























/* harmony default export */ var docs = __webpack_exports__["default"] = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(VisualizationDocPage_default.a, {
    title: "Choropleth",
    examplesSection: [/*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Basic US Choropleth",
      key: "BasicUSAChoropleth",
      code: BasicUSA,
      example: examples_BasicUSA
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Custom Background Color",
      key: "backgroundcolor",
      code: BackgroundColor,
      example: examples_BackgroundColor
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Encoding format - Auto Linear Gradient",
      key: "AutoGradients",
      code: AutoGradient,
      example: examples_AutoGradient
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Encoding format - Linear Gradient to green and blue",
      key: "GradientGreenBlue",
      code: GradientGreenBlue,
      example: examples_GradientGreenBlue
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Encoding format - Multiple Linear Color Gradients",
      key: "MultiGradient",
      code: MultiGradient,
      example: examples_MultiGradient
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Encoding format - Specify Rangevalue.",
      key: "RangeValue1Choropleth",
      code: RangeValue,
      example: examples_RangeValue
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "US Choropleth with custom inset maps for Alaska and Hawaii",
      key: "USAInsets",
      code: USAInsets,
      example: examples_USAInsets
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "World Choropleth",
      key: "WorldChoropleth",
      code: WorldMap,
      example: examples_WorldMap
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "World Choropleth - Equirectangular Projection",
      key: "EquirectangularWorldChoropleth",
      code: EquirectangularWorld,
      example: examples_EquirectangularWorld
    })],
    optionSection: /*#__PURE__*/external_react_default.a.createElement(OptionsDoc_default.a, {
      options: optionsSchema
    }),
    encodingSection: /*#__PURE__*/external_react_default.a.createElement(EncodingDoc_default.a, {
      encoding: definition.encoding
    })
  });
});

/***/ }),

/***/ 9:
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/VisualizationDocPage");

/***/ })

/******/ });
//# sourceMappingURL=Choropleth.js.map