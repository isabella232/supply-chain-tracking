{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"react\"","webpack:///external \"@splunk/react-docs/DocExample\"","webpack:///external \"@splunk/dashboard-visualizations/common/OptionsDoc\"","webpack:///external \"@splunk/dashboard-visualizations/common/EncodingDoc\"","webpack:///external \"@splunk/dashboard-visualizations/common/EventsDoc\"","webpack:///external \"@splunk/dashboard-visualizations/Pie\"","webpack:///external \"@splunk/visualizations-shared/schemaUtils\"","webpack:///./src/visualizations/Pie/docs/examples/Basic.jsx?1081","webpack:///./src/visualizations/Pie/docs/examples/BackgroundColor.jsx?7fe9","webpack:///./src/visualizations/Pie/docs/examples/ForegroundColor.jsx?759b","webpack:///./src/visualizations/Pie/docs/examples/FontColor.jsx?4bd4","webpack:///./src/visualizations/Pie/docs/examples/SeriesColors.jsx?bbe8","webpack:///./src/visualizations/Pie/docs/examples/FieldColors.jsx?ace0","webpack:///./src/visualizations/Pie/docs/examples/NoLabels.jsx?630a","webpack:///./src/visualizations/Pie/docs/examples/LabelWithPercent.jsx?9c46","webpack:///./src/visualizations/Pie/docs/examples/Threshold.jsx?2e62","webpack:///./src/visualizations/Pie/docs/examples/CollapsingLabel.jsx?9a80","webpack:///./src/visualizations/Pie/docs/examples/TruncatedSize.jsx?e619","webpack:///./src/visualizations/Pie/docs/examples/Donut.jsx?4e51","webpack:///./src/visualizations/Pie/docs/examples/DonutTopLegend.jsx?d1c7","webpack:///./src/visualizations/Pie/docs/examples/DonutOverflowEnd.jsx?abbf","webpack:///./src/visualizations/Pie/docs/examples/Basic.jsx","webpack:///./src/visualizations/Pie/docs/examples/BackgroundColor.jsx","webpack:///./src/visualizations/Pie/docs/examples/ForegroundColor.jsx","webpack:///./src/visualizations/Pie/docs/examples/FontColor.jsx","webpack:///./src/visualizations/Pie/docs/examples/SeriesColors.jsx","webpack:///./src/visualizations/Pie/docs/examples/FieldColors.jsx","webpack:///./src/visualizations/Pie/docs/examples/NoLabels.jsx","webpack:///./src/visualizations/Pie/docs/examples/LabelWithPercent.jsx","webpack:///./src/visualizations/Pie/docs/examples/Threshold.jsx","webpack:///./src/visualizations/Pie/docs/examples/CollapsingLabel.jsx","webpack:///./src/visualizations/Pie/docs/examples/TruncatedSize.jsx","webpack:///./src/visualizations/Pie/docs/examples/Donut.jsx","webpack:///./src/visualizations/Pie/docs/examples/DonutTopLegend.jsx","webpack:///./src/visualizations/Pie/docs/examples/DonutOverflowEnd.jsx","webpack:///./src/visualizations/Pie/docs/definition.js","webpack:///./src/visualizations/Pie/optionsSchema.js","webpack:///./src/visualizations/Pie/docs/index.jsx","webpack:///external \"@splunk/visualizations-shared/VisualizationDocPage\""],"names":["value","label","primary","requestParams","offset","count","data","fields","name","columns","meta","totalCount","backgroundColor","foregroundColor","fontColor","seriesColors","fieldColors","December","May","hasDonutHole","encoding","type","desc","defaultValue","isRequired","events","description","pattern","items","default","getPattern","BasicExample","BackgroundColorExample","ForegroundColorExample","FontColorExample","SeriesColorsExample","FieldColorsExample","NoLabelsExample","LabelWithPercentExample","ThresholdExample","CollapsingLabelExample","TruncatedSizeExample","DonutExample","DonutTopLegendExample","DonutOverflowEndExample","doc","optionsSchema"],"mappings":"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","file":"Pie.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 62);\n","module.exports = require(\"react\");","module.exports = require(\"@splunk/react-docs/DocExample\");","module.exports = require(\"@splunk/dashboard-visualizations/common/OptionsDoc\");","module.exports = require(\"@splunk/dashboard-visualizations/common/EncodingDoc\");","module.exports = require(\"@splunk/dashboard-visualizations/common/EventsDoc\");","module.exports = require(\"@splunk/dashboard-visualizations/Pie\");","module.exports = require(\"@splunk/visualizations-shared/schemaUtils\");","export default \"import React from 'react';\\nimport Pie from '@splunk/dashboard-visualizations/Pie';\\n\\nexport default () => (\\n    <Pie\\n        options={{}}\\n        encoding={{\\n            value: 'primary.count',\\n            label: 'primary.component',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'component' }, { name: 'count' }],\\n                    columns: [\\n                        [\\n                            'January',\\n                            'February',\\n                            'March',\\n                            'April',\\n                            'May',\\n                            'June',\\n                            'July',\\n                            'August',\\n                            'September',\\n                            'October',\\n                            'November',\\n                            'December',\\n                        ],\\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Pie from '@splunk/dashboard-visualizations/Pie';\\n\\nexport default () => (\\n    <Pie\\n        options={{ backgroundColor: '#f29335' }}\\n        encoding={{\\n            value: 'primary.count',\\n            label: 'primary.component',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'component' }, { name: 'count' }],\\n                    columns: [\\n                        [\\n                            'January',\\n                            'February',\\n                            'March',\\n                            'April',\\n                            'May',\\n                            'June',\\n                            'July',\\n                            'August',\\n                            'September',\\n                            'October',\\n                            'November',\\n                            'December',\\n                        ],\\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Pie from '@splunk/dashboard-visualizations/Pie';\\n\\nexport default () => (\\n    <Pie\\n        options={{ foregroundColor: '#b50a29' }}\\n        encoding={{\\n            value: 'primary.count',\\n            label: 'primary.component',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'component' }, { name: 'count' }],\\n                    columns: [\\n                        [\\n                            'January',\\n                            'February',\\n                            'March',\\n                            'April',\\n                            'May',\\n                            'June',\\n                            'July',\\n                            'August',\\n                            'September',\\n                            'October',\\n                            'November',\\n                            'December',\\n                        ],\\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Pie from '@splunk/dashboard-visualizations/Pie';\\n\\nexport default () => (\\n    <Pie\\n        options={{ fontColor: '#551a8b' }}\\n        encoding={{\\n            value: 'primary.count',\\n            label: 'primary.component',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'component' }, { name: 'count' }],\\n                    columns: [\\n                        [\\n                            'January',\\n                            'February',\\n                            'March',\\n                            'April',\\n                            'May',\\n                            'June',\\n                            'July',\\n                            'August',\\n                            'September',\\n                            'October',\\n                            'November',\\n                            'December',\\n                        ],\\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Pie from '@splunk/dashboard-visualizations/Pie';\\n\\nexport default () => (\\n    <Pie\\n        options={{ seriesColors: ['#FFFF00', '#0000FF', '#008000'] }}\\n        encoding={{\\n            value: 'primary.count',\\n            label: 'primary.component',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'component' }, { name: 'count' }],\\n                    columns: [\\n                        [\\n                            'January',\\n                            'February',\\n                            'March',\\n                            'April',\\n                            'May',\\n                            'June',\\n                            'July',\\n                            'August',\\n                            'September',\\n                            'October',\\n                            'November',\\n                            'December',\\n                        ],\\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Pie from '@splunk/dashboard-visualizations/Pie';\\n\\nexport default () => (\\n    <Pie\\n        options={{ fieldColors: { December: '#008000', May: '#FF0000' } }}\\n        encoding={{\\n            value: 'primary.count',\\n            label: 'primary.component',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'component' }, { name: 'count' }],\\n                    columns: [\\n                        [\\n                            'January',\\n                            'February',\\n                            'March',\\n                            'April',\\n                            'May',\\n                            'June',\\n                            'July',\\n                            'August',\\n                            'September',\\n                            'October',\\n                            'November',\\n                            'December',\\n                        ],\\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Pie from '@splunk/dashboard-visualizations/Pie';\\n\\nexport default () => (\\n    <Pie\\n        options={{ 'chart.showLabels': false }}\\n        encoding={{\\n            value: 'primary.count',\\n            label: 'primary.component',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'component' }, { name: 'count' }],\\n                    columns: [\\n                        [\\n                            'January',\\n                            'February',\\n                            'March',\\n                            'April',\\n                            'May',\\n                            'June',\\n                            'July',\\n                            'August',\\n                            'September',\\n                            'October',\\n                            'November',\\n                            'December',\\n                        ],\\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Pie from '@splunk/dashboard-visualizations/Pie';\\n\\nexport default () => (\\n    <Pie\\n        options={{ 'chart.showPercent': true }}\\n        encoding={{\\n            value: 'primary.count',\\n            label: 'primary.component',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'component' }, { name: 'count' }],\\n                    columns: [\\n                        [\\n                            'January',\\n                            'February',\\n                            'March',\\n                            'April',\\n                            'May',\\n                            'June',\\n                            'July',\\n                            'August',\\n                            'September',\\n                            'October',\\n                            'November',\\n                            'December',\\n                        ],\\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Pie from '@splunk/dashboard-visualizations/Pie';\\n\\nexport default () => (\\n    <Pie\\n        options={{ 'chart.sliceCollapsingThreshold': 0.05 }}\\n        encoding={{\\n            value: 'primary.count',\\n            label: 'primary.component',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'component' }, { name: 'count' }],\\n                    columns: [\\n                        [\\n                            'January',\\n                            'February',\\n                            'March',\\n                            'April',\\n                            'May',\\n                            'June',\\n                            'July',\\n                            'August',\\n                            'September',\\n                            'October',\\n                            'November',\\n                            'December',\\n                        ],\\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Pie from '@splunk/dashboard-visualizations/Pie';\\n\\nexport default () => (\\n    <Pie\\n        options={{ 'chart.sliceCollapsingLabel': 'New Collapsing Label' }}\\n        encoding={{\\n            value: 'primary.count',\\n            label: 'primary.component',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'component' }, { name: 'count' }],\\n                    columns: [\\n                        [\\n                            'January',\\n                            'February',\\n                            'March',\\n                            'April',\\n                            'May',\\n                            'June',\\n                            'July',\\n                            'August',\\n                            'September',\\n                            'October',\\n                            'November',\\n                            'December',\\n                        ],\\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Pie from '@splunk/dashboard-visualizations/Pie';\\n\\nexport default () => (\\n    <Pie\\n        options={{ 'chart.resultTruncationLimit': '5' }}\\n        encoding={{\\n            value: 'primary.count',\\n            label: 'primary.component',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'component' }, { name: 'count' }],\\n                    columns: [\\n                        [\\n                            'January',\\n                            'February',\\n                            'March',\\n                            'April',\\n                            'May',\\n                            'June',\\n                            'July',\\n                            'August',\\n                            'September',\\n                            'October',\\n                            'November',\\n                            'December',\\n                        ],\\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Pie from '@splunk/dashboard-visualizations/Pie';\\n\\nexport default () => (\\n    <Pie\\n        options={{\\n            hasDonutHole: true,\\n        }}\\n        encoding={{\\n            value: 'primary.count',\\n            label: 'primary.component',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'component' }, { name: 'count' }],\\n                    columns: [\\n                        [\\n                            'January',\\n                            'February',\\n                            'March',\\n                            'April',\\n                            'May',\\n                            'June',\\n                            'July',\\n                            'August',\\n                            'September',\\n                            'October',\\n                            'November',\\n                            'December',\\n                        ],\\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Pie from '@splunk/dashboard-visualizations/Pie';\\n\\nexport default () => (\\n    <Pie\\n        options={{\\n            hasDonutHole: true,\\n            'legend.placement': 'top',\\n        }}\\n        encoding={{\\n            value: 'primary.count',\\n            label: 'primary.component',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'component' }, { name: 'count' }],\\n                    columns: [\\n                        [\\n                            'January',\\n                            'February',\\n                            'March',\\n                            'April',\\n                            'May',\\n                            'June',\\n                            'July',\\n                            'August',\\n                            'September',\\n                            'October',\\n                            'November',\\n                            'December',\\n                        ],\\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Pie from '@splunk/dashboard-visualizations/Pie';\\n\\nexport default () => (\\n    <Pie\\n        options={{\\n            hasDonutHole: true,\\n            'legend.labelStyle.overflowMode': 'ellipsisEnd',\\n        }}\\n        encoding={{\\n            value: 'primary.count',\\n            label: 'primary.component',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'component' }, { name: 'count' }],\\n                    columns: [\\n                        [\\n                            'January is one of the darkest month of the year',\\n                            'February',\\n                            'March',\\n                            'April',\\n                            'May',\\n                            'June',\\n                            'July',\\n                            'August is one of the hottest month of the year',\\n                            'September',\\n                            'October',\\n                            'November',\\n                            'December is the one of the coldest month of the year',\\n                        ],\\n                        ['3', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{}}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{ backgroundColor: '#f29335' }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{ foregroundColor: '#b50a29' }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{ fontColor: '#551a8b' }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{ seriesColors: ['#FFFF00', '#0000FF', '#008000'] }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{ fieldColors: { December: '#008000', May: '#FF0000' } }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{ 'chart.showLabels': false }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{ 'chart.showPercent': true }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{ 'chart.sliceCollapsingThreshold': 0.05 }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{ 'chart.sliceCollapsingLabel': 'New Collapsing Label' }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{ 'chart.resultTruncationLimit': '5' }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{\n            hasDonutHole: true,\n        }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{\n            hasDonutHole: true,\n            'legend.placement': 'top',\n        }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{\n            hasDonutHole: true,\n            'legend.labelStyle.overflowMode': 'ellipsisEnd',\n        }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January is one of the darkest month of the year',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August is one of the hottest month of the year',\n                            'September',\n                            'October',\n                            'November',\n                            'December is the one of the coldest month of the year',\n                        ],\n                        ['3', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","export default {\n    encoding: [\n        {\n            name: 'value',\n            type: '[number]',\n            desc: 'Specify the dataSource applied to a pie chart.',\n            defaultValue: 'primary[1]',\n            isRequired: 'true',\n        },\n        {\n            name: 'label',\n            type: '[string]',\n            desc: 'Specify the dataSource applied to a pie chart label.',\n            defaultValue: 'primary[0]',\n            isRequired: 'true',\n        },\n    ],\n    events: [\n        {\n            name: 'point.click',\n            desc: 'trigger when user clicks a data point',\n        },\n    ],\n};\n","import { COLOR_OR_TOKEN_PATTERN, getPattern } from '@splunk/visualizations-shared/schemaUtils';\n\nexport default {\n    backgroundColor: {\n        description: 'Specify the Hex code for color used for a background. For example: \"#0000FF\".',\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    fontColor: {\n        description:\n            'Specify the Hex code for color used for a fonts (axis labels, legends). For example: \"#0000FF\".',\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    foregroundColor: {\n        description: 'Specify the Hex code for color used for a foreground. For example, \"#0000FF\".',\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    fieldColors: {\n        description: `Specify the Hex code for color used for a field. For example: {'count': '#008000', 'percent': '#FFA500'}. Note: Option type 'string' has been deprecated.`,\n        type: ['object', 'string'],\n    },\n    seriesColors: {\n        description: `Specify the Hex code for colors used for a series. For example, ['#FF0000', '#0000FF', '#008000'].\n            The default for light and dark mode is ['#1E93C6', '#F2B827', '#D6563C', '#6A5C9E', '#31A35F'].\n            The default for SCP mode is ['#A9F5E7', '#A870EF',  '#1E6271', '#45D4BA', '#602CA1',  '#9AE6F7', '#6CD0F0', '#2F8AA7',  '#422879', '#F29BAC', '#E85B79', '#C6335F',  '#FDAF93', '#FB865C', '#E9643A',  '#7EEFDA', '#26AA92', '#207865', '#C093F9', '#8747DA',  '#4EB2D2', '#912344',  '#AD3F20', '#D44C20', '#FFC34E',  '#95651D',  '#C0891E', '#ECAE11', '#FCD9A4', '#78062A'].\n            Note: Option type 'string' has been deprecated.`,\n        type: ['array', 'string'],\n        items: { type: 'string' },\n    },\n    'chart.sliceCollapsingLabel': {\n        default: 'other',\n        description: 'Specify the label for the consolidated slice.',\n        type: 'string',\n    },\n    'chart.sliceCollapsingThreshold': {\n        default: 0.01,\n        description:\n            'Specify the size threshold as a number between 0 and 1 (inclusive), of the whole pie at which slices collapse into one consolidated slice.',\n        type: 'number',\n    },\n    'chart.resultTruncationLimit': {\n        default: 50000,\n        description: 'Specify a limit for the number of data points rendered in a chart.',\n        type: 'number',\n    },\n    'chart.showLabels': {\n        default: true,\n        description: 'Specify whether to display labels. This option has no effect when hasDonutHole=true.',\n        type: 'boolean',\n    },\n    'chart.showPercent': {\n        default: false,\n        description: 'Specify whether to display percentage values in the labels.',\n        type: 'boolean',\n    },\n    'legend.placement': {\n        default: 'right',\n        description:\n            'Specify how the legend should be aligned. This option only has an effect when hasDonutHole=true.',\n        pattern: getPattern(['right', 'left', 'top', 'bottom', 'none']),\n        type: 'string',\n    },\n    'legend.labelStyle.overflowMode': {\n        default: 'ellipsisMiddle',\n        description:\n            'Specify how to display legend labels when they overflow the layout boundaries by replacing overflow text with an ellipsis.',\n        pattern: getPattern(['ellipsisEnd', 'ellipsisMiddle', 'ellipsisStart', 'ellipsisNone']),\n        type: 'string',\n    },\n    hasDonutHole: {\n        default: false,\n        description: 'Specify whether the pie should be a donut.',\n        type: 'boolean',\n    },\n};\n","import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\nimport VisualizationDocPage from '@splunk/visualizations-shared/VisualizationDocPage';\nimport EncodingDoc from '@splunk/dashboard-visualizations/common/EncodingDoc';\nimport OptionsDoc from '@splunk/dashboard-visualizations/common/OptionsDoc';\nimport EventsDoc from '@splunk/dashboard-visualizations/common/EventsDoc';\nimport DocExample from '@splunk/react-docs/DocExample';\n\nimport BasicExampleCode from '!!raw-loader!./examples/Basic';\nimport BackgroundColorCode from '!!raw-loader!./examples/BackgroundColor';\nimport ForegroundColorCode from '!!raw-loader!./examples/ForegroundColor';\nimport FontColorCode from '!!raw-loader!./examples/FontColor';\nimport SeriesColorsCode from '!!raw-loader!./examples/SeriesColors';\nimport FieldColorsCode from '!!raw-loader!./examples/FieldColors';\nimport NoLabelsExampleCode from '!!raw-loader!./examples/NoLabels';\nimport LabelWithPercentExampleCode from '!!raw-loader!./examples/LabelWithPercent';\nimport ThresholdExampleCode from '!!raw-loader!./examples/Threshold';\nimport CollapsingLabelExampleCode from '!!raw-loader!./examples/CollapsingLabel';\nimport TruncatedSizeExampleCode from '!!raw-loader!./examples/TruncatedSize';\nimport DonutExampleCode from '!!raw-loader!./examples/Donut';\nimport DonutTopLegendExampleCode from '!!raw-loader!./examples/DonutTopLegend';\nimport DonutOverflowEndExampleCode from '!!raw-loader!./examples/DonutOverflowEnd';\n\nimport BasicExample from './examples/Basic';\nimport BackgroundColorExample from './examples/BackgroundColor';\nimport ForegroundColorExample from './examples/ForegroundColor';\nimport FontColorExample from './examples/FontColor';\nimport SeriesColorsExample from './examples/SeriesColors';\nimport FieldColorsExample from './examples/FieldColors';\nimport NoLabelsExample from './examples/NoLabels';\nimport LabelWithPercentExample from './examples/LabelWithPercent';\nimport ThresholdExample from './examples/Threshold';\nimport CollapsingLabelExample from './examples/CollapsingLabel';\nimport TruncatedSizeExample from './examples/TruncatedSize';\nimport DonutExample from './examples/Donut';\nimport DonutTopLegendExample from './examples/DonutTopLegend';\nimport DonutOverflowEndExample from './examples/DonutOverflowEnd';\n\nimport doc from './definition';\nimport optionsSchema from '../optionsSchema';\n\nfunction PieDoc() {\n    return (\n        <VisualizationDocPage\n            title=\"Pie\"\n            examplesSection={[\n                <DocExample\n                    title=\"Basic Pie\"\n                    key=\"basic_pie\"\n                    description=\"Pie takes 100% width and 250px height by default.\"\n                    code={BasicExampleCode}\n                    example={BasicExample}\n                />,\n                <DocExample\n                    title=\"Background Color - Orange\"\n                    key=\"backgroundcolor\"\n                    description=\"Background color specified.\"\n                    code={BackgroundColorCode}\n                    example={BackgroundColorExample}\n                />,\n                <DocExample\n                    title=\"Foreground Color - Red\"\n                    key=\"foregroundcolor\"\n                    description=\"Foreground color specified.\"\n                    code={ForegroundColorCode}\n                    example={ForegroundColorExample}\n                />,\n                <DocExample\n                    title=\"Font Color - Purple\"\n                    key=\"fontcolor\"\n                    description=\"Font color specified.\"\n                    code={FontColorCode}\n                    example={FontColorExample}\n                />,\n                <DocExample\n                    title=\"Series Colors: Yellow, Blue, Green\"\n                    key=\"seriescolors\"\n                    description=\"Series colors specified.\"\n                    code={SeriesColorsCode}\n                    example={SeriesColorsExample}\n                />,\n                <DocExample\n                    title=\"Field Color: December - Green, May - Red\"\n                    key=\"fieldcolors\"\n                    description=\"Field colors specified.\"\n                    code={FieldColorsCode}\n                    example={FieldColorsExample}\n                />,\n                <DocExample\n                    title=\"No Labels Pie\"\n                    key=\"no_labels_pie\"\n                    description=\"No Labels will be rendered when chart.showLabels equals to false. Defaults to true.\"\n                    code={NoLabelsExampleCode}\n                    example={NoLabelsExample}\n                />,\n                <DocExample\n                    title=\"Pie Labels with Percent\"\n                    key=\"labels_with_percent_pie\"\n                    description=\"Labels with Percent will be rendered when chart.showPercent equals to true. Defaults to false.\"\n                    code={LabelWithPercentExampleCode}\n                    example={LabelWithPercentExample}\n                />,\n                <DocExample\n                    title=\"Slice Collapsing Threshold - 5\"\n                    key=\"slice_collapsing_threshold\"\n                    description=\"The threshold at which smaller slices collapse into a consolidated slice. This option only applies when there are more than 10 slices. 0 indicates no collapsing. Valid values are between 0 and 1. Number 1 indicates all slices collapse into a single pie. The default value, 0.01, collapses slices smaller than 1% of the whole pie.\"\n                    code={ThresholdExampleCode}\n                    example={ThresholdExample}\n                />,\n                <DocExample\n                    title=\"Custom Collapsing Label - New Collapsing Label\"\n                    key=\"collapsing_label\"\n                    description=\"The label for the consolidated slice. Defaults to 'other'.\"\n                    code={CollapsingLabelExampleCode}\n                    example={CollapsingLabelExample}\n                />,\n                <DocExample\n                    title=\"Truncated Size Pie\"\n                    key=\"truncated_size_pie\"\n                    description=\"A truncated size pie will be rendered when providing width and height.\"\n                    code={TruncatedSizeExampleCode}\n                    example={TruncatedSizeExample}\n                />,\n                <DocExample\n                    title=\"Donut\"\n                    key=\"donut\"\n                    description=\"A donut-like pie.\"\n                    code={DonutExampleCode}\n                    example={DonutExample}\n                />,\n                <DocExample\n                    title=\"Donut with Legend on Top\"\n                    key=\"donut_top_legend\"\n                    description=\"A donut-like pie with legend on top.\"\n                    code={DonutTopLegendExampleCode}\n                    example={DonutTopLegendExample}\n                />,\n                <DocExample\n                    title=\"Donut Legend Label Overflow Mode - End\"\n                    key=\"donut_overflow_end\"\n                    description=\"A donut-like pie with legend label overflow mode is end.\"\n                    code={DonutOverflowEndExampleCode}\n                    example={DonutOverflowEndExample}\n                />,\n            ]}\n            encodingSection={<EncodingDoc encoding={doc.encoding} />}\n            optionSection={<OptionsDoc options={optionsSchema} />}\n            eventSection={\n                <EventsDoc\n                    events={doc.events}\n                    Visualization={Pie}\n                    encoding={{\n                        value: 'primary.count',\n                        label: 'primary.component',\n                    }}\n                    dsState={{\n                        primary: {\n                            requestParams: { offset: 0, count: 20 },\n                            data: {\n                                fields: [{ name: 'component' }, { name: 'count' }],\n                                columns: [\n                                    [\n                                        'January',\n                                        'February',\n                                        'March',\n                                        'April',\n                                        'May',\n                                        'June',\n                                        'July',\n                                        'August',\n                                        'September',\n                                        'October',\n                                        'November',\n                                        'December',\n                                    ],\n                                    ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                                ],\n                            },\n                            meta: { totalCount: 20 },\n                        },\n                    }}\n                />\n            }\n        />\n    );\n}\n\nexport default PieDoc;\n","module.exports = require(\"@splunk/visualizations-shared/VisualizationDocPage\");"],"sourceRoot":""}