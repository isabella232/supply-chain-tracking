{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"react\"","webpack:///external \"@splunk/react-docs/DocExample\"","webpack:///external \"@splunk/dashboard-visualizations/common/OptionsDoc\"","webpack:///external \"@splunk/dashboard-visualizations/common/EncodingDoc\"","webpack:///external \"@splunk/visualizations-shared/schemaUtils\"","webpack:///external \"@splunk/dashboard-visualizations/Choropleth\"","webpack:///external \"@splunk/visualization-context/GeoRegistry\"","webpack:///external \"@splunk/visualization-context/GeoJsonProvider\"","webpack:///external \"@splunk/visualization-context/GeoContext\"","webpack:///./src/visualizations/Choropleth/docs/examples/RangeValue.jsx?2f86","webpack:///./src/visualizations/Choropleth/docs/examples/USAInsets.jsx?c9fe","webpack:///./src/visualizations/Choropleth/docs/examples/BasicUSA.jsx?2962","webpack:///./src/visualizations/Choropleth/docs/examples/EquirectangularWorld.jsx?7617","webpack:///./src/visualizations/Choropleth/docs/examples/WorldMap.jsx?49e2","webpack:///./src/visualizations/Choropleth/docs/examples/AutoGradient.jsx?ab8f","webpack:///./src/visualizations/Choropleth/docs/examples/MultiGradient.jsx?9914","webpack:///./src/visualizations/Choropleth/docs/examples/GradientGreenBlue.jsx?dee2","webpack:///./src/visualizations/Choropleth/docs/examples/BackgroundColor.jsx?aee1","webpack:///./src/visualizations/Choropleth/docs/examples/RangeValue.jsx","webpack:///./src/visualizations/Choropleth/docs/examples/USAInsets.jsx","webpack:///./src/visualizations/Choropleth/docs/examples/BasicUSA.jsx","webpack:///./src/visualizations/Choropleth/docs/examples/EquirectangularWorld.jsx","webpack:///./src/visualizations/Choropleth/docs/examples/WorldMap.jsx","webpack:///./src/visualizations/Choropleth/docs/examples/AutoGradient.jsx","webpack:///./src/visualizations/Choropleth/docs/examples/MultiGradient.jsx","webpack:///./src/visualizations/Choropleth/docs/examples/GradientGreenBlue.jsx","webpack:///./src/visualizations/Choropleth/docs/examples/BackgroundColor.jsx","webpack:///./src/visualizations/Choropleth/docs/definition.js","webpack:///./src/visualizations/Choropleth/optionsSchema.js","webpack:///./src/visualizations/Choropleth/docs/index.jsx","webpack:///external \"@splunk/visualizations-shared/VisualizationDocPage\""],"names":["geoRegistry","GeoRegistry","logBounds","x","min","max","y","croppedSrcBounds","lat","long","ChoroplethProps","mode","style","loading","width","height","onOptionsChange","onEventTrigger","onRequestParamsChange","options","name","source","projection","sourceBounds","logicalBounds","fillColor","strokeColor","strokeHighlightColor","selector","encoding","featureId","value","fill","field","format","type","ranges","from","to","dataSources","primary","data","columns","fields","geoFeatureGroups","featureMatcher","property","regex","values","backgroundColor","desc","isRequired","events","description","pattern","getPattern","default","items","BasicUSAExample","BackgroundColorExample","AutoGradientExample","GradientGreenBlueExample","MultiGradientExample","RangeValueExample","USAInsetsExample","WorldExample","EquirectangularWorldExample","optionsSchema","doc"],"mappings":"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","file":"Choropleth.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 67);\n","module.exports = require(\"react\");","module.exports = require(\"@splunk/react-docs/DocExample\");","module.exports = require(\"@splunk/dashboard-visualizations/common/OptionsDoc\");","module.exports = require(\"@splunk/dashboard-visualizations/common/EncodingDoc\");","module.exports = require(\"@splunk/visualizations-shared/schemaUtils\");","module.exports = require(\"@splunk/dashboard-visualizations/Choropleth\");","module.exports = require(\"@splunk/visualization-context/GeoRegistry\");","module.exports = require(\"@splunk/visualization-context/GeoJsonProvider\");","module.exports = require(\"@splunk/visualization-context/GeoContext\");","export default \"import React from 'react';\\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\\n\\nconst geoRegistry = GeoRegistry.create();\\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\\n\\nconst logBounds = { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } };\\nconst croppedSrcBounds = {\\n    lat: { min: 24, max: 50 },\\n    long: { min: -130, max: -60 },\\n};\\n\\nconst ChoroplethProps = {\\n    mode: '',\\n    style: {},\\n    loading: false,\\n    width: 800,\\n    height: 600,\\n    onOptionsChange: () => {},\\n    onEventTrigger: () => {},\\n    onRequestParamsChange: () => {},\\n    options: {\\n        name: 'USA',\\n        source: 'geo://default/us',\\n        projection: 'mercator',\\n        sourceBounds: croppedSrcBounds,\\n        logicalBounds: logBounds,\\n        fillColor: '#EAEFF2',\\n        strokeColor: '#689C8D',\\n        strokeHighlightColor: '#000',\\n        selector: '.feature',\\n    },\\n    encoding: {\\n        featureId: 'primary[0]',\\n        value: 'primary[1]',\\n        fill: {\\n            field: 'primary[1]',\\n            format: {\\n                type: 'rangevalue',\\n                ranges: [\\n                    { from: 200, value: 'red' },\\n                    { from: 150, to: 200, value: 'orange' },\\n                    { from: 50, to: 150, value: 'yellow' },\\n                    { from: 0, to: 50, value: 'green' },\\n                ],\\n            },\\n        },\\n    },\\n    dataSources: {\\n        primary: {\\n            data: {\\n                columns: [\\n                    [\\n                        'US-AL',\\n                        'US-AR',\\n                        'US-AZ',\\n                        'US-CA',\\n                        'US-CO',\\n                        'US-CT',\\n                        'US-FL',\\n                        'US-GA',\\n                        'US-IA',\\n                        'US-ID',\\n                        'US-IL',\\n                        'US-IN',\\n                        'US-KS',\\n                        'US-KY',\\n                        'US-LA',\\n                        'US-MA',\\n                        'US-MD',\\n                        'US-MI',\\n                        'US-MN',\\n                        'US-MO',\\n                        'US-MT',\\n                        'US-NC',\\n                        'US-NE',\\n                        'US-NJ',\\n                        'US-NM',\\n                        'US-NV',\\n                        'US-NY',\\n                        'US-OH',\\n                        'US-OK',\\n                        'US-OR',\\n                        'US-PA',\\n                        'US-RI',\\n                        'US-SC',\\n                        'US-SD',\\n                        'US-TN',\\n                        'US-TX',\\n                        'US-UT',\\n                        'US-VA',\\n                        'US-WA',\\n                        'US-WI',\\n                    ],\\n                    [\\n                        17,\\n                        3,\\n                        65,\\n                        385,\\n                        69,\\n                        9,\\n                        142,\\n                        23,\\n                        11,\\n                        6,\\n                        28,\\n                        43,\\n                        12,\\n                        33,\\n                        12,\\n                        8,\\n                        9,\\n                        23,\\n                        6,\\n                        14,\\n                        10,\\n                        70,\\n                        8,\\n                        3,\\n                        23,\\n                        28,\\n                        62,\\n                        58,\\n                        17,\\n                        28,\\n                        43,\\n                        6,\\n                        8,\\n                        6,\\n                        33,\\n                        225,\\n                        9,\\n                        49,\\n                        48,\\n                        29,\\n                    ],\\n                ],\\n                fields: [\\n                    {\\n                        name: 'us_state',\\n                    },\\n                    {\\n                        name: 'values',\\n                    },\\n                ],\\n            },\\n        },\\n    },\\n};\\nexport default () => (\\n    <GeoContextProvider value={geoRegistry}>\\n        <Choropleth {...ChoroplethProps} />\\n    </GeoContextProvider>\\n);\\n\";","export default \"import React from 'react';\\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\\n\\nconst geoRegistry = GeoRegistry.create();\\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\\n\\nconst logBounds = { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } };\\n\\nconst ChoroplethProps = {\\n    mode: '',\\n    style: {},\\n    loading: false,\\n    width: 800,\\n    height: 600,\\n    onOptionsChange: () => {},\\n    onEventTrigger: () => {},\\n    onRequestParamsChange: () => {},\\n    options: {\\n        name: 'USA',\\n        source: 'geo://default/us',\\n        projection: 'mercator',\\n        sourceBounds: { lat: { min: -60, max: 85 }, long: { min: -180, max: 180 } },\\n        logicalBounds: logBounds,\\n        fillColor: '#EAEFF2',\\n        strokeColor: '#689C8D',\\n        strokeHighlightColor: '#000',\\n        selector: '.feature',\\n        geoFeatureGroups: [\\n            {\\n                name: 'lower48',\\n                featureMatcher: {\\n                    property: 'postal',\\n                    regex: '^(?!(AK|HI))',\\n                },\\n                sourceBounds: {\\n                    lat: { min: 24, max: 50 },\\n                    long: { min: -130, max: -60 },\\n                },\\n            },\\n            {\\n                name: 'Alaska',\\n                featureMatcher: {\\n                    property: 'postal',\\n                    regex: 'AK',\\n                },\\n                logicalBounds: {\\n                    x: { min: 100, max: 200 },\\n                    y: { min: 325, max: 425 },\\n                },\\n                sourceBounds: {\\n                    lat: { min: 45, max: 72 },\\n                    long: { min: -180, max: -120 }, // manually cutoff the Alaskan islands in the eastern hemisphere by taking only the western hemisphere parts\\n                },\\n            },\\n            {\\n                name: 'Hawaii',\\n                featureMatcher: {\\n                    property: 'postal',\\n                    regex: 'HI',\\n                },\\n                logicalBounds: {\\n                    x: { min: 250, max: 350 },\\n                    y: { min: 375, max: 475 },\\n                },\\n                sourceBounds: {\\n                    lat: { min: 18.665677, max: 22.461292 },\\n                    long: { min: -160.921571, max: -154.242648 },\\n                },\\n            },\\n        ],\\n    },\\n    encoding: {\\n        featureId: 'primary[0]',\\n        value: 'primary[1]',\\n        fill: {\\n            field: 'primary[1]',\\n            format: {\\n                type: 'gradient',\\n                ranges: [5, 30, 45, 55, 150, 220, 300],\\n                values: ['#b3fff0', '#99ffec', '#87f5df', '#7af5de', '#60ebd1', '#4be3c5', '#09D0AC'],\\n            },\\n        },\\n    },\\n    dataSources: {\\n        primary: {\\n            data: {\\n                columns: [\\n                    [\\n                        'US-AL',\\n                        'US-AR',\\n                        'US-AZ',\\n                        'US-CA',\\n                        'US-CO',\\n                        'US-CT',\\n                        'US-FL',\\n                        'US-GA',\\n                        'US-IA',\\n                        'US-ID',\\n                        'US-IL',\\n                        'US-IN',\\n                        'US-KS',\\n                        'US-KY',\\n                        'US-LA',\\n                        'US-MA',\\n                        'US-MD',\\n                        'US-MI',\\n                        'US-MN',\\n                        'US-MO',\\n                        'US-MT',\\n                        'US-NC',\\n                        'US-NE',\\n                        'US-NJ',\\n                        'US-NM',\\n                        'US-NV',\\n                        'US-NY',\\n                        'US-OH',\\n                        'US-OK',\\n                        'US-OR',\\n                        'US-PA',\\n                        'US-RI',\\n                        'US-SC',\\n                        'US-SD',\\n                        'US-TN',\\n                        'US-TX',\\n                        'US-UT',\\n                        'US-VA',\\n                        'US-WA',\\n                        'US-WI',\\n                    ],\\n                    [\\n                        17,\\n                        3,\\n                        65,\\n                        385,\\n                        69,\\n                        9,\\n                        142,\\n                        23,\\n                        11,\\n                        6,\\n                        28,\\n                        43,\\n                        12,\\n                        33,\\n                        12,\\n                        8,\\n                        9,\\n                        23,\\n                        6,\\n                        14,\\n                        10,\\n                        70,\\n                        8,\\n                        3,\\n                        23,\\n                        28,\\n                        62,\\n                        58,\\n                        17,\\n                        28,\\n                        43,\\n                        6,\\n                        8,\\n                        6,\\n                        33,\\n                        225,\\n                        9,\\n                        49,\\n                        48,\\n                        29,\\n                    ],\\n                ],\\n                fields: [\\n                    {\\n                        name: 'us_state',\\n                    },\\n                    {\\n                        name: 'values',\\n                    },\\n                ],\\n            },\\n        },\\n    },\\n};\\n\\nexport default () => (\\n    <GeoContextProvider value={geoRegistry}>\\n        <Choropleth {...ChoroplethProps} />\\n    </GeoContextProvider>\\n);\\n\";","export default \"import React from 'react';\\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\\n\\nconst geoRegistry = GeoRegistry.create();\\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\\n\\nconst ChoroplethProps = {\\n    mode: '',\\n    style: {},\\n    loading: false,\\n    width: 800,\\n    height: 600,\\n    onOptionsChange: () => {},\\n    onEventTrigger: () => {},\\n    onRequestParamsChange: () => {},\\n    options: {\\n        name: 'USA',\\n        source: 'geo://default/us',\\n        projection: 'mercator',\\n        sourceBounds: { lat: { min: 24, max: 50 }, long: { min: -130, max: -60 } },\\n        logicalBounds: { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } },\\n        fillColor: '#EAEFF2',\\n        strokeColor: '#689C8D',\\n        strokeHighlightColor: '#000000',\\n        selector: '.feature',\\n    },\\n    encoding: {},\\n};\\n\\nexport default () => (\\n    <GeoContextProvider value={geoRegistry}>\\n        <Choropleth {...ChoroplethProps} />\\n    </GeoContextProvider>\\n);\\n\";","export default \"import React from 'react';\\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\\n\\nconst geoRegistry = GeoRegistry.create();\\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\\n\\nconst ChoroplethProps = {\\n    mode: '',\\n    style: {},\\n    loading: false,\\n    width: 800,\\n    height: 600,\\n    onOptionsChange: () => {},\\n    onEventTrigger: () => {},\\n    onRequestParamsChange: () => {},\\n    options: {\\n        name: 'USA',\\n        source: 'geo://default/world',\\n        projection: 'equirectangular',\\n        sourceBounds: { lat: { min: -60, max: 85 }, long: { min: -180, max: 180 } },\\n        logicalBounds: { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } },\\n        fillColor: '#EAEFF2',\\n        strokeColor: '#689C8D',\\n        strokeHighlightColor: '#000',\\n        selector: '.feature',\\n    },\\n    encoding: {\\n        featureId: 'primary[0]',\\n        fill: {\\n            field: 'primary[1]',\\n            format: {\\n                type: 'gradient',\\n            },\\n        },\\n    },\\n    dataSources: {\\n        primary: {\\n            data: {\\n                columns: [\\n                    ['United States', 'Russia', 'Australia', 'Brazil', 'Japan', 'China', 'India', 'Canada'],\\n                    [17, 3, 65, 385, 69, 9, 142, 23],\\n                ],\\n                fields: [\\n                    {\\n                        name: 'country',\\n                    },\\n                    {\\n                        name: 'value',\\n                    },\\n                ],\\n            },\\n        },\\n    },\\n};\\n\\nexport default () => (\\n    <GeoContextProvider value={geoRegistry}>\\n        <Choropleth {...ChoroplethProps} />\\n    </GeoContextProvider>\\n);\\n\";","export default \"import React from 'react';\\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\\n\\nconst geoRegistry = GeoRegistry.create();\\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\\n\\nconst ChoroplethProps = {\\n    mode: '',\\n    style: {},\\n    loading: false,\\n    width: 800,\\n    height: 600,\\n    onOptionsChange: () => {},\\n    onEventTrigger: () => {},\\n    onRequestParamsChange: () => {},\\n    options: {\\n        name: 'world',\\n        source: 'geo://default/world',\\n        projection: 'mercator',\\n        sourceBounds: { lat: { min: -60, max: 85 }, long: { min: -180, max: 180 } },\\n        logicalBounds: { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } },\\n        fillColor: '#EAEFF2',\\n        strokeColor: '#689C8D',\\n        strokeHighlightColor: '#000',\\n        selector: '.feature',\\n    },\\n    encoding: {\\n        featureId: 'primary[0]',\\n        value: 'primary[1]',\\n        fill: {\\n            field: 'primary[1]',\\n            format: {\\n                type: 'gradient',\\n                values: ['#B3FFF0', '#99FFEC', '#87F5DF', '#7AF5DE', '#60EBD1', '#4BE3C5', '#09D0AC'],\\n            },\\n        },\\n    },\\n    dataSources: {\\n        primary: {\\n            data: {\\n                columns: [\\n                    ['United States', 'Russia', 'Australia', 'Brazil', 'Japan', 'China', 'India', 'Canada'],\\n                    [17, 3, 65, 385, 69, 9, 142, 23],\\n                ],\\n                fields: [\\n                    {\\n                        name: 'country',\\n                    },\\n                    {\\n                        name: 'value',\\n                    },\\n                ],\\n            },\\n        },\\n    },\\n};\\n\\nexport default () => (\\n    <GeoContextProvider value={geoRegistry}>\\n        <Choropleth {...ChoroplethProps} />\\n    </GeoContextProvider>\\n);\\n\";","export default \"import React from 'react';\\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\\n\\nconst geoRegistry = GeoRegistry.create();\\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\\n\\nconst logBounds = { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } };\\nconst croppedSrcBounds = {\\n    lat: { min: 24, max: 50 },\\n    long: { min: -130, max: -60 },\\n};\\n\\nconst ChoroplethProps = {\\n    mode: '',\\n    style: {},\\n    loading: false,\\n    width: 800,\\n    height: 600,\\n    onOptionsChange: () => {},\\n    onEventTrigger: () => {},\\n    onRequestParamsChange: () => {},\\n    options: {\\n        name: 'USA',\\n        source: 'geo://default/us',\\n        projection: 'mercator',\\n        sourceBounds: croppedSrcBounds,\\n        logicalBounds: logBounds,\\n        fillColor: '#EAEFF2',\\n        strokeColor: '#689C8D',\\n        strokeHighlightColor: '#000',\\n        selector: '.feature',\\n    },\\n    encoding: {\\n        featureId: 'primary[0]',\\n        value: 'primary[1]',\\n        fill: {\\n            field: 'primary[1]',\\n            format: {\\n                type: 'gradient',\\n            },\\n        },\\n    },\\n    dataSources: {\\n        primary: {\\n            data: {\\n                columns: [\\n                    [\\n                        'US-AL',\\n                        'US-AR',\\n                        'US-AZ',\\n                        'US-CA',\\n                        'US-CO',\\n                        'US-CT',\\n                        'US-FL',\\n                        'US-GA',\\n                        'US-IA',\\n                        'US-ID',\\n                        'US-IL',\\n                        'US-IN',\\n                        'US-KS',\\n                        'US-KY',\\n                        'US-LA',\\n                        'US-MA',\\n                        'US-MD',\\n                        'US-MI',\\n                        'US-MN',\\n                        'US-MO',\\n                        'US-MT',\\n                        'US-NC',\\n                        'US-NE',\\n                        'US-NJ',\\n                        'US-NM',\\n                        'US-NV',\\n                        'US-NY',\\n                        'US-OH',\\n                        'US-OK',\\n                        'US-OR',\\n                        'US-PA',\\n                        'US-RI',\\n                        'US-SC',\\n                        'US-SD',\\n                        'US-TN',\\n                        'US-TX',\\n                        'US-UT',\\n                        'US-VA',\\n                        'US-WA',\\n                        'US-WI',\\n                    ],\\n                    [\\n                        17,\\n                        3,\\n                        65,\\n                        385,\\n                        69,\\n                        9,\\n                        142,\\n                        23,\\n                        11,\\n                        6,\\n                        28,\\n                        43,\\n                        12,\\n                        33,\\n                        12,\\n                        8,\\n                        9,\\n                        23,\\n                        6,\\n                        14,\\n                        10,\\n                        70,\\n                        8,\\n                        3,\\n                        23,\\n                        28,\\n                        62,\\n                        58,\\n                        17,\\n                        28,\\n                        43,\\n                        6,\\n                        8,\\n                        6,\\n                        33,\\n                        225,\\n                        9,\\n                        49,\\n                        48,\\n                        29,\\n                    ],\\n                ],\\n                fields: [\\n                    {\\n                        name: 'us_state',\\n                    },\\n                    {\\n                        name: 'values',\\n                    },\\n                ],\\n            },\\n        },\\n    },\\n};\\nexport default () => (\\n    <GeoContextProvider value={geoRegistry}>\\n        <Choropleth {...ChoroplethProps} />\\n    </GeoContextProvider>\\n);\\n\";","export default \"import React from 'react';\\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\\n\\nconst geoRegistry = GeoRegistry.create();\\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\\n\\nconst logBounds = { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } };\\nconst croppedSrcBounds = {\\n    lat: { min: 24, max: 50 },\\n    long: { min: -130, max: -60 },\\n};\\n\\nconst ChoroplethProps = {\\n    mode: '',\\n    style: {},\\n    loading: false,\\n    width: 800,\\n    height: 600,\\n    onOptionsChange: () => {},\\n    onEventTrigger: () => {},\\n    onRequestParamsChange: () => {},\\n    options: {\\n        name: 'USA',\\n        source: 'geo://default/us',\\n        projection: 'mercator',\\n        sourceBounds: croppedSrcBounds,\\n        logicalBounds: logBounds,\\n        fillColor: '#EAEFF2',\\n        strokeColor: '#689C8D',\\n        strokeHighlightColor: '#000',\\n        selector: '.feature',\\n    },\\n    encoding: {\\n        featureId: 'primary[0]',\\n        value: 'primary[1]',\\n        fill: {\\n            field: 'primary[1]',\\n            format: {\\n                type: 'gradient',\\n                values: ['yellow', 'orange', 'red'],\\n            },\\n        },\\n    },\\n    dataSources: {\\n        primary: {\\n            data: {\\n                columns: [\\n                    [\\n                        'US-AL',\\n                        'US-AR',\\n                        'US-AZ',\\n                        'US-CA',\\n                        'US-CO',\\n                        'US-CT',\\n                        'US-FL',\\n                        'US-GA',\\n                        'US-IA',\\n                        'US-ID',\\n                        'US-IL',\\n                        'US-IN',\\n                        'US-KS',\\n                        'US-KY',\\n                        'US-LA',\\n                        'US-MA',\\n                        'US-MD',\\n                        'US-MI',\\n                        'US-MN',\\n                        'US-MO',\\n                        'US-MT',\\n                        'US-NC',\\n                        'US-NE',\\n                        'US-NJ',\\n                        'US-NM',\\n                        'US-NV',\\n                        'US-NY',\\n                        'US-OH',\\n                        'US-OK',\\n                        'US-OR',\\n                        'US-PA',\\n                        'US-RI',\\n                        'US-SC',\\n                        'US-SD',\\n                        'US-TN',\\n                        'US-TX',\\n                        'US-UT',\\n                        'US-VA',\\n                        'US-WA',\\n                        'US-WI',\\n                    ],\\n                    [\\n                        17,\\n                        3,\\n                        65,\\n                        385,\\n                        69,\\n                        9,\\n                        142,\\n                        23,\\n                        11,\\n                        6,\\n                        28,\\n                        43,\\n                        12,\\n                        33,\\n                        12,\\n                        8,\\n                        9,\\n                        23,\\n                        6,\\n                        14,\\n                        10,\\n                        70,\\n                        8,\\n                        3,\\n                        23,\\n                        28,\\n                        62,\\n                        58,\\n                        17,\\n                        28,\\n                        43,\\n                        6,\\n                        8,\\n                        6,\\n                        33,\\n                        225,\\n                        9,\\n                        49,\\n                        48,\\n                        29,\\n                    ],\\n                ],\\n                fields: [\\n                    {\\n                        name: 'us_state',\\n                    },\\n                    {\\n                        name: 'values',\\n                    },\\n                ],\\n            },\\n        },\\n    },\\n};\\nexport default () => (\\n    <GeoContextProvider value={geoRegistry}>\\n        <Choropleth {...ChoroplethProps} />\\n    </GeoContextProvider>\\n);\\n\";","export default \"import React from 'react';\\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\\n\\nconst geoRegistry = GeoRegistry.create();\\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\\n\\nconst logBounds = { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } };\\nconst croppedSrcBounds = {\\n    lat: { min: 24, max: 50 },\\n    long: { min: -130, max: -60 },\\n};\\n\\nconst ChoroplethProps = {\\n    mode: '',\\n    style: {},\\n    loading: false,\\n    width: 800,\\n    height: 600,\\n    onOptionsChange: () => {},\\n    onEventTrigger: () => {},\\n    onRequestParamsChange: () => {},\\n    options: {\\n        name: 'USA',\\n        source: 'geo://default/us',\\n        projection: 'mercator',\\n        sourceBounds: croppedSrcBounds,\\n        logicalBounds: logBounds,\\n        fillColor: '#EAEFF2',\\n        strokeColor: '#689C8D',\\n        strokeHighlightColor: '#000',\\n        selector: '.feature',\\n    },\\n    encoding: {\\n        featureId: 'primary[0]',\\n        value: 'primary[1]',\\n        fill: {\\n            field: 'primary[1]',\\n            format: {\\n                type: 'gradient',\\n                values: ['green', 'blue'],\\n            },\\n        },\\n    },\\n    dataSources: {\\n        primary: {\\n            data: {\\n                columns: [\\n                    [\\n                        'US-AL',\\n                        'US-AR',\\n                        'US-AZ',\\n                        'US-CA',\\n                        'US-CO',\\n                        'US-CT',\\n                        'US-FL',\\n                        'US-GA',\\n                        'US-IA',\\n                        'US-ID',\\n                        'US-IL',\\n                        'US-IN',\\n                        'US-KS',\\n                        'US-KY',\\n                        'US-LA',\\n                        'US-MA',\\n                        'US-MD',\\n                        'US-MI',\\n                        'US-MN',\\n                        'US-MO',\\n                        'US-MT',\\n                        'US-NC',\\n                        'US-NE',\\n                        'US-NJ',\\n                        'US-NM',\\n                        'US-NV',\\n                        'US-NY',\\n                        'US-OH',\\n                        'US-OK',\\n                        'US-OR',\\n                        'US-PA',\\n                        'US-RI',\\n                        'US-SC',\\n                        'US-SD',\\n                        'US-TN',\\n                        'US-TX',\\n                        'US-UT',\\n                        'US-VA',\\n                        'US-WA',\\n                        'US-WI',\\n                    ],\\n                    [\\n                        17,\\n                        3,\\n                        65,\\n                        385,\\n                        69,\\n                        9,\\n                        142,\\n                        23,\\n                        11,\\n                        6,\\n                        28,\\n                        43,\\n                        12,\\n                        33,\\n                        12,\\n                        8,\\n                        9,\\n                        23,\\n                        6,\\n                        14,\\n                        10,\\n                        70,\\n                        8,\\n                        3,\\n                        23,\\n                        28,\\n                        62,\\n                        58,\\n                        17,\\n                        28,\\n                        43,\\n                        6,\\n                        8,\\n                        6,\\n                        33,\\n                        225,\\n                        9,\\n                        49,\\n                        48,\\n                        29,\\n                    ],\\n                ],\\n                fields: [\\n                    {\\n                        name: 'us_state',\\n                    },\\n                    {\\n                        name: 'values',\\n                    },\\n                ],\\n            },\\n        },\\n    },\\n};\\nexport default () => (\\n    <GeoContextProvider value={geoRegistry}>\\n        <Choropleth {...ChoroplethProps} />\\n    </GeoContextProvider>\\n);\\n\";","export default \"import React from 'react';\\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\\n\\nconst geoRegistry = GeoRegistry.create();\\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\\n\\nconst ChoroplethProps = {\\n    mode: '',\\n    style: {},\\n    loading: false,\\n    width: 800,\\n    height: 600,\\n    onOptionsChange: () => {},\\n    onEventTrigger: () => {},\\n    onRequestParamsChange: () => {},\\n    options: {\\n        name: 'USA',\\n        source: 'geo://default/us',\\n        projection: 'mercator',\\n        sourceBounds: { lat: { min: 24, max: 50 }, long: { min: -130, max: -60 } },\\n        logicalBounds: { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } },\\n        fillColor: '#EAEFF2',\\n        strokeColor: '#689C8D',\\n        strokeHighlightColor: '#000000',\\n        selector: '.feature',\\n        backgroundColor: '#C0F3F3',\\n    },\\n    encoding: {},\\n};\\n\\nexport default () => (\\n    <GeoContextProvider value={geoRegistry}>\\n        <Choropleth {...ChoroplethProps} />\\n    </GeoContextProvider>\\n);\\n\";","import React from 'react';\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\n\nconst geoRegistry = GeoRegistry.create();\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\n\nconst logBounds = { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } };\nconst croppedSrcBounds = {\n    lat: { min: 24, max: 50 },\n    long: { min: -130, max: -60 },\n};\n\nconst ChoroplethProps = {\n    mode: '',\n    style: {},\n    loading: false,\n    width: 800,\n    height: 600,\n    onOptionsChange: () => {},\n    onEventTrigger: () => {},\n    onRequestParamsChange: () => {},\n    options: {\n        name: 'USA',\n        source: 'geo://default/us',\n        projection: 'mercator',\n        sourceBounds: croppedSrcBounds,\n        logicalBounds: logBounds,\n        fillColor: '#EAEFF2',\n        strokeColor: '#689C8D',\n        strokeHighlightColor: '#000',\n        selector: '.feature',\n    },\n    encoding: {\n        featureId: 'primary[0]',\n        value: 'primary[1]',\n        fill: {\n            field: 'primary[1]',\n            format: {\n                type: 'rangevalue',\n                ranges: [\n                    { from: 200, value: 'red' },\n                    { from: 150, to: 200, value: 'orange' },\n                    { from: 50, to: 150, value: 'yellow' },\n                    { from: 0, to: 50, value: 'green' },\n                ],\n            },\n        },\n    },\n    dataSources: {\n        primary: {\n            data: {\n                columns: [\n                    [\n                        'US-AL',\n                        'US-AR',\n                        'US-AZ',\n                        'US-CA',\n                        'US-CO',\n                        'US-CT',\n                        'US-FL',\n                        'US-GA',\n                        'US-IA',\n                        'US-ID',\n                        'US-IL',\n                        'US-IN',\n                        'US-KS',\n                        'US-KY',\n                        'US-LA',\n                        'US-MA',\n                        'US-MD',\n                        'US-MI',\n                        'US-MN',\n                        'US-MO',\n                        'US-MT',\n                        'US-NC',\n                        'US-NE',\n                        'US-NJ',\n                        'US-NM',\n                        'US-NV',\n                        'US-NY',\n                        'US-OH',\n                        'US-OK',\n                        'US-OR',\n                        'US-PA',\n                        'US-RI',\n                        'US-SC',\n                        'US-SD',\n                        'US-TN',\n                        'US-TX',\n                        'US-UT',\n                        'US-VA',\n                        'US-WA',\n                        'US-WI',\n                    ],\n                    [\n                        17,\n                        3,\n                        65,\n                        385,\n                        69,\n                        9,\n                        142,\n                        23,\n                        11,\n                        6,\n                        28,\n                        43,\n                        12,\n                        33,\n                        12,\n                        8,\n                        9,\n                        23,\n                        6,\n                        14,\n                        10,\n                        70,\n                        8,\n                        3,\n                        23,\n                        28,\n                        62,\n                        58,\n                        17,\n                        28,\n                        43,\n                        6,\n                        8,\n                        6,\n                        33,\n                        225,\n                        9,\n                        49,\n                        48,\n                        29,\n                    ],\n                ],\n                fields: [\n                    {\n                        name: 'us_state',\n                    },\n                    {\n                        name: 'values',\n                    },\n                ],\n            },\n        },\n    },\n};\nexport default () => (\n    <GeoContextProvider value={geoRegistry}>\n        <Choropleth {...ChoroplethProps} />\n    </GeoContextProvider>\n);\n","import React from 'react';\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\n\nconst geoRegistry = GeoRegistry.create();\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\n\nconst logBounds = { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } };\n\nconst ChoroplethProps = {\n    mode: '',\n    style: {},\n    loading: false,\n    width: 800,\n    height: 600,\n    onOptionsChange: () => {},\n    onEventTrigger: () => {},\n    onRequestParamsChange: () => {},\n    options: {\n        name: 'USA',\n        source: 'geo://default/us',\n        projection: 'mercator',\n        sourceBounds: { lat: { min: -60, max: 85 }, long: { min: -180, max: 180 } },\n        logicalBounds: logBounds,\n        fillColor: '#EAEFF2',\n        strokeColor: '#689C8D',\n        strokeHighlightColor: '#000',\n        selector: '.feature',\n        geoFeatureGroups: [\n            {\n                name: 'lower48',\n                featureMatcher: {\n                    property: 'postal',\n                    regex: '^(?!(AK|HI))',\n                },\n                sourceBounds: {\n                    lat: { min: 24, max: 50 },\n                    long: { min: -130, max: -60 },\n                },\n            },\n            {\n                name: 'Alaska',\n                featureMatcher: {\n                    property: 'postal',\n                    regex: 'AK',\n                },\n                logicalBounds: {\n                    x: { min: 100, max: 200 },\n                    y: { min: 325, max: 425 },\n                },\n                sourceBounds: {\n                    lat: { min: 45, max: 72 },\n                    long: { min: -180, max: -120 }, // manually cutoff the Alaskan islands in the eastern hemisphere by taking only the western hemisphere parts\n                },\n            },\n            {\n                name: 'Hawaii',\n                featureMatcher: {\n                    property: 'postal',\n                    regex: 'HI',\n                },\n                logicalBounds: {\n                    x: { min: 250, max: 350 },\n                    y: { min: 375, max: 475 },\n                },\n                sourceBounds: {\n                    lat: { min: 18.665677, max: 22.461292 },\n                    long: { min: -160.921571, max: -154.242648 },\n                },\n            },\n        ],\n    },\n    encoding: {\n        featureId: 'primary[0]',\n        value: 'primary[1]',\n        fill: {\n            field: 'primary[1]',\n            format: {\n                type: 'gradient',\n                ranges: [5, 30, 45, 55, 150, 220, 300],\n                values: ['#b3fff0', '#99ffec', '#87f5df', '#7af5de', '#60ebd1', '#4be3c5', '#09D0AC'],\n            },\n        },\n    },\n    dataSources: {\n        primary: {\n            data: {\n                columns: [\n                    [\n                        'US-AL',\n                        'US-AR',\n                        'US-AZ',\n                        'US-CA',\n                        'US-CO',\n                        'US-CT',\n                        'US-FL',\n                        'US-GA',\n                        'US-IA',\n                        'US-ID',\n                        'US-IL',\n                        'US-IN',\n                        'US-KS',\n                        'US-KY',\n                        'US-LA',\n                        'US-MA',\n                        'US-MD',\n                        'US-MI',\n                        'US-MN',\n                        'US-MO',\n                        'US-MT',\n                        'US-NC',\n                        'US-NE',\n                        'US-NJ',\n                        'US-NM',\n                        'US-NV',\n                        'US-NY',\n                        'US-OH',\n                        'US-OK',\n                        'US-OR',\n                        'US-PA',\n                        'US-RI',\n                        'US-SC',\n                        'US-SD',\n                        'US-TN',\n                        'US-TX',\n                        'US-UT',\n                        'US-VA',\n                        'US-WA',\n                        'US-WI',\n                    ],\n                    [\n                        17,\n                        3,\n                        65,\n                        385,\n                        69,\n                        9,\n                        142,\n                        23,\n                        11,\n                        6,\n                        28,\n                        43,\n                        12,\n                        33,\n                        12,\n                        8,\n                        9,\n                        23,\n                        6,\n                        14,\n                        10,\n                        70,\n                        8,\n                        3,\n                        23,\n                        28,\n                        62,\n                        58,\n                        17,\n                        28,\n                        43,\n                        6,\n                        8,\n                        6,\n                        33,\n                        225,\n                        9,\n                        49,\n                        48,\n                        29,\n                    ],\n                ],\n                fields: [\n                    {\n                        name: 'us_state',\n                    },\n                    {\n                        name: 'values',\n                    },\n                ],\n            },\n        },\n    },\n};\n\nexport default () => (\n    <GeoContextProvider value={geoRegistry}>\n        <Choropleth {...ChoroplethProps} />\n    </GeoContextProvider>\n);\n","import React from 'react';\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\n\nconst geoRegistry = GeoRegistry.create();\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\n\nconst ChoroplethProps = {\n    mode: '',\n    style: {},\n    loading: false,\n    width: 800,\n    height: 600,\n    onOptionsChange: () => {},\n    onEventTrigger: () => {},\n    onRequestParamsChange: () => {},\n    options: {\n        name: 'USA',\n        source: 'geo://default/us',\n        projection: 'mercator',\n        sourceBounds: { lat: { min: 24, max: 50 }, long: { min: -130, max: -60 } },\n        logicalBounds: { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } },\n        fillColor: '#EAEFF2',\n        strokeColor: '#689C8D',\n        strokeHighlightColor: '#000000',\n        selector: '.feature',\n    },\n    encoding: {},\n};\n\nexport default () => (\n    <GeoContextProvider value={geoRegistry}>\n        <Choropleth {...ChoroplethProps} />\n    </GeoContextProvider>\n);\n","import React from 'react';\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\n\nconst geoRegistry = GeoRegistry.create();\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\n\nconst ChoroplethProps = {\n    mode: '',\n    style: {},\n    loading: false,\n    width: 800,\n    height: 600,\n    onOptionsChange: () => {},\n    onEventTrigger: () => {},\n    onRequestParamsChange: () => {},\n    options: {\n        name: 'USA',\n        source: 'geo://default/world',\n        projection: 'equirectangular',\n        sourceBounds: { lat: { min: -60, max: 85 }, long: { min: -180, max: 180 } },\n        logicalBounds: { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } },\n        fillColor: '#EAEFF2',\n        strokeColor: '#689C8D',\n        strokeHighlightColor: '#000',\n        selector: '.feature',\n    },\n    encoding: {\n        featureId: 'primary[0]',\n        fill: {\n            field: 'primary[1]',\n            format: {\n                type: 'gradient',\n            },\n        },\n    },\n    dataSources: {\n        primary: {\n            data: {\n                columns: [\n                    ['United States', 'Russia', 'Australia', 'Brazil', 'Japan', 'China', 'India', 'Canada'],\n                    [17, 3, 65, 385, 69, 9, 142, 23],\n                ],\n                fields: [\n                    {\n                        name: 'country',\n                    },\n                    {\n                        name: 'value',\n                    },\n                ],\n            },\n        },\n    },\n};\n\nexport default () => (\n    <GeoContextProvider value={geoRegistry}>\n        <Choropleth {...ChoroplethProps} />\n    </GeoContextProvider>\n);\n","import React from 'react';\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\n\nconst geoRegistry = GeoRegistry.create();\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\n\nconst ChoroplethProps = {\n    mode: '',\n    style: {},\n    loading: false,\n    width: 800,\n    height: 600,\n    onOptionsChange: () => {},\n    onEventTrigger: () => {},\n    onRequestParamsChange: () => {},\n    options: {\n        name: 'world',\n        source: 'geo://default/world',\n        projection: 'mercator',\n        sourceBounds: { lat: { min: -60, max: 85 }, long: { min: -180, max: 180 } },\n        logicalBounds: { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } },\n        fillColor: '#EAEFF2',\n        strokeColor: '#689C8D',\n        strokeHighlightColor: '#000',\n        selector: '.feature',\n    },\n    encoding: {\n        featureId: 'primary[0]',\n        value: 'primary[1]',\n        fill: {\n            field: 'primary[1]',\n            format: {\n                type: 'gradient',\n                values: ['#B3FFF0', '#99FFEC', '#87F5DF', '#7AF5DE', '#60EBD1', '#4BE3C5', '#09D0AC'],\n            },\n        },\n    },\n    dataSources: {\n        primary: {\n            data: {\n                columns: [\n                    ['United States', 'Russia', 'Australia', 'Brazil', 'Japan', 'China', 'India', 'Canada'],\n                    [17, 3, 65, 385, 69, 9, 142, 23],\n                ],\n                fields: [\n                    {\n                        name: 'country',\n                    },\n                    {\n                        name: 'value',\n                    },\n                ],\n            },\n        },\n    },\n};\n\nexport default () => (\n    <GeoContextProvider value={geoRegistry}>\n        <Choropleth {...ChoroplethProps} />\n    </GeoContextProvider>\n);\n","import React from 'react';\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\n\nconst geoRegistry = GeoRegistry.create();\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\n\nconst logBounds = { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } };\nconst croppedSrcBounds = {\n    lat: { min: 24, max: 50 },\n    long: { min: -130, max: -60 },\n};\n\nconst ChoroplethProps = {\n    mode: '',\n    style: {},\n    loading: false,\n    width: 800,\n    height: 600,\n    onOptionsChange: () => {},\n    onEventTrigger: () => {},\n    onRequestParamsChange: () => {},\n    options: {\n        name: 'USA',\n        source: 'geo://default/us',\n        projection: 'mercator',\n        sourceBounds: croppedSrcBounds,\n        logicalBounds: logBounds,\n        fillColor: '#EAEFF2',\n        strokeColor: '#689C8D',\n        strokeHighlightColor: '#000',\n        selector: '.feature',\n    },\n    encoding: {\n        featureId: 'primary[0]',\n        value: 'primary[1]',\n        fill: {\n            field: 'primary[1]',\n            format: {\n                type: 'gradient',\n            },\n        },\n    },\n    dataSources: {\n        primary: {\n            data: {\n                columns: [\n                    [\n                        'US-AL',\n                        'US-AR',\n                        'US-AZ',\n                        'US-CA',\n                        'US-CO',\n                        'US-CT',\n                        'US-FL',\n                        'US-GA',\n                        'US-IA',\n                        'US-ID',\n                        'US-IL',\n                        'US-IN',\n                        'US-KS',\n                        'US-KY',\n                        'US-LA',\n                        'US-MA',\n                        'US-MD',\n                        'US-MI',\n                        'US-MN',\n                        'US-MO',\n                        'US-MT',\n                        'US-NC',\n                        'US-NE',\n                        'US-NJ',\n                        'US-NM',\n                        'US-NV',\n                        'US-NY',\n                        'US-OH',\n                        'US-OK',\n                        'US-OR',\n                        'US-PA',\n                        'US-RI',\n                        'US-SC',\n                        'US-SD',\n                        'US-TN',\n                        'US-TX',\n                        'US-UT',\n                        'US-VA',\n                        'US-WA',\n                        'US-WI',\n                    ],\n                    [\n                        17,\n                        3,\n                        65,\n                        385,\n                        69,\n                        9,\n                        142,\n                        23,\n                        11,\n                        6,\n                        28,\n                        43,\n                        12,\n                        33,\n                        12,\n                        8,\n                        9,\n                        23,\n                        6,\n                        14,\n                        10,\n                        70,\n                        8,\n                        3,\n                        23,\n                        28,\n                        62,\n                        58,\n                        17,\n                        28,\n                        43,\n                        6,\n                        8,\n                        6,\n                        33,\n                        225,\n                        9,\n                        49,\n                        48,\n                        29,\n                    ],\n                ],\n                fields: [\n                    {\n                        name: 'us_state',\n                    },\n                    {\n                        name: 'values',\n                    },\n                ],\n            },\n        },\n    },\n};\nexport default () => (\n    <GeoContextProvider value={geoRegistry}>\n        <Choropleth {...ChoroplethProps} />\n    </GeoContextProvider>\n);\n","import React from 'react';\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\n\nconst geoRegistry = GeoRegistry.create();\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\n\nconst logBounds = { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } };\nconst croppedSrcBounds = {\n    lat: { min: 24, max: 50 },\n    long: { min: -130, max: -60 },\n};\n\nconst ChoroplethProps = {\n    mode: '',\n    style: {},\n    loading: false,\n    width: 800,\n    height: 600,\n    onOptionsChange: () => {},\n    onEventTrigger: () => {},\n    onRequestParamsChange: () => {},\n    options: {\n        name: 'USA',\n        source: 'geo://default/us',\n        projection: 'mercator',\n        sourceBounds: croppedSrcBounds,\n        logicalBounds: logBounds,\n        fillColor: '#EAEFF2',\n        strokeColor: '#689C8D',\n        strokeHighlightColor: '#000',\n        selector: '.feature',\n    },\n    encoding: {\n        featureId: 'primary[0]',\n        value: 'primary[1]',\n        fill: {\n            field: 'primary[1]',\n            format: {\n                type: 'gradient',\n                values: ['yellow', 'orange', 'red'],\n            },\n        },\n    },\n    dataSources: {\n        primary: {\n            data: {\n                columns: [\n                    [\n                        'US-AL',\n                        'US-AR',\n                        'US-AZ',\n                        'US-CA',\n                        'US-CO',\n                        'US-CT',\n                        'US-FL',\n                        'US-GA',\n                        'US-IA',\n                        'US-ID',\n                        'US-IL',\n                        'US-IN',\n                        'US-KS',\n                        'US-KY',\n                        'US-LA',\n                        'US-MA',\n                        'US-MD',\n                        'US-MI',\n                        'US-MN',\n                        'US-MO',\n                        'US-MT',\n                        'US-NC',\n                        'US-NE',\n                        'US-NJ',\n                        'US-NM',\n                        'US-NV',\n                        'US-NY',\n                        'US-OH',\n                        'US-OK',\n                        'US-OR',\n                        'US-PA',\n                        'US-RI',\n                        'US-SC',\n                        'US-SD',\n                        'US-TN',\n                        'US-TX',\n                        'US-UT',\n                        'US-VA',\n                        'US-WA',\n                        'US-WI',\n                    ],\n                    [\n                        17,\n                        3,\n                        65,\n                        385,\n                        69,\n                        9,\n                        142,\n                        23,\n                        11,\n                        6,\n                        28,\n                        43,\n                        12,\n                        33,\n                        12,\n                        8,\n                        9,\n                        23,\n                        6,\n                        14,\n                        10,\n                        70,\n                        8,\n                        3,\n                        23,\n                        28,\n                        62,\n                        58,\n                        17,\n                        28,\n                        43,\n                        6,\n                        8,\n                        6,\n                        33,\n                        225,\n                        9,\n                        49,\n                        48,\n                        29,\n                    ],\n                ],\n                fields: [\n                    {\n                        name: 'us_state',\n                    },\n                    {\n                        name: 'values',\n                    },\n                ],\n            },\n        },\n    },\n};\nexport default () => (\n    <GeoContextProvider value={geoRegistry}>\n        <Choropleth {...ChoroplethProps} />\n    </GeoContextProvider>\n);\n","import React from 'react';\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\n\nconst geoRegistry = GeoRegistry.create();\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\n\nconst logBounds = { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } };\nconst croppedSrcBounds = {\n    lat: { min: 24, max: 50 },\n    long: { min: -130, max: -60 },\n};\n\nconst ChoroplethProps = {\n    mode: '',\n    style: {},\n    loading: false,\n    width: 800,\n    height: 600,\n    onOptionsChange: () => {},\n    onEventTrigger: () => {},\n    onRequestParamsChange: () => {},\n    options: {\n        name: 'USA',\n        source: 'geo://default/us',\n        projection: 'mercator',\n        sourceBounds: croppedSrcBounds,\n        logicalBounds: logBounds,\n        fillColor: '#EAEFF2',\n        strokeColor: '#689C8D',\n        strokeHighlightColor: '#000',\n        selector: '.feature',\n    },\n    encoding: {\n        featureId: 'primary[0]',\n        value: 'primary[1]',\n        fill: {\n            field: 'primary[1]',\n            format: {\n                type: 'gradient',\n                values: ['green', 'blue'],\n            },\n        },\n    },\n    dataSources: {\n        primary: {\n            data: {\n                columns: [\n                    [\n                        'US-AL',\n                        'US-AR',\n                        'US-AZ',\n                        'US-CA',\n                        'US-CO',\n                        'US-CT',\n                        'US-FL',\n                        'US-GA',\n                        'US-IA',\n                        'US-ID',\n                        'US-IL',\n                        'US-IN',\n                        'US-KS',\n                        'US-KY',\n                        'US-LA',\n                        'US-MA',\n                        'US-MD',\n                        'US-MI',\n                        'US-MN',\n                        'US-MO',\n                        'US-MT',\n                        'US-NC',\n                        'US-NE',\n                        'US-NJ',\n                        'US-NM',\n                        'US-NV',\n                        'US-NY',\n                        'US-OH',\n                        'US-OK',\n                        'US-OR',\n                        'US-PA',\n                        'US-RI',\n                        'US-SC',\n                        'US-SD',\n                        'US-TN',\n                        'US-TX',\n                        'US-UT',\n                        'US-VA',\n                        'US-WA',\n                        'US-WI',\n                    ],\n                    [\n                        17,\n                        3,\n                        65,\n                        385,\n                        69,\n                        9,\n                        142,\n                        23,\n                        11,\n                        6,\n                        28,\n                        43,\n                        12,\n                        33,\n                        12,\n                        8,\n                        9,\n                        23,\n                        6,\n                        14,\n                        10,\n                        70,\n                        8,\n                        3,\n                        23,\n                        28,\n                        62,\n                        58,\n                        17,\n                        28,\n                        43,\n                        6,\n                        8,\n                        6,\n                        33,\n                        225,\n                        9,\n                        49,\n                        48,\n                        29,\n                    ],\n                ],\n                fields: [\n                    {\n                        name: 'us_state',\n                    },\n                    {\n                        name: 'values',\n                    },\n                ],\n            },\n        },\n    },\n};\nexport default () => (\n    <GeoContextProvider value={geoRegistry}>\n        <Choropleth {...ChoroplethProps} />\n    </GeoContextProvider>\n);\n","import React from 'react';\nimport Choropleth from '@splunk/dashboard-visualizations/Choropleth';\nimport GeoRegistry from '@splunk/visualization-context/GeoRegistry';\nimport GeoJsonProvider from '@splunk/visualization-context/GeoJsonProvider';\nimport { GeoContextProvider } from '@splunk/visualization-context/GeoContext';\n\nconst geoRegistry = GeoRegistry.create();\ngeoRegistry.addDefaultProvider(new GeoJsonProvider());\n\nconst ChoroplethProps = {\n    mode: '',\n    style: {},\n    loading: false,\n    width: 800,\n    height: 600,\n    onOptionsChange: () => {},\n    onEventTrigger: () => {},\n    onRequestParamsChange: () => {},\n    options: {\n        name: 'USA',\n        source: 'geo://default/us',\n        projection: 'mercator',\n        sourceBounds: { lat: { min: 24, max: 50 }, long: { min: -130, max: -60 } },\n        logicalBounds: { x: { min: 0, max: 800 }, y: { min: 0, max: 600 } },\n        fillColor: '#EAEFF2',\n        strokeColor: '#689C8D',\n        strokeHighlightColor: '#000000',\n        selector: '.feature',\n        backgroundColor: '#C0F3F3',\n    },\n    encoding: {},\n};\n\nexport default () => (\n    <GeoContextProvider value={geoRegistry}>\n        <Choropleth {...ChoroplethProps} />\n    </GeoContextProvider>\n);\n","export default {\n    encoding: [\n        {\n            name: 'featureId',\n            type: '[string]',\n            desc:\n                'Specify the dataSource field that should be used to identify each area in the Choropleth map.',\n            isRequired: 'false',\n        },\n        {\n            name: 'value',\n            type: '[number]',\n            desc: 'Specify the dataSource field that indicates the value of each area in the Choropleth map.',\n            isRequired: 'false',\n        },\n        {\n            name: 'fill',\n            type: '[string]',\n            desc:\n                'Specify the dataSource field that should be used to select the color of each area in the Choropleth Map.',\n            isRequired: 'false',\n        },\n    ],\n    events: [\n        {\n            name: 'feature.hover',\n            desc: 'trigger when user hovers over a feature or leaves',\n        },\n        {\n            name: 'map.click',\n            desc: 'trigger when user clicks on a map',\n        },\n    ],\n};\n","import { COLOR_OR_TOKEN_PATTERN, getPattern } from '@splunk/visualizations-shared/schemaUtils';\n\nexport default {\n    source: {\n        description: 'Source for the geo data.',\n        pattern: getPattern(['geo://default/us', 'geo://default/world']),\n        type: 'string',\n    },\n    projection: {\n        description: 'Specifies the map projection.',\n        pattern: getPattern(['mercator', 'equirectangular']),\n        type: 'string',\n    },\n    selector: { default: '.feature', description: 'Selector to get all features', type: 'string' },\n    fillColor: {\n        description: 'Specify the Hex code for fill color of features with no data. For example: \"#0000FF\".',\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    strokeColor: {\n        description:\n            'Specify the Hex code for stroke color for all features that are not selected. For example: \"#0000FF\".',\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    strokeHighlightColor: {\n        description:\n            'Specify the Hex code for stroke highlight color for all features that are selected. For example: \"#0000FF\".',\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    backgroundColor: {\n        description:\n            'Specify the Hex code for the color used for the Choropleth background. For example: \"#0000FF\".',\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    name: { description: 'Name of the Visualization', type: 'string' },\n    sourceBounds: {\n        description:\n            'Specify the bounds of the geographic area as lat:{min:..., max:...}, long:{min:..., max:..}.',\n        type: 'object',\n    },\n    logicalBounds: {\n        description:\n            'Specify the logical bounds of the projected map as x:{min:..., max:...}, y:{min:..., max:..}.',\n        type: 'object',\n    },\n    geoFeatureGroups: {\n        type: 'array',\n        items: { type: 'object' },\n        description:\n            'A geo feature group consists of a name, logical bounds, sourcebounds and a featureMatcher, which consists of a property name and a regex to check against that property.',\n    },\n};\n","import React from 'react';\nimport VisualizationDocPage from '@splunk/visualizations-shared/VisualizationDocPage';\nimport EncodingDoc from '@splunk/dashboard-visualizations/common/EncodingDoc';\nimport OptionsDoc from '@splunk/dashboard-visualizations/common/OptionsDoc';\nimport DocExample from '@splunk/react-docs/DocExample';\n\nimport RangeValueCode from '!!raw-loader!./examples/RangeValue';\nimport USAInsetsCode from '!!raw-loader!./examples/USAInsets';\nimport BasicUSACode from '!!raw-loader!./examples/BasicUSA';\nimport EquirectangularWorldCode from '!!raw-loader!./examples/EquirectangularWorld';\nimport WorldCode from '!!raw-loader!./examples/WorldMap';\nimport AutoGradientCode from '!!raw-loader!./examples/AutoGradient';\nimport MultiGradientCode from '!!raw-loader!./examples/MultiGradient';\nimport GradientGreenBlueCode from '!!raw-loader!./examples/GradientGreenBlue';\nimport BackgroundColorCode from '!!raw-loader!./examples/BackgroundColor';\n\nimport RangeValueExample from './examples/RangeValue';\nimport USAInsetsExample from './examples/USAInsets';\nimport BasicUSAExample from './examples/BasicUSA';\nimport EquirectangularWorldExample from './examples/EquirectangularWorld';\nimport WorldExample from './examples/WorldMap';\nimport AutoGradientExample from './examples/AutoGradient';\nimport MultiGradientExample from './examples/MultiGradient';\nimport GradientGreenBlueExample from './examples/GradientGreenBlue';\nimport BackgroundColorExample from './examples/BackgroundColor';\n\nimport doc from './definition';\nimport optionsSchema from '../optionsSchema';\n\nexport default () => (\n    <VisualizationDocPage\n        title=\"Choropleth\"\n        examplesSection={[\n            <DocExample\n                title=\"Basic US Choropleth\"\n                key=\"BasicUSAChoropleth\"\n                code={BasicUSACode}\n                example={BasicUSAExample}\n            />,\n            <DocExample\n                title=\"Custom Background Color\"\n                key=\"backgroundcolor\"\n                code={BackgroundColorCode}\n                example={BackgroundColorExample}\n            />,\n            <DocExample\n                title=\"Encoding format - Auto Linear Gradient\"\n                key=\"AutoGradients\"\n                code={AutoGradientCode}\n                example={AutoGradientExample}\n            />,\n            <DocExample\n                title=\"Encoding format - Linear Gradient to green and blue\"\n                key=\"GradientGreenBlue\"\n                code={GradientGreenBlueCode}\n                example={GradientGreenBlueExample}\n            />,\n            <DocExample\n                title=\"Encoding format - Multiple Linear Color Gradients\"\n                key=\"MultiGradient\"\n                code={MultiGradientCode}\n                example={MultiGradientExample}\n            />,\n            <DocExample\n                title=\"Encoding format - Specify Rangevalue.\"\n                key=\"RangeValue1Choropleth\"\n                code={RangeValueCode}\n                example={RangeValueExample}\n            />,\n            <DocExample\n                title=\"US Choropleth with custom inset maps for Alaska and Hawaii\"\n                key=\"USAInsets\"\n                code={USAInsetsCode}\n                example={USAInsetsExample}\n            />,\n            <DocExample\n                title=\"World Choropleth\"\n                key=\"WorldChoropleth\"\n                code={WorldCode}\n                example={WorldExample}\n            />,\n            <DocExample\n                title=\"World Choropleth - Equirectangular Projection\"\n                key=\"EquirectangularWorldChoropleth\"\n                code={EquirectangularWorldCode}\n                example={EquirectangularWorldExample}\n            />,\n        ]}\n        optionSection={<OptionsDoc options={optionsSchema} />}\n        encodingSection={<EncodingDoc encoding={doc.encoding} />}\n    />\n);\n","module.exports = require(\"@splunk/visualizations-shared/VisualizationDocPage\");"],"sourceRoot":""}