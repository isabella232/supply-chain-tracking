{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"react\"","webpack:///external \"@splunk/react-docs/DocExample\"","webpack:///external \"@splunk/dashboard-visualizations/common/OptionsDoc\"","webpack:///external \"@splunk/dashboard-visualizations/common/EncodingDoc\"","webpack:///external \"@splunk/dashboard-visualizations/common/EventsDoc\"","webpack:///external \"@splunk/visualizations-shared/schemaUtils\"","webpack:///./src/visualizations/Line/docs/examples/Basic.jsx?fee1","webpack:///./src/visualizations/Line/docs/examples/TitleSpecified.jsx?ed47","webpack:///./src/visualizations/Line/docs/examples/TitleNotVisible.jsx?5019","webpack:///./src/visualizations/Line/docs/examples/SeriesColors.jsx?cf99","webpack:///./src/visualizations/Line/docs/examples/FieldColors.jsx?1e20","webpack:///./src/visualizations/Line/docs/examples/BackgroundColor.jsx?0fe6","webpack:///./src/visualizations/Line/docs/examples/ForegroundColor.jsx?01df","webpack:///./src/visualizations/Line/docs/examples/FontColor.jsx?333d","webpack:///./src/visualizations/Line/docs/examples/SplitSeries.jsx?fc75","webpack:///./src/visualizations/Line/docs/examples/SplitSeriesIndependent.jsx?3f13","webpack:///./src/visualizations/Line/docs/examples/FieldDashStyle.jsx?97e3","webpack:///./src/visualizations/Line/docs/examples/LineDashStyle.jsx?4898","webpack:///./src/visualizations/Line/docs/examples/LineWidth.jsx?2539","webpack:///./src/visualizations/Line/docs/examples/AxisYAbbreviation.jsx?687e","webpack:///./src/visualizations/Line/docs/examples/AxisYScale.jsx?47d6","webpack:///./src/visualizations/Line/docs/examples/AxisXLabelVisiblility.jsx?035c","webpack:///./src/visualizations/Line/docs/examples/AxisYLabelVisiblility.jsx?5f4c","webpack:///./src/visualizations/Line/docs/examples/AxisXMajorLabelVisiblility.jsx?e730","webpack:///./src/visualizations/Line/docs/examples/AxisYMajorLabelVisiblility.jsx?4a64","webpack:///./src/visualizations/Line/docs/examples/MajorGrid.jsx?a242","webpack:///./src/visualizations/Line/docs/examples/MinorGrid.jsx?bbd2","webpack:///./src/visualizations/Line/docs/examples/Legend.jsx?55ab","webpack:///./src/visualizations/Line/docs/examples/FieldShowList.jsx?3994","webpack:///./src/visualizations/Line/docs/examples/DataLabels.jsx?8291","webpack:///./src/visualizations/Line/docs/examples/LineMarkers.jsx?563b","webpack:///./src/visualizations/Line/docs/examples/Ticks.jsx?0f85","webpack:///./src/visualizations/Line/docs/examples/NullValueMode.jsx?eed7","webpack:///./src/visualizations/Line/docs/examples/LegendMode.jsx?2301","webpack:///./src/visualizations/Line/docs/examples/IncludeZero.jsx?61b9","webpack:///./src/visualizations/Line/docs/examples/ExtendRange.jsx?cea6","webpack:///./src/visualizations/Line/docs/examples/IntegerUnits.jsx?5039","webpack:///./src/visualizations/Line/docs/examples/LegendStyleMode.jsx?56db","webpack:///./src/visualizations/Line/docs/examples/ChartOverlay.jsx?31ca","webpack:///./src/visualizations/Line/docs/examples/Annotation.jsx?d804","webpack:///./src/visualizations/Line/docs/examples/AnnotationColor.jsx?fdbe","webpack:///./src/visualizations/Line/docs/examples/MultiSeriesExplicit.jsx?12e4","webpack:///./src/visualizations/Line/docs/examples/MultiSeriesDynamic.jsx?02e2","webpack:///./src/visualizations/Line/docs/examples/MultiYAxes.jsx?d8d0","webpack:///./src/visualizations/Line/docs/examples/Basic.jsx","webpack:///./src/visualizations/Line/docs/examples/TitleSpecified.jsx","webpack:///./src/visualizations/Line/docs/examples/TitleNotVisible.jsx","webpack:///./src/visualizations/Line/docs/examples/SeriesColors.jsx","webpack:///./src/visualizations/Line/docs/examples/FieldColors.jsx","webpack:///./src/visualizations/Line/docs/examples/BackgroundColor.jsx","webpack:///./src/visualizations/Line/docs/examples/ForegroundColor.jsx","webpack:///./src/visualizations/Line/docs/examples/FontColor.jsx","webpack:///./src/visualizations/Line/docs/examples/SplitSeries.jsx","webpack:///./src/visualizations/Line/docs/examples/SplitSeriesIndependent.jsx","webpack:///./src/visualizations/Line/docs/examples/LineDashStyle.jsx","webpack:///./src/visualizations/Line/docs/examples/FieldDashStyle.jsx","webpack:///./src/visualizations/Line/docs/examples/LineWidth.jsx","webpack:///./src/visualizations/Line/docs/examples/AxisYAbbreviation.jsx","webpack:///./src/visualizations/Line/docs/examples/AxisYScale.jsx","webpack:///./src/visualizations/Line/docs/examples/IncludeZero.jsx","webpack:///./src/visualizations/Line/docs/examples/ExtendRange.jsx","webpack:///./src/visualizations/Line/docs/examples/IntegerUnits.jsx","webpack:///./src/visualizations/Line/docs/examples/AxisXLabelVisiblility.jsx","webpack:///./src/visualizations/Line/docs/examples/AxisYLabelVisiblility.jsx","webpack:///./src/visualizations/Line/docs/examples/AxisXMajorLabelVisiblility.jsx","webpack:///./src/visualizations/Line/docs/examples/AxisYMajorLabelVisiblility.jsx","webpack:///./src/visualizations/Line/docs/examples/MajorGrid.jsx","webpack:///./src/visualizations/Line/docs/examples/MinorGrid.jsx","webpack:///./src/visualizations/Line/docs/examples/Legend.jsx","webpack:///./src/visualizations/Line/docs/examples/FieldShowList.jsx","webpack:///./src/visualizations/Line/docs/examples/DataLabels.jsx","webpack:///./src/visualizations/Line/docs/examples/LineMarkers.jsx","webpack:///./src/visualizations/Line/docs/examples/Ticks.jsx","webpack:///./src/visualizations/Line/docs/examples/NullValueMode.jsx","webpack:///./src/visualizations/Line/docs/examples/LegendMode.jsx","webpack:///./src/visualizations/Line/docs/examples/LegendStyleMode.jsx","webpack:///./src/visualizations/Line/docs/examples/ChartOverlay.jsx","webpack:///./src/visualizations/Line/docs/examples/Annotation.jsx","webpack:///./src/visualizations/Line/docs/examples/AnnotationColor.jsx","webpack:///./src/visualizations/Line/docs/examples/MultiSeriesExplicit.jsx","webpack:///./src/visualizations/Line/docs/examples/MultiSeriesDynamic.jsx","webpack:///./src/visualizations/Line/docs/examples/MultiYAxes.jsx","webpack:///./src/visualizations/Line/docs/definition.js","webpack:///./src/visualizations/Line/optionsSchema.js","webpack:///./src/visualizations/Line/docs/index.jsx","webpack:///external \"@splunk/dashboard-visualizations/Line\"","webpack:///external \"@splunk/visualizations-shared/VisualizationDocPage\""],"names":["x","y","primary","requestParams","offset","count","data","fields","name","groupby_rank","columns","meta","totalCount","seriesColors","type_special","fieldColors","percent","backgroundColor","foregroundColor","fontColor","lineDashStyle","fieldDashStyles","lineWidth","data_source","splitby_field","splitby_value","y2","annotationX","annotationLabel","annotationColor","annotation","encoding","type","desc","defaultValue","isRequired","events","description","default","minimum","pattern","getPattern","enum","items","BasicExample","AnnotationExample","AnnotationColorExample","TitleSpecifiedExample","TitleNotVisibleExample","SeriesColorsExample","FieldColorsExample","BackgroundColorExample","ForegroundColorExample","FontColorExample","SplitSeriesExample","SplitSeriesIndependentExample","LineDashStyleExample","FieldDashStyleExample","LineWidthExample","AxisYAbbreviationExample","AxisYScaleExample","IncludeZeroExample","ExtendRangeExample","IntegerUnitsExample","AxisXLabelVisiblilityExample","AxisYLabelVisiblilityExample","AxisXMajorLabelVisiblilityExample","AxisYMajorLabelVisiblilityExample","MajorGridExample","MinorGridExample","TicksExample","NullValueModeExample","LegendModeExample","LegendStyleModeExample","LegendExample","FieldShowListExample","DataLabelsExample","LineMarkersExample","ChartOverlayExample","MultiSeriesExplicitExample","MultiSeriesDynamicExample","MultiYAxesExample","doc","optionsSchema"],"mappings":"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","file":"Line.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 55);\n","module.exports = require(\"react\");","module.exports = require(\"@splunk/react-docs/DocExample\");","module.exports = require(\"@splunk/dashboard-visualizations/common/OptionsDoc\");","module.exports = require(\"@splunk/dashboard-visualizations/common/EncodingDoc\");","module.exports = require(\"@splunk/dashboard-visualizations/common/EventsDoc\");","module.exports = require(\"@splunk/visualizations-shared/schemaUtils\");","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{}}\\n        encoding={{\\n            x: 'primary._time',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\\n                    columns: [\\n                        [\\n                            '2018-05-02T18:15:46.000-07:00',\\n                            '2018-05-02T18:15:47.000-07:00',\\n                            '2018-05-02T18:15:48.000-07:00',\\n                            '2018-05-02T18:15:49.000-07:00',\\n                            '2018-05-02T18:15:50.000-07:00',\\n                        ],\\n                        ['2', '10', '13', '60', '43'],\\n                        ['1', '1', '1', '1', '1'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            'axisTitleY.text': 'Axis Y Count',\\n            'axisTitleX.text': 'Axis X Time',\\n        }}\\n        encoding={{\\n            x: 'primary._time',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\\n                    columns: [\\n                        [\\n                            '2018-05-02T18:15:46.000-07:00',\\n                            '2018-05-02T18:15:47.000-07:00',\\n                            '2018-05-02T18:15:48.000-07:00',\\n                            '2018-05-02T18:15:49.000-07:00',\\n                            '2018-05-02T18:15:50.000-07:00',\\n                        ],\\n                        ['2', '10', '13', '60', '43'],\\n                        ['1', '1', '1', '1', '1'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            'axisTitleY.visibility': 'collapsed',\\n            'axisTitleX.visibility': 'collapsed',\\n        }}\\n        encoding={{\\n            x: 'primary._time',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\\n                    columns: [\\n                        [\\n                            '2018-05-02T18:15:46.000-07:00',\\n                            '2018-05-02T18:15:47.000-07:00',\\n                            '2018-05-02T18:15:48.000-07:00',\\n                            '2018-05-02T18:15:49.000-07:00',\\n                            '2018-05-02T18:15:50.000-07:00',\\n                        ],\\n                        ['2', '10', '13', '60', '43'],\\n                        ['1', '1', '1', '1', '1'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            seriesColors: ['#FF0000', '#0000FF'],\\n        }}\\n        encoding={{\\n            x: 'primary.sourcetype',\\n            y: ['primary[1]', 'primary[2]'],\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [\\n                        {\\n                            name: 'sourcetype',\\n                        },\\n                        {\\n                            name: 'count',\\n                            type_special: 'count',\\n                        },\\n                        {\\n                            name: 'percent',\\n                            type_special: 'percent',\\n                        },\\n                    ],\\n                    columns: [\\n                        [\\n                            'splunkd',\\n                            'splunkd_ui_access',\\n                            'splunkd_access',\\n                            'splunk_web_access',\\n                            'scheduler',\\n                            'splunk_web_service',\\n                        ],\\n                        ['600', '525', '295', '213', '122', '19'],\\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            fieldColors: { 'total count': '#008000', percent: '#FFA500' },\\n        }}\\n        encoding={{\\n            x: 'primary.sourcetype',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [\\n                        {\\n                            name: 'sourcetype',\\n                        },\\n                        {\\n                            name: 'total count',\\n                            type_special: 'count',\\n                        },\\n                        {\\n                            name: 'percent',\\n                            type_special: 'percent',\\n                        },\\n                    ],\\n                    columns: [\\n                        [\\n                            'splunkd',\\n                            'splunkd_ui_access',\\n                            'splunkd_access',\\n                            'splunk_web_access',\\n                            'scheduler',\\n                            'splunk_web_service',\\n                        ],\\n                        ['600', '525', '295', '213', '122', '19'],\\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            backgroundColor: '#008000',\\n        }}\\n        encoding={{\\n            x: 'primary._time',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\\n                    columns: [\\n                        [\\n                            '2018-05-02T18:15:46.000-07:00',\\n                            '2018-05-02T18:15:47.000-07:00',\\n                            '2018-05-02T18:15:48.000-07:00',\\n                            '2018-05-02T18:15:49.000-07:00',\\n                            '2018-05-02T18:15:50.000-07:00',\\n                        ],\\n                        ['2', '10', '13', '60', '43'],\\n                        ['1', '1', '1', '1', '1'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            foregroundColor: '#FF0000',\\n        }}\\n        encoding={{\\n            x: 'primary._time',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\\n                    columns: [\\n                        [\\n                            '2018-05-02T18:15:46.000-07:00',\\n                            '2018-05-02T18:15:47.000-07:00',\\n                            '2018-05-02T18:15:48.000-07:00',\\n                            '2018-05-02T18:15:49.000-07:00',\\n                            '2018-05-02T18:15:50.000-07:00',\\n                        ],\\n                        ['2', '10', '13', '60', '43'],\\n                        ['1', '1', '1', '1', '1'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            fontColor: '#0000FF',\\n        }}\\n        encoding={{\\n            x: 'primary._time',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\\n                    columns: [\\n                        [\\n                            '2018-05-02T18:15:46.000-07:00',\\n                            '2018-05-02T18:15:47.000-07:00',\\n                            '2018-05-02T18:15:48.000-07:00',\\n                            '2018-05-02T18:15:49.000-07:00',\\n                            '2018-05-02T18:15:50.000-07:00',\\n                        ],\\n                        ['2', '10', '13', '60', '43'],\\n                        ['1', '1', '1', '1', '1'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            'layout.splitSeries': true,\\n        }}\\n        encoding={{\\n            x: 'primary.sourcetype',\\n            y: ['primary[1]', 'primary[2]'],\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [\\n                        {\\n                            name: 'sourcetype',\\n                        },\\n                        {\\n                            name: 'count',\\n                            type_special: 'count',\\n                        },\\n                        {\\n                            name: 'percent',\\n                            type_special: 'percent',\\n                        },\\n                    ],\\n                    columns: [\\n                        [\\n                            'splunkd',\\n                            'splunkd_ui_access',\\n                            'splunkd_access',\\n                            'splunk_web_access',\\n                            'scheduler',\\n                            'splunk_web_service',\\n                        ],\\n                        ['600', '525', '295', '213', '122', '19'],\\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            'layout.splitSeries': true,\\n            'layout.splitSeries.allowIndependentYRanges': true,\\n        }}\\n        encoding={{\\n            x: 'primary.sourcetype',\\n            y: ['primary[1]', 'primary[2]'],\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [\\n                        {\\n                            name: 'sourcetype',\\n                        },\\n                        {\\n                            name: 'count',\\n                            type_special: 'count',\\n                        },\\n                        {\\n                            name: 'percent',\\n                            type_special: 'percent',\\n                        },\\n                    ],\\n                    columns: [\\n                        [\\n                            'splunkd',\\n                            'splunkd_ui_access',\\n                            'splunkd_access',\\n                            'splunk_web_access',\\n                            'scheduler',\\n                            'splunk_web_service',\\n                        ],\\n                        ['600', '525', '295', '213', '122', '19'],\\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            fieldDashStyles: { count: 'dash', percent: 'dashDot' },\\n        }}\\n        encoding={{\\n            x: 'primary.sourcetype',\\n            y: ['primary.count', 'primary.percent'],\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [\\n                        {\\n                            name: 'sourcetype',\\n                        },\\n                        {\\n                            name: 'count',\\n                            type_special: 'count',\\n                        },\\n                        {\\n                            name: 'percent',\\n                            type_special: 'percent',\\n                        },\\n                    ],\\n                    columns: [\\n                        [\\n                            'splunkd',\\n                            'splunkd_ui_access',\\n                            'splunkd_access',\\n                            'splunk_web_access',\\n                            'scheduler',\\n                            'splunk_web_service',\\n                        ],\\n                        ['600', '525', '295', '213', '122', '19'],\\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            lineDashStyle: 'shortDashDot',\\n        }}\\n        encoding={{\\n            x: 'primary.sourcetype',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [\\n                        {\\n                            name: 'sourcetype',\\n                        },\\n                        {\\n                            name: 'count',\\n                            type_special: 'count',\\n                        },\\n                        {\\n                            name: 'percent',\\n                            type_special: 'percent',\\n                        },\\n                    ],\\n                    columns: [\\n                        [\\n                            'splunkd',\\n                            'splunkd_ui_access',\\n                            'splunkd_access',\\n                            'splunk_web_access',\\n                            'scheduler',\\n                            'splunk_web_service',\\n                        ],\\n                        ['600', '525', '295', '213', '122', '19'],\\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            lineWidth: 5,\\n        }}\\n        encoding={{\\n            x: 'primary.sourcetype',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [\\n                        {\\n                            name: 'sourcetype',\\n                        },\\n                        {\\n                            name: 'count',\\n                            type_special: 'count',\\n                        },\\n                        {\\n                            name: 'percent',\\n                            type_special: 'percent',\\n                        },\\n                    ],\\n                    columns: [\\n                        [\\n                            'splunkd',\\n                            'splunkd_ui_access',\\n                            'splunkd_access',\\n                            'splunk_web_access',\\n                            'scheduler',\\n                            'splunk_web_service',\\n                        ],\\n                        ['600', '525', '295', '213', '122', '19'],\\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{ 'axisY.abbreviation': 'auto' }}\\n        encoding={{\\n            x: 'primary.component',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\\n                    columns: [\\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\\n                        ['166238', '8904', '2327'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            'axisY.scale': 'log',\\n        }}\\n        encoding={{\\n            x: 'primary.component',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\\n                    columns: [\\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\\n                        ['166238', '8904', '2327'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            'axisLabelsX.axisVisibility': 'show',\\n            'gridLinesY.showMajorLines': false,\\n        }}\\n        encoding={{\\n            x: 'primary.component',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\\n                    columns: [\\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\\n                        ['166238', '8904', '2327'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            'axisLabelsY.axisVisibility': 'show',\\n        }}\\n        encoding={{\\n            x: 'primary.component',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\\n                    columns: [\\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\\n                        ['166238', '8904', '2327'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            'axisLabelsX.majorLabelVisibility': 'hide',\\n        }}\\n        encoding={{\\n            x: 'primary.component',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\\n                    columns: [\\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\\n                        ['166238', '8904', '2327'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            'axisLabelsY.majorLabelVisibility': 'hide',\\n        }}\\n        encoding={{\\n            x: 'primary.component',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\\n                    columns: [\\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\\n                        ['166238', '8904', '2327'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            'gridLinesX.showMajorLines': true,\\n            'gridLinesY.showMajorLines': false,\\n        }}\\n        encoding={{\\n            x: 'primary._time',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\\n                    columns: [\\n                        [\\n                            '2018-05-02T18:15:46.000-07:00',\\n                            '2018-05-02T18:15:47.000-07:00',\\n                            '2018-05-02T18:15:48.000-07:00',\\n                            '2018-05-02T18:15:49.000-07:00',\\n                            '2018-05-02T18:15:50.000-07:00',\\n                        ],\\n                        ['2', '10', '13', '60', '43'],\\n                        ['1', '1', '1', '1', '1'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            'gridLinesY.showMinorLines': true,\\n        }}\\n        encoding={{\\n            x: 'primary._time',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\\n                    columns: [\\n                        [\\n                            '2018-05-02T18:15:46.000-07:00',\\n                            '2018-05-02T18:15:47.000-07:00',\\n                            '2018-05-02T18:15:48.000-07:00',\\n                            '2018-05-02T18:15:49.000-07:00',\\n                            '2018-05-02T18:15:50.000-07:00',\\n                        ],\\n                        ['2', '10', '13', '60', '43'],\\n                        ['1', '1', '1', '1', '1'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            'legend.labels': ['foo', 'bar'],\\n            'legend.placement': 'top',\\n        }}\\n        encoding={{\\n            x: 'primary._time',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\\n                    columns: [\\n                        [\\n                            '2018-05-02T18:15:46.000-07:00',\\n                            '2018-05-02T18:15:47.000-07:00',\\n                            '2018-05-02T18:15:48.000-07:00',\\n                            '2018-05-02T18:15:49.000-07:00',\\n                            '2018-05-02T18:15:50.000-07:00',\\n                        ],\\n                        ['2', '10', '13', '60', '43'],\\n                        ['1', '1', '1', '1', '1'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            'data.fieldListMode': 'show_hide',\\n            'data.fieldShowList': ['percent'],\\n        }}\\n        encoding={{\\n            x: 'primary.sourcetype',\\n            y: 'primary.percent',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [\\n                        {\\n                            name: 'sourcetype',\\n                        },\\n                        {\\n                            name: 'count',\\n                            type_special: 'count',\\n                        },\\n                        {\\n                            name: 'percent',\\n                            type_special: 'percent',\\n                        },\\n                    ],\\n                    columns: [\\n                        [\\n                            'splunkd',\\n                            'splunkd_ui_access',\\n                            'splunkd_access',\\n                            'splunk_web_access',\\n                            'scheduler',\\n                            'splunk_web_service',\\n                        ],\\n                        ['600', '525', '295', '213', '122', '19'],\\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            'chart.showDataLabels': 'all',\\n        }}\\n        encoding={{\\n            x: 'primary._time',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\\n                    columns: [\\n                        [\\n                            '2018-05-02T18:15:46.000-07:00',\\n                            '2018-05-02T18:15:47.000-07:00',\\n                            '2018-05-02T18:15:48.000-07:00',\\n                            '2018-05-02T18:15:49.000-07:00',\\n                            '2018-05-02T18:15:50.000-07:00',\\n                        ],\\n                        ['2', '10', '13', '60', '43'],\\n                        ['1', '1', '1', '1', '1'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            'chart.showMarkers': false,\\n        }}\\n        encoding={{\\n            x: 'primary.component',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\\n                    columns: [\\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\\n                        ['166238', '8904', '2327'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            'axisLabelsY.majorTickVisibility': 'show',\\n            'axisLabelsY.minorTickVisibility': 'show',\\n            'axisLabelsX.majorTickVisibility': 'hide',\\n            'axisLabelsY.majorTickSize': 15,\\n            'axisLabelsY.minorTickSize': 10,\\n        }}\\n        encoding={{\\n            x: 'primary._time',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\\n                    columns: [\\n                        [\\n                            '2018-05-02T18:15:46.000-07:00',\\n                            '2018-05-02T18:15:47.000-07:00',\\n                            '2018-05-02T18:15:48.000-07:00',\\n                            '2018-05-02T18:15:49.000-07:00',\\n                            '2018-05-02T18:15:50.000-07:00',\\n                        ],\\n                        ['2', '10', '13', '60', '43'],\\n                        ['1', '1', '1', '1', '1'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            'chart.nullValueMode': 'zero',\\n        }}\\n        encoding={{\\n            x: 'primary._time',\\n            y: ['primary[1]', 'primary[2]'],\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [\\n                        {\\n                            name: '_time',\\n                            groupby_rank: '0',\\n                        },\\n                        {\\n                            name: '10.1.1.000',\\n                            data_source: 'sum(date_hour)',\\n                            splitby_field: 'clientip',\\n                            splitby_value: '10.1.1.000',\\n                        },\\n                        {\\n                            name: '10.1.1.002',\\n                            data_source: 'sum(date_hour)',\\n                            splitby_field: 'clientip',\\n                            splitby_value: '10.1.1.002',\\n                        },\\n                        {\\n                            name: '_span',\\n                        },\\n                    ],\\n                    columns: [\\n                        [\\n                            '2017-08-20T00:00:00.000-07:00',\\n                            '2017-08-20T00:30:00.000-07:00',\\n                            '2017-08-20T01:00:00.000-07:00',\\n                            '2017-08-20T01:30:00.000-07:00',\\n                            '2017-08-20T02:00:00.000-07:00',\\n                            '2017-08-20T02:30:00.000-07:00',\\n                            '2017-08-20T03:00:00.000-07:00',\\n                            '2017-08-20T03:30:00.000-07:00',\\n                            '2017-08-20T04:00:00.000-07:00',\\n                            '2017-08-20T04:30:00.000-07:00',\\n                        ],\\n                        ['', '', '170', '100', '22', '', '', '1040', '221', '42'],\\n                        ['', '', '', '', '460', '154', '', '36', '576', '1625'],\\n                        ['1800', '1800', '1800', '1800', '1800', '1800', '1800', '1800', '1800', '1800'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            'legend.mode': 'seriesCompare',\\n        }}\\n        encoding={{\\n            x: 'primary._time',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\\n                    columns: [\\n                        [\\n                            '2018-05-02T18:15:46.000-07:00',\\n                            '2018-05-02T18:15:47.000-07:00',\\n                            '2018-05-02T18:15:48.000-07:00',\\n                            '2018-05-02T18:15:49.000-07:00',\\n                            '2018-05-02T18:15:50.000-07:00',\\n                        ],\\n                        ['2', '10', '13', '60', '43'],\\n                        ['1', '1', '1', '1', '1'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            'axisY.includeZero': true,\\n        }}\\n        encoding={{\\n            x: 'primary.component',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\\n                    columns: [\\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\\n                        ['200', '400', '600'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            'axisLabelsY.extendsAxisRange': false,\\n        }}\\n        encoding={{\\n            x: 'primary.component',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\\n                    columns: [\\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\\n                        ['200', '400', '600'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            'axisLabelsY.integerUnits': true,\\n        }}\\n        encoding={{\\n            x: 'primary.component',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\\n                    columns: [\\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\\n                        ['2', '2.5', '3.5'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            'legend.labels': ['verylonglegendlabelstringtoshowdifferentellipsoverflowmode'],\\n            'legend.labelStyle.overflowMode': 'ellipsisEnd',\\n        }}\\n        encoding={{\\n            x: 'primary._time',\\n            y: 'primary.count',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\\n                    columns: [\\n                        [\\n                            '2018-05-02T18:15:46.000-07:00',\\n                            '2018-05-02T18:15:47.000-07:00',\\n                            '2018-05-02T18:15:48.000-07:00',\\n                            '2018-05-02T18:15:49.000-07:00',\\n                            '2018-05-02T18:15:50.000-07:00',\\n                        ],\\n                        ['2', '10', '13', '60', '43'],\\n                        ['1', '1', '1', '1', '1'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            'axisY2.enabled': true,\\n            'chart.overlayFields': 'count',\\n            'axisTitleY2.text': 'Axis - Y2 Count',\\n            'axisY2.abbreviation': 'auto',\\n        }}\\n        encoding={{\\n            x: 'primary.sourcetype',\\n            y2: 'primary.count',\\n            y: 'primary.percent',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [\\n                        {\\n                            name: 'sourcetype',\\n                        },\\n                        {\\n                            name: 'count',\\n                            type_special: 'count',\\n                        },\\n                        {\\n                            name: 'percent',\\n                            type_special: 'percent',\\n                        },\\n                    ],\\n                    columns: [\\n                        [\\n                            'splunkd',\\n                            'splunkd_ui_access',\\n                            'splunkd_access',\\n                            'splunk_web_access',\\n                            'scheduler',\\n                            'splunk_web_service',\\n                        ],\\n                        ['1600', '1525', '1295', '713', '322', '19'],\\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{}}\\n        encoding={{\\n            x: 'primary._time',\\n            y: 'primary.count',\\n            annotationX: 'annotation._time',\\n            annotationLabel: 'annotation.annotation_label',\\n            annotationColor: 'annotation.annotation_color',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\\n                    columns: [\\n                        [\\n                            '2018-05-02T18:10:46.000-07:00',\\n                            '2018-05-02T18:11:47.000-07:00',\\n                            '2018-05-02T18:12:48.000-07:00',\\n                            '2018-05-02T18:13:49.000-07:00',\\n                            '2018-05-02T18:15:50.000-07:00',\\n                        ],\\n                        ['2', '10', '13', '60', '43'],\\n                        ['1', '1', '1', '1', '1'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n            annotation: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [\\n                        { name: '_time', groupby_rank: '0' },\\n                        { name: 'annotation_label' },\\n                        { name: 'annotation_color' },\\n                    ],\\n                    columns: [\\n                        [\\n                            '2018-05-02T18:11:50.000-07:00',\\n                            '2018-05-02T18:13:25.000-07:00',\\n                            '2018-05-02T18:14:30.000-07:00',\\n                        ],\\n                        ['houston, we have a problem', 'just close the jira', 'looking good now'],\\n                        ['#f44271', '#f4a941', '#41f49a'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        options={{\\n            'annotation.categoryColors': {\\n                'houston, we have a problem': '#FF00FF',\\n                'just close the jira': '#000000',\\n                'looking good now': '#FF0000',\\n            },\\n        }}\\n        encoding={{\\n            x: 'primary._time',\\n            y: 'primary.count',\\n            annotationX: 'annotation._time',\\n            annotationLabel: 'annotation.annotation_label',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\\n                    columns: [\\n                        [\\n                            '2018-05-02T18:10:46.000-07:00',\\n                            '2018-05-02T18:11:47.000-07:00',\\n                            '2018-05-02T18:12:48.000-07:00',\\n                            '2018-05-02T18:13:49.000-07:00',\\n                            '2018-05-02T18:15:50.000-07:00',\\n                        ],\\n                        ['2', '10', '13', '60', '43'],\\n                        ['1', '1', '1', '1', '1'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n            annotation: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [\\n                        { name: '_time', groupby_rank: '0' },\\n                        { name: 'annotation_label' },\\n                        { name: 'annotation_color' },\\n                    ],\\n                    columns: [\\n                        [\\n                            '2018-05-02T18:11:50.000-07:00',\\n                            '2018-05-02T18:13:25.000-07:00',\\n                            '2018-05-02T18:14:30.000-07:00',\\n                        ],\\n                        ['houston, we have a problem', 'just close the jira', 'looking good now'],\\n                        ['#f44271', '#f4a941', '#41f49a'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        encoding={{\\n            x: 'primary.sourcetype',\\n            y: ['primary.count', 'primary.percent'],\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [\\n                        {\\n                            name: 'sourcetype',\\n                        },\\n                        {\\n                            name: 'count',\\n                            type_special: 'count',\\n                        },\\n                        {\\n                            name: 'percent',\\n                            type_special: 'percent',\\n                        },\\n                    ],\\n                    columns: [\\n                        [\\n                            'splunkd',\\n                            'splunkd_ui_access',\\n                            'splunkd_access',\\n                            'splunk_web_access',\\n                            'scheduler',\\n                            'splunk_web_service',\\n                        ],\\n                        ['600', '525', '295', '213', '122', '19'],\\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        encoding={{\\n            x: 'primary.sourcetype',\\n            y: 'primary[1:]',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [\\n                        {\\n                            name: 'sourcetype',\\n                        },\\n                        {\\n                            name: 'count',\\n                            type_special: 'count',\\n                        },\\n                        {\\n                            name: 'percent',\\n                            type_special: 'percent',\\n                        },\\n                    ],\\n                    columns: [\\n                        [\\n                            'splunkd',\\n                            'splunkd_ui_access',\\n                            'splunkd_access',\\n                            'splunk_web_access',\\n                            'scheduler',\\n                            'splunk_web_service',\\n                        ],\\n                        ['600', '525', '295', '213', '122', '19'],\\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Line from '@splunk/dashboard-visualizations/Line';\\n\\nexport default () => (\\n    <Line\\n        encoding={{\\n            x: 'primary.sourcetype',\\n            y: 'primary.count',\\n            y2: 'primary.percent',\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [\\n                        {\\n                            name: 'sourcetype',\\n                        },\\n                        {\\n                            name: 'count',\\n                            type_special: 'count',\\n                        },\\n                        {\\n                            name: 'percent',\\n                            type_special: 'percent',\\n                        },\\n                    ],\\n                    columns: [\\n                        [\\n                            'splunkd',\\n                            'splunkd_ui_access',\\n                            'splunkd_access',\\n                            'splunk_web_access',\\n                            'scheduler',\\n                            'splunk_web_service',\\n                        ],\\n                        ['600', '525', '295', '213', '122', '19'],\\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\\n                    ],\\n                },\\n                meta: { totalCount: 20 },\\n            },\\n        }}\\n    />\\n);\\n\";","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{}}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'axisTitleY.text': 'Axis Y Count',\n            'axisTitleX.text': 'Axis X Time',\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'axisTitleY.visibility': 'collapsed',\n            'axisTitleX.visibility': 'collapsed',\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            seriesColors: ['#FF0000', '#0000FF'],\n        }}\n        encoding={{\n            x: 'primary.sourcetype',\n            y: ['primary[1]', 'primary[2]'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: 'sourcetype',\n                        },\n                        {\n                            name: 'count',\n                            type_special: 'count',\n                        },\n                        {\n                            name: 'percent',\n                            type_special: 'percent',\n                        },\n                    ],\n                    columns: [\n                        [\n                            'splunkd',\n                            'splunkd_ui_access',\n                            'splunkd_access',\n                            'splunk_web_access',\n                            'scheduler',\n                            'splunk_web_service',\n                        ],\n                        ['600', '525', '295', '213', '122', '19'],\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            fieldColors: { 'total count': '#008000', percent: '#FFA500' },\n        }}\n        encoding={{\n            x: 'primary.sourcetype',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: 'sourcetype',\n                        },\n                        {\n                            name: 'total count',\n                            type_special: 'count',\n                        },\n                        {\n                            name: 'percent',\n                            type_special: 'percent',\n                        },\n                    ],\n                    columns: [\n                        [\n                            'splunkd',\n                            'splunkd_ui_access',\n                            'splunkd_access',\n                            'splunk_web_access',\n                            'scheduler',\n                            'splunk_web_service',\n                        ],\n                        ['600', '525', '295', '213', '122', '19'],\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            backgroundColor: '#008000',\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            foregroundColor: '#FF0000',\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            fontColor: '#0000FF',\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'layout.splitSeries': true,\n        }}\n        encoding={{\n            x: 'primary.sourcetype',\n            y: ['primary[1]', 'primary[2]'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: 'sourcetype',\n                        },\n                        {\n                            name: 'count',\n                            type_special: 'count',\n                        },\n                        {\n                            name: 'percent',\n                            type_special: 'percent',\n                        },\n                    ],\n                    columns: [\n                        [\n                            'splunkd',\n                            'splunkd_ui_access',\n                            'splunkd_access',\n                            'splunk_web_access',\n                            'scheduler',\n                            'splunk_web_service',\n                        ],\n                        ['600', '525', '295', '213', '122', '19'],\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'layout.splitSeries': true,\n            'layout.splitSeries.allowIndependentYRanges': true,\n        }}\n        encoding={{\n            x: 'primary.sourcetype',\n            y: ['primary[1]', 'primary[2]'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: 'sourcetype',\n                        },\n                        {\n                            name: 'count',\n                            type_special: 'count',\n                        },\n                        {\n                            name: 'percent',\n                            type_special: 'percent',\n                        },\n                    ],\n                    columns: [\n                        [\n                            'splunkd',\n                            'splunkd_ui_access',\n                            'splunkd_access',\n                            'splunk_web_access',\n                            'scheduler',\n                            'splunk_web_service',\n                        ],\n                        ['600', '525', '295', '213', '122', '19'],\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            lineDashStyle: 'shortDashDot',\n        }}\n        encoding={{\n            x: 'primary.sourcetype',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: 'sourcetype',\n                        },\n                        {\n                            name: 'count',\n                            type_special: 'count',\n                        },\n                        {\n                            name: 'percent',\n                            type_special: 'percent',\n                        },\n                    ],\n                    columns: [\n                        [\n                            'splunkd',\n                            'splunkd_ui_access',\n                            'splunkd_access',\n                            'splunk_web_access',\n                            'scheduler',\n                            'splunk_web_service',\n                        ],\n                        ['600', '525', '295', '213', '122', '19'],\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            fieldDashStyles: { count: 'dash', percent: 'dashDot' },\n        }}\n        encoding={{\n            x: 'primary.sourcetype',\n            y: ['primary.count', 'primary.percent'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: 'sourcetype',\n                        },\n                        {\n                            name: 'count',\n                            type_special: 'count',\n                        },\n                        {\n                            name: 'percent',\n                            type_special: 'percent',\n                        },\n                    ],\n                    columns: [\n                        [\n                            'splunkd',\n                            'splunkd_ui_access',\n                            'splunkd_access',\n                            'splunk_web_access',\n                            'scheduler',\n                            'splunk_web_service',\n                        ],\n                        ['600', '525', '295', '213', '122', '19'],\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            lineWidth: 5,\n        }}\n        encoding={{\n            x: 'primary.sourcetype',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: 'sourcetype',\n                        },\n                        {\n                            name: 'count',\n                            type_special: 'count',\n                        },\n                        {\n                            name: 'percent',\n                            type_special: 'percent',\n                        },\n                    ],\n                    columns: [\n                        [\n                            'splunkd',\n                            'splunkd_ui_access',\n                            'splunkd_access',\n                            'splunk_web_access',\n                            'scheduler',\n                            'splunk_web_service',\n                        ],\n                        ['600', '525', '295', '213', '122', '19'],\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{ 'axisY.abbreviation': 'auto' }}\n        encoding={{\n            x: 'primary.component',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\n                    columns: [\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\n                        ['166238', '8904', '2327'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'axisY.scale': 'log',\n        }}\n        encoding={{\n            x: 'primary.component',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\n                    columns: [\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\n                        ['166238', '8904', '2327'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'axisY.includeZero': true,\n        }}\n        encoding={{\n            x: 'primary.component',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\n                    columns: [\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\n                        ['200', '400', '600'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'axisLabelsY.extendsAxisRange': false,\n        }}\n        encoding={{\n            x: 'primary.component',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\n                    columns: [\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\n                        ['200', '400', '600'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'axisLabelsY.integerUnits': true,\n        }}\n        encoding={{\n            x: 'primary.component',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\n                    columns: [\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\n                        ['2', '2.5', '3.5'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'axisLabelsX.axisVisibility': 'show',\n            'gridLinesY.showMajorLines': false,\n        }}\n        encoding={{\n            x: 'primary.component',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\n                    columns: [\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\n                        ['166238', '8904', '2327'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'axisLabelsY.axisVisibility': 'show',\n        }}\n        encoding={{\n            x: 'primary.component',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\n                    columns: [\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\n                        ['166238', '8904', '2327'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'axisLabelsX.majorLabelVisibility': 'hide',\n        }}\n        encoding={{\n            x: 'primary.component',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\n                    columns: [\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\n                        ['166238', '8904', '2327'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'axisLabelsY.majorLabelVisibility': 'hide',\n        }}\n        encoding={{\n            x: 'primary.component',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\n                    columns: [\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\n                        ['166238', '8904', '2327'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'gridLinesX.showMajorLines': true,\n            'gridLinesY.showMajorLines': false,\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'gridLinesY.showMinorLines': true,\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'legend.labels': ['foo', 'bar'],\n            'legend.placement': 'top',\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'data.fieldListMode': 'show_hide',\n            'data.fieldShowList': ['percent'],\n        }}\n        encoding={{\n            x: 'primary.sourcetype',\n            y: 'primary.percent',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: 'sourcetype',\n                        },\n                        {\n                            name: 'count',\n                            type_special: 'count',\n                        },\n                        {\n                            name: 'percent',\n                            type_special: 'percent',\n                        },\n                    ],\n                    columns: [\n                        [\n                            'splunkd',\n                            'splunkd_ui_access',\n                            'splunkd_access',\n                            'splunk_web_access',\n                            'scheduler',\n                            'splunk_web_service',\n                        ],\n                        ['600', '525', '295', '213', '122', '19'],\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'chart.showDataLabels': 'all',\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'chart.showMarkers': false,\n        }}\n        encoding={{\n            x: 'primary.component',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\n                    columns: [\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\n                        ['166238', '8904', '2327'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'axisLabelsY.majorTickVisibility': 'show',\n            'axisLabelsY.minorTickVisibility': 'show',\n            'axisLabelsX.majorTickVisibility': 'hide',\n            'axisLabelsY.majorTickSize': 15,\n            'axisLabelsY.minorTickSize': 10,\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'chart.nullValueMode': 'zero',\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: ['primary[1]', 'primary[2]'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: '_time',\n                            groupby_rank: '0',\n                        },\n                        {\n                            name: '10.1.1.000',\n                            data_source: 'sum(date_hour)',\n                            splitby_field: 'clientip',\n                            splitby_value: '10.1.1.000',\n                        },\n                        {\n                            name: '10.1.1.002',\n                            data_source: 'sum(date_hour)',\n                            splitby_field: 'clientip',\n                            splitby_value: '10.1.1.002',\n                        },\n                        {\n                            name: '_span',\n                        },\n                    ],\n                    columns: [\n                        [\n                            '2017-08-20T00:00:00.000-07:00',\n                            '2017-08-20T00:30:00.000-07:00',\n                            '2017-08-20T01:00:00.000-07:00',\n                            '2017-08-20T01:30:00.000-07:00',\n                            '2017-08-20T02:00:00.000-07:00',\n                            '2017-08-20T02:30:00.000-07:00',\n                            '2017-08-20T03:00:00.000-07:00',\n                            '2017-08-20T03:30:00.000-07:00',\n                            '2017-08-20T04:00:00.000-07:00',\n                            '2017-08-20T04:30:00.000-07:00',\n                        ],\n                        ['', '', '170', '100', '22', '', '', '1040', '221', '42'],\n                        ['', '', '', '', '460', '154', '', '36', '576', '1625'],\n                        ['1800', '1800', '1800', '1800', '1800', '1800', '1800', '1800', '1800', '1800'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'legend.mode': 'seriesCompare',\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'legend.labels': ['verylonglegendlabelstringtoshowdifferentellipsoverflowmode'],\n            'legend.labelStyle.overflowMode': 'ellipsisEnd',\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'axisY2.enabled': true,\n            'chart.overlayFields': 'count',\n            'axisTitleY2.text': 'Axis - Y2 Count',\n            'axisY2.abbreviation': 'auto',\n        }}\n        encoding={{\n            x: 'primary.sourcetype',\n            y2: 'primary.count',\n            y: 'primary.percent',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: 'sourcetype',\n                        },\n                        {\n                            name: 'count',\n                            type_special: 'count',\n                        },\n                        {\n                            name: 'percent',\n                            type_special: 'percent',\n                        },\n                    ],\n                    columns: [\n                        [\n                            'splunkd',\n                            'splunkd_ui_access',\n                            'splunkd_access',\n                            'splunk_web_access',\n                            'scheduler',\n                            'splunk_web_service',\n                        ],\n                        ['1600', '1525', '1295', '713', '322', '19'],\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{}}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n            annotationX: 'annotation._time',\n            annotationLabel: 'annotation.annotation_label',\n            annotationColor: 'annotation.annotation_color',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:10:46.000-07:00',\n                            '2018-05-02T18:11:47.000-07:00',\n                            '2018-05-02T18:12:48.000-07:00',\n                            '2018-05-02T18:13:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n            annotation: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        { name: '_time', groupby_rank: '0' },\n                        { name: 'annotation_label' },\n                        { name: 'annotation_color' },\n                    ],\n                    columns: [\n                        [\n                            '2018-05-02T18:11:50.000-07:00',\n                            '2018-05-02T18:13:25.000-07:00',\n                            '2018-05-02T18:14:30.000-07:00',\n                        ],\n                        ['houston, we have a problem', 'just close the jira', 'looking good now'],\n                        ['#f44271', '#f4a941', '#41f49a'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'annotation.categoryColors': {\n                'houston, we have a problem': '#FF00FF',\n                'just close the jira': '#000000',\n                'looking good now': '#FF0000',\n            },\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n            annotationX: 'annotation._time',\n            annotationLabel: 'annotation.annotation_label',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:10:46.000-07:00',\n                            '2018-05-02T18:11:47.000-07:00',\n                            '2018-05-02T18:12:48.000-07:00',\n                            '2018-05-02T18:13:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n            annotation: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        { name: '_time', groupby_rank: '0' },\n                        { name: 'annotation_label' },\n                        { name: 'annotation_color' },\n                    ],\n                    columns: [\n                        [\n                            '2018-05-02T18:11:50.000-07:00',\n                            '2018-05-02T18:13:25.000-07:00',\n                            '2018-05-02T18:14:30.000-07:00',\n                        ],\n                        ['houston, we have a problem', 'just close the jira', 'looking good now'],\n                        ['#f44271', '#f4a941', '#41f49a'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        encoding={{\n            x: 'primary.sourcetype',\n            y: ['primary.count', 'primary.percent'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: 'sourcetype',\n                        },\n                        {\n                            name: 'count',\n                            type_special: 'count',\n                        },\n                        {\n                            name: 'percent',\n                            type_special: 'percent',\n                        },\n                    ],\n                    columns: [\n                        [\n                            'splunkd',\n                            'splunkd_ui_access',\n                            'splunkd_access',\n                            'splunk_web_access',\n                            'scheduler',\n                            'splunk_web_service',\n                        ],\n                        ['600', '525', '295', '213', '122', '19'],\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        encoding={{\n            x: 'primary.sourcetype',\n            y: 'primary[1:]',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: 'sourcetype',\n                        },\n                        {\n                            name: 'count',\n                            type_special: 'count',\n                        },\n                        {\n                            name: 'percent',\n                            type_special: 'percent',\n                        },\n                    ],\n                    columns: [\n                        [\n                            'splunkd',\n                            'splunkd_ui_access',\n                            'splunkd_access',\n                            'splunk_web_access',\n                            'scheduler',\n                            'splunk_web_service',\n                        ],\n                        ['600', '525', '295', '213', '122', '19'],\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        encoding={{\n            x: 'primary.sourcetype',\n            y: 'primary.count',\n            y2: 'primary.percent',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: 'sourcetype',\n                        },\n                        {\n                            name: 'count',\n                            type_special: 'count',\n                        },\n                        {\n                            name: 'percent',\n                            type_special: 'percent',\n                        },\n                    ],\n                    columns: [\n                        [\n                            'splunkd',\n                            'splunkd_ui_access',\n                            'splunkd_access',\n                            'splunk_web_access',\n                            'scheduler',\n                            'splunk_web_service',\n                        ],\n                        ['600', '525', '295', '213', '122', '19'],\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n","export default {\n    encoding: [\n        {\n            name: 'x',\n            type: '[time | number | string]',\n            desc: 'Specify the dataSource applied to the x-axis.',\n            defaultValue: 'primary[0]',\n            isRequired: 'true',\n        },\n        {\n            name: 'y',\n            type: '[number | string]',\n            desc: 'Specify the dataSource applied to the y-axis.',\n            defaultValue: 'primary[1:]',\n            isRequired: 'true',\n        },\n        {\n            name: 'y2',\n            type: '[number | string]',\n            desc: `Specify the dataSource applied to the y2-axis.`,\n            isRequired: 'false',\n        },\n        {\n            name: 'annotationX',\n            type: '[time | number | string]',\n            desc: 'Specify the dataSource applied to the event annotation on the x-axis.',\n            isRequired: 'false',\n        },\n        {\n            name: 'annotationLabel',\n            type: '[string]',\n            desc: 'Specify the message displayed on the annotation label.',\n            isRequired: 'false',\n        },\n        {\n            name: 'annotationColor',\n            type: '[string]',\n            desc: `Assign a color to an annotation event. For example, \"0xffff00\".`,\n            isRequired: 'false',\n        },\n    ],\n    events: [\n        {\n            name: 'point.click',\n            desc: 'trigger when user clicks a data point',\n        },\n        {\n            name: 'legend.click',\n            desc: 'trigger when user clicks a chart legend',\n        },\n        {\n            name: 'range.select',\n            desc: 'trigger when user makes a selection',\n        },\n    ],\n};\n","import { COLOR_OR_TOKEN_PATTERN, getPattern } from '@splunk/visualizations-shared/schemaUtils';\n\nexport default {\n    'annotation.categoryColors': {\n        description: `Specify mapping of Hex code for colors to annotation categories. For example: {'Server Stop':'#FF0000','Server Start':'00FF00'}. Note: Option type 'string' has been deprecated.`,\n        type: ['object', 'string'],\n    },\n    'axisLabelsX.maxLabelParts': {\n        default: 3,\n        minimum: 1,\n        description:\n            'Specify the maximum number of time-parts that a tick label will have (the 3 possible parts are year, month, time).',\n        type: 'number',\n    },\n    'axisLabelsX.axisVisibility': {\n        default: 'hide',\n        description: 'Specify whether to show the x-axis.',\n        pattern: getPattern(['show', 'hide']),\n        type: 'string',\n    },\n    'axisLabelsY.axisVisibility': {\n        default: 'hide',\n        description: 'Specify whether the y-axis line is visible.',\n        pattern: getPattern(['show', 'hide']),\n        type: 'string',\n    },\n    'axisLabelsY2.axisVisibility': {\n        default: 'hide',\n        description: 'Specify whether the y2-axis line is visible.',\n        pattern: getPattern(['show', 'hide']),\n        type: 'string',\n    },\n    'axisLabelsY.extendsAxisRange': {\n        default: true,\n        description: 'Specify whether the y-axis should be extended to include whole major tick marks.',\n        type: 'boolean',\n    },\n    'axisLabelsX.majorLabelStyle.rotation': {\n        default: '0',\n        description: 'Specify the rotation of the x-axis label in degrees.',\n        enum: [-90, -45, 0, 45, 90],\n        type: 'number',\n    },\n    'axisLabelsY2.integerUnits': {\n        default: false,\n        description: 'Specify whether the major unit of the y2-axis is rounded to the nearest integer.',\n        type: 'boolean',\n    },\n    'axisLabelsX.majorLabelVisibility': {\n        default: 'auto',\n        description: 'Specify whether labels for major tick marks are visible on the x-axis.',\n        pattern: getPattern(['auto', 'show', 'hide']),\n        type: 'string',\n    },\n    'axisLabelsY.majorLabelVisibility': {\n        default: 'auto',\n        description: 'Specify whether labels for major tick marks are visible on the y-axis.',\n        pattern: getPattern(['auto', 'show', 'hide']),\n        type: 'string',\n    },\n    'axisLabelsY2.majorLabelVisibility': {\n        default: 'auto',\n        description: 'Specify whether labels for major tick marks are visible on the y2-axis.',\n        pattern: getPattern(['auto', 'show', 'hide']),\n        type: 'string',\n    },\n    'axisLabelsX.majorTickSize': {\n        default: 6,\n        description: 'Specify the size, in pixels, of major tick marks on the x-axis.',\n        type: 'number',\n    },\n    'axisLabelsY.majorTickSize': {\n        default: 6,\n        description: 'Specify the size, in pixels, of major tick marks on the y-axis.',\n        type: 'number',\n    },\n    'axisLabelsY2.majorTickSize': {\n        default: 6,\n        description: 'Specify the size, in pixels, of major tick marks on the y2-axis.',\n        type: 'number',\n    },\n    'axisLabelsY.minorTickSize': {\n        default: 6,\n        description: 'Specify the size, in pixels, of minor tick marks on the y-axis.',\n        type: 'number',\n    },\n    'axisLabelsY2.minorTickSize': {\n        default: 6,\n        description: 'Specify the size, in pixels, of minor tick marks on the y2-axis.',\n        type: 'number',\n    },\n    'axisLabelsX.majorTickVisibility': {\n        default: 'hide',\n        description: 'Specify whether major tick marks on the x-axis are visible.',\n        pattern: getPattern(['auto', 'show', 'hide']),\n        type: 'string',\n    },\n    'axisLabelsY.majorTickVisibility': {\n        default: 'hide',\n        description: 'Specify whether major tick marks on the y-axis are visible.',\n        pattern: getPattern(['auto', 'show', 'hide']),\n        type: 'string',\n    },\n    'axisLabelsY2.majorTickVisibility': {\n        default: 'hide',\n        description: 'Specify whether major tick marks on the y2-axis are visible.',\n        pattern: getPattern(['auto', 'show', 'hide']),\n        type: 'string',\n    },\n    'axisLabelsY.majorUnit': {\n        default: 'auto',\n        description: 'Specify the spacing unit between major tick marks along the numeric y-axis.',\n        type: ['number', 'string'],\n    },\n    'axisLabelsY2.majorUnit': {\n        default: 'auto',\n        description: 'Specify the spacing unit between major tick marks along the numeric y2-axis.',\n        type: ['number', 'string'],\n    },\n    'axisLabelsY.minorTickVisibility': {\n        default: 'auto',\n        description: 'Specify whether minor tick marks on the y-axis are visible.',\n        pattern: getPattern(['auto', 'show', 'hide']),\n        type: 'string',\n    },\n    'axisLabelsY2.minorTickVisibility': {\n        default: 'auto',\n        description: 'Specify whether minor tick marks on the y2-axis are visible.',\n        pattern: getPattern(['auto', 'show', 'hide']),\n        type: 'string',\n    },\n    'axisY.abbreviation': {\n        default: 'none',\n        description: 'Specify whether to abbreviate large y-axis values with the closest SI prefix.',\n        pattern: getPattern(['none', 'auto']),\n        type: 'string',\n    },\n    'axisY2.abbreviation': {\n        default: 'none',\n        description: 'Specify whether to abbreviate large y2-axis values with the closest SI prefix.',\n        pattern: getPattern(['none', 'auto']),\n        type: 'string',\n    },\n    'axisY.includeZero': {\n        default: false,\n        description: 'Specify whether the y-axis range includes zero.',\n        type: 'boolean',\n    },\n    'axisY2.includeZero': {\n        default: false,\n        description: 'Specify whether the y2-axis range includes zero.',\n        type: 'boolean',\n    },\n    'axisY.maximumNumber': {\n        default: 'auto',\n        description: 'Specify the maximum number for the visible y-axis range.',\n        type: ['number', 'string'],\n    },\n    'axisY2.maximumNumber': {\n        default: 'auto',\n        description: 'Specify the maximum number for the visible y2-axis range.',\n        type: ['number', 'string'],\n    },\n    'axisY.minimumNumber': {\n        default: 'auto',\n        description: 'Specify the minimum number for the visible y-axis range.',\n        type: ['number', 'string'],\n    },\n    'axisY2.minimumNumber': {\n        default: 'auto',\n        description: 'Specify the minimum number for the visible y2-axis range.',\n        type: ['number', 'string'],\n    },\n    'axisY.scale': {\n        default: 'linear',\n        description: 'Specify the type of scale that applies to a numerical y-axis.',\n        pattern: getPattern(['linear', 'log']),\n        type: 'string',\n    },\n    'axisY2.scale': {\n        default: 'linear',\n        description: 'Specify the type of scale that applies to a numerical y2-axis.',\n        pattern: getPattern(['linear', 'log']),\n        type: 'string',\n    },\n    'axisTitleX.text': { description: 'Specify the title of the x-axis.', type: 'string' },\n    'axisTitleY.text': { description: 'Specify the title of the y-axis.', type: 'string' },\n    'axisTitleY2.text': { description: 'Specify the title of the y2-axis.', type: 'string' },\n    'axisTitleX.visibility': {\n        default: 'visible',\n        description: 'Specify whether to show the title of the x-axis.',\n        pattern: getPattern(['visible', 'collapsed']),\n        type: 'string',\n    },\n    'axisTitleY.visibility': {\n        default: 'visible',\n        description: 'Specify whether to show the title of the y-axis.',\n        pattern: getPattern(['visible', 'collapsed']),\n        type: 'string',\n    },\n    'axisTitleY2.visibility': {\n        default: 'visible',\n        description: 'Specify whether to show the title of the y2-axis.',\n        pattern: getPattern(['visible', 'collapsed']),\n        type: 'string',\n    },\n    'chart.resultTruncationLimit': {\n        default: 50000,\n        description: 'Specify the number of data points rendered in a chart.',\n        type: 'number',\n    },\n    backgroundColor: {\n        description: 'Specify the Hex code for color used for a background. For example: \"#0000FF\".',\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    fontColor: {\n        description:\n            'Specify the Hex code for color used for fonts (axis labels, legends).For example: \"#0000FF\".',\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    foregroundColor: {\n        description: 'Specify the Hex code for color used for a foreground. For example: \"#0000FF\".',\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    seriesColors: {\n        description: `Specify the Hex code for colors used for a series. For example, ['#FF0000', '#0000FF', '#008000'].\n            The default for light and dark mode is ['#1E93C6', '#F2B827', '#D6563C', '#6A5C9E', '#31A35F'].\n            The default for SCP mode is ['#A9F5E7', '#A870EF',  '#1E6271', '#45D4BA', '#602CA1',  '#9AE6F7', '#6CD0F0', '#2F8AA7',  '#422879', '#F29BAC', '#E85B79', '#C6335F',  '#FDAF93', '#FB865C', '#E9643A',  '#7EEFDA', '#26AA92', '#207865', '#C093F9', '#8747DA',  '#4EB2D2', '#912344',  '#AD3F20', '#D44C20', '#FFC34E',  '#95651D',  '#C0891E', '#ECAE11', '#FCD9A4', '#78062A'].\n            Note: Option type 'string' has been deprecated.`,\n        type: ['array', 'string'],\n        items: { type: 'string' },\n    },\n    fieldColors: {\n        description: `Specify the Hex code for color used for a field. For example: {'count': '#008000', 'percent': '#FFA500'}. Note: Option type 'string' has been deprecated.`,\n        type: ['object', 'string'],\n    },\n    'chart.showDataLabels': {\n        default: 'none',\n        description:\n            'Specify whether bar, line, area, or column charts should display no labels, all labels, or only the min and max labels.',\n        pattern: getPattern(['none', 'all', 'minmax']),\n        type: 'string',\n    },\n    'data.fieldListMode': {\n        default: 'hide_show',\n        description: 'Specify the order in which to apply the fieldShowList and fieldHideList filters.',\n        pattern: getPattern(['show_hide', 'hide_show']),\n        type: 'string',\n    },\n    'data.fieldShowList': {\n        description: `Specify a list of fields to show in the results. For example: ['percent', 'count']. Note: Option type 'string' has been deprecated.`,\n        type: ['array', 'string'],\n        items: { type: 'string' },\n    },\n    'data.fieldHideList': {\n        description: `Specify a list of fields to hide in the results. For example: ['percent', 'count']. Note: Option type 'string' has been deprecated.`,\n        type: ['array', 'string'],\n        items: { type: 'string' },\n    },\n    'gridLinesX.showMajorLines': {\n        default: true,\n        description: 'Specify whether major grid lines are visible on the x-axis.',\n        type: 'boolean',\n    },\n    'gridLinesY.showMajorLines': {\n        default: true,\n        description: 'Specify whether major grid lines are visible on the y-axis.',\n        type: 'boolean',\n    },\n    'gridLinesY2.showMajorLines': {\n        default: true,\n        description: 'Specify whether major grid lines are visible on the y2-axis.',\n        type: 'boolean',\n    },\n    'gridLinesY.showMinorLines': {\n        default: false,\n        description: 'Specify whether minor grid lines are visible on the y-axis.',\n        type: 'boolean',\n    },\n    'gridLinesY2.showMinorLines': {\n        default: false,\n        description: 'Specify whether minor grid lines are visible on y2-axis.',\n        type: 'boolean',\n    },\n    'layout.splitSeries': {\n        default: false,\n        description:\n            'Set to \"true\" to split a multi-series chart into separate charts that are stacked from top to bottom; one for each series.',\n        type: 'boolean',\n    },\n    'layout.splitSeries.allowIndependentYRanges': {\n        default: false,\n        description: 'Specify whether split series charts have independent y-ranges.',\n        type: 'boolean',\n    },\n    'legend.labels': {\n        description: `Specify a list of labels to pre-populate the legend. For example: ['percent', 'count']. Note: Option type 'string' has been deprecated.`,\n        type: ['array', 'string'],\n        items: { type: 'string' },\n    },\n    'legend.labelStyle.overflowMode': {\n        default: 'ellipsisMiddle',\n        description:\n            'Specify how to display legend labels when they overflow the layout boundaries by replacing overflow text with an ellipsis.',\n        pattern: getPattern(['ellipsisEnd', 'ellipsisMiddle', 'ellipsisStart', 'ellipsisNone']),\n        type: 'string',\n    },\n    'legend.mode': {\n        default: 'standard',\n        description:\n            'Specify visual and behavioral settings for the tooltip and legend. \"seriesCompare\" is useful when comparing series.',\n        pattern: getPattern(['standard', 'seriesCompare']),\n        type: 'string',\n    },\n    'legend.placement': {\n        default: 'right',\n        description: 'Specify the location of the legend on the panel.',\n        pattern: getPattern(['right', 'left', 'top', 'bottom', 'none']),\n        type: 'string',\n    },\n    'axisY2.enabled': {\n        default: false,\n        description: 'Enable a y2-axis for chart overlays.',\n        type: 'boolean',\n    },\n    'axisY2.fields': {\n        description: 'Specify a field that should be mapped to a second y-axis for chart overlays.',\n        type: 'string',\n    },\n    'chart.overlayFields': {\n        description:\n            'Specify a field or a space/comma-delimited list of fields that should be mapped to the y2-axis.',\n        type: 'string',\n    },\n    'chart.nullValueMode': {\n        default: 'gaps',\n        description: 'Specify how area and line charts handle null values.',\n        pattern: getPattern(['gaps', 'zero', 'connect']),\n        type: 'string',\n    },\n    'chart.showMarkers': {\n        default: true,\n        description: 'Specify whether to draw markers in line charts.',\n        type: 'boolean',\n    },\n    fieldDashStyles: {\n        description: `Specify a dash style to use for each field. For example: {'count': 'longDashDot', 'percent': 'longDashDotDot'}.'\n                      Valid values: 'solid', 'shortDash', 'shortDot', 'shortDashDot', 'shortDashDotDot', 'dot', 'dash',\n                      'longDash', 'dashDot', 'longDashDot', 'longDashDotDot'. Note: Option type 'string' has been deprecated.`,\n        type: ['object', 'string'],\n    },\n    lineDashStyle: {\n        default: 'solid',\n        description: 'Specify a dash style for all line series in the chart.',\n        pattern: getPattern([\n            'solid',\n            'shortDash',\n            'shortDot',\n            'shortDashDot',\n            'shortDashDotDot',\n            'dot',\n            'dash',\n            'longDash',\n            'dashDot',\n            'longDashDot',\n            'longDashDotDot',\n        ]),\n        type: 'string',\n    },\n    lineWidth: {\n        default: 2,\n        description: 'Specify the line width, in pixels, for all line series.',\n        type: 'number',\n    },\n};\n","import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\nimport VisualizationDocPage from '@splunk/visualizations-shared/VisualizationDocPage';\nimport EncodingDoc from '@splunk/dashboard-visualizations/common/EncodingDoc';\nimport EventsDoc from '@splunk/dashboard-visualizations/common/EventsDoc';\nimport OptionsDoc from '@splunk/dashboard-visualizations/common/OptionsDoc';\nimport DocExample from '@splunk/react-docs/DocExample';\n\nimport BasicExampleCode from '!!raw-loader!./examples/Basic';\nimport TitleSpecifiedCode from '!!raw-loader!./examples/TitleSpecified';\nimport TitleNotVisibleCode from '!!raw-loader!./examples/TitleNotVisible';\nimport SeriesColorsCode from '!!raw-loader!./examples/SeriesColors';\nimport FieldColorsCode from '!!raw-loader!./examples/FieldColors';\nimport BackgroundColorCode from '!!raw-loader!./examples/BackgroundColor';\nimport ForegroundColorCode from '!!raw-loader!./examples/ForegroundColor';\nimport FontColorCode from '!!raw-loader!./examples/FontColor';\nimport SplitSeriesCode from '!!raw-loader!./examples/SplitSeries';\nimport SplitSeriesIndependentCode from '!!raw-loader!./examples/SplitSeriesIndependent';\nimport FieldDashStyleCode from '!!raw-loader!./examples/FieldDashStyle';\nimport LineDashStyleCode from '!!raw-loader!./examples/LineDashStyle';\nimport LineWidthCode from '!!raw-loader!./examples/LineWidth';\nimport AxisYAbbreviationCode from '!!raw-loader!./examples/AxisYAbbreviation';\nimport AxisYScaleCode from '!!raw-loader!./examples/AxisYScale';\nimport AxisXLabelVisiblilityCode from '!!raw-loader!./examples/AxisXLabelVisiblility';\nimport AxisYLabelVisiblilityCode from '!!raw-loader!./examples/AxisYLabelVisiblility';\nimport AxisXMajorLabelVisiblilityCode from '!!raw-loader!./examples/AxisXMajorLabelVisiblility';\nimport AxisYMajorLabelVisiblilityCode from '!!raw-loader!./examples/AxisYMajorLabelVisiblility';\nimport MajorGridCode from '!!raw-loader!./examples/MajorGrid';\nimport MinorGridCode from '!!raw-loader!./examples/MinorGrid';\nimport LegendCode from '!!raw-loader!./examples/Legend';\nimport FieldShowListCode from '!!raw-loader!./examples/FieldShowList';\nimport DataLabelsCode from '!!raw-loader!./examples/DataLabels';\nimport LineMarkersCode from '!!raw-loader!./examples/LineMarkers';\nimport TicksCode from '!!raw-loader!./examples/Ticks';\nimport NullValueModeCode from '!!raw-loader!./examples/NullValueMode';\nimport LegendModeCode from '!!raw-loader!./examples/LegendMode';\nimport IncludeZeroCode from '!!raw-loader!./examples/IncludeZero';\nimport ExtendRangeCode from '!!raw-loader!./examples/ExtendRange';\nimport IntegerUnitsCode from '!!raw-loader!./examples/IntegerUnits';\nimport LegendStyleModeCode from '!!raw-loader!./examples/LegendStyleMode';\nimport ChartOverlayCode from '!!raw-loader!./examples/ChartOverlay';\nimport AnnotationExampleCode from '!!raw-loader!./examples/Annotation';\nimport AnnotationColorExampleCode from '!!raw-loader!./examples/AnnotationColor';\nimport MultiSeriesExplicitCode from '!!raw-loader!./examples/MultiSeriesExplicit';\nimport MultiSeriesDynamicCode from '!!raw-loader!./examples/MultiSeriesDynamic';\nimport MultiYAxesCode from '!!raw-loader!./examples/MultiYAxes';\n\nimport BasicExample from './examples/Basic';\nimport TitleSpecifiedExample from './examples/TitleSpecified';\nimport TitleNotVisibleExample from './examples/TitleNotVisible';\nimport SeriesColorsExample from './examples/SeriesColors';\nimport FieldColorsExample from './examples/FieldColors';\nimport BackgroundColorExample from './examples/BackgroundColor';\nimport ForegroundColorExample from './examples/ForegroundColor';\nimport FontColorExample from './examples/FontColor';\nimport SplitSeriesExample from './examples/SplitSeries';\nimport SplitSeriesIndependentExample from './examples/SplitSeriesIndependent';\nimport LineDashStyleExample from './examples/LineDashStyle';\nimport FieldDashStyleExample from './examples/FieldDashStyle';\nimport LineWidthExample from './examples/LineWidth';\nimport AxisYAbbreviationExample from './examples/AxisYAbbreviation';\nimport AxisYScaleExample from './examples/AxisYScale';\nimport IncludeZeroExample from './examples/IncludeZero';\nimport ExtendRangeExample from './examples/ExtendRange';\nimport IntegerUnitsExample from './examples/IntegerUnits';\nimport AxisXLabelVisiblilityExample from './examples/AxisXLabelVisiblility';\nimport AxisYLabelVisiblilityExample from './examples/AxisYLabelVisiblility';\nimport AxisXMajorLabelVisiblilityExample from './examples/AxisXMajorLabelVisiblility';\nimport AxisYMajorLabelVisiblilityExample from './examples/AxisYMajorLabelVisiblility';\nimport MajorGridExample from './examples/MajorGrid';\nimport MinorGridExample from './examples/MinorGrid';\nimport LegendExample from './examples/Legend';\nimport FieldShowListExample from './examples/FieldShowList';\nimport DataLabelsExample from './examples/DataLabels';\nimport LineMarkersExample from './examples/LineMarkers';\nimport TicksExample from './examples/Ticks';\nimport NullValueModeExample from './examples/NullValueMode';\nimport LegendModeExample from './examples/LegendMode';\nimport LegendStyleModeExample from './examples/LegendStyleMode';\nimport ChartOverlayExample from './examples/ChartOverlay';\nimport AnnotationExample from './examples/Annotation';\nimport AnnotationColorExample from './examples/AnnotationColor';\nimport MultiSeriesExplicitExample from './examples/MultiSeriesExplicit';\nimport MultiSeriesDynamicExample from './examples/MultiSeriesDynamic';\nimport MultiYAxesExample from './examples/MultiYAxes';\nimport doc from './definition';\nimport optionsSchema from '../optionsSchema';\n\nexport default () => (\n    <VisualizationDocPage\n        title=\"Line\"\n        examplesSection={[\n            <DocExample title=\"Basic Line\" key=\"basic\" code={BasicExampleCode} example={BasicExample} />,\n            <DocExample\n                title=\"Annotation\"\n                key=\"annotation\"\n                code={AnnotationExampleCode}\n                example={AnnotationExample}\n            />,\n            <DocExample\n                title=\"Annotation Category Color\"\n                key=\"annotationcolor\"\n                code={AnnotationColorExampleCode}\n                example={AnnotationColorExample}\n            />,\n            <DocExample\n                title=\"Axis Y and X Title specified\"\n                key=\"titlespecified\"\n                code={TitleSpecifiedCode}\n                example={TitleSpecifiedExample}\n            />,\n            <DocExample\n                title=\"Axis Y and X Title not visible\"\n                key=\"titlenotvisible\"\n                code={TitleNotVisibleCode}\n                example={TitleNotVisibleExample}\n            />,\n            <DocExample\n                title=\"Series Color: Red and Blue\"\n                key=\"seriescolors\"\n                code={SeriesColorsCode}\n                example={SeriesColorsExample}\n            />,\n            <DocExample\n                title=\"Field colors: Total Count - Green, Percent - Orange\"\n                key=\"fieldcolors\"\n                code={FieldColorsCode}\n                example={FieldColorsExample}\n            />,\n            <DocExample\n                title=\"Background Color - Green\"\n                key=\"backgroundcolor\"\n                code={BackgroundColorCode}\n                example={BackgroundColorExample}\n            />,\n            <DocExample\n                title=\"Foreground Color - Red\"\n                key=\"foregroundcolor\"\n                code={ForegroundColorCode}\n                example={ForegroundColorExample}\n            />,\n            <DocExample\n                title=\"Font Color - Blue\"\n                key=\"fontcolor\"\n                code={FontColorCode}\n                example={FontColorExample}\n            />,\n            <DocExample\n                title=\"Split Series - True\"\n                key=\"splitseries\"\n                code={SplitSeriesCode}\n                example={SplitSeriesExample}\n            />,\n            <DocExample\n                title=\"Split Series and Split Series Independent - True\"\n                key=\"splitseriesindependent\"\n                code={SplitSeriesIndependentCode}\n                example={SplitSeriesIndependentExample}\n            />,\n            <DocExample\n                title=\"Line Dash Style - shortDashDot\"\n                key=\"linedashstyle\"\n                code={LineDashStyleCode}\n                example={LineDashStyleExample}\n            />,\n            <DocExample\n                title=\"Field Dash Style. Count - dash, Percent - dashDot\"\n                key=\"fielddashstyle\"\n                code={FieldDashStyleCode}\n                example={FieldDashStyleExample}\n            />,\n            <DocExample\n                title=\"Line Width - 5\"\n                key=\"linewidth\"\n                code={LineWidthCode}\n                example={LineWidthExample}\n            />,\n            <DocExample\n                title=\"Axis-Y Abbreviation - On\"\n                key=\"axisyabbreviation\"\n                code={AxisYAbbreviationCode}\n                example={AxisYAbbreviationExample}\n            />,\n            <DocExample\n                title=\"Axis-Y Scale - Log\"\n                key=\"axisyscale\"\n                code={AxisYScaleCode}\n                example={AxisYScaleExample}\n            />,\n            <DocExample\n                title=\"Axis-Y Include Zero - True\"\n                key=\"includezero\"\n                code={IncludeZeroCode}\n                example={IncludeZeroExample}\n            />,\n            <DocExample\n                title=\"Axis-Y Extend Axis Range - False\"\n                key=\"extendrange\"\n                code={ExtendRangeCode}\n                example={ExtendRangeExample}\n            />,\n            <DocExample\n                title=\"Axis-Y Integer Units - True\"\n                key=\"integerunits\"\n                code={IntegerUnitsCode}\n                example={IntegerUnitsExample}\n            />,\n            <DocExample\n                title=\"Axis-X - Show\"\n                key=\"axisxlabelvisiblility\"\n                code={AxisXLabelVisiblilityCode}\n                example={AxisXLabelVisiblilityExample}\n            />,\n            <DocExample\n                title=\"Axis-Y - Show\"\n                key=\"axisylabelvisiblility\"\n                code={AxisYLabelVisiblilityCode}\n                example={AxisYLabelVisiblilityExample}\n            />,\n            <DocExample\n                title=\"Axis-X Major Tick Labels - Hide\"\n                key=\"axisxmajorlabelvisiblility\"\n                code={AxisXMajorLabelVisiblilityCode}\n                example={AxisXMajorLabelVisiblilityExample}\n            />,\n            <DocExample\n                title=\"Axis-Y Major Tick Labels - Hide\"\n                key=\"axisymajorlabelvisiblility\"\n                code={AxisYMajorLabelVisiblilityCode}\n                example={AxisYMajorLabelVisiblilityExample}\n            />,\n            <DocExample\n                title=\"Axis-Y major grid - False, Axis-X major grid - True\"\n                key=\"majorgrid\"\n                code={MajorGridCode}\n                example={MajorGridExample}\n            />,\n            <DocExample\n                title=\"Axis-Y minor grid - True\"\n                key=\"minorgrid\"\n                code={MinorGridCode}\n                example={MinorGridExample}\n            />,\n            <DocExample\n                title=\"Axis-Y major, minor ticks - Show (15, 10), Axis-X - Hide\"\n                key=\"ticks\"\n                code={TicksCode}\n                example={TicksExample}\n            />,\n            <DocExample\n                title=\"Null Value Mode - Zero\"\n                key=\"nullvaluemode\"\n                code={NullValueModeCode}\n                example={NullValueModeExample}\n            />,\n            <DocExample\n                title=\"Legend Mode - Series Compare\"\n                key=\"legendmode\"\n                code={LegendModeCode}\n                example={LegendModeExample}\n            />,\n            <DocExample\n                title=\"Very Long Legend Labels, Legend Style Mode - End\"\n                key=\"legendstylemode\"\n                code={LegendStyleModeCode}\n                example={LegendStyleModeExample}\n            />,\n            <DocExample\n                title=\"New Legend Labels, Legend Labels - Top\"\n                key=\"legend\"\n                code={LegendCode}\n                example={LegendExample}\n            />,\n            <DocExample\n                title=\"Field Show List - Percent\"\n                key=\"fieldshowlist\"\n                code={FieldShowListCode}\n                example={FieldShowListExample}\n            />,\n            <DocExample\n                title=\"Data Labels - All\"\n                key=\"datalabels\"\n                code={DataLabelsCode}\n                example={DataLabelsExample}\n            />,\n            <DocExample\n                title=\"Show Markers - False\"\n                key=\"lineMarkers\"\n                code={LineMarkersCode}\n                example={LineMarkersExample}\n            />,\n            <DocExample\n                title=\"Chart Overlay - On, Axis-Y2 Title specified, Abbreviation - On\"\n                key=\"chartoverlay\"\n                code={ChartOverlayCode}\n                example={ChartOverlayExample}\n            />,\n            <DocExample\n                title=\"Multi Series - Explicit encoding\"\n                key=\"multiseriesexplicit\"\n                code={MultiSeriesExplicitCode}\n                example={MultiSeriesExplicitExample}\n            />,\n            <DocExample\n                title=\"Multi Series - Dynamic encoding\"\n                key=\"multiseriesdynamic\"\n                code={MultiSeriesDynamicCode}\n                example={MultiSeriesDynamicExample}\n            />,\n            <DocExample\n                title=\"Multi Y Axes\"\n                key=\"multiyaxes\"\n                code={MultiYAxesCode}\n                example={MultiYAxesExample}\n            />,\n        ]}\n        encodingSection={<EncodingDoc encoding={doc.encoding} />}\n        optionSection={<OptionsDoc options={optionsSchema} />}\n        eventSection={\n            <EventsDoc\n                events={doc.events}\n                Visualization={Line}\n                dsState={{\n                    primary: {\n                        requestParams: { offset: 0, count: 20 },\n                        data: {\n                            fields: [\n                                { name: '_time', groupby_rank: '0' },\n                                { name: 'count' },\n                                { name: '_span' },\n                            ],\n                            columns: [\n                                [\n                                    '2018-05-02T18:15:46.000-07:00',\n                                    '2018-05-02T18:15:47.000-07:00',\n                                    '2018-05-02T18:15:48.000-07:00',\n                                    '2018-05-02T18:15:49.000-07:00',\n                                    '2018-05-02T18:15:50.000-07:00',\n                                ],\n                                ['2', '10', '13', '60', '43', '85'],\n                                ['1', '1', '1', '1', '1', '1'],\n                            ],\n                        },\n                        meta: { totalCount: 20 },\n                    },\n                }}\n            />\n        }\n    />\n);\n","module.exports = require(\"@splunk/dashboard-visualizations/Line\");","module.exports = require(\"@splunk/visualizations-shared/VisualizationDocPage\");"],"sourceRoot":""}