/*!
 * Copyright © 2018 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 55);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),

/***/ 1:
/***/ (function(module, exports) {

module.exports = require("@splunk/react-docs/DocExample");

/***/ }),

/***/ 10:
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-visualizations/common/OptionsDoc");

/***/ }),

/***/ 12:
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-visualizations/common/EncodingDoc");

/***/ }),

/***/ 14:
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-visualizations/common/EventsDoc");

/***/ }),

/***/ 2:
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/schemaUtils");

/***/ }),

/***/ 55:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: external "react"
var external_react_ = __webpack_require__(0);
var external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);

// EXTERNAL MODULE: external "@splunk/dashboard-visualizations/Line"
var Line_ = __webpack_require__(6);
var Line_default = /*#__PURE__*/__webpack_require__.n(Line_);

// EXTERNAL MODULE: external "@splunk/visualizations-shared/VisualizationDocPage"
var VisualizationDocPage_ = __webpack_require__(9);
var VisualizationDocPage_default = /*#__PURE__*/__webpack_require__.n(VisualizationDocPage_);

// EXTERNAL MODULE: external "@splunk/dashboard-visualizations/common/EncodingDoc"
var EncodingDoc_ = __webpack_require__(12);
var EncodingDoc_default = /*#__PURE__*/__webpack_require__.n(EncodingDoc_);

// EXTERNAL MODULE: external "@splunk/dashboard-visualizations/common/EventsDoc"
var EventsDoc_ = __webpack_require__(14);
var EventsDoc_default = /*#__PURE__*/__webpack_require__.n(EventsDoc_);

// EXTERNAL MODULE: external "@splunk/dashboard-visualizations/common/OptionsDoc"
var OptionsDoc_ = __webpack_require__(10);
var OptionsDoc_default = /*#__PURE__*/__webpack_require__.n(OptionsDoc_);

// EXTERNAL MODULE: external "@splunk/react-docs/DocExample"
var DocExample_ = __webpack_require__(1);
var DocExample_default = /*#__PURE__*/__webpack_require__.n(DocExample_);

// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/Basic.jsx
/* harmony default export */ var Basic = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{}}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/TitleSpecified.jsx
/* harmony default export */ var TitleSpecified = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'axisTitleY.text': 'Axis Y Count',\n            'axisTitleX.text': 'Axis X Time',\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/TitleNotVisible.jsx
/* harmony default export */ var TitleNotVisible = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'axisTitleY.visibility': 'collapsed',\n            'axisTitleX.visibility': 'collapsed',\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/SeriesColors.jsx
/* harmony default export */ var SeriesColors = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            seriesColors: ['#FF0000', '#0000FF'],\n        }}\n        encoding={{\n            x: 'primary.sourcetype',\n            y: ['primary[1]', 'primary[2]'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: 'sourcetype',\n                        },\n                        {\n                            name: 'count',\n                            type_special: 'count',\n                        },\n                        {\n                            name: 'percent',\n                            type_special: 'percent',\n                        },\n                    ],\n                    columns: [\n                        [\n                            'splunkd',\n                            'splunkd_ui_access',\n                            'splunkd_access',\n                            'splunk_web_access',\n                            'scheduler',\n                            'splunk_web_service',\n                        ],\n                        ['600', '525', '295', '213', '122', '19'],\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/FieldColors.jsx
/* harmony default export */ var FieldColors = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            fieldColors: { 'total count': '#008000', percent: '#FFA500' },\n        }}\n        encoding={{\n            x: 'primary.sourcetype',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: 'sourcetype',\n                        },\n                        {\n                            name: 'total count',\n                            type_special: 'count',\n                        },\n                        {\n                            name: 'percent',\n                            type_special: 'percent',\n                        },\n                    ],\n                    columns: [\n                        [\n                            'splunkd',\n                            'splunkd_ui_access',\n                            'splunkd_access',\n                            'splunk_web_access',\n                            'scheduler',\n                            'splunk_web_service',\n                        ],\n                        ['600', '525', '295', '213', '122', '19'],\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/BackgroundColor.jsx
/* harmony default export */ var BackgroundColor = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            backgroundColor: '#008000',\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/ForegroundColor.jsx
/* harmony default export */ var ForegroundColor = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            foregroundColor: '#FF0000',\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/FontColor.jsx
/* harmony default export */ var FontColor = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            fontColor: '#0000FF',\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/SplitSeries.jsx
/* harmony default export */ var SplitSeries = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'layout.splitSeries': true,\n        }}\n        encoding={{\n            x: 'primary.sourcetype',\n            y: ['primary[1]', 'primary[2]'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: 'sourcetype',\n                        },\n                        {\n                            name: 'count',\n                            type_special: 'count',\n                        },\n                        {\n                            name: 'percent',\n                            type_special: 'percent',\n                        },\n                    ],\n                    columns: [\n                        [\n                            'splunkd',\n                            'splunkd_ui_access',\n                            'splunkd_access',\n                            'splunk_web_access',\n                            'scheduler',\n                            'splunk_web_service',\n                        ],\n                        ['600', '525', '295', '213', '122', '19'],\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/SplitSeriesIndependent.jsx
/* harmony default export */ var SplitSeriesIndependent = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'layout.splitSeries': true,\n            'layout.splitSeries.allowIndependentYRanges': true,\n        }}\n        encoding={{\n            x: 'primary.sourcetype',\n            y: ['primary[1]', 'primary[2]'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: 'sourcetype',\n                        },\n                        {\n                            name: 'count',\n                            type_special: 'count',\n                        },\n                        {\n                            name: 'percent',\n                            type_special: 'percent',\n                        },\n                    ],\n                    columns: [\n                        [\n                            'splunkd',\n                            'splunkd_ui_access',\n                            'splunkd_access',\n                            'splunk_web_access',\n                            'scheduler',\n                            'splunk_web_service',\n                        ],\n                        ['600', '525', '295', '213', '122', '19'],\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/FieldDashStyle.jsx
/* harmony default export */ var FieldDashStyle = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            fieldDashStyles: { count: 'dash', percent: 'dashDot' },\n        }}\n        encoding={{\n            x: 'primary.sourcetype',\n            y: ['primary.count', 'primary.percent'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: 'sourcetype',\n                        },\n                        {\n                            name: 'count',\n                            type_special: 'count',\n                        },\n                        {\n                            name: 'percent',\n                            type_special: 'percent',\n                        },\n                    ],\n                    columns: [\n                        [\n                            'splunkd',\n                            'splunkd_ui_access',\n                            'splunkd_access',\n                            'splunk_web_access',\n                            'scheduler',\n                            'splunk_web_service',\n                        ],\n                        ['600', '525', '295', '213', '122', '19'],\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/LineDashStyle.jsx
/* harmony default export */ var LineDashStyle = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            lineDashStyle: 'shortDashDot',\n        }}\n        encoding={{\n            x: 'primary.sourcetype',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: 'sourcetype',\n                        },\n                        {\n                            name: 'count',\n                            type_special: 'count',\n                        },\n                        {\n                            name: 'percent',\n                            type_special: 'percent',\n                        },\n                    ],\n                    columns: [\n                        [\n                            'splunkd',\n                            'splunkd_ui_access',\n                            'splunkd_access',\n                            'splunk_web_access',\n                            'scheduler',\n                            'splunk_web_service',\n                        ],\n                        ['600', '525', '295', '213', '122', '19'],\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/LineWidth.jsx
/* harmony default export */ var LineWidth = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            lineWidth: 5,\n        }}\n        encoding={{\n            x: 'primary.sourcetype',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: 'sourcetype',\n                        },\n                        {\n                            name: 'count',\n                            type_special: 'count',\n                        },\n                        {\n                            name: 'percent',\n                            type_special: 'percent',\n                        },\n                    ],\n                    columns: [\n                        [\n                            'splunkd',\n                            'splunkd_ui_access',\n                            'splunkd_access',\n                            'splunk_web_access',\n                            'scheduler',\n                            'splunk_web_service',\n                        ],\n                        ['600', '525', '295', '213', '122', '19'],\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/AxisYAbbreviation.jsx
/* harmony default export */ var AxisYAbbreviation = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{ 'axisY.abbreviation': 'auto' }}\n        encoding={{\n            x: 'primary.component',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\n                    columns: [\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\n                        ['166238', '8904', '2327'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/AxisYScale.jsx
/* harmony default export */ var AxisYScale = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'axisY.scale': 'log',\n        }}\n        encoding={{\n            x: 'primary.component',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\n                    columns: [\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\n                        ['166238', '8904', '2327'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/AxisXLabelVisiblility.jsx
/* harmony default export */ var AxisXLabelVisiblility = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'axisLabelsX.axisVisibility': 'show',\n            'gridLinesY.showMajorLines': false,\n        }}\n        encoding={{\n            x: 'primary.component',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\n                    columns: [\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\n                        ['166238', '8904', '2327'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/AxisYLabelVisiblility.jsx
/* harmony default export */ var AxisYLabelVisiblility = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'axisLabelsY.axisVisibility': 'show',\n        }}\n        encoding={{\n            x: 'primary.component',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\n                    columns: [\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\n                        ['166238', '8904', '2327'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/AxisXMajorLabelVisiblility.jsx
/* harmony default export */ var AxisXMajorLabelVisiblility = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'axisLabelsX.majorLabelVisibility': 'hide',\n        }}\n        encoding={{\n            x: 'primary.component',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\n                    columns: [\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\n                        ['166238', '8904', '2327'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/AxisYMajorLabelVisiblility.jsx
/* harmony default export */ var AxisYMajorLabelVisiblility = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'axisLabelsY.majorLabelVisibility': 'hide',\n        }}\n        encoding={{\n            x: 'primary.component',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\n                    columns: [\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\n                        ['166238', '8904', '2327'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/MajorGrid.jsx
/* harmony default export */ var MajorGrid = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'gridLinesX.showMajorLines': true,\n            'gridLinesY.showMajorLines': false,\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/MinorGrid.jsx
/* harmony default export */ var MinorGrid = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'gridLinesY.showMinorLines': true,\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/Legend.jsx
/* harmony default export */ var Legend = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'legend.labels': ['foo', 'bar'],\n            'legend.placement': 'top',\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/FieldShowList.jsx
/* harmony default export */ var FieldShowList = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'data.fieldListMode': 'show_hide',\n            'data.fieldShowList': ['percent'],\n        }}\n        encoding={{\n            x: 'primary.sourcetype',\n            y: 'primary.percent',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: 'sourcetype',\n                        },\n                        {\n                            name: 'count',\n                            type_special: 'count',\n                        },\n                        {\n                            name: 'percent',\n                            type_special: 'percent',\n                        },\n                    ],\n                    columns: [\n                        [\n                            'splunkd',\n                            'splunkd_ui_access',\n                            'splunkd_access',\n                            'splunk_web_access',\n                            'scheduler',\n                            'splunk_web_service',\n                        ],\n                        ['600', '525', '295', '213', '122', '19'],\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/DataLabels.jsx
/* harmony default export */ var DataLabels = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'chart.showDataLabels': 'all',\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/LineMarkers.jsx
/* harmony default export */ var LineMarkers = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'chart.showMarkers': false,\n        }}\n        encoding={{\n            x: 'primary.component',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\n                    columns: [\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\n                        ['166238', '8904', '2327'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/Ticks.jsx
/* harmony default export */ var Ticks = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'axisLabelsY.majorTickVisibility': 'show',\n            'axisLabelsY.minorTickVisibility': 'show',\n            'axisLabelsX.majorTickVisibility': 'hide',\n            'axisLabelsY.majorTickSize': 15,\n            'axisLabelsY.minorTickSize': 10,\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/NullValueMode.jsx
/* harmony default export */ var NullValueMode = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'chart.nullValueMode': 'zero',\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: ['primary[1]', 'primary[2]'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: '_time',\n                            groupby_rank: '0',\n                        },\n                        {\n                            name: '10.1.1.000',\n                            data_source: 'sum(date_hour)',\n                            splitby_field: 'clientip',\n                            splitby_value: '10.1.1.000',\n                        },\n                        {\n                            name: '10.1.1.002',\n                            data_source: 'sum(date_hour)',\n                            splitby_field: 'clientip',\n                            splitby_value: '10.1.1.002',\n                        },\n                        {\n                            name: '_span',\n                        },\n                    ],\n                    columns: [\n                        [\n                            '2017-08-20T00:00:00.000-07:00',\n                            '2017-08-20T00:30:00.000-07:00',\n                            '2017-08-20T01:00:00.000-07:00',\n                            '2017-08-20T01:30:00.000-07:00',\n                            '2017-08-20T02:00:00.000-07:00',\n                            '2017-08-20T02:30:00.000-07:00',\n                            '2017-08-20T03:00:00.000-07:00',\n                            '2017-08-20T03:30:00.000-07:00',\n                            '2017-08-20T04:00:00.000-07:00',\n                            '2017-08-20T04:30:00.000-07:00',\n                        ],\n                        ['', '', '170', '100', '22', '', '', '1040', '221', '42'],\n                        ['', '', '', '', '460', '154', '', '36', '576', '1625'],\n                        ['1800', '1800', '1800', '1800', '1800', '1800', '1800', '1800', '1800', '1800'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/LegendMode.jsx
/* harmony default export */ var LegendMode = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'legend.mode': 'seriesCompare',\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/IncludeZero.jsx
/* harmony default export */ var IncludeZero = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'axisY.includeZero': true,\n        }}\n        encoding={{\n            x: 'primary.component',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\n                    columns: [\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\n                        ['200', '400', '600'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/ExtendRange.jsx
/* harmony default export */ var ExtendRange = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'axisLabelsY.extendsAxisRange': false,\n        }}\n        encoding={{\n            x: 'primary.component',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\n                    columns: [\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\n                        ['200', '400', '600'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/IntegerUnits.jsx
/* harmony default export */ var IntegerUnits = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'axisLabelsY.integerUnits': true,\n        }}\n        encoding={{\n            x: 'primary.component',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component', groupby_rank: '0' }, { name: 'count' }],\n                    columns: [\n                        ['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'],\n                        ['2', '2.5', '3.5'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/LegendStyleMode.jsx
/* harmony default export */ var LegendStyleMode = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'legend.labels': ['verylonglegendlabelstringtoshowdifferentellipsoverflowmode'],\n            'legend.labelStyle.overflowMode': 'ellipsisEnd',\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:15:46.000-07:00',\n                            '2018-05-02T18:15:47.000-07:00',\n                            '2018-05-02T18:15:48.000-07:00',\n                            '2018-05-02T18:15:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/ChartOverlay.jsx
/* harmony default export */ var ChartOverlay = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'axisY2.enabled': true,\n            'chart.overlayFields': 'count',\n            'axisTitleY2.text': 'Axis - Y2 Count',\n            'axisY2.abbreviation': 'auto',\n        }}\n        encoding={{\n            x: 'primary.sourcetype',\n            y2: 'primary.count',\n            y: 'primary.percent',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: 'sourcetype',\n                        },\n                        {\n                            name: 'count',\n                            type_special: 'count',\n                        },\n                        {\n                            name: 'percent',\n                            type_special: 'percent',\n                        },\n                    ],\n                    columns: [\n                        [\n                            'splunkd',\n                            'splunkd_ui_access',\n                            'splunkd_access',\n                            'splunk_web_access',\n                            'scheduler',\n                            'splunk_web_service',\n                        ],\n                        ['1600', '1525', '1295', '713', '322', '19'],\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/Annotation.jsx
/* harmony default export */ var Annotation = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{}}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n            annotationX: 'annotation._time',\n            annotationLabel: 'annotation.annotation_label',\n            annotationColor: 'annotation.annotation_color',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:10:46.000-07:00',\n                            '2018-05-02T18:11:47.000-07:00',\n                            '2018-05-02T18:12:48.000-07:00',\n                            '2018-05-02T18:13:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n            annotation: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        { name: '_time', groupby_rank: '0' },\n                        { name: 'annotation_label' },\n                        { name: 'annotation_color' },\n                    ],\n                    columns: [\n                        [\n                            '2018-05-02T18:11:50.000-07:00',\n                            '2018-05-02T18:13:25.000-07:00',\n                            '2018-05-02T18:14:30.000-07:00',\n                        ],\n                        ['houston, we have a problem', 'just close the jira', 'looking good now'],\n                        ['#f44271', '#f4a941', '#41f49a'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/AnnotationColor.jsx
/* harmony default export */ var AnnotationColor = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        options={{\n            'annotation.categoryColors': {\n                'houston, we have a problem': '#FF00FF',\n                'just close the jira': '#000000',\n                'looking good now': '#FF0000',\n            },\n        }}\n        encoding={{\n            x: 'primary._time',\n            y: 'primary.count',\n            annotationX: 'annotation._time',\n            annotationLabel: 'annotation.annotation_label',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: '_time', groupby_rank: '0' }, { name: 'count' }, { name: '_span' }],\n                    columns: [\n                        [\n                            '2018-05-02T18:10:46.000-07:00',\n                            '2018-05-02T18:11:47.000-07:00',\n                            '2018-05-02T18:12:48.000-07:00',\n                            '2018-05-02T18:13:49.000-07:00',\n                            '2018-05-02T18:15:50.000-07:00',\n                        ],\n                        ['2', '10', '13', '60', '43'],\n                        ['1', '1', '1', '1', '1'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n            annotation: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        { name: '_time', groupby_rank: '0' },\n                        { name: 'annotation_label' },\n                        { name: 'annotation_color' },\n                    ],\n                    columns: [\n                        [\n                            '2018-05-02T18:11:50.000-07:00',\n                            '2018-05-02T18:13:25.000-07:00',\n                            '2018-05-02T18:14:30.000-07:00',\n                        ],\n                        ['houston, we have a problem', 'just close the jira', 'looking good now'],\n                        ['#f44271', '#f4a941', '#41f49a'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/MultiSeriesExplicit.jsx
/* harmony default export */ var MultiSeriesExplicit = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        encoding={{\n            x: 'primary.sourcetype',\n            y: ['primary.count', 'primary.percent'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: 'sourcetype',\n                        },\n                        {\n                            name: 'count',\n                            type_special: 'count',\n                        },\n                        {\n                            name: 'percent',\n                            type_special: 'percent',\n                        },\n                    ],\n                    columns: [\n                        [\n                            'splunkd',\n                            'splunkd_ui_access',\n                            'splunkd_access',\n                            'splunk_web_access',\n                            'scheduler',\n                            'splunk_web_service',\n                        ],\n                        ['600', '525', '295', '213', '122', '19'],\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/MultiSeriesDynamic.jsx
/* harmony default export */ var MultiSeriesDynamic = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        encoding={{\n            x: 'primary.sourcetype',\n            y: 'primary[1:]',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: 'sourcetype',\n                        },\n                        {\n                            name: 'count',\n                            type_special: 'count',\n                        },\n                        {\n                            name: 'percent',\n                            type_special: 'percent',\n                        },\n                    ],\n                    columns: [\n                        [\n                            'splunkd',\n                            'splunkd_ui_access',\n                            'splunkd_access',\n                            'splunk_web_access',\n                            'scheduler',\n                            'splunk_web_service',\n                        ],\n                        ['600', '525', '295', '213', '122', '19'],\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Line/docs/examples/MultiYAxes.jsx
/* harmony default export */ var MultiYAxes = ("import React from 'react';\nimport Line from '@splunk/dashboard-visualizations/Line';\n\nexport default () => (\n    <Line\n        encoding={{\n            x: 'primary.sourcetype',\n            y: 'primary.count',\n            y2: 'primary.percent',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [\n                        {\n                            name: 'sourcetype',\n                        },\n                        {\n                            name: 'count',\n                            type_special: 'count',\n                        },\n                        {\n                            name: 'percent',\n                            type_special: 'percent',\n                        },\n                    ],\n                    columns: [\n                        [\n                            'splunkd',\n                            'splunkd_ui_access',\n                            'splunkd_access',\n                            'splunk_web_access',\n                            'scheduler',\n                            'splunk_web_service',\n                        ],\n                        ['600', '525', '295', '213', '122', '19'],\n                        ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/Basic.jsx


/* harmony default export */ var examples_Basic = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {},
    encoding: {
      x: 'primary._time',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: '_time',
            groupby_rank: '0'
          }, {
            name: 'count'
          }, {
            name: '_span'
          }],
          columns: [['2018-05-02T18:15:46.000-07:00', '2018-05-02T18:15:47.000-07:00', '2018-05-02T18:15:48.000-07:00', '2018-05-02T18:15:49.000-07:00', '2018-05-02T18:15:50.000-07:00'], ['2', '10', '13', '60', '43'], ['1', '1', '1', '1', '1']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/TitleSpecified.jsx


/* harmony default export */ var examples_TitleSpecified = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'axisTitleY.text': 'Axis Y Count',
      'axisTitleX.text': 'Axis X Time'
    },
    encoding: {
      x: 'primary._time',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: '_time',
            groupby_rank: '0'
          }, {
            name: 'count'
          }, {
            name: '_span'
          }],
          columns: [['2018-05-02T18:15:46.000-07:00', '2018-05-02T18:15:47.000-07:00', '2018-05-02T18:15:48.000-07:00', '2018-05-02T18:15:49.000-07:00', '2018-05-02T18:15:50.000-07:00'], ['2', '10', '13', '60', '43'], ['1', '1', '1', '1', '1']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/TitleNotVisible.jsx


/* harmony default export */ var examples_TitleNotVisible = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'axisTitleY.visibility': 'collapsed',
      'axisTitleX.visibility': 'collapsed'
    },
    encoding: {
      x: 'primary._time',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: '_time',
            groupby_rank: '0'
          }, {
            name: 'count'
          }, {
            name: '_span'
          }],
          columns: [['2018-05-02T18:15:46.000-07:00', '2018-05-02T18:15:47.000-07:00', '2018-05-02T18:15:48.000-07:00', '2018-05-02T18:15:49.000-07:00', '2018-05-02T18:15:50.000-07:00'], ['2', '10', '13', '60', '43'], ['1', '1', '1', '1', '1']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/SeriesColors.jsx


/* harmony default export */ var examples_SeriesColors = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      seriesColors: ['#FF0000', '#0000FF']
    },
    encoding: {
      x: 'primary.sourcetype',
      y: ['primary[1]', 'primary[2]']
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'sourcetype'
          }, {
            name: 'count',
            type_special: 'count'
          }, {
            name: 'percent',
            type_special: 'percent'
          }],
          columns: [['splunkd', 'splunkd_ui_access', 'splunkd_access', 'splunk_web_access', 'scheduler', 'splunk_web_service'], ['600', '525', '295', '213', '122', '19'], ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/FieldColors.jsx


/* harmony default export */ var examples_FieldColors = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      fieldColors: {
        'total count': '#008000',
        percent: '#FFA500'
      }
    },
    encoding: {
      x: 'primary.sourcetype'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'sourcetype'
          }, {
            name: 'total count',
            type_special: 'count'
          }, {
            name: 'percent',
            type_special: 'percent'
          }],
          columns: [['splunkd', 'splunkd_ui_access', 'splunkd_access', 'splunk_web_access', 'scheduler', 'splunk_web_service'], ['600', '525', '295', '213', '122', '19'], ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/BackgroundColor.jsx


/* harmony default export */ var examples_BackgroundColor = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      backgroundColor: '#008000'
    },
    encoding: {
      x: 'primary._time',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: '_time',
            groupby_rank: '0'
          }, {
            name: 'count'
          }, {
            name: '_span'
          }],
          columns: [['2018-05-02T18:15:46.000-07:00', '2018-05-02T18:15:47.000-07:00', '2018-05-02T18:15:48.000-07:00', '2018-05-02T18:15:49.000-07:00', '2018-05-02T18:15:50.000-07:00'], ['2', '10', '13', '60', '43'], ['1', '1', '1', '1', '1']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/ForegroundColor.jsx


/* harmony default export */ var examples_ForegroundColor = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      foregroundColor: '#FF0000'
    },
    encoding: {
      x: 'primary._time',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: '_time',
            groupby_rank: '0'
          }, {
            name: 'count'
          }, {
            name: '_span'
          }],
          columns: [['2018-05-02T18:15:46.000-07:00', '2018-05-02T18:15:47.000-07:00', '2018-05-02T18:15:48.000-07:00', '2018-05-02T18:15:49.000-07:00', '2018-05-02T18:15:50.000-07:00'], ['2', '10', '13', '60', '43'], ['1', '1', '1', '1', '1']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/FontColor.jsx


/* harmony default export */ var examples_FontColor = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      fontColor: '#0000FF'
    },
    encoding: {
      x: 'primary._time',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: '_time',
            groupby_rank: '0'
          }, {
            name: 'count'
          }, {
            name: '_span'
          }],
          columns: [['2018-05-02T18:15:46.000-07:00', '2018-05-02T18:15:47.000-07:00', '2018-05-02T18:15:48.000-07:00', '2018-05-02T18:15:49.000-07:00', '2018-05-02T18:15:50.000-07:00'], ['2', '10', '13', '60', '43'], ['1', '1', '1', '1', '1']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/SplitSeries.jsx


/* harmony default export */ var examples_SplitSeries = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'layout.splitSeries': true
    },
    encoding: {
      x: 'primary.sourcetype',
      y: ['primary[1]', 'primary[2]']
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'sourcetype'
          }, {
            name: 'count',
            type_special: 'count'
          }, {
            name: 'percent',
            type_special: 'percent'
          }],
          columns: [['splunkd', 'splunkd_ui_access', 'splunkd_access', 'splunk_web_access', 'scheduler', 'splunk_web_service'], ['600', '525', '295', '213', '122', '19'], ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/SplitSeriesIndependent.jsx


/* harmony default export */ var examples_SplitSeriesIndependent = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'layout.splitSeries': true,
      'layout.splitSeries.allowIndependentYRanges': true
    },
    encoding: {
      x: 'primary.sourcetype',
      y: ['primary[1]', 'primary[2]']
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'sourcetype'
          }, {
            name: 'count',
            type_special: 'count'
          }, {
            name: 'percent',
            type_special: 'percent'
          }],
          columns: [['splunkd', 'splunkd_ui_access', 'splunkd_access', 'splunk_web_access', 'scheduler', 'splunk_web_service'], ['600', '525', '295', '213', '122', '19'], ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/LineDashStyle.jsx


/* harmony default export */ var examples_LineDashStyle = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      lineDashStyle: 'shortDashDot'
    },
    encoding: {
      x: 'primary.sourcetype',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'sourcetype'
          }, {
            name: 'count',
            type_special: 'count'
          }, {
            name: 'percent',
            type_special: 'percent'
          }],
          columns: [['splunkd', 'splunkd_ui_access', 'splunkd_access', 'splunk_web_access', 'scheduler', 'splunk_web_service'], ['600', '525', '295', '213', '122', '19'], ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/FieldDashStyle.jsx


/* harmony default export */ var examples_FieldDashStyle = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      fieldDashStyles: {
        count: 'dash',
        percent: 'dashDot'
      }
    },
    encoding: {
      x: 'primary.sourcetype',
      y: ['primary.count', 'primary.percent']
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'sourcetype'
          }, {
            name: 'count',
            type_special: 'count'
          }, {
            name: 'percent',
            type_special: 'percent'
          }],
          columns: [['splunkd', 'splunkd_ui_access', 'splunkd_access', 'splunk_web_access', 'scheduler', 'splunk_web_service'], ['600', '525', '295', '213', '122', '19'], ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/LineWidth.jsx


/* harmony default export */ var examples_LineWidth = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      lineWidth: 5
    },
    encoding: {
      x: 'primary.sourcetype',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'sourcetype'
          }, {
            name: 'count',
            type_special: 'count'
          }, {
            name: 'percent',
            type_special: 'percent'
          }],
          columns: [['splunkd', 'splunkd_ui_access', 'splunkd_access', 'splunk_web_access', 'scheduler', 'splunk_web_service'], ['600', '525', '295', '213', '122', '19'], ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/AxisYAbbreviation.jsx


/* harmony default export */ var examples_AxisYAbbreviation = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'axisY.abbreviation': 'auto'
    },
    encoding: {
      x: 'primary.component',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'component',
            groupby_rank: '0'
          }, {
            name: 'count'
          }],
          columns: [['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'], ['166238', '8904', '2327']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/AxisYScale.jsx


/* harmony default export */ var examples_AxisYScale = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'axisY.scale': 'log'
    },
    encoding: {
      x: 'primary.component',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'component',
            groupby_rank: '0'
          }, {
            name: 'count'
          }],
          columns: [['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'], ['166238', '8904', '2327']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/IncludeZero.jsx


/* harmony default export */ var examples_IncludeZero = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'axisY.includeZero': true
    },
    encoding: {
      x: 'primary.component',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'component',
            groupby_rank: '0'
          }, {
            name: 'count'
          }],
          columns: [['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'], ['200', '400', '600']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/ExtendRange.jsx


/* harmony default export */ var examples_ExtendRange = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'axisLabelsY.extendsAxisRange': false
    },
    encoding: {
      x: 'primary.component',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'component',
            groupby_rank: '0'
          }, {
            name: 'count'
          }],
          columns: [['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'], ['200', '400', '600']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/IntegerUnits.jsx


/* harmony default export */ var examples_IntegerUnits = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'axisLabelsY.integerUnits': true
    },
    encoding: {
      x: 'primary.component',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'component',
            groupby_rank: '0'
          }, {
            name: 'count'
          }],
          columns: [['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'], ['2', '2.5', '3.5']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/AxisXLabelVisiblility.jsx


/* harmony default export */ var examples_AxisXLabelVisiblility = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'axisLabelsX.axisVisibility': 'show',
      'gridLinesY.showMajorLines': false
    },
    encoding: {
      x: 'primary.component',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'component',
            groupby_rank: '0'
          }, {
            name: 'count'
          }],
          columns: [['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'], ['166238', '8904', '2327']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/AxisYLabelVisiblility.jsx


/* harmony default export */ var examples_AxisYLabelVisiblility = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'axisLabelsY.axisVisibility': 'show'
    },
    encoding: {
      x: 'primary.component',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'component',
            groupby_rank: '0'
          }, {
            name: 'count'
          }],
          columns: [['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'], ['166238', '8904', '2327']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/AxisXMajorLabelVisiblility.jsx


/* harmony default export */ var examples_AxisXMajorLabelVisiblility = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'axisLabelsX.majorLabelVisibility': 'hide'
    },
    encoding: {
      x: 'primary.component',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'component',
            groupby_rank: '0'
          }, {
            name: 'count'
          }],
          columns: [['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'], ['166238', '8904', '2327']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/AxisYMajorLabelVisiblility.jsx


/* harmony default export */ var examples_AxisYMajorLabelVisiblility = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'axisLabelsY.majorLabelVisibility': 'hide'
    },
    encoding: {
      x: 'primary.component',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'component',
            groupby_rank: '0'
          }, {
            name: 'count'
          }],
          columns: [['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'], ['166238', '8904', '2327']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/MajorGrid.jsx


/* harmony default export */ var examples_MajorGrid = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'gridLinesX.showMajorLines': true,
      'gridLinesY.showMajorLines': false
    },
    encoding: {
      x: 'primary._time',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: '_time',
            groupby_rank: '0'
          }, {
            name: 'count'
          }, {
            name: '_span'
          }],
          columns: [['2018-05-02T18:15:46.000-07:00', '2018-05-02T18:15:47.000-07:00', '2018-05-02T18:15:48.000-07:00', '2018-05-02T18:15:49.000-07:00', '2018-05-02T18:15:50.000-07:00'], ['2', '10', '13', '60', '43'], ['1', '1', '1', '1', '1']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/MinorGrid.jsx


/* harmony default export */ var examples_MinorGrid = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'gridLinesY.showMinorLines': true
    },
    encoding: {
      x: 'primary._time',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: '_time',
            groupby_rank: '0'
          }, {
            name: 'count'
          }, {
            name: '_span'
          }],
          columns: [['2018-05-02T18:15:46.000-07:00', '2018-05-02T18:15:47.000-07:00', '2018-05-02T18:15:48.000-07:00', '2018-05-02T18:15:49.000-07:00', '2018-05-02T18:15:50.000-07:00'], ['2', '10', '13', '60', '43'], ['1', '1', '1', '1', '1']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/Legend.jsx


/* harmony default export */ var examples_Legend = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'legend.labels': ['foo', 'bar'],
      'legend.placement': 'top'
    },
    encoding: {
      x: 'primary._time',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: '_time',
            groupby_rank: '0'
          }, {
            name: 'count'
          }, {
            name: '_span'
          }],
          columns: [['2018-05-02T18:15:46.000-07:00', '2018-05-02T18:15:47.000-07:00', '2018-05-02T18:15:48.000-07:00', '2018-05-02T18:15:49.000-07:00', '2018-05-02T18:15:50.000-07:00'], ['2', '10', '13', '60', '43'], ['1', '1', '1', '1', '1']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/FieldShowList.jsx


/* harmony default export */ var examples_FieldShowList = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'data.fieldListMode': 'show_hide',
      'data.fieldShowList': ['percent']
    },
    encoding: {
      x: 'primary.sourcetype',
      y: 'primary.percent'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'sourcetype'
          }, {
            name: 'count',
            type_special: 'count'
          }, {
            name: 'percent',
            type_special: 'percent'
          }],
          columns: [['splunkd', 'splunkd_ui_access', 'splunkd_access', 'splunk_web_access', 'scheduler', 'splunk_web_service'], ['600', '525', '295', '213', '122', '19'], ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/DataLabels.jsx


/* harmony default export */ var examples_DataLabels = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'chart.showDataLabels': 'all'
    },
    encoding: {
      x: 'primary._time',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: '_time',
            groupby_rank: '0'
          }, {
            name: 'count'
          }, {
            name: '_span'
          }],
          columns: [['2018-05-02T18:15:46.000-07:00', '2018-05-02T18:15:47.000-07:00', '2018-05-02T18:15:48.000-07:00', '2018-05-02T18:15:49.000-07:00', '2018-05-02T18:15:50.000-07:00'], ['2', '10', '13', '60', '43'], ['1', '1', '1', '1', '1']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/LineMarkers.jsx


/* harmony default export */ var examples_LineMarkers = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'chart.showMarkers': false
    },
    encoding: {
      x: 'primary.component',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'component',
            groupby_rank: '0'
          }, {
            name: 'count'
          }],
          columns: [['ApplicationLicense', 'DatabaseDirectoryManager', 'IndexWriter'], ['166238', '8904', '2327']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/Ticks.jsx


/* harmony default export */ var examples_Ticks = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'axisLabelsY.majorTickVisibility': 'show',
      'axisLabelsY.minorTickVisibility': 'show',
      'axisLabelsX.majorTickVisibility': 'hide',
      'axisLabelsY.majorTickSize': 15,
      'axisLabelsY.minorTickSize': 10
    },
    encoding: {
      x: 'primary._time',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: '_time',
            groupby_rank: '0'
          }, {
            name: 'count'
          }, {
            name: '_span'
          }],
          columns: [['2018-05-02T18:15:46.000-07:00', '2018-05-02T18:15:47.000-07:00', '2018-05-02T18:15:48.000-07:00', '2018-05-02T18:15:49.000-07:00', '2018-05-02T18:15:50.000-07:00'], ['2', '10', '13', '60', '43'], ['1', '1', '1', '1', '1']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/NullValueMode.jsx


/* harmony default export */ var examples_NullValueMode = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'chart.nullValueMode': 'zero'
    },
    encoding: {
      x: 'primary._time',
      y: ['primary[1]', 'primary[2]']
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: '_time',
            groupby_rank: '0'
          }, {
            name: '10.1.1.000',
            data_source: 'sum(date_hour)',
            splitby_field: 'clientip',
            splitby_value: '10.1.1.000'
          }, {
            name: '10.1.1.002',
            data_source: 'sum(date_hour)',
            splitby_field: 'clientip',
            splitby_value: '10.1.1.002'
          }, {
            name: '_span'
          }],
          columns: [['2017-08-20T00:00:00.000-07:00', '2017-08-20T00:30:00.000-07:00', '2017-08-20T01:00:00.000-07:00', '2017-08-20T01:30:00.000-07:00', '2017-08-20T02:00:00.000-07:00', '2017-08-20T02:30:00.000-07:00', '2017-08-20T03:00:00.000-07:00', '2017-08-20T03:30:00.000-07:00', '2017-08-20T04:00:00.000-07:00', '2017-08-20T04:30:00.000-07:00'], ['', '', '170', '100', '22', '', '', '1040', '221', '42'], ['', '', '', '', '460', '154', '', '36', '576', '1625'], ['1800', '1800', '1800', '1800', '1800', '1800', '1800', '1800', '1800', '1800']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/LegendMode.jsx


/* harmony default export */ var examples_LegendMode = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'legend.mode': 'seriesCompare'
    },
    encoding: {
      x: 'primary._time',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: '_time',
            groupby_rank: '0'
          }, {
            name: 'count'
          }, {
            name: '_span'
          }],
          columns: [['2018-05-02T18:15:46.000-07:00', '2018-05-02T18:15:47.000-07:00', '2018-05-02T18:15:48.000-07:00', '2018-05-02T18:15:49.000-07:00', '2018-05-02T18:15:50.000-07:00'], ['2', '10', '13', '60', '43'], ['1', '1', '1', '1', '1']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/LegendStyleMode.jsx


/* harmony default export */ var examples_LegendStyleMode = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'legend.labels': ['verylonglegendlabelstringtoshowdifferentellipsoverflowmode'],
      'legend.labelStyle.overflowMode': 'ellipsisEnd'
    },
    encoding: {
      x: 'primary._time',
      y: 'primary.count'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: '_time',
            groupby_rank: '0'
          }, {
            name: 'count'
          }, {
            name: '_span'
          }],
          columns: [['2018-05-02T18:15:46.000-07:00', '2018-05-02T18:15:47.000-07:00', '2018-05-02T18:15:48.000-07:00', '2018-05-02T18:15:49.000-07:00', '2018-05-02T18:15:50.000-07:00'], ['2', '10', '13', '60', '43'], ['1', '1', '1', '1', '1']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/ChartOverlay.jsx


/* harmony default export */ var examples_ChartOverlay = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'axisY2.enabled': true,
      'chart.overlayFields': 'count',
      'axisTitleY2.text': 'Axis - Y2 Count',
      'axisY2.abbreviation': 'auto'
    },
    encoding: {
      x: 'primary.sourcetype',
      y2: 'primary.count',
      y: 'primary.percent'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'sourcetype'
          }, {
            name: 'count',
            type_special: 'count'
          }, {
            name: 'percent',
            type_special: 'percent'
          }],
          columns: [['splunkd', 'splunkd_ui_access', 'splunkd_access', 'splunk_web_access', 'scheduler', 'splunk_web_service'], ['1600', '1525', '1295', '713', '322', '19'], ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/Annotation.jsx


/* harmony default export */ var examples_Annotation = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {},
    encoding: {
      x: 'primary._time',
      y: 'primary.count',
      annotationX: 'annotation._time',
      annotationLabel: 'annotation.annotation_label',
      annotationColor: 'annotation.annotation_color'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: '_time',
            groupby_rank: '0'
          }, {
            name: 'count'
          }, {
            name: '_span'
          }],
          columns: [['2018-05-02T18:10:46.000-07:00', '2018-05-02T18:11:47.000-07:00', '2018-05-02T18:12:48.000-07:00', '2018-05-02T18:13:49.000-07:00', '2018-05-02T18:15:50.000-07:00'], ['2', '10', '13', '60', '43'], ['1', '1', '1', '1', '1']]
        },
        meta: {
          totalCount: 20
        }
      },
      annotation: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: '_time',
            groupby_rank: '0'
          }, {
            name: 'annotation_label'
          }, {
            name: 'annotation_color'
          }],
          columns: [['2018-05-02T18:11:50.000-07:00', '2018-05-02T18:13:25.000-07:00', '2018-05-02T18:14:30.000-07:00'], ['houston, we have a problem', 'just close the jira', 'looking good now'], ['#f44271', '#f4a941', '#41f49a']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/AnnotationColor.jsx


/* harmony default export */ var examples_AnnotationColor = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    options: {
      'annotation.categoryColors': {
        'houston, we have a problem': '#FF00FF',
        'just close the jira': '#000000',
        'looking good now': '#FF0000'
      }
    },
    encoding: {
      x: 'primary._time',
      y: 'primary.count',
      annotationX: 'annotation._time',
      annotationLabel: 'annotation.annotation_label'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: '_time',
            groupby_rank: '0'
          }, {
            name: 'count'
          }, {
            name: '_span'
          }],
          columns: [['2018-05-02T18:10:46.000-07:00', '2018-05-02T18:11:47.000-07:00', '2018-05-02T18:12:48.000-07:00', '2018-05-02T18:13:49.000-07:00', '2018-05-02T18:15:50.000-07:00'], ['2', '10', '13', '60', '43'], ['1', '1', '1', '1', '1']]
        },
        meta: {
          totalCount: 20
        }
      },
      annotation: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: '_time',
            groupby_rank: '0'
          }, {
            name: 'annotation_label'
          }, {
            name: 'annotation_color'
          }],
          columns: [['2018-05-02T18:11:50.000-07:00', '2018-05-02T18:13:25.000-07:00', '2018-05-02T18:14:30.000-07:00'], ['houston, we have a problem', 'just close the jira', 'looking good now'], ['#f44271', '#f4a941', '#41f49a']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/MultiSeriesExplicit.jsx


/* harmony default export */ var examples_MultiSeriesExplicit = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    encoding: {
      x: 'primary.sourcetype',
      y: ['primary.count', 'primary.percent']
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'sourcetype'
          }, {
            name: 'count',
            type_special: 'count'
          }, {
            name: 'percent',
            type_special: 'percent'
          }],
          columns: [['splunkd', 'splunkd_ui_access', 'splunkd_access', 'splunk_web_access', 'scheduler', 'splunk_web_service'], ['600', '525', '295', '213', '122', '19'], ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/MultiSeriesDynamic.jsx


/* harmony default export */ var examples_MultiSeriesDynamic = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    encoding: {
      x: 'primary.sourcetype',
      y: 'primary[1:]'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'sourcetype'
          }, {
            name: 'count',
            type_special: 'count'
          }, {
            name: 'percent',
            type_special: 'percent'
          }],
          columns: [['splunkd', 'splunkd_ui_access', 'splunkd_access', 'splunk_web_access', 'scheduler', 'splunk_web_service'], ['600', '525', '295', '213', '122', '19'], ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/examples/MultiYAxes.jsx


/* harmony default export */ var examples_MultiYAxes = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Line_default.a, {
    encoding: {
      x: 'primary.sourcetype',
      y: 'primary.count',
      y2: 'primary.percent'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'sourcetype'
          }, {
            name: 'count',
            type_special: 'count'
          }, {
            name: 'percent',
            type_special: 'percent'
          }],
          columns: [['splunkd', 'splunkd_ui_access', 'splunkd_access', 'splunk_web_access', 'scheduler', 'splunk_web_service'], ['600', '525', '295', '213', '122', '19'], ['87.966380', '50.381304', '60.023780', '121.183272', '70.250513', '90.194752']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/definition.js
/* harmony default export */ var definition = ({
  encoding: [{
    name: 'x',
    type: '[time | number | string]',
    desc: 'Specify the dataSource applied to the x-axis.',
    defaultValue: 'primary[0]',
    isRequired: 'true'
  }, {
    name: 'y',
    type: '[number | string]',
    desc: 'Specify the dataSource applied to the y-axis.',
    defaultValue: 'primary[1:]',
    isRequired: 'true'
  }, {
    name: 'y2',
    type: '[number | string]',
    desc: "Specify the dataSource applied to the y2-axis.",
    isRequired: 'false'
  }, {
    name: 'annotationX',
    type: '[time | number | string]',
    desc: 'Specify the dataSource applied to the event annotation on the x-axis.',
    isRequired: 'false'
  }, {
    name: 'annotationLabel',
    type: '[string]',
    desc: 'Specify the message displayed on the annotation label.',
    isRequired: 'false'
  }, {
    name: 'annotationColor',
    type: '[string]',
    desc: "Assign a color to an annotation event. For example, \"0xffff00\".",
    isRequired: 'false'
  }],
  events: [{
    name: 'point.click',
    desc: 'trigger when user clicks a data point'
  }, {
    name: 'legend.click',
    desc: 'trigger when user clicks a chart legend'
  }, {
    name: 'range.select',
    desc: 'trigger when user makes a selection'
  }]
});
// EXTERNAL MODULE: external "@splunk/visualizations-shared/schemaUtils"
var schemaUtils_ = __webpack_require__(2);

// CONCATENATED MODULE: ./src/visualizations/Line/optionsSchema.js

/* harmony default export */ var optionsSchema = ({
  'annotation.categoryColors': {
    description: "Specify mapping of Hex code for colors to annotation categories. For example: {'Server Stop':'#FF0000','Server Start':'00FF00'}. Note: Option type 'string' has been deprecated.",
    type: ['object', 'string']
  },
  'axisLabelsX.maxLabelParts': {
    default: 3,
    minimum: 1,
    description: 'Specify the maximum number of time-parts that a tick label will have (the 3 possible parts are year, month, time).',
    type: 'number'
  },
  'axisLabelsX.axisVisibility': {
    default: 'hide',
    description: 'Specify whether to show the x-axis.',
    pattern: Object(schemaUtils_["getPattern"])(['show', 'hide']),
    type: 'string'
  },
  'axisLabelsY.axisVisibility': {
    default: 'hide',
    description: 'Specify whether the y-axis line is visible.',
    pattern: Object(schemaUtils_["getPattern"])(['show', 'hide']),
    type: 'string'
  },
  'axisLabelsY2.axisVisibility': {
    default: 'hide',
    description: 'Specify whether the y2-axis line is visible.',
    pattern: Object(schemaUtils_["getPattern"])(['show', 'hide']),
    type: 'string'
  },
  'axisLabelsY.extendsAxisRange': {
    default: true,
    description: 'Specify whether the y-axis should be extended to include whole major tick marks.',
    type: 'boolean'
  },
  'axisLabelsX.majorLabelStyle.rotation': {
    default: '0',
    description: 'Specify the rotation of the x-axis label in degrees.',
    enum: [-90, -45, 0, 45, 90],
    type: 'number'
  },
  'axisLabelsY2.integerUnits': {
    default: false,
    description: 'Specify whether the major unit of the y2-axis is rounded to the nearest integer.',
    type: 'boolean'
  },
  'axisLabelsX.majorLabelVisibility': {
    default: 'auto',
    description: 'Specify whether labels for major tick marks are visible on the x-axis.',
    pattern: Object(schemaUtils_["getPattern"])(['auto', 'show', 'hide']),
    type: 'string'
  },
  'axisLabelsY.majorLabelVisibility': {
    default: 'auto',
    description: 'Specify whether labels for major tick marks are visible on the y-axis.',
    pattern: Object(schemaUtils_["getPattern"])(['auto', 'show', 'hide']),
    type: 'string'
  },
  'axisLabelsY2.majorLabelVisibility': {
    default: 'auto',
    description: 'Specify whether labels for major tick marks are visible on the y2-axis.',
    pattern: Object(schemaUtils_["getPattern"])(['auto', 'show', 'hide']),
    type: 'string'
  },
  'axisLabelsX.majorTickSize': {
    default: 6,
    description: 'Specify the size, in pixels, of major tick marks on the x-axis.',
    type: 'number'
  },
  'axisLabelsY.majorTickSize': {
    default: 6,
    description: 'Specify the size, in pixels, of major tick marks on the y-axis.',
    type: 'number'
  },
  'axisLabelsY2.majorTickSize': {
    default: 6,
    description: 'Specify the size, in pixels, of major tick marks on the y2-axis.',
    type: 'number'
  },
  'axisLabelsY.minorTickSize': {
    default: 6,
    description: 'Specify the size, in pixels, of minor tick marks on the y-axis.',
    type: 'number'
  },
  'axisLabelsY2.minorTickSize': {
    default: 6,
    description: 'Specify the size, in pixels, of minor tick marks on the y2-axis.',
    type: 'number'
  },
  'axisLabelsX.majorTickVisibility': {
    default: 'hide',
    description: 'Specify whether major tick marks on the x-axis are visible.',
    pattern: Object(schemaUtils_["getPattern"])(['auto', 'show', 'hide']),
    type: 'string'
  },
  'axisLabelsY.majorTickVisibility': {
    default: 'hide',
    description: 'Specify whether major tick marks on the y-axis are visible.',
    pattern: Object(schemaUtils_["getPattern"])(['auto', 'show', 'hide']),
    type: 'string'
  },
  'axisLabelsY2.majorTickVisibility': {
    default: 'hide',
    description: 'Specify whether major tick marks on the y2-axis are visible.',
    pattern: Object(schemaUtils_["getPattern"])(['auto', 'show', 'hide']),
    type: 'string'
  },
  'axisLabelsY.majorUnit': {
    default: 'auto',
    description: 'Specify the spacing unit between major tick marks along the numeric y-axis.',
    type: ['number', 'string']
  },
  'axisLabelsY2.majorUnit': {
    default: 'auto',
    description: 'Specify the spacing unit between major tick marks along the numeric y2-axis.',
    type: ['number', 'string']
  },
  'axisLabelsY.minorTickVisibility': {
    default: 'auto',
    description: 'Specify whether minor tick marks on the y-axis are visible.',
    pattern: Object(schemaUtils_["getPattern"])(['auto', 'show', 'hide']),
    type: 'string'
  },
  'axisLabelsY2.minorTickVisibility': {
    default: 'auto',
    description: 'Specify whether minor tick marks on the y2-axis are visible.',
    pattern: Object(schemaUtils_["getPattern"])(['auto', 'show', 'hide']),
    type: 'string'
  },
  'axisY.abbreviation': {
    default: 'none',
    description: 'Specify whether to abbreviate large y-axis values with the closest SI prefix.',
    pattern: Object(schemaUtils_["getPattern"])(['none', 'auto']),
    type: 'string'
  },
  'axisY2.abbreviation': {
    default: 'none',
    description: 'Specify whether to abbreviate large y2-axis values with the closest SI prefix.',
    pattern: Object(schemaUtils_["getPattern"])(['none', 'auto']),
    type: 'string'
  },
  'axisY.includeZero': {
    default: false,
    description: 'Specify whether the y-axis range includes zero.',
    type: 'boolean'
  },
  'axisY2.includeZero': {
    default: false,
    description: 'Specify whether the y2-axis range includes zero.',
    type: 'boolean'
  },
  'axisY.maximumNumber': {
    default: 'auto',
    description: 'Specify the maximum number for the visible y-axis range.',
    type: ['number', 'string']
  },
  'axisY2.maximumNumber': {
    default: 'auto',
    description: 'Specify the maximum number for the visible y2-axis range.',
    type: ['number', 'string']
  },
  'axisY.minimumNumber': {
    default: 'auto',
    description: 'Specify the minimum number for the visible y-axis range.',
    type: ['number', 'string']
  },
  'axisY2.minimumNumber': {
    default: 'auto',
    description: 'Specify the minimum number for the visible y2-axis range.',
    type: ['number', 'string']
  },
  'axisY.scale': {
    default: 'linear',
    description: 'Specify the type of scale that applies to a numerical y-axis.',
    pattern: Object(schemaUtils_["getPattern"])(['linear', 'log']),
    type: 'string'
  },
  'axisY2.scale': {
    default: 'linear',
    description: 'Specify the type of scale that applies to a numerical y2-axis.',
    pattern: Object(schemaUtils_["getPattern"])(['linear', 'log']),
    type: 'string'
  },
  'axisTitleX.text': {
    description: 'Specify the title of the x-axis.',
    type: 'string'
  },
  'axisTitleY.text': {
    description: 'Specify the title of the y-axis.',
    type: 'string'
  },
  'axisTitleY2.text': {
    description: 'Specify the title of the y2-axis.',
    type: 'string'
  },
  'axisTitleX.visibility': {
    default: 'visible',
    description: 'Specify whether to show the title of the x-axis.',
    pattern: Object(schemaUtils_["getPattern"])(['visible', 'collapsed']),
    type: 'string'
  },
  'axisTitleY.visibility': {
    default: 'visible',
    description: 'Specify whether to show the title of the y-axis.',
    pattern: Object(schemaUtils_["getPattern"])(['visible', 'collapsed']),
    type: 'string'
  },
  'axisTitleY2.visibility': {
    default: 'visible',
    description: 'Specify whether to show the title of the y2-axis.',
    pattern: Object(schemaUtils_["getPattern"])(['visible', 'collapsed']),
    type: 'string'
  },
  'chart.resultTruncationLimit': {
    default: 50000,
    description: 'Specify the number of data points rendered in a chart.',
    type: 'number'
  },
  backgroundColor: {
    description: 'Specify the Hex code for color used for a background. For example: "#0000FF".',
    pattern: schemaUtils_["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  fontColor: {
    description: 'Specify the Hex code for color used for fonts (axis labels, legends).For example: "#0000FF".',
    pattern: schemaUtils_["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  foregroundColor: {
    description: 'Specify the Hex code for color used for a foreground. For example: "#0000FF".',
    pattern: schemaUtils_["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  seriesColors: {
    description: "Specify the Hex code for colors used for a series. For example, ['#FF0000', '#0000FF', '#008000'].\n            The default for light and dark mode is ['#1E93C6', '#F2B827', '#D6563C', '#6A5C9E', '#31A35F'].\n            The default for SCP mode is ['#A9F5E7', '#A870EF',  '#1E6271', '#45D4BA', '#602CA1',  '#9AE6F7', '#6CD0F0', '#2F8AA7',  '#422879', '#F29BAC', '#E85B79', '#C6335F',  '#FDAF93', '#FB865C', '#E9643A',  '#7EEFDA', '#26AA92', '#207865', '#C093F9', '#8747DA',  '#4EB2D2', '#912344',  '#AD3F20', '#D44C20', '#FFC34E',  '#95651D',  '#C0891E', '#ECAE11', '#FCD9A4', '#78062A'].\n            Note: Option type 'string' has been deprecated.",
    type: ['array', 'string'],
    items: {
      type: 'string'
    }
  },
  fieldColors: {
    description: "Specify the Hex code for color used for a field. For example: {'count': '#008000', 'percent': '#FFA500'}. Note: Option type 'string' has been deprecated.",
    type: ['object', 'string']
  },
  'chart.showDataLabels': {
    default: 'none',
    description: 'Specify whether bar, line, area, or column charts should display no labels, all labels, or only the min and max labels.',
    pattern: Object(schemaUtils_["getPattern"])(['none', 'all', 'minmax']),
    type: 'string'
  },
  'data.fieldListMode': {
    default: 'hide_show',
    description: 'Specify the order in which to apply the fieldShowList and fieldHideList filters.',
    pattern: Object(schemaUtils_["getPattern"])(['show_hide', 'hide_show']),
    type: 'string'
  },
  'data.fieldShowList': {
    description: "Specify a list of fields to show in the results. For example: ['percent', 'count']. Note: Option type 'string' has been deprecated.",
    type: ['array', 'string'],
    items: {
      type: 'string'
    }
  },
  'data.fieldHideList': {
    description: "Specify a list of fields to hide in the results. For example: ['percent', 'count']. Note: Option type 'string' has been deprecated.",
    type: ['array', 'string'],
    items: {
      type: 'string'
    }
  },
  'gridLinesX.showMajorLines': {
    default: true,
    description: 'Specify whether major grid lines are visible on the x-axis.',
    type: 'boolean'
  },
  'gridLinesY.showMajorLines': {
    default: true,
    description: 'Specify whether major grid lines are visible on the y-axis.',
    type: 'boolean'
  },
  'gridLinesY2.showMajorLines': {
    default: true,
    description: 'Specify whether major grid lines are visible on the y2-axis.',
    type: 'boolean'
  },
  'gridLinesY.showMinorLines': {
    default: false,
    description: 'Specify whether minor grid lines are visible on the y-axis.',
    type: 'boolean'
  },
  'gridLinesY2.showMinorLines': {
    default: false,
    description: 'Specify whether minor grid lines are visible on y2-axis.',
    type: 'boolean'
  },
  'layout.splitSeries': {
    default: false,
    description: 'Set to "true" to split a multi-series chart into separate charts that are stacked from top to bottom; one for each series.',
    type: 'boolean'
  },
  'layout.splitSeries.allowIndependentYRanges': {
    default: false,
    description: 'Specify whether split series charts have independent y-ranges.',
    type: 'boolean'
  },
  'legend.labels': {
    description: "Specify a list of labels to pre-populate the legend. For example: ['percent', 'count']. Note: Option type 'string' has been deprecated.",
    type: ['array', 'string'],
    items: {
      type: 'string'
    }
  },
  'legend.labelStyle.overflowMode': {
    default: 'ellipsisMiddle',
    description: 'Specify how to display legend labels when they overflow the layout boundaries by replacing overflow text with an ellipsis.',
    pattern: Object(schemaUtils_["getPattern"])(['ellipsisEnd', 'ellipsisMiddle', 'ellipsisStart', 'ellipsisNone']),
    type: 'string'
  },
  'legend.mode': {
    default: 'standard',
    description: 'Specify visual and behavioral settings for the tooltip and legend. "seriesCompare" is useful when comparing series.',
    pattern: Object(schemaUtils_["getPattern"])(['standard', 'seriesCompare']),
    type: 'string'
  },
  'legend.placement': {
    default: 'right',
    description: 'Specify the location of the legend on the panel.',
    pattern: Object(schemaUtils_["getPattern"])(['right', 'left', 'top', 'bottom', 'none']),
    type: 'string'
  },
  'axisY2.enabled': {
    default: false,
    description: 'Enable a y2-axis for chart overlays.',
    type: 'boolean'
  },
  'axisY2.fields': {
    description: 'Specify a field that should be mapped to a second y-axis for chart overlays.',
    type: 'string'
  },
  'chart.overlayFields': {
    description: 'Specify a field or a space/comma-delimited list of fields that should be mapped to the y2-axis.',
    type: 'string'
  },
  'chart.nullValueMode': {
    default: 'gaps',
    description: 'Specify how area and line charts handle null values.',
    pattern: Object(schemaUtils_["getPattern"])(['gaps', 'zero', 'connect']),
    type: 'string'
  },
  'chart.showMarkers': {
    default: true,
    description: 'Specify whether to draw markers in line charts.',
    type: 'boolean'
  },
  fieldDashStyles: {
    description: "Specify a dash style to use for each field. For example: {'count': 'longDashDot', 'percent': 'longDashDotDot'}.'\n                      Valid values: 'solid', 'shortDash', 'shortDot', 'shortDashDot', 'shortDashDotDot', 'dot', 'dash',\n                      'longDash', 'dashDot', 'longDashDot', 'longDashDotDot'. Note: Option type 'string' has been deprecated.",
    type: ['object', 'string']
  },
  lineDashStyle: {
    default: 'solid',
    description: 'Specify a dash style for all line series in the chart.',
    pattern: Object(schemaUtils_["getPattern"])(['solid', 'shortDash', 'shortDot', 'shortDashDot', 'shortDashDotDot', 'dot', 'dash', 'longDash', 'dashDot', 'longDashDot', 'longDashDotDot']),
    type: 'string'
  },
  lineWidth: {
    default: 2,
    description: 'Specify the line width, in pixels, for all line series.',
    type: 'number'
  }
});
// CONCATENATED MODULE: ./src/visualizations/Line/docs/index.jsx





















































































/* harmony default export */ var docs = __webpack_exports__["default"] = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(VisualizationDocPage_default.a, {
    title: "Line",
    examplesSection: [/*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Basic Line",
      key: "basic",
      code: Basic,
      example: examples_Basic
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Annotation",
      key: "annotation",
      code: Annotation,
      example: examples_Annotation
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Annotation Category Color",
      key: "annotationcolor",
      code: AnnotationColor,
      example: examples_AnnotationColor
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Axis Y and X Title specified",
      key: "titlespecified",
      code: TitleSpecified,
      example: examples_TitleSpecified
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Axis Y and X Title not visible",
      key: "titlenotvisible",
      code: TitleNotVisible,
      example: examples_TitleNotVisible
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Series Color: Red and Blue",
      key: "seriescolors",
      code: SeriesColors,
      example: examples_SeriesColors
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Field colors: Total Count - Green, Percent - Orange",
      key: "fieldcolors",
      code: FieldColors,
      example: examples_FieldColors
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Background Color - Green",
      key: "backgroundcolor",
      code: BackgroundColor,
      example: examples_BackgroundColor
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Foreground Color - Red",
      key: "foregroundcolor",
      code: ForegroundColor,
      example: examples_ForegroundColor
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Font Color - Blue",
      key: "fontcolor",
      code: FontColor,
      example: examples_FontColor
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Split Series - True",
      key: "splitseries",
      code: SplitSeries,
      example: examples_SplitSeries
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Split Series and Split Series Independent - True",
      key: "splitseriesindependent",
      code: SplitSeriesIndependent,
      example: examples_SplitSeriesIndependent
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Line Dash Style - shortDashDot",
      key: "linedashstyle",
      code: LineDashStyle,
      example: examples_LineDashStyle
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Field Dash Style. Count - dash, Percent - dashDot",
      key: "fielddashstyle",
      code: FieldDashStyle,
      example: examples_FieldDashStyle
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Line Width - 5",
      key: "linewidth",
      code: LineWidth,
      example: examples_LineWidth
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Axis-Y Abbreviation - On",
      key: "axisyabbreviation",
      code: AxisYAbbreviation,
      example: examples_AxisYAbbreviation
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Axis-Y Scale - Log",
      key: "axisyscale",
      code: AxisYScale,
      example: examples_AxisYScale
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Axis-Y Include Zero - True",
      key: "includezero",
      code: IncludeZero,
      example: examples_IncludeZero
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Axis-Y Extend Axis Range - False",
      key: "extendrange",
      code: ExtendRange,
      example: examples_ExtendRange
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Axis-Y Integer Units - True",
      key: "integerunits",
      code: IntegerUnits,
      example: examples_IntegerUnits
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Axis-X - Show",
      key: "axisxlabelvisiblility",
      code: AxisXLabelVisiblility,
      example: examples_AxisXLabelVisiblility
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Axis-Y - Show",
      key: "axisylabelvisiblility",
      code: AxisYLabelVisiblility,
      example: examples_AxisYLabelVisiblility
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Axis-X Major Tick Labels - Hide",
      key: "axisxmajorlabelvisiblility",
      code: AxisXMajorLabelVisiblility,
      example: examples_AxisXMajorLabelVisiblility
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Axis-Y Major Tick Labels - Hide",
      key: "axisymajorlabelvisiblility",
      code: AxisYMajorLabelVisiblility,
      example: examples_AxisYMajorLabelVisiblility
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Axis-Y major grid - False, Axis-X major grid - True",
      key: "majorgrid",
      code: MajorGrid,
      example: examples_MajorGrid
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Axis-Y minor grid - True",
      key: "minorgrid",
      code: MinorGrid,
      example: examples_MinorGrid
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Axis-Y major, minor ticks - Show (15, 10), Axis-X - Hide",
      key: "ticks",
      code: Ticks,
      example: examples_Ticks
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Null Value Mode - Zero",
      key: "nullvaluemode",
      code: NullValueMode,
      example: examples_NullValueMode
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Legend Mode - Series Compare",
      key: "legendmode",
      code: LegendMode,
      example: examples_LegendMode
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Very Long Legend Labels, Legend Style Mode - End",
      key: "legendstylemode",
      code: LegendStyleMode,
      example: examples_LegendStyleMode
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "New Legend Labels, Legend Labels - Top",
      key: "legend",
      code: Legend,
      example: examples_Legend
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Field Show List - Percent",
      key: "fieldshowlist",
      code: FieldShowList,
      example: examples_FieldShowList
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Data Labels - All",
      key: "datalabels",
      code: DataLabels,
      example: examples_DataLabels
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Show Markers - False",
      key: "lineMarkers",
      code: LineMarkers,
      example: examples_LineMarkers
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Chart Overlay - On, Axis-Y2 Title specified, Abbreviation - On",
      key: "chartoverlay",
      code: ChartOverlay,
      example: examples_ChartOverlay
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Multi Series - Explicit encoding",
      key: "multiseriesexplicit",
      code: MultiSeriesExplicit,
      example: examples_MultiSeriesExplicit
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Multi Series - Dynamic encoding",
      key: "multiseriesdynamic",
      code: MultiSeriesDynamic,
      example: examples_MultiSeriesDynamic
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Multi Y Axes",
      key: "multiyaxes",
      code: MultiYAxes,
      example: examples_MultiYAxes
    })],
    encodingSection: /*#__PURE__*/external_react_default.a.createElement(EncodingDoc_default.a, {
      encoding: definition.encoding
    }),
    optionSection: /*#__PURE__*/external_react_default.a.createElement(OptionsDoc_default.a, {
      options: optionsSchema
    }),
    eventSection: /*#__PURE__*/external_react_default.a.createElement(EventsDoc_default.a, {
      events: definition.events,
      Visualization: Line_default.a,
      dsState: {
        primary: {
          requestParams: {
            offset: 0,
            count: 20
          },
          data: {
            fields: [{
              name: '_time',
              groupby_rank: '0'
            }, {
              name: 'count'
            }, {
              name: '_span'
            }],
            columns: [['2018-05-02T18:15:46.000-07:00', '2018-05-02T18:15:47.000-07:00', '2018-05-02T18:15:48.000-07:00', '2018-05-02T18:15:49.000-07:00', '2018-05-02T18:15:50.000-07:00'], ['2', '10', '13', '60', '43', '85'], ['1', '1', '1', '1', '1', '1']]
          },
          meta: {
            totalCount: 20
          }
        }
      }
    })
  });
});

/***/ }),

/***/ 6:
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-visualizations/Line");

/***/ }),

/***/ 9:
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/VisualizationDocPage");

/***/ })

/******/ });
//# sourceMappingURL=Line.js.map