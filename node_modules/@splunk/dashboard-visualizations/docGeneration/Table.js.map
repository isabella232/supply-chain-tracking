{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"react\"","webpack:///external \"@splunk/react-docs/DocExample\"","webpack:///external \"@splunk/visualizations-shared/schemaUtils\"","webpack:///external \"@splunk/visualizations-shared/VisualizationDocPage\"","webpack:///external \"@splunk/dashboard-visualizations/common/OptionsDoc\"","webpack:///external \"@splunk/dashboard-visualizations/common/EventsDoc\"","webpack:///external \"lodash\"","webpack:///external \"@splunk/dashboard-visualizations/Table\"","webpack:///external \"prop-types\"","webpack:///external \"@splunk/visualizations-shared/console\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/assertThisInitialized\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"@splunk/react-ui/JSONTree\"","webpack:///external \"@splunk/react-ui/Heading\"","webpack:///external \"lodash/range\"","webpack:///external \"@splunk/react-ui/Table\"","webpack:///./src/visualizations/Table/docs/examples/Basic.jsx?e25b","webpack:///./src/visualizations/Table/docs/examples/FixSize.jsx?a594","webpack:///./src/visualizations/Table/docs/examples/RowNumber.jsx?f5bf","webpack:///./src/visualizations/Table/docs/examples/NumberFormat.jsx?5456","webpack:///./src/visualizations/Table/docs/examples/Overlay.jsx?6b06","webpack:///./src/visualizations/Table/docs/examples/Sparkline.jsx?581a","webpack:///./src/visualizations/Table/docs/examples/RequestParams.jsx?acd1","webpack:///./src/visualizations/Table/docs/examples/CustomCellRenderer.jsx?0cb3","webpack:///./src/visualizations/Table/docs/examples/ShowHeader.jsx?e6b8","webpack:///./src/visualizations/Table/docs/examples/HeaderBackgroundColor.jsx?98ca","webpack:///./src/visualizations/Table/docs/examples/HeaderTextColor.jsx?f449","webpack:///./src/visualizations/Table/docs/examples/RowBackgroundColor.jsx?1511","webpack:///./src/visualizations/Table/docs/examples/RowTextColor.jsx?24c6","webpack:///./src/visualizations/Table/docs/examples/Basic.jsx","webpack:///./src/visualizations/Table/docs/examples/FixSize.jsx","webpack:///./src/visualizations/Table/docs/examples/RowNumber.jsx","webpack:///./src/visualizations/Table/docs/examples/NumberFormat.jsx","webpack:///./src/visualizations/Table/docs/examples/Overlay.jsx","webpack:///./src/visualizations/Table/docs/examples/Sparkline.jsx","webpack:///./src/visualizations/Table/docs/examples/RequestParams.jsx","webpack:///./src/visualizations/Table/docs/examples/CustomCellRenderer.jsx","webpack:///./src/visualizations/Table/docs/examples/ShowHeader.jsx","webpack:///./src/visualizations/Table/docs/examples/HeaderBackgroundColor.jsx","webpack:///./src/visualizations/Table/docs/examples/HeaderTextColor.jsx","webpack:///./src/visualizations/Table/docs/examples/RowBackgroundColor.jsx","webpack:///./src/visualizations/Table/docs/examples/RowTextColor.jsx","webpack:///./src/visualizations/Table/docs/definition.js","webpack:///./src/visualizations/Table/optionsSchema.js","webpack:///./src/visualizations/Table/docs/index.jsx"],"names":["columns","primary","requestParams","offset","count","data","fields","name","range","meta","totalCount","rowNumbers","numberPrecision","useThousandSeparators","unit","unitPosition","outcome","dataOverlayMode","RequestParams","newRequestParams","dataSources","handleRequestParams","Component","CustomCell","value","cellOptions","fieldOptions","onCellClick","console","type","align","style","backgroundColor","color","T","object","showHeader","headerBackgroundColor","headerTextColor","rowBackgroundColorEven","rowBackgroundColorOdd","rowTextColorOdd","rowTextColorEven","events","desc","description","pattern","default","maximum","minimum","getPattern","BasicExample","FixSizeExample","RequestParamsExample","RowNumberExample","NumberFormatExample","OverlayExample","SparklineExample","CustomCellRendererExample","ShowHeaderExample","HeaderBackgroundColorExample","HeaderTextColorExample","RowBackgroundColorExample","RowTextColorExample","optionsSchema","doc"],"mappings":"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","file":"Table.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 64);\n","module.exports = require(\"react\");","module.exports = require(\"@splunk/react-docs/DocExample\");","module.exports = require(\"@splunk/visualizations-shared/schemaUtils\");","module.exports = require(\"@splunk/visualizations-shared/VisualizationDocPage\");","module.exports = require(\"@splunk/dashboard-visualizations/common/OptionsDoc\");","module.exports = require(\"@splunk/dashboard-visualizations/common/EventsDoc\");","module.exports = require(\"lodash\");","module.exports = require(\"@splunk/dashboard-visualizations/Table\");","module.exports = require(\"prop-types\");","module.exports = require(\"@splunk/visualizations-shared/console\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@splunk/react-ui/JSONTree\");","module.exports = require(\"@splunk/react-ui/Heading\");","module.exports = require(\"lodash/range\");","module.exports = require(\"@splunk/react-ui/Table\");","export default \"import { range } from 'lodash';\\nimport React from 'react';\\nimport Table from '@splunk/dashboard-visualizations/Table';\\n\\nexport default () => (\\n    <Table\\n        options={{}}\\n        encoding={{\\n            columns: ['primary.foo', 'primary.bar'],\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\\n                    columns: [range(5), range(5)],\\n                },\\n                meta: { totalCount: 100 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import { range } from 'lodash';\\nimport React from 'react';\\nimport Table from '@splunk/dashboard-visualizations/Table';\\n\\nexport default () => (\\n    <Table\\n        width={800}\\n        height={200}\\n        options={{}}\\n        encoding={{\\n            columns: ['primary.foo', 'primary.bar'],\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\\n                    columns: [range(10), range(10)],\\n                },\\n                meta: { totalCount: 100 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import { range } from 'lodash';\\nimport React from 'react';\\nimport Table from '@splunk/dashboard-visualizations/Table';\\n\\nexport default () => (\\n    <Table\\n        options={{\\n            rowNumbers: true,\\n        }}\\n        encoding={{\\n            columns: ['primary.foo', 'primary.bar'],\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\\n                    columns: [range(5), range(5)],\\n                },\\n                meta: { totalCount: 100 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import React from 'react';\\nimport Table from '@splunk/dashboard-visualizations/Table';\\n\\nexport default () => (\\n    <Table\\n        options={{\\n            numberPrecision: 3,\\n            useThousandSeparators: false,\\n            unit: '$$',\\n            unitPosition: 'after',\\n            fields: {\\n                outcome: {\\n                    unit: 'BitCoin',\\n                    unitPosition: 'before',\\n                },\\n            },\\n        }}\\n        encoding={{\\n            columns: ['primary.income', 'primary.outcome'],\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'income' }, { name: 'outcome' }],\\n                    columns: [\\n                        [10000, 24000, 12128192],\\n                        [50000, 24000, 127828987],\\n                    ],\\n                },\\n                meta: { totalCount: 10 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import { range } from 'lodash';\\nimport React from 'react';\\nimport Table from '@splunk/dashboard-visualizations/Table';\\n\\nexport default () => (\\n    <Table\\n        options={{\\n            dataOverlayMode: 'heatmap',\\n        }}\\n        encoding={{\\n            columns: ['primary.income', 'primary.outcome'],\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'income' }, { name: 'outcome' }],\\n                    columns: [range(10), range(10, 20)],\\n                },\\n                meta: { totalCount: 30 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import { range } from 'lodash';\\nimport React from 'react';\\nimport Table from '@splunk/dashboard-visualizations/Table';\\n\\nexport default () => (\\n    <Table\\n        options={{\\n            dataOverlayMode: 'highlow',\\n        }}\\n        encoding={{\\n            columns: ['primary.foo', 'primary.sparkline'],\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'foo' }, { name: 'sparkline' }],\\n                    columns: [\\n                        range(10),\\n                        range(10).map(() => [\\n                            '##__SPARKLINE__##',\\n                            '0',\\n                            '0',\\n                            '0',\\n                            '0',\\n                            '0',\\n                            '29279',\\n                            '106078',\\n                            '175560',\\n                            '0',\\n                            '0',\\n                            '0',\\n                        ]),\\n                    ],\\n                },\\n                meta: { totalCount: 30 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import { range } from 'lodash';\\nimport React, { Component } from 'react';\\nimport JSONTree from '@splunk/react-ui/JSONTree';\\nimport Table from '@splunk/dashboard-visualizations/Table';\\nimport Heading from '@splunk/react-ui/Heading';\\n\\nclass RequestParams extends Component {\\n    constructor(props, context) {\\n        super(props, context);\\n        this.state = {\\n            requestParams: {\\n                count: 10,\\n                offset: 0,\\n            },\\n        };\\n    }\\n\\n    handleRequestParams = (type, newRequestParams) => {\\n        this.setState({\\n            requestParams: newRequestParams,\\n        });\\n    };\\n\\n    render() {\\n        const { requestParams } = this.state;\\n        const dataSources = {\\n            primary: {\\n                requestParams,\\n                data: {\\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\\n                    columns: [\\n                        range(requestParams.offset, requestParams.offset + 10),\\n                        range(requestParams.offset, requestParams.offset + 10),\\n                    ],\\n                },\\n                meta: { totalCount: 200 },\\n            },\\n        };\\n        return (\\n            <div>\\n                <div>\\n                    <Heading level={4}>RequestParams</Heading>\\n                    <JSONTree json={requestParams} expandChildren />\\n                </div>\\n                <Table\\n                    options={{}}\\n                    encoding={{\\n                        columns: ['primary.foo', 'primary.bar'],\\n                    }}\\n                    dataSources={dataSources}\\n                    onRequestParamsChange={this.handleRequestParams}\\n                />\\n            </div>\\n        );\\n    }\\n}\\n\\nexport default RequestParams;\\n\";","export default \"import range from 'lodash/range';\\nimport React from 'react';\\nimport T from 'prop-types';\\nimport console from '@splunk/visualizations-shared/console';\\nimport Table from '@splunk/dashboard-visualizations/Table';\\nimport SuiTable from '@splunk/react-ui/Table';\\n\\n/**\\n * A custom cell renderer react component\\n */\\nconst CustomCell = ({ value, cellOptions, fieldOptions, onCellClick }) => {\\n    console.log('cellOptions', cellOptions);\\n    console.log('fieldOptions', fieldOptions);\\n    const { type, align } = fieldOptions;\\n    const style = {\\n        backgroundColor: type === 'number' && value % 2 === 0 ? 'red' : 'green',\\n        color: 'black',\\n    };\\n    return (\\n        <SuiTable.Cell style={style} align={align} test-cell-type=\\\"string\\\" onClick={onCellClick}>\\n            {`value=${value}`}\\n        </SuiTable.Cell>\\n    );\\n};\\n\\nCustomCell.propTypes = {\\n    onCellClick: T.func,\\n    value: T.oneOfType([T.number, T.string, T.array]).isRequired,\\n    cellOptions: T.object,\\n    fieldOptions: T.object,\\n};\\n\\n/**\\n * indicate whether this cell renderer can be used for particular cell\\n */\\nCustomCell.canRender = (field, fieldOptions, value) => {\\n    console.log('field', field);\\n    console.log('fieldOptions', fieldOptions);\\n    console.log('field value', value);\\n    // always use this renderer\\n    return true;\\n};\\n\\nexport default () => (\\n    <Table\\n        options={{}}\\n        encoding={{\\n            columns: 'primary[0]',\\n        }}\\n        cellRenderers={[CustomCell]}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: ['count'],\\n                    columns: [range(10)],\\n                },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import { range } from 'lodash';\\nimport React from 'react';\\nimport Table from '@splunk/dashboard-visualizations/Table';\\n\\nexport default () => (\\n    <Table\\n        options={{\\n            showHeader: false,\\n        }}\\n        encoding={{\\n            columns: ['primary.foo', 'primary.bar'],\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\\n                    columns: [range(5), range(5)],\\n                },\\n                meta: { totalCount: 100 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import { range } from 'lodash';\\nimport React from 'react';\\nimport Table from '@splunk/dashboard-visualizations/Table';\\n\\nexport default () => (\\n    <Table\\n        options={{\\n            headerBackgroundColor: '#FF0000',\\n        }}\\n        encoding={{\\n            columns: ['primary.foo', 'primary.bar'],\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\\n                    columns: [range(5), range(5)],\\n                },\\n                meta: { totalCount: 100 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import { range } from 'lodash';\\nimport React from 'react';\\nimport Table from '@splunk/dashboard-visualizations/Table';\\n\\nexport default () => (\\n    <Table\\n        options={{\\n            headerTextColor: '#FF0000',\\n        }}\\n        encoding={{\\n            columns: ['primary.foo', 'primary.bar'],\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\\n                    columns: [range(5), range(5)],\\n                },\\n                meta: { totalCount: 100 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import { range } from 'lodash';\\nimport React from 'react';\\nimport Table from '@splunk/dashboard-visualizations/Table';\\n\\nexport default () => (\\n    <Table\\n        options={{\\n            rowBackgroundColorEven: '#FFA500',\\n            rowBackgroundColorOdd: '#ADD8E6',\\n        }}\\n        encoding={{\\n            columns: ['primary.foo', 'primary.bar'],\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\\n                    columns: [range(5), range(5)],\\n                },\\n                meta: { totalCount: 100 },\\n            },\\n        }}\\n    />\\n);\\n\";","export default \"import { range } from 'lodash';\\nimport React from 'react';\\nimport Table from '@splunk/dashboard-visualizations/Table';\\n\\nexport default () => (\\n    <Table\\n        options={{\\n            rowTextColorOdd: '#0000FF',\\n            rowTextColorEven: '#FF0000',\\n        }}\\n        encoding={{\\n            columns: ['primary.foo', 'primary.bar'],\\n        }}\\n        dataSources={{\\n            primary: {\\n                requestParams: { offset: 0, count: 20 },\\n                data: {\\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\\n                    columns: [range(5), range(5)],\\n                },\\n                meta: { totalCount: 100 },\\n            },\\n        }}\\n    />\\n);\\n\";","import { range } from 'lodash';\nimport React from 'react';\nimport Table from '@splunk/dashboard-visualizations/Table';\n\nexport default () => (\n    <Table\n        options={{}}\n        encoding={{\n            columns: ['primary.foo', 'primary.bar'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\n                    columns: [range(5), range(5)],\n                },\n                meta: { totalCount: 100 },\n            },\n        }}\n    />\n);\n","import { range } from 'lodash';\nimport React from 'react';\nimport Table from '@splunk/dashboard-visualizations/Table';\n\nexport default () => (\n    <Table\n        width={800}\n        height={200}\n        options={{}}\n        encoding={{\n            columns: ['primary.foo', 'primary.bar'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\n                    columns: [range(10), range(10)],\n                },\n                meta: { totalCount: 100 },\n            },\n        }}\n    />\n);\n","import { range } from 'lodash';\nimport React from 'react';\nimport Table from '@splunk/dashboard-visualizations/Table';\n\nexport default () => (\n    <Table\n        options={{\n            rowNumbers: true,\n        }}\n        encoding={{\n            columns: ['primary.foo', 'primary.bar'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\n                    columns: [range(5), range(5)],\n                },\n                meta: { totalCount: 100 },\n            },\n        }}\n    />\n);\n","import React from 'react';\nimport Table from '@splunk/dashboard-visualizations/Table';\n\nexport default () => (\n    <Table\n        options={{\n            numberPrecision: 3,\n            useThousandSeparators: false,\n            unit: '$$',\n            unitPosition: 'after',\n            fields: {\n                outcome: {\n                    unit: 'BitCoin',\n                    unitPosition: 'before',\n                },\n            },\n        }}\n        encoding={{\n            columns: ['primary.income', 'primary.outcome'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'income' }, { name: 'outcome' }],\n                    columns: [\n                        [10000, 24000, 12128192],\n                        [50000, 24000, 127828987],\n                    ],\n                },\n                meta: { totalCount: 10 },\n            },\n        }}\n    />\n);\n","import { range } from 'lodash';\nimport React from 'react';\nimport Table from '@splunk/dashboard-visualizations/Table';\n\nexport default () => (\n    <Table\n        options={{\n            dataOverlayMode: 'heatmap',\n        }}\n        encoding={{\n            columns: ['primary.income', 'primary.outcome'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'income' }, { name: 'outcome' }],\n                    columns: [range(10), range(10, 20)],\n                },\n                meta: { totalCount: 30 },\n            },\n        }}\n    />\n);\n","import { range } from 'lodash';\nimport React from 'react';\nimport Table from '@splunk/dashboard-visualizations/Table';\n\nexport default () => (\n    <Table\n        options={{\n            dataOverlayMode: 'highlow',\n        }}\n        encoding={{\n            columns: ['primary.foo', 'primary.sparkline'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'foo' }, { name: 'sparkline' }],\n                    columns: [\n                        range(10),\n                        range(10).map(() => [\n                            '##__SPARKLINE__##',\n                            '0',\n                            '0',\n                            '0',\n                            '0',\n                            '0',\n                            '29279',\n                            '106078',\n                            '175560',\n                            '0',\n                            '0',\n                            '0',\n                        ]),\n                    ],\n                },\n                meta: { totalCount: 30 },\n            },\n        }}\n    />\n);\n","import { range } from 'lodash';\nimport React, { Component } from 'react';\nimport JSONTree from '@splunk/react-ui/JSONTree';\nimport Table from '@splunk/dashboard-visualizations/Table';\nimport Heading from '@splunk/react-ui/Heading';\n\nclass RequestParams extends Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            requestParams: {\n                count: 10,\n                offset: 0,\n            },\n        };\n    }\n\n    handleRequestParams = (type, newRequestParams) => {\n        this.setState({\n            requestParams: newRequestParams,\n        });\n    };\n\n    render() {\n        const { requestParams } = this.state;\n        const dataSources = {\n            primary: {\n                requestParams,\n                data: {\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\n                    columns: [\n                        range(requestParams.offset, requestParams.offset + 10),\n                        range(requestParams.offset, requestParams.offset + 10),\n                    ],\n                },\n                meta: { totalCount: 200 },\n            },\n        };\n        return (\n            <div>\n                <div>\n                    <Heading level={4}>RequestParams</Heading>\n                    <JSONTree json={requestParams} expandChildren />\n                </div>\n                <Table\n                    options={{}}\n                    encoding={{\n                        columns: ['primary.foo', 'primary.bar'],\n                    }}\n                    dataSources={dataSources}\n                    onRequestParamsChange={this.handleRequestParams}\n                />\n            </div>\n        );\n    }\n}\n\nexport default RequestParams;\n","import range from 'lodash/range';\nimport React from 'react';\nimport T from 'prop-types';\nimport console from '@splunk/visualizations-shared/console';\nimport Table from '@splunk/dashboard-visualizations/Table';\nimport SuiTable from '@splunk/react-ui/Table';\n\n/**\n * A custom cell renderer react component\n */\nconst CustomCell = ({ value, cellOptions, fieldOptions, onCellClick }) => {\n    console.log('cellOptions', cellOptions);\n    console.log('fieldOptions', fieldOptions);\n    const { type, align } = fieldOptions;\n    const style = {\n        backgroundColor: type === 'number' && value % 2 === 0 ? 'red' : 'green',\n        color: 'black',\n    };\n    return (\n        <SuiTable.Cell style={style} align={align} test-cell-type=\"string\" onClick={onCellClick}>\n            {`value=${value}`}\n        </SuiTable.Cell>\n    );\n};\n\nCustomCell.propTypes = {\n    onCellClick: T.func,\n    value: T.oneOfType([T.number, T.string, T.array]).isRequired,\n    cellOptions: T.object,\n    fieldOptions: T.object,\n};\n\n/**\n * indicate whether this cell renderer can be used for particular cell\n */\nCustomCell.canRender = (field, fieldOptions, value) => {\n    console.log('field', field);\n    console.log('fieldOptions', fieldOptions);\n    console.log('field value', value);\n    // always use this renderer\n    return true;\n};\n\nexport default () => (\n    <Table\n        options={{}}\n        encoding={{\n            columns: 'primary[0]',\n        }}\n        cellRenderers={[CustomCell]}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: ['count'],\n                    columns: [range(10)],\n                },\n            },\n        }}\n    />\n);\n","import { range } from 'lodash';\nimport React from 'react';\nimport Table from '@splunk/dashboard-visualizations/Table';\n\nexport default () => (\n    <Table\n        options={{\n            showHeader: false,\n        }}\n        encoding={{\n            columns: ['primary.foo', 'primary.bar'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\n                    columns: [range(5), range(5)],\n                },\n                meta: { totalCount: 100 },\n            },\n        }}\n    />\n);\n","import { range } from 'lodash';\nimport React from 'react';\nimport Table from '@splunk/dashboard-visualizations/Table';\n\nexport default () => (\n    <Table\n        options={{\n            headerBackgroundColor: '#FF0000',\n        }}\n        encoding={{\n            columns: ['primary.foo', 'primary.bar'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\n                    columns: [range(5), range(5)],\n                },\n                meta: { totalCount: 100 },\n            },\n        }}\n    />\n);\n","import { range } from 'lodash';\nimport React from 'react';\nimport Table from '@splunk/dashboard-visualizations/Table';\n\nexport default () => (\n    <Table\n        options={{\n            headerTextColor: '#FF0000',\n        }}\n        encoding={{\n            columns: ['primary.foo', 'primary.bar'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\n                    columns: [range(5), range(5)],\n                },\n                meta: { totalCount: 100 },\n            },\n        }}\n    />\n);\n","import { range } from 'lodash';\nimport React from 'react';\nimport Table from '@splunk/dashboard-visualizations/Table';\n\nexport default () => (\n    <Table\n        options={{\n            rowBackgroundColorEven: '#FFA500',\n            rowBackgroundColorOdd: '#ADD8E6',\n        }}\n        encoding={{\n            columns: ['primary.foo', 'primary.bar'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\n                    columns: [range(5), range(5)],\n                },\n                meta: { totalCount: 100 },\n            },\n        }}\n    />\n);\n","import { range } from 'lodash';\nimport React from 'react';\nimport Table from '@splunk/dashboard-visualizations/Table';\n\nexport default () => (\n    <Table\n        options={{\n            rowTextColorOdd: '#0000FF',\n            rowTextColorEven: '#FF0000',\n        }}\n        encoding={{\n            columns: ['primary.foo', 'primary.bar'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\n                    columns: [range(5), range(5)],\n                },\n                meta: { totalCount: 100 },\n            },\n        }}\n    />\n);\n","export default {\n    events: [\n        {\n            name: 'cell.click',\n            desc: 'trigger when user clicks a table cell',\n        },\n    ],\n};\n","import { COLOR_OR_TOKEN_PATTERN, getPattern } from '@splunk/visualizations-shared/schemaUtils';\n\nexport default {\n    backgroundColor: {\n        description:\n            'Specify the color to use for the chart background using a Hex code. The default for light mode is \"#ffffff\". The default for dark mode is \"#212527\". The default for prisma dark mode is \"#0b0c0e\".',\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    count: {\n        description: 'Specify the maximum number of rows to display.',\n        type: 'number',\n        default: 20,\n    },\n    rowNumbers: {\n        description: 'Specify whether to display the row numbers.',\n        type: 'boolean',\n        default: false,\n    },\n    showHeader: {\n        description: 'Specify whether to display the table header.',\n        type: 'boolean',\n        default: true,\n    },\n    headerBackgroundColor: {\n        description: `Specify the table header background color using a Hex code. The default for light mode is \"#e1e6eb\". The default for dark mode is \"#171d21\". The default for prisma dark mode is \"#272a2f\".`,\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    headerTextColor: {\n        description: `Specify the table header text color using a Hex code. The default for light mode is \"#3C444D\". The default for dark mode is \"#FFFFFF\". The default for prisma dark mode is \"#f5f5f5\".`,\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    rowBackgroundColorEven: {\n        description: `Specify the background color for even table rows using a Hex code. The default for light mode is \"#F2F4F5\". The default for dark mode is \"#0D1012\". The default for prisma dark mode is \"#0b0c0e\".`,\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    rowBackgroundColorOdd: {\n        description: `Specify the background color for odd table rows using a Hex code. The default for light mode is \"#FFFFFF\". The default for dark mode is \"#000000\". The default for prisma dark mode is \"#111215\".`,\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    rowTextColorEven: {\n        description: `Specify the text color for even table rows using a Hex code. The default for light mode is \"#006EAA\". The default for dark mode is \"#00A4FD\". The default for prisma dark mode is \"#acacad\".`,\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    rowTextColorOdd: {\n        description: `Specify the text color for odd table rows using a Hex code. The default for light mode is \"#006EAA\". The default for dark mode is \"#00A4FD\". The default for prisma dark mode is \"#acacad\".`,\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    numberPrecision: {\n        default: 0,\n        maximum: 20,\n        minimum: 0,\n        description:\n            'Specify the number of decimal places to display. For example, to display 3 decimal places, use a value of 3. The maximum value is 20.',\n        type: 'number',\n    },\n    useThousandSeparators: {\n        default: true,\n        description: 'Specify whether numeric values use commas as thousandths separaters.',\n        type: 'boolean',\n    },\n    unit: {\n        description:\n            'Specify a label to show next to the cell value. The unit text should be brief. For example, an abbreviation such as MB, or a symbol such as $, can be used.',\n        type: 'string',\n    },\n    unitPosition: {\n        default: 'after',\n        description: 'Specify whether the unit label should appear before or after the cell value.',\n        type: 'string',\n        pattern: getPattern(['before', 'after']),\n    },\n    dataOverlayMode: {\n        default: 'none',\n        description: 'Specify which type of overlay to display. Overlays only apply to numerical columns.',\n        type: 'string',\n        pattern: getPattern(['heatmap', 'highlow', 'none']),\n    },\n};\n","import { range } from 'lodash';\nimport React from 'react';\nimport VisualizationDocPage from '@splunk/visualizations-shared/VisualizationDocPage';\nimport Table from '@splunk/dashboard-visualizations/Table';\nimport OptionsDoc from '@splunk/dashboard-visualizations/common/OptionsDoc';\nimport EventsDoc from '@splunk/dashboard-visualizations/common/EventsDoc';\nimport DocExample from '@splunk/react-docs/DocExample';\n\nimport BasicExampleCode from '!!raw-loader!./examples/Basic';\nimport FixSizeExampleCode from '!!raw-loader!./examples/FixSize';\nimport RowNumberCode from '!!raw-loader!./examples/RowNumber';\nimport NumberFormatCode from '!!raw-loader!./examples/NumberFormat';\nimport OverlayCode from '!!raw-loader!./examples/Overlay';\nimport SparklineCode from '!!raw-loader!./examples/Sparkline';\nimport RequestParamsCode from '!!raw-loader!./examples/RequestParams';\nimport CustomCellRendererCode from '!!raw-loader!./examples/CustomCellRenderer';\nimport ShowHeaderCode from '!!raw-loader!./examples/ShowHeader';\nimport HeaderBackgroundColorCode from '!!raw-loader!./examples/HeaderBackgroundColor';\nimport HeaderTextColorCode from '!!raw-loader!./examples/HeaderTextColor';\nimport RowBackgroundColorCode from '!!raw-loader!./examples/RowBackgroundColor';\nimport RowTextColorCode from '!!raw-loader!./examples/RowTextColor';\n\nimport BasicExample from './examples/Basic';\nimport FixSizeExample from './examples/FixSize';\nimport RowNumberExample from './examples/RowNumber';\nimport NumberFormatExample from './examples/NumberFormat';\nimport OverlayExample from './examples/Overlay';\nimport SparklineExample from './examples/Sparkline';\nimport RequestParamsExample from './examples/RequestParams';\nimport CustomCellRendererExample from './examples/CustomCellRenderer';\nimport ShowHeaderExample from './examples/ShowHeader';\nimport HeaderBackgroundColorExample from './examples/HeaderBackgroundColor';\nimport HeaderTextColorExample from './examples/HeaderTextColor';\nimport RowBackgroundColorExample from './examples/RowBackgroundColor';\nimport RowTextColorExample from './examples/RowTextColor';\nimport doc from './definition';\nimport optionsSchema from '../optionsSchema';\n\nfunction TableDoc() {\n    return (\n        <VisualizationDocPage\n            title=\"Table\"\n            description=\"This visualization has been upgraded in @splunk/visualizations/Table and may be used in UDF.\"\n            examplesSection={[\n                <DocExample\n                    title=\"Basic Table\"\n                    key=\"basic_table\"\n                    description=\"Table takes 100% width by default\"\n                    code={BasicExampleCode}\n                    example={BasicExample}\n                />,\n                <DocExample\n                    title=\"Fix Size Table\"\n                    key=\"fix_size_table\"\n                    description=\"Fix size table will be rendered when providing width and height\"\n                    code={FixSizeExampleCode}\n                    example={FixSizeExample}\n                />,\n                <DocExample\n                    title=\"Update RequestParams\"\n                    key=\"request_params\"\n                    description=\"Click on paginator or header will update the RequestParams via onRequestParamsChange callback\"\n                    code={RequestParamsCode}\n                    example={RequestParamsExample}\n                />,\n                <DocExample\n                    title=\"Show row numbers\"\n                    key=\"row_numbers\"\n                    code={RowNumberCode}\n                    example={RowNumberExample}\n                />,\n                <DocExample\n                    title=\"Number Formatting\"\n                    key=\"number_formatting\"\n                    description=\"Formatting options can be applied to numerial cell\"\n                    code={NumberFormatCode}\n                    example={NumberFormatExample}\n                />,\n                <DocExample\n                    title=\"Data Overlay\"\n                    key=\"data_overlay\"\n                    code={OverlayCode}\n                    example={OverlayExample}\n                />,\n                <DocExample\n                    title=\"Sparkline\"\n                    key=\"sparkline\"\n                    code={SparklineCode}\n                    example={SparklineExample}\n                />,\n                <DocExample\n                    title=\"Custom Cell renderer\"\n                    key=\"custom_cell_renderer\"\n                    code={CustomCellRendererCode}\n                    example={CustomCellRendererExample}\n                />,\n                <DocExample\n                    title=\"Hide table header\"\n                    key=\"show_header\"\n                    code={ShowHeaderCode}\n                    example={ShowHeaderExample}\n                />,\n                <DocExample\n                    title=\"Set header background color\"\n                    key=\"header_background_color\"\n                    code={HeaderBackgroundColorCode}\n                    example={HeaderBackgroundColorExample}\n                />,\n                <DocExample\n                    title=\"Set header text color\"\n                    key=\"header_text_color\"\n                    code={HeaderTextColorCode}\n                    example={HeaderTextColorExample}\n                />,\n                <DocExample\n                    title=\"Set background color for alternating rows\"\n                    key=\"row_background_color\"\n                    code={RowBackgroundColorCode}\n                    example={RowBackgroundColorExample}\n                />,\n                <DocExample\n                    title=\"Set text color for alternating rows\"\n                    key=\"row_text_color\"\n                    code={RowTextColorCode}\n                    example={RowTextColorExample}\n                />,\n            ]}\n            optionSection={<OptionsDoc options={optionsSchema} />}\n            eventSection={\n                <EventsDoc\n                    events={doc.events}\n                    Visualization={Table}\n                    dsState={{\n                        primary: {\n                            requestParams: { offset: 0, count: 20 },\n                            data: {\n                                fields: [{ name: 'foo' }, { name: 'bar' }],\n                                columns: [range(5), range(5)],\n                            },\n                            meta: { totalCount: 100 },\n                        },\n                    }}\n                />\n            }\n        />\n    );\n}\n\nexport default TableDoc;\n"],"sourceRoot":""}