/*!
 * Copyright © 2018 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 64);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("@splunk/react-docs/DocExample");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/schemaUtils");

/***/ }),
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/VisualizationDocPage");

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-visualizations/common/OptionsDoc");

/***/ }),
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-visualizations/common/EventsDoc");

/***/ }),
/* 15 */,
/* 16 */
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-visualizations/Table");

/***/ }),
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */
/***/ (function(module, exports) {

module.exports = require("prop-types");

/***/ }),
/* 32 */,
/* 33 */
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/console");

/***/ }),
/* 34 */,
/* 35 */,
/* 36 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/getPrototypeOf");

/***/ }),
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/classCallCheck");

/***/ }),
/* 43 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/createClass");

/***/ }),
/* 44 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/assertThisInitialized");

/***/ }),
/* 45 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/inherits");

/***/ }),
/* 46 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/possibleConstructorReturn");

/***/ }),
/* 47 */
/***/ (function(module, exports) {

module.exports = require("@babel/runtime/helpers/defineProperty");

/***/ }),
/* 48 */
/***/ (function(module, exports) {

module.exports = require("@splunk/react-ui/JSONTree");

/***/ }),
/* 49 */
/***/ (function(module, exports) {

module.exports = require("@splunk/react-ui/Heading");

/***/ }),
/* 50 */
/***/ (function(module, exports) {

module.exports = require("lodash/range");

/***/ }),
/* 51 */
/***/ (function(module, exports) {

module.exports = require("@splunk/react-ui/Table");

/***/ }),
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: external "lodash"
var external_lodash_ = __webpack_require__(16);

// EXTERNAL MODULE: external "react"
var external_react_ = __webpack_require__(0);
var external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);

// EXTERNAL MODULE: external "@splunk/visualizations-shared/VisualizationDocPage"
var VisualizationDocPage_ = __webpack_require__(9);
var VisualizationDocPage_default = /*#__PURE__*/__webpack_require__.n(VisualizationDocPage_);

// EXTERNAL MODULE: external "@splunk/dashboard-visualizations/Table"
var Table_ = __webpack_require__(20);
var Table_default = /*#__PURE__*/__webpack_require__.n(Table_);

// EXTERNAL MODULE: external "@splunk/dashboard-visualizations/common/OptionsDoc"
var OptionsDoc_ = __webpack_require__(10);
var OptionsDoc_default = /*#__PURE__*/__webpack_require__.n(OptionsDoc_);

// EXTERNAL MODULE: external "@splunk/dashboard-visualizations/common/EventsDoc"
var EventsDoc_ = __webpack_require__(14);
var EventsDoc_default = /*#__PURE__*/__webpack_require__.n(EventsDoc_);

// EXTERNAL MODULE: external "@splunk/react-docs/DocExample"
var DocExample_ = __webpack_require__(1);
var DocExample_default = /*#__PURE__*/__webpack_require__.n(DocExample_);

// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Table/docs/examples/Basic.jsx
/* harmony default export */ var Basic = ("import { range } from 'lodash';\nimport React from 'react';\nimport Table from '@splunk/dashboard-visualizations/Table';\n\nexport default () => (\n    <Table\n        options={{}}\n        encoding={{\n            columns: ['primary.foo', 'primary.bar'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\n                    columns: [range(5), range(5)],\n                },\n                meta: { totalCount: 100 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Table/docs/examples/FixSize.jsx
/* harmony default export */ var FixSize = ("import { range } from 'lodash';\nimport React from 'react';\nimport Table from '@splunk/dashboard-visualizations/Table';\n\nexport default () => (\n    <Table\n        width={800}\n        height={200}\n        options={{}}\n        encoding={{\n            columns: ['primary.foo', 'primary.bar'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\n                    columns: [range(10), range(10)],\n                },\n                meta: { totalCount: 100 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Table/docs/examples/RowNumber.jsx
/* harmony default export */ var RowNumber = ("import { range } from 'lodash';\nimport React from 'react';\nimport Table from '@splunk/dashboard-visualizations/Table';\n\nexport default () => (\n    <Table\n        options={{\n            rowNumbers: true,\n        }}\n        encoding={{\n            columns: ['primary.foo', 'primary.bar'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\n                    columns: [range(5), range(5)],\n                },\n                meta: { totalCount: 100 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Table/docs/examples/NumberFormat.jsx
/* harmony default export */ var NumberFormat = ("import React from 'react';\nimport Table from '@splunk/dashboard-visualizations/Table';\n\nexport default () => (\n    <Table\n        options={{\n            numberPrecision: 3,\n            useThousandSeparators: false,\n            unit: '$$',\n            unitPosition: 'after',\n            fields: {\n                outcome: {\n                    unit: 'BitCoin',\n                    unitPosition: 'before',\n                },\n            },\n        }}\n        encoding={{\n            columns: ['primary.income', 'primary.outcome'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'income' }, { name: 'outcome' }],\n                    columns: [\n                        [10000, 24000, 12128192],\n                        [50000, 24000, 127828987],\n                    ],\n                },\n                meta: { totalCount: 10 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Table/docs/examples/Overlay.jsx
/* harmony default export */ var Overlay = ("import { range } from 'lodash';\nimport React from 'react';\nimport Table from '@splunk/dashboard-visualizations/Table';\n\nexport default () => (\n    <Table\n        options={{\n            dataOverlayMode: 'heatmap',\n        }}\n        encoding={{\n            columns: ['primary.income', 'primary.outcome'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'income' }, { name: 'outcome' }],\n                    columns: [range(10), range(10, 20)],\n                },\n                meta: { totalCount: 30 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Table/docs/examples/Sparkline.jsx
/* harmony default export */ var Sparkline = ("import { range } from 'lodash';\nimport React from 'react';\nimport Table from '@splunk/dashboard-visualizations/Table';\n\nexport default () => (\n    <Table\n        options={{\n            dataOverlayMode: 'highlow',\n        }}\n        encoding={{\n            columns: ['primary.foo', 'primary.sparkline'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'foo' }, { name: 'sparkline' }],\n                    columns: [\n                        range(10),\n                        range(10).map(() => [\n                            '##__SPARKLINE__##',\n                            '0',\n                            '0',\n                            '0',\n                            '0',\n                            '0',\n                            '29279',\n                            '106078',\n                            '175560',\n                            '0',\n                            '0',\n                            '0',\n                        ]),\n                    ],\n                },\n                meta: { totalCount: 30 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Table/docs/examples/RequestParams.jsx
/* harmony default export */ var examples_RequestParams = ("import { range } from 'lodash';\nimport React, { Component } from 'react';\nimport JSONTree from '@splunk/react-ui/JSONTree';\nimport Table from '@splunk/dashboard-visualizations/Table';\nimport Heading from '@splunk/react-ui/Heading';\n\nclass RequestParams extends Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            requestParams: {\n                count: 10,\n                offset: 0,\n            },\n        };\n    }\n\n    handleRequestParams = (type, newRequestParams) => {\n        this.setState({\n            requestParams: newRequestParams,\n        });\n    };\n\n    render() {\n        const { requestParams } = this.state;\n        const dataSources = {\n            primary: {\n                requestParams,\n                data: {\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\n                    columns: [\n                        range(requestParams.offset, requestParams.offset + 10),\n                        range(requestParams.offset, requestParams.offset + 10),\n                    ],\n                },\n                meta: { totalCount: 200 },\n            },\n        };\n        return (\n            <div>\n                <div>\n                    <Heading level={4}>RequestParams</Heading>\n                    <JSONTree json={requestParams} expandChildren />\n                </div>\n                <Table\n                    options={{}}\n                    encoding={{\n                        columns: ['primary.foo', 'primary.bar'],\n                    }}\n                    dataSources={dataSources}\n                    onRequestParamsChange={this.handleRequestParams}\n                />\n            </div>\n        );\n    }\n}\n\nexport default RequestParams;\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Table/docs/examples/CustomCellRenderer.jsx
/* harmony default export */ var CustomCellRenderer = ("import range from 'lodash/range';\nimport React from 'react';\nimport T from 'prop-types';\nimport console from '@splunk/visualizations-shared/console';\nimport Table from '@splunk/dashboard-visualizations/Table';\nimport SuiTable from '@splunk/react-ui/Table';\n\n/**\n * A custom cell renderer react component\n */\nconst CustomCell = ({ value, cellOptions, fieldOptions, onCellClick }) => {\n    console.log('cellOptions', cellOptions);\n    console.log('fieldOptions', fieldOptions);\n    const { type, align } = fieldOptions;\n    const style = {\n        backgroundColor: type === 'number' && value % 2 === 0 ? 'red' : 'green',\n        color: 'black',\n    };\n    return (\n        <SuiTable.Cell style={style} align={align} test-cell-type=\"string\" onClick={onCellClick}>\n            {`value=${value}`}\n        </SuiTable.Cell>\n    );\n};\n\nCustomCell.propTypes = {\n    onCellClick: T.func,\n    value: T.oneOfType([T.number, T.string, T.array]).isRequired,\n    cellOptions: T.object,\n    fieldOptions: T.object,\n};\n\n/**\n * indicate whether this cell renderer can be used for particular cell\n */\nCustomCell.canRender = (field, fieldOptions, value) => {\n    console.log('field', field);\n    console.log('fieldOptions', fieldOptions);\n    console.log('field value', value);\n    // always use this renderer\n    return true;\n};\n\nexport default () => (\n    <Table\n        options={{}}\n        encoding={{\n            columns: 'primary[0]',\n        }}\n        cellRenderers={[CustomCell]}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: ['count'],\n                    columns: [range(10)],\n                },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Table/docs/examples/ShowHeader.jsx
/* harmony default export */ var ShowHeader = ("import { range } from 'lodash';\nimport React from 'react';\nimport Table from '@splunk/dashboard-visualizations/Table';\n\nexport default () => (\n    <Table\n        options={{\n            showHeader: false,\n        }}\n        encoding={{\n            columns: ['primary.foo', 'primary.bar'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\n                    columns: [range(5), range(5)],\n                },\n                meta: { totalCount: 100 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Table/docs/examples/HeaderBackgroundColor.jsx
/* harmony default export */ var HeaderBackgroundColor = ("import { range } from 'lodash';\nimport React from 'react';\nimport Table from '@splunk/dashboard-visualizations/Table';\n\nexport default () => (\n    <Table\n        options={{\n            headerBackgroundColor: '#FF0000',\n        }}\n        encoding={{\n            columns: ['primary.foo', 'primary.bar'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\n                    columns: [range(5), range(5)],\n                },\n                meta: { totalCount: 100 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Table/docs/examples/HeaderTextColor.jsx
/* harmony default export */ var HeaderTextColor = ("import { range } from 'lodash';\nimport React from 'react';\nimport Table from '@splunk/dashboard-visualizations/Table';\n\nexport default () => (\n    <Table\n        options={{\n            headerTextColor: '#FF0000',\n        }}\n        encoding={{\n            columns: ['primary.foo', 'primary.bar'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\n                    columns: [range(5), range(5)],\n                },\n                meta: { totalCount: 100 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Table/docs/examples/RowBackgroundColor.jsx
/* harmony default export */ var RowBackgroundColor = ("import { range } from 'lodash';\nimport React from 'react';\nimport Table from '@splunk/dashboard-visualizations/Table';\n\nexport default () => (\n    <Table\n        options={{\n            rowBackgroundColorEven: '#FFA500',\n            rowBackgroundColorOdd: '#ADD8E6',\n        }}\n        encoding={{\n            columns: ['primary.foo', 'primary.bar'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\n                    columns: [range(5), range(5)],\n                },\n                meta: { totalCount: 100 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Table/docs/examples/RowTextColor.jsx
/* harmony default export */ var RowTextColor = ("import { range } from 'lodash';\nimport React from 'react';\nimport Table from '@splunk/dashboard-visualizations/Table';\n\nexport default () => (\n    <Table\n        options={{\n            rowTextColorOdd: '#0000FF',\n            rowTextColorEven: '#FF0000',\n        }}\n        encoding={{\n            columns: ['primary.foo', 'primary.bar'],\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'foo' }, { name: 'bar' }],\n                    columns: [range(5), range(5)],\n                },\n                meta: { totalCount: 100 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: ./src/visualizations/Table/docs/examples/Basic.jsx



/* harmony default export */ var examples_Basic = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Table_default.a, {
    options: {},
    encoding: {
      columns: ['primary.foo', 'primary.bar']
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'foo'
          }, {
            name: 'bar'
          }],
          columns: [Object(external_lodash_["range"])(5), Object(external_lodash_["range"])(5)]
        },
        meta: {
          totalCount: 100
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Table/docs/examples/FixSize.jsx



/* harmony default export */ var examples_FixSize = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Table_default.a, {
    width: 800,
    height: 200,
    options: {},
    encoding: {
      columns: ['primary.foo', 'primary.bar']
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'foo'
          }, {
            name: 'bar'
          }],
          columns: [Object(external_lodash_["range"])(10), Object(external_lodash_["range"])(10)]
        },
        meta: {
          totalCount: 100
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Table/docs/examples/RowNumber.jsx



/* harmony default export */ var examples_RowNumber = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Table_default.a, {
    options: {
      rowNumbers: true
    },
    encoding: {
      columns: ['primary.foo', 'primary.bar']
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'foo'
          }, {
            name: 'bar'
          }],
          columns: [Object(external_lodash_["range"])(5), Object(external_lodash_["range"])(5)]
        },
        meta: {
          totalCount: 100
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Table/docs/examples/NumberFormat.jsx


/* harmony default export */ var examples_NumberFormat = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Table_default.a, {
    options: {
      numberPrecision: 3,
      useThousandSeparators: false,
      unit: '$$',
      unitPosition: 'after',
      fields: {
        outcome: {
          unit: 'BitCoin',
          unitPosition: 'before'
        }
      }
    },
    encoding: {
      columns: ['primary.income', 'primary.outcome']
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'income'
          }, {
            name: 'outcome'
          }],
          columns: [[10000, 24000, 12128192], [50000, 24000, 127828987]]
        },
        meta: {
          totalCount: 10
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Table/docs/examples/Overlay.jsx



/* harmony default export */ var examples_Overlay = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Table_default.a, {
    options: {
      dataOverlayMode: 'heatmap'
    },
    encoding: {
      columns: ['primary.income', 'primary.outcome']
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'income'
          }, {
            name: 'outcome'
          }],
          columns: [Object(external_lodash_["range"])(10), Object(external_lodash_["range"])(10, 20)]
        },
        meta: {
          totalCount: 30
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Table/docs/examples/Sparkline.jsx



/* harmony default export */ var examples_Sparkline = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Table_default.a, {
    options: {
      dataOverlayMode: 'highlow'
    },
    encoding: {
      columns: ['primary.foo', 'primary.sparkline']
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'foo'
          }, {
            name: 'sparkline'
          }],
          columns: [Object(external_lodash_["range"])(10), Object(external_lodash_["range"])(10).map(function () {
            return ['##__SPARKLINE__##', '0', '0', '0', '0', '0', '29279', '106078', '175560', '0', '0', '0'];
          })]
        },
        meta: {
          totalCount: 30
        }
      }
    }
  });
});
// EXTERNAL MODULE: external "@babel/runtime/helpers/classCallCheck"
var classCallCheck_ = __webpack_require__(42);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck_);

// EXTERNAL MODULE: external "@babel/runtime/helpers/createClass"
var createClass_ = __webpack_require__(43);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass_);

// EXTERNAL MODULE: external "@babel/runtime/helpers/assertThisInitialized"
var assertThisInitialized_ = __webpack_require__(44);
var assertThisInitialized_default = /*#__PURE__*/__webpack_require__.n(assertThisInitialized_);

// EXTERNAL MODULE: external "@babel/runtime/helpers/inherits"
var inherits_ = __webpack_require__(45);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits_);

// EXTERNAL MODULE: external "@babel/runtime/helpers/possibleConstructorReturn"
var possibleConstructorReturn_ = __webpack_require__(46);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn_);

// EXTERNAL MODULE: external "@babel/runtime/helpers/getPrototypeOf"
var getPrototypeOf_ = __webpack_require__(36);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf_);

// EXTERNAL MODULE: external "@babel/runtime/helpers/defineProperty"
var defineProperty_ = __webpack_require__(47);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty_);

// EXTERNAL MODULE: external "@splunk/react-ui/JSONTree"
var JSONTree_ = __webpack_require__(48);
var JSONTree_default = /*#__PURE__*/__webpack_require__.n(JSONTree_);

// EXTERNAL MODULE: external "@splunk/react-ui/Heading"
var Heading_ = __webpack_require__(49);
var Heading_default = /*#__PURE__*/__webpack_require__.n(Heading_);

// CONCATENATED MODULE: ./src/visualizations/Table/docs/examples/RequestParams.jsx








function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = getPrototypeOf_default()(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = getPrototypeOf_default()(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return possibleConstructorReturn_default()(this, result);
  };
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}







var RequestParams_RequestParams = /*#__PURE__*/function (_Component) {
  inherits_default()(RequestParams, _Component);

  var _super = _createSuper(RequestParams);

  function RequestParams(props, context) {
    var _this;

    classCallCheck_default()(this, RequestParams);

    _this = _super.call(this, props, context);

    defineProperty_default()(assertThisInitialized_default()(_this), "handleRequestParams", function (type, newRequestParams) {
      _this.setState({
        requestParams: newRequestParams
      });
    });

    _this.state = {
      requestParams: {
        count: 10,
        offset: 0
      }
    };
    return _this;
  }

  createClass_default()(RequestParams, [{
    key: "render",
    value: function render() {
      var requestParams = this.state.requestParams;
      var dataSources = {
        primary: {
          requestParams: requestParams,
          data: {
            fields: [{
              name: 'foo'
            }, {
              name: 'bar'
            }],
            columns: [Object(external_lodash_["range"])(requestParams.offset, requestParams.offset + 10), Object(external_lodash_["range"])(requestParams.offset, requestParams.offset + 10)]
          },
          meta: {
            totalCount: 200
          }
        }
      };
      return /*#__PURE__*/external_react_default.a.createElement("div", null, /*#__PURE__*/external_react_default.a.createElement("div", null, /*#__PURE__*/external_react_default.a.createElement(Heading_default.a, {
        level: 4
      }, "RequestParams"), /*#__PURE__*/external_react_default.a.createElement(JSONTree_default.a, {
        json: requestParams,
        expandChildren: true
      })), /*#__PURE__*/external_react_default.a.createElement(Table_default.a, {
        options: {},
        encoding: {
          columns: ['primary.foo', 'primary.bar']
        },
        dataSources: dataSources,
        onRequestParamsChange: this.handleRequestParams
      }));
    }
  }]);

  return RequestParams;
}(external_react_["Component"]);

/* harmony default export */ var docs_examples_RequestParams = (RequestParams_RequestParams);
// EXTERNAL MODULE: external "lodash/range"
var range_ = __webpack_require__(50);
var range_default = /*#__PURE__*/__webpack_require__.n(range_);

// EXTERNAL MODULE: external "prop-types"
var external_prop_types_ = __webpack_require__(31);
var external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);

// EXTERNAL MODULE: external "@splunk/visualizations-shared/console"
var console_ = __webpack_require__(33);
var console_default = /*#__PURE__*/__webpack_require__.n(console_);

// EXTERNAL MODULE: external "@splunk/react-ui/Table"
var react_ui_Table_ = __webpack_require__(51);
var react_ui_Table_default = /*#__PURE__*/__webpack_require__.n(react_ui_Table_);

// CONCATENATED MODULE: ./src/visualizations/Table/docs/examples/CustomCellRenderer.jsx






/**
 * A custom cell renderer react component
 */

var CustomCellRenderer_CustomCell = function CustomCell(_ref) {
  var value = _ref.value,
      cellOptions = _ref.cellOptions,
      fieldOptions = _ref.fieldOptions,
      onCellClick = _ref.onCellClick;
  console_default.a.log('cellOptions', cellOptions);
  console_default.a.log('fieldOptions', fieldOptions);
  var type = fieldOptions.type,
      align = fieldOptions.align;
  var style = {
    backgroundColor: type === 'number' && value % 2 === 0 ? 'red' : 'green',
    color: 'black'
  };
  return /*#__PURE__*/external_react_default.a.createElement(react_ui_Table_default.a.Cell, {
    style: style,
    align: align,
    "test-cell-type": "string",
    onClick: onCellClick
  }, "value=".concat(value));
};

CustomCellRenderer_CustomCell.propTypes = {
  onCellClick: external_prop_types_default.a.func,
  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string, external_prop_types_default.a.array]).isRequired,
  cellOptions: external_prop_types_default.a.object,
  fieldOptions: external_prop_types_default.a.object
};
/**
 * indicate whether this cell renderer can be used for particular cell
 */

CustomCellRenderer_CustomCell.canRender = function (field, fieldOptions, value) {
  console_default.a.log('field', field);
  console_default.a.log('fieldOptions', fieldOptions);
  console_default.a.log('field value', value); // always use this renderer

  return true;
};

/* harmony default export */ var examples_CustomCellRenderer = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Table_default.a, {
    options: {},
    encoding: {
      columns: 'primary[0]'
    },
    cellRenderers: [CustomCellRenderer_CustomCell],
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: ['count'],
          columns: [range_default()(10)]
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Table/docs/examples/ShowHeader.jsx



/* harmony default export */ var examples_ShowHeader = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Table_default.a, {
    options: {
      showHeader: false
    },
    encoding: {
      columns: ['primary.foo', 'primary.bar']
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'foo'
          }, {
            name: 'bar'
          }],
          columns: [Object(external_lodash_["range"])(5), Object(external_lodash_["range"])(5)]
        },
        meta: {
          totalCount: 100
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Table/docs/examples/HeaderBackgroundColor.jsx



/* harmony default export */ var examples_HeaderBackgroundColor = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Table_default.a, {
    options: {
      headerBackgroundColor: '#FF0000'
    },
    encoding: {
      columns: ['primary.foo', 'primary.bar']
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'foo'
          }, {
            name: 'bar'
          }],
          columns: [Object(external_lodash_["range"])(5), Object(external_lodash_["range"])(5)]
        },
        meta: {
          totalCount: 100
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Table/docs/examples/HeaderTextColor.jsx



/* harmony default export */ var examples_HeaderTextColor = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Table_default.a, {
    options: {
      headerTextColor: '#FF0000'
    },
    encoding: {
      columns: ['primary.foo', 'primary.bar']
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'foo'
          }, {
            name: 'bar'
          }],
          columns: [Object(external_lodash_["range"])(5), Object(external_lodash_["range"])(5)]
        },
        meta: {
          totalCount: 100
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Table/docs/examples/RowBackgroundColor.jsx



/* harmony default export */ var examples_RowBackgroundColor = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Table_default.a, {
    options: {
      rowBackgroundColorEven: '#FFA500',
      rowBackgroundColorOdd: '#ADD8E6'
    },
    encoding: {
      columns: ['primary.foo', 'primary.bar']
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'foo'
          }, {
            name: 'bar'
          }],
          columns: [Object(external_lodash_["range"])(5), Object(external_lodash_["range"])(5)]
        },
        meta: {
          totalCount: 100
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Table/docs/examples/RowTextColor.jsx



/* harmony default export */ var examples_RowTextColor = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Table_default.a, {
    options: {
      rowTextColorOdd: '#0000FF',
      rowTextColorEven: '#FF0000'
    },
    encoding: {
      columns: ['primary.foo', 'primary.bar']
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'foo'
          }, {
            name: 'bar'
          }],
          columns: [Object(external_lodash_["range"])(5), Object(external_lodash_["range"])(5)]
        },
        meta: {
          totalCount: 100
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Table/docs/definition.js
/* harmony default export */ var definition = ({
  events: [{
    name: 'cell.click',
    desc: 'trigger when user clicks a table cell'
  }]
});
// EXTERNAL MODULE: external "@splunk/visualizations-shared/schemaUtils"
var schemaUtils_ = __webpack_require__(2);

// CONCATENATED MODULE: ./src/visualizations/Table/optionsSchema.js

/* harmony default export */ var optionsSchema = ({
  backgroundColor: {
    description: 'Specify the color to use for the chart background using a Hex code. The default for light mode is "#ffffff". The default for dark mode is "#212527". The default for prisma dark mode is "#0b0c0e".',
    pattern: schemaUtils_["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  count: {
    description: 'Specify the maximum number of rows to display.',
    type: 'number',
    default: 20
  },
  rowNumbers: {
    description: 'Specify whether to display the row numbers.',
    type: 'boolean',
    default: false
  },
  showHeader: {
    description: 'Specify whether to display the table header.',
    type: 'boolean',
    default: true
  },
  headerBackgroundColor: {
    description: "Specify the table header background color using a Hex code. The default for light mode is \"#e1e6eb\". The default for dark mode is \"#171d21\". The default for prisma dark mode is \"#272a2f\".",
    pattern: schemaUtils_["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  headerTextColor: {
    description: "Specify the table header text color using a Hex code. The default for light mode is \"#3C444D\". The default for dark mode is \"#FFFFFF\". The default for prisma dark mode is \"#f5f5f5\".",
    pattern: schemaUtils_["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  rowBackgroundColorEven: {
    description: "Specify the background color for even table rows using a Hex code. The default for light mode is \"#F2F4F5\". The default for dark mode is \"#0D1012\". The default for prisma dark mode is \"#0b0c0e\".",
    pattern: schemaUtils_["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  rowBackgroundColorOdd: {
    description: "Specify the background color for odd table rows using a Hex code. The default for light mode is \"#FFFFFF\". The default for dark mode is \"#000000\". The default for prisma dark mode is \"#111215\".",
    pattern: schemaUtils_["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  rowTextColorEven: {
    description: "Specify the text color for even table rows using a Hex code. The default for light mode is \"#006EAA\". The default for dark mode is \"#00A4FD\". The default for prisma dark mode is \"#acacad\".",
    pattern: schemaUtils_["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  rowTextColorOdd: {
    description: "Specify the text color for odd table rows using a Hex code. The default for light mode is \"#006EAA\". The default for dark mode is \"#00A4FD\". The default for prisma dark mode is \"#acacad\".",
    pattern: schemaUtils_["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  numberPrecision: {
    default: 0,
    maximum: 20,
    minimum: 0,
    description: 'Specify the number of decimal places to display. For example, to display 3 decimal places, use a value of 3. The maximum value is 20.',
    type: 'number'
  },
  useThousandSeparators: {
    default: true,
    description: 'Specify whether numeric values use commas as thousandths separaters.',
    type: 'boolean'
  },
  unit: {
    description: 'Specify a label to show next to the cell value. The unit text should be brief. For example, an abbreviation such as MB, or a symbol such as $, can be used.',
    type: 'string'
  },
  unitPosition: {
    default: 'after',
    description: 'Specify whether the unit label should appear before or after the cell value.',
    type: 'string',
    pattern: Object(schemaUtils_["getPattern"])(['before', 'after'])
  },
  dataOverlayMode: {
    default: 'none',
    description: 'Specify which type of overlay to display. Overlays only apply to numerical columns.',
    type: 'string',
    pattern: Object(schemaUtils_["getPattern"])(['heatmap', 'highlow', 'none'])
  }
});
// CONCATENATED MODULE: ./src/visualizations/Table/docs/index.jsx




































function TableDoc() {
  return /*#__PURE__*/external_react_default.a.createElement(VisualizationDocPage_default.a, {
    title: "Table",
    description: "This visualization has been upgraded in @splunk/visualizations/Table and may be used in UDF.",
    examplesSection: [/*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Basic Table",
      key: "basic_table",
      description: "Table takes 100% width by default",
      code: Basic,
      example: examples_Basic
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Fix Size Table",
      key: "fix_size_table",
      description: "Fix size table will be rendered when providing width and height",
      code: FixSize,
      example: examples_FixSize
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Update RequestParams",
      key: "request_params",
      description: "Click on paginator or header will update the RequestParams via onRequestParamsChange callback",
      code: examples_RequestParams,
      example: docs_examples_RequestParams
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Show row numbers",
      key: "row_numbers",
      code: RowNumber,
      example: examples_RowNumber
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Number Formatting",
      key: "number_formatting",
      description: "Formatting options can be applied to numerial cell",
      code: NumberFormat,
      example: examples_NumberFormat
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Data Overlay",
      key: "data_overlay",
      code: Overlay,
      example: examples_Overlay
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Sparkline",
      key: "sparkline",
      code: Sparkline,
      example: examples_Sparkline
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Custom Cell renderer",
      key: "custom_cell_renderer",
      code: CustomCellRenderer,
      example: examples_CustomCellRenderer
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Hide table header",
      key: "show_header",
      code: ShowHeader,
      example: examples_ShowHeader
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Set header background color",
      key: "header_background_color",
      code: HeaderBackgroundColor,
      example: examples_HeaderBackgroundColor
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Set header text color",
      key: "header_text_color",
      code: HeaderTextColor,
      example: examples_HeaderTextColor
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Set background color for alternating rows",
      key: "row_background_color",
      code: RowBackgroundColor,
      example: examples_RowBackgroundColor
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Set text color for alternating rows",
      key: "row_text_color",
      code: RowTextColor,
      example: examples_RowTextColor
    })],
    optionSection: /*#__PURE__*/external_react_default.a.createElement(OptionsDoc_default.a, {
      options: optionsSchema
    }),
    eventSection: /*#__PURE__*/external_react_default.a.createElement(EventsDoc_default.a, {
      events: definition.events,
      Visualization: Table_default.a,
      dsState: {
        primary: {
          requestParams: {
            offset: 0,
            count: 20
          },
          data: {
            fields: [{
              name: 'foo'
            }, {
              name: 'bar'
            }],
            columns: [Object(external_lodash_["range"])(5), Object(external_lodash_["range"])(5)]
          },
          meta: {
            totalCount: 100
          }
        }
      }
    })
  });
}

/* harmony default export */ var docs = __webpack_exports__["default"] = (TableDoc);

/***/ })
/******/ ]);
//# sourceMappingURL=Table.js.map