/*!
 * Copyright © 2018 Splunk Inc.
 * SPLUNK CONFIDENTIAL – Use or disclosure of this material in whole or
 * in part without a valid written license from Splunk Inc. is PROHIBITED.
 */
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 62);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),

/***/ 1:
/***/ (function(module, exports) {

module.exports = require("@splunk/react-docs/DocExample");

/***/ }),

/***/ 10:
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-visualizations/common/OptionsDoc");

/***/ }),

/***/ 12:
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-visualizations/common/EncodingDoc");

/***/ }),

/***/ 14:
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-visualizations/common/EventsDoc");

/***/ }),

/***/ 17:
/***/ (function(module, exports) {

module.exports = require("@splunk/dashboard-visualizations/Pie");

/***/ }),

/***/ 2:
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/schemaUtils");

/***/ }),

/***/ 62:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: external "react"
var external_react_ = __webpack_require__(0);
var external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);

// EXTERNAL MODULE: external "@splunk/dashboard-visualizations/Pie"
var Pie_ = __webpack_require__(17);
var Pie_default = /*#__PURE__*/__webpack_require__.n(Pie_);

// EXTERNAL MODULE: external "@splunk/visualizations-shared/VisualizationDocPage"
var VisualizationDocPage_ = __webpack_require__(9);
var VisualizationDocPage_default = /*#__PURE__*/__webpack_require__.n(VisualizationDocPage_);

// EXTERNAL MODULE: external "@splunk/dashboard-visualizations/common/EncodingDoc"
var EncodingDoc_ = __webpack_require__(12);
var EncodingDoc_default = /*#__PURE__*/__webpack_require__.n(EncodingDoc_);

// EXTERNAL MODULE: external "@splunk/dashboard-visualizations/common/OptionsDoc"
var OptionsDoc_ = __webpack_require__(10);
var OptionsDoc_default = /*#__PURE__*/__webpack_require__.n(OptionsDoc_);

// EXTERNAL MODULE: external "@splunk/dashboard-visualizations/common/EventsDoc"
var EventsDoc_ = __webpack_require__(14);
var EventsDoc_default = /*#__PURE__*/__webpack_require__.n(EventsDoc_);

// EXTERNAL MODULE: external "@splunk/react-docs/DocExample"
var DocExample_ = __webpack_require__(1);
var DocExample_default = /*#__PURE__*/__webpack_require__.n(DocExample_);

// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Pie/docs/examples/Basic.jsx
/* harmony default export */ var Basic = ("import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{}}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Pie/docs/examples/BackgroundColor.jsx
/* harmony default export */ var BackgroundColor = ("import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{ backgroundColor: '#f29335' }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Pie/docs/examples/ForegroundColor.jsx
/* harmony default export */ var ForegroundColor = ("import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{ foregroundColor: '#b50a29' }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Pie/docs/examples/FontColor.jsx
/* harmony default export */ var FontColor = ("import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{ fontColor: '#551a8b' }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Pie/docs/examples/SeriesColors.jsx
/* harmony default export */ var SeriesColors = ("import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{ seriesColors: ['#FFFF00', '#0000FF', '#008000'] }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Pie/docs/examples/FieldColors.jsx
/* harmony default export */ var FieldColors = ("import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{ fieldColors: { December: '#008000', May: '#FF0000' } }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Pie/docs/examples/NoLabels.jsx
/* harmony default export */ var NoLabels = ("import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{ 'chart.showLabels': false }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Pie/docs/examples/LabelWithPercent.jsx
/* harmony default export */ var LabelWithPercent = ("import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{ 'chart.showPercent': true }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Pie/docs/examples/Threshold.jsx
/* harmony default export */ var Threshold = ("import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{ 'chart.sliceCollapsingThreshold': 0.05 }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Pie/docs/examples/CollapsingLabel.jsx
/* harmony default export */ var CollapsingLabel = ("import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{ 'chart.sliceCollapsingLabel': 'New Collapsing Label' }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Pie/docs/examples/TruncatedSize.jsx
/* harmony default export */ var TruncatedSize = ("import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{ 'chart.resultTruncationLimit': '5' }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Pie/docs/examples/Donut.jsx
/* harmony default export */ var Donut = ("import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{\n            hasDonutHole: true,\n        }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Pie/docs/examples/DonutTopLegend.jsx
/* harmony default export */ var DonutTopLegend = ("import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{\n            hasDonutHole: true,\n            'legend.placement': 'top',\n        }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December',\n                        ],\n                        ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: /builds/devplat/vision/node_modules/raw-loader/dist/cjs.js!./src/visualizations/Pie/docs/examples/DonutOverflowEnd.jsx
/* harmony default export */ var DonutOverflowEnd = ("import React from 'react';\nimport Pie from '@splunk/dashboard-visualizations/Pie';\n\nexport default () => (\n    <Pie\n        options={{\n            hasDonutHole: true,\n            'legend.labelStyle.overflowMode': 'ellipsisEnd',\n        }}\n        encoding={{\n            value: 'primary.count',\n            label: 'primary.component',\n        }}\n        dataSources={{\n            primary: {\n                requestParams: { offset: 0, count: 20 },\n                data: {\n                    fields: [{ name: 'component' }, { name: 'count' }],\n                    columns: [\n                        [\n                            'January is one of the darkest month of the year',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August is one of the hottest month of the year',\n                            'September',\n                            'October',\n                            'November',\n                            'December is the one of the coldest month of the year',\n                        ],\n                        ['3', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50'],\n                    ],\n                },\n                meta: { totalCount: 20 },\n            },\n        }}\n    />\n);\n");
// CONCATENATED MODULE: ./src/visualizations/Pie/docs/examples/Basic.jsx


/* harmony default export */ var examples_Basic = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Pie_default.a, {
    options: {},
    encoding: {
      value: 'primary.count',
      label: 'primary.component'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'component'
          }, {
            name: 'count'
          }],
          columns: [['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'], ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Pie/docs/examples/BackgroundColor.jsx


/* harmony default export */ var examples_BackgroundColor = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Pie_default.a, {
    options: {
      backgroundColor: '#f29335'
    },
    encoding: {
      value: 'primary.count',
      label: 'primary.component'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'component'
          }, {
            name: 'count'
          }],
          columns: [['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'], ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Pie/docs/examples/ForegroundColor.jsx


/* harmony default export */ var examples_ForegroundColor = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Pie_default.a, {
    options: {
      foregroundColor: '#b50a29'
    },
    encoding: {
      value: 'primary.count',
      label: 'primary.component'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'component'
          }, {
            name: 'count'
          }],
          columns: [['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'], ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Pie/docs/examples/FontColor.jsx


/* harmony default export */ var examples_FontColor = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Pie_default.a, {
    options: {
      fontColor: '#551a8b'
    },
    encoding: {
      value: 'primary.count',
      label: 'primary.component'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'component'
          }, {
            name: 'count'
          }],
          columns: [['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'], ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Pie/docs/examples/SeriesColors.jsx


/* harmony default export */ var examples_SeriesColors = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Pie_default.a, {
    options: {
      seriesColors: ['#FFFF00', '#0000FF', '#008000']
    },
    encoding: {
      value: 'primary.count',
      label: 'primary.component'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'component'
          }, {
            name: 'count'
          }],
          columns: [['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'], ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Pie/docs/examples/FieldColors.jsx


/* harmony default export */ var examples_FieldColors = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Pie_default.a, {
    options: {
      fieldColors: {
        December: '#008000',
        May: '#FF0000'
      }
    },
    encoding: {
      value: 'primary.count',
      label: 'primary.component'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'component'
          }, {
            name: 'count'
          }],
          columns: [['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'], ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Pie/docs/examples/NoLabels.jsx


/* harmony default export */ var examples_NoLabels = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Pie_default.a, {
    options: {
      'chart.showLabels': false
    },
    encoding: {
      value: 'primary.count',
      label: 'primary.component'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'component'
          }, {
            name: 'count'
          }],
          columns: [['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'], ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Pie/docs/examples/LabelWithPercent.jsx


/* harmony default export */ var examples_LabelWithPercent = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Pie_default.a, {
    options: {
      'chart.showPercent': true
    },
    encoding: {
      value: 'primary.count',
      label: 'primary.component'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'component'
          }, {
            name: 'count'
          }],
          columns: [['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'], ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Pie/docs/examples/Threshold.jsx


/* harmony default export */ var examples_Threshold = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Pie_default.a, {
    options: {
      'chart.sliceCollapsingThreshold': 0.05
    },
    encoding: {
      value: 'primary.count',
      label: 'primary.component'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'component'
          }, {
            name: 'count'
          }],
          columns: [['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'], ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Pie/docs/examples/CollapsingLabel.jsx


/* harmony default export */ var examples_CollapsingLabel = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Pie_default.a, {
    options: {
      'chart.sliceCollapsingLabel': 'New Collapsing Label'
    },
    encoding: {
      value: 'primary.count',
      label: 'primary.component'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'component'
          }, {
            name: 'count'
          }],
          columns: [['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'], ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Pie/docs/examples/TruncatedSize.jsx


/* harmony default export */ var examples_TruncatedSize = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Pie_default.a, {
    options: {
      'chart.resultTruncationLimit': '5'
    },
    encoding: {
      value: 'primary.count',
      label: 'primary.component'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'component'
          }, {
            name: 'count'
          }],
          columns: [['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'], ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Pie/docs/examples/Donut.jsx


/* harmony default export */ var examples_Donut = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Pie_default.a, {
    options: {
      hasDonutHole: true
    },
    encoding: {
      value: 'primary.count',
      label: 'primary.component'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'component'
          }, {
            name: 'count'
          }],
          columns: [['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'], ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Pie/docs/examples/DonutTopLegend.jsx


/* harmony default export */ var examples_DonutTopLegend = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Pie_default.a, {
    options: {
      hasDonutHole: true,
      'legend.placement': 'top'
    },
    encoding: {
      value: 'primary.count',
      label: 'primary.component'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'component'
          }, {
            name: 'count'
          }],
          columns: [['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'], ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Pie/docs/examples/DonutOverflowEnd.jsx


/* harmony default export */ var examples_DonutOverflowEnd = (function () {
  return /*#__PURE__*/external_react_default.a.createElement(Pie_default.a, {
    options: {
      hasDonutHole: true,
      'legend.labelStyle.overflowMode': 'ellipsisEnd'
    },
    encoding: {
      value: 'primary.count',
      label: 'primary.component'
    },
    dataSources: {
      primary: {
        requestParams: {
          offset: 0,
          count: 20
        },
        data: {
          fields: [{
            name: 'component'
          }, {
            name: 'count'
          }],
          columns: [['January is one of the darkest month of the year', 'February', 'March', 'April', 'May', 'June', 'July', 'August is one of the hottest month of the year', 'September', 'October', 'November', 'December is the one of the coldest month of the year'], ['3', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50']]
        },
        meta: {
          totalCount: 20
        }
      }
    }
  });
});
// CONCATENATED MODULE: ./src/visualizations/Pie/docs/definition.js
/* harmony default export */ var definition = ({
  encoding: [{
    name: 'value',
    type: '[number]',
    desc: 'Specify the dataSource applied to a pie chart.',
    defaultValue: 'primary[1]',
    isRequired: 'true'
  }, {
    name: 'label',
    type: '[string]',
    desc: 'Specify the dataSource applied to a pie chart label.',
    defaultValue: 'primary[0]',
    isRequired: 'true'
  }],
  events: [{
    name: 'point.click',
    desc: 'trigger when user clicks a data point'
  }]
});
// EXTERNAL MODULE: external "@splunk/visualizations-shared/schemaUtils"
var schemaUtils_ = __webpack_require__(2);

// CONCATENATED MODULE: ./src/visualizations/Pie/optionsSchema.js

/* harmony default export */ var optionsSchema = ({
  backgroundColor: {
    description: 'Specify the Hex code for color used for a background. For example: "#0000FF".',
    pattern: schemaUtils_["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  fontColor: {
    description: 'Specify the Hex code for color used for a fonts (axis labels, legends). For example: "#0000FF".',
    pattern: schemaUtils_["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  foregroundColor: {
    description: 'Specify the Hex code for color used for a foreground. For example, "#0000FF".',
    pattern: schemaUtils_["COLOR_OR_TOKEN_PATTERN"],
    type: 'string'
  },
  fieldColors: {
    description: "Specify the Hex code for color used for a field. For example: {'count': '#008000', 'percent': '#FFA500'}. Note: Option type 'string' has been deprecated.",
    type: ['object', 'string']
  },
  seriesColors: {
    description: "Specify the Hex code for colors used for a series. For example, ['#FF0000', '#0000FF', '#008000'].\n            The default for light and dark mode is ['#1E93C6', '#F2B827', '#D6563C', '#6A5C9E', '#31A35F'].\n            The default for SCP mode is ['#A9F5E7', '#A870EF',  '#1E6271', '#45D4BA', '#602CA1',  '#9AE6F7', '#6CD0F0', '#2F8AA7',  '#422879', '#F29BAC', '#E85B79', '#C6335F',  '#FDAF93', '#FB865C', '#E9643A',  '#7EEFDA', '#26AA92', '#207865', '#C093F9', '#8747DA',  '#4EB2D2', '#912344',  '#AD3F20', '#D44C20', '#FFC34E',  '#95651D',  '#C0891E', '#ECAE11', '#FCD9A4', '#78062A'].\n            Note: Option type 'string' has been deprecated.",
    type: ['array', 'string'],
    items: {
      type: 'string'
    }
  },
  'chart.sliceCollapsingLabel': {
    default: 'other',
    description: 'Specify the label for the consolidated slice.',
    type: 'string'
  },
  'chart.sliceCollapsingThreshold': {
    default: 0.01,
    description: 'Specify the size threshold as a number between 0 and 1 (inclusive), of the whole pie at which slices collapse into one consolidated slice.',
    type: 'number'
  },
  'chart.resultTruncationLimit': {
    default: 50000,
    description: 'Specify a limit for the number of data points rendered in a chart.',
    type: 'number'
  },
  'chart.showLabels': {
    default: true,
    description: 'Specify whether to display labels. This option has no effect when hasDonutHole=true.',
    type: 'boolean'
  },
  'chart.showPercent': {
    default: false,
    description: 'Specify whether to display percentage values in the labels.',
    type: 'boolean'
  },
  'legend.placement': {
    default: 'right',
    description: 'Specify how the legend should be aligned. This option only has an effect when hasDonutHole=true.',
    pattern: Object(schemaUtils_["getPattern"])(['right', 'left', 'top', 'bottom', 'none']),
    type: 'string'
  },
  'legend.labelStyle.overflowMode': {
    default: 'ellipsisMiddle',
    description: 'Specify how to display legend labels when they overflow the layout boundaries by replacing overflow text with an ellipsis.',
    pattern: Object(schemaUtils_["getPattern"])(['ellipsisEnd', 'ellipsisMiddle', 'ellipsisStart', 'ellipsisNone']),
    type: 'string'
  },
  hasDonutHole: {
    default: false,
    description: 'Specify whether the pie should be a donut.',
    type: 'boolean'
  }
});
// CONCATENATED MODULE: ./src/visualizations/Pie/docs/index.jsx






































function PieDoc() {
  return /*#__PURE__*/external_react_default.a.createElement(VisualizationDocPage_default.a, {
    title: "Pie",
    examplesSection: [/*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Basic Pie",
      key: "basic_pie",
      description: "Pie takes 100% width and 250px height by default.",
      code: Basic,
      example: examples_Basic
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Background Color - Orange",
      key: "backgroundcolor",
      description: "Background color specified.",
      code: BackgroundColor,
      example: examples_BackgroundColor
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Foreground Color - Red",
      key: "foregroundcolor",
      description: "Foreground color specified.",
      code: ForegroundColor,
      example: examples_ForegroundColor
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Font Color - Purple",
      key: "fontcolor",
      description: "Font color specified.",
      code: FontColor,
      example: examples_FontColor
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Series Colors: Yellow, Blue, Green",
      key: "seriescolors",
      description: "Series colors specified.",
      code: SeriesColors,
      example: examples_SeriesColors
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Field Color: December - Green, May - Red",
      key: "fieldcolors",
      description: "Field colors specified.",
      code: FieldColors,
      example: examples_FieldColors
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "No Labels Pie",
      key: "no_labels_pie",
      description: "No Labels will be rendered when chart.showLabels equals to false. Defaults to true.",
      code: NoLabels,
      example: examples_NoLabels
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Pie Labels with Percent",
      key: "labels_with_percent_pie",
      description: "Labels with Percent will be rendered when chart.showPercent equals to true. Defaults to false.",
      code: LabelWithPercent,
      example: examples_LabelWithPercent
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Slice Collapsing Threshold - 5",
      key: "slice_collapsing_threshold",
      description: "The threshold at which smaller slices collapse into a consolidated slice. This option only applies when there are more than 10 slices. 0 indicates no collapsing. Valid values are between 0 and 1. Number 1 indicates all slices collapse into a single pie. The default value, 0.01, collapses slices smaller than 1% of the whole pie.",
      code: Threshold,
      example: examples_Threshold
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Custom Collapsing Label - New Collapsing Label",
      key: "collapsing_label",
      description: "The label for the consolidated slice. Defaults to 'other'.",
      code: CollapsingLabel,
      example: examples_CollapsingLabel
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Truncated Size Pie",
      key: "truncated_size_pie",
      description: "A truncated size pie will be rendered when providing width and height.",
      code: TruncatedSize,
      example: examples_TruncatedSize
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Donut",
      key: "donut",
      description: "A donut-like pie.",
      code: Donut,
      example: examples_Donut
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Donut with Legend on Top",
      key: "donut_top_legend",
      description: "A donut-like pie with legend on top.",
      code: DonutTopLegend,
      example: examples_DonutTopLegend
    }), /*#__PURE__*/external_react_default.a.createElement(DocExample_default.a, {
      title: "Donut Legend Label Overflow Mode - End",
      key: "donut_overflow_end",
      description: "A donut-like pie with legend label overflow mode is end.",
      code: DonutOverflowEnd,
      example: examples_DonutOverflowEnd
    })],
    encodingSection: /*#__PURE__*/external_react_default.a.createElement(EncodingDoc_default.a, {
      encoding: definition.encoding
    }),
    optionSection: /*#__PURE__*/external_react_default.a.createElement(OptionsDoc_default.a, {
      options: optionsSchema
    }),
    eventSection: /*#__PURE__*/external_react_default.a.createElement(EventsDoc_default.a, {
      events: definition.events,
      Visualization: Pie_default.a,
      encoding: {
        value: 'primary.count',
        label: 'primary.component'
      },
      dsState: {
        primary: {
          requestParams: {
            offset: 0,
            count: 20
          },
          data: {
            fields: [{
              name: 'component'
            }, {
              name: 'count'
            }],
            columns: [['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'], ['1', '1', '1', '2', '10', '10', '5', '5', '5', '5', '5', '50']]
          },
          meta: {
            totalCount: 20
          }
        }
      }
    })
  });
}

/* harmony default export */ var docs = __webpack_exports__["default"] = (PieDoc);

/***/ }),

/***/ 9:
/***/ (function(module, exports) {

module.exports = require("@splunk/visualizations-shared/VisualizationDocPage");

/***/ })

/******/ });
//# sourceMappingURL=Pie.js.map