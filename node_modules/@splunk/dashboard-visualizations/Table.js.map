{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@splunk/ui-utils/i18n\"","webpack:///external \"@splunk/visualizations-shared/schemaUtils\"","webpack:///external \"react\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"@splunk/themes/variables\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"prop-types\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@splunk/dashboard-visualizations/common/BaseVisualization\"","webpack:///external \"styled-components\"","webpack:///external \"@babel/runtime/helpers/taggedTemplateLiteral\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"@babel/runtime/helpers/extends\"","webpack:///external \"@splunk/visualizations-shared/style\"","webpack:///external \"@splunk/dashboard-visualizations/common/IconPlaceholder\"","webpack:///external \"@splunk/themes/pick\"","webpack:///external \"@splunk/dashboard-visualizations/common/VisualizationEvent\"","webpack:///external \"@splunk/visualization-themes/variables\"","webpack:///external \"@splunk/visualization-icons\"","webpack:///external \"lodash/get\"","webpack:///external \"lodash\"","webpack:///external \"@splunk/visualizations-shared/colorUtils\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///external \"@splunk/dashboard-visualizations/utils/dataUtils\"","webpack:///external \"lodash/isEmpty\"","webpack:///external \"@splunk/visualization-encoding-parsers/SingleValueParser\"","webpack:///external \"@splunk/dashboard-visualizations/utils/paginationUtils\"","webpack:///external \"@splunk/visualizations-shared/Message\"","webpack:///external \"@babel/runtime/helpers/assertThisInitialized\"","webpack:///external \"@splunk/react-ui/Table\"","webpack:///external \"lodash/pick\"","webpack:///external \"@splunk/themes/getTheme\"","webpack:///external \"lodash/each\"","webpack:///external \"@splunk/react-visualizations/utils/numberUtils\"","webpack:///external \"@splunk/themes\"","webpack:///./src/utils/enhancer.jsx","webpack:///external \"@babel/runtime/helpers/objectWithoutProperties\"","webpack:///external \"lodash/isUndefined\"","webpack:///external \"@splunk/visualizations-shared/SizeAwareWrapper\"","webpack:///external \"@splunk/visualizations-shared/SanitizeProps\"","webpack:///external \"@splunk/themes/getSettingsFromThemedProps\"","webpack:///./src/common/editorConfig/NumberFormatting.js","webpack:///external \"@splunk/dashboard-visualizations/utils/propUtils\"","webpack:///external \"chroma-js\"","webpack:///external \"@splunk/dashboard-visualizations/utils/timeUtils\"","webpack:///external \"@splunk/visualization-encoding-parsers/TableParser\"","webpack:///external \"@splunk/dashboard-visualizations/utils/DataSet\"","webpack:///external \"@splunk/dashboard-visualizations/utils/numberUtils\"","webpack:///external \"react-event-listener\"","webpack:///external \"@splunk/react-sparkline/Line\"","webpack:///./src/visualizations/Table/cells/CellPropShape.js","webpack:///./src/visualizations/Table/cells/SparklineCell.jsx","webpack:///./src/visualizations/Table/cells/TimeCell.jsx","webpack:///./src/visualizations/Table/cells/NumberCell.jsx","webpack:///./src/visualizations/Table/cells/StringCell.jsx","webpack:///./src/visualizations/Table/cells/ArrayCell.jsx","webpack:///./src/visualizations/Table/optionsSchema.js","webpack:///./src/visualizations/Table/editorConfig.js","webpack:///./src/visualizations/Table/Table.jsx"],"names":["Item","width","style","toPx","props","FixSizeItem","height","ItemContent","styled","FixSizeItemContent","Blocker","Cover","getEncodingBackgroundColor","isTypeOfSingleValue","isEmpty","parsed","parse","getDefaultThemedBackgroundColor","theme","themeVariables","getSettingsFromThemedProps","family","colorScheme","DefaultPlaceHolder","_","T","extendViz","extendProperties","each","pick","Viz","defaultShowPlaceholder","dataSources","loading","data","get","withPlaceholder","placeholder","shouldShowPlaceholder","Wrapper","show","withPaginator","VizHeightOffset","defaultPageable","Container","toDimension","getPaginationInformation","totalPages","currentPage","isPaging","requestParams","pageable","isUndefined","onRequestParamsChange","fixedHeight","PaginatorContainer","vizHeight","vizProps","renderPaginator","withBackgroundColor","defaultBackgroundColor","enableBackgroundColorOption","encoding","options","type","getTheme","defaultThemedBackgroundColor","encodingBackgroundColor","backgroundColor","isColor","overrideProps","containerDimension","withEventBlocker","mode","withVisualizationHOCs","withVisualizationAndThemeHOCs","withTheme","withSanitizedOptions","rest","sanitizedOptions","sanitize","numberFormatting","label","layout","option","editor","editorProps","min","values","value","CellPropTypes","onCellClick","cellOptions","fieldOptions","object","CellDefaultProps","CellDefaultStyle","maxWidth","overflow","textOverflow","whiteSpace","SparklineCell","debounce","cell","offsetWidth","align","sparklineData","map","filter","position","computeSize","left","right","top","bottom","Component","isSparklineData","TimeCell","textColor","timeGranularity","time","formatTime","color","computeColorStyle","dataOverlayMode","heatRange","heatOffset","maxNumber","max","minNumber","heatValue","Math","number","chroma","NumberCell","numberPrecision","useThousandSeparators","unit","unitPosition","defaultPrecision","parseNumber","v","formatNumber","isNumerial","StringCell","ChildCell","enterprise","light","variables","dark","accentColorD50","formatNumberValue","defaultFormatValue","ArrayCell","paddingRight","paddingLeft","clickable","Table","formatValue","childCells","formattedValue","undefined","Array","description","pattern","count","default","rowNumbers","showHeader","headerBackgroundColor","headerTextColor","rowBackgroundColorEven","rowBackgroundColorOdd","rowTextColorEven","rowTextColorOdd","maximum","minimum","getPattern","editorConfig","pickFromTheme","prisma","neutral500","showEditor","backgroundColorSidebar","gray20","interactiveColorBackground","black","backgroundColorPage","DefaultCellRenders","RowNumberCell","white","NormalTableContainer","toMargin","FixedHeightTableContainer","NonVisibleTableHead","StyledTable","$headerBackgroundColor","$headerTextColor","css","computeOverlay","newFieldOptions","numericFields","dataSet","name","allNumericValues","bounds","getPercentiles","a","lower","computeTimeGranularity","reduce","mergedOptions","dataColumn","computeGranularity","determineFieldType","isTimeField","isNumericArray","isSparklineArray","computeFieldsOptions","fieldsOptions","rowIndex","TableVisualization","customRenderers","originalEvent","payload","fieldValue","cellIndex","cellValue","rowValue","row","getRequestParams","currentSort","nextSort","sort","key","fieldName","customStyles","Cell","renderer","rowContext","columnsFieldName","columns","perPage","TableContainer","hasCustomTextColors","fields","rows","margin","TableHead","getAlternatingColor","BaseVisualization","propTypes","cellRenderers","array","defaultProps","dataContract","initialDimension","optionsSchema"],"mappings":"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","file":"Table.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 138);\n","module.exports = require(\"@splunk/ui-utils/i18n\");","module.exports = require(\"@splunk/visualizations-shared/schemaUtils\");","module.exports = require(\"react\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@splunk/themes/variables\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"prop-types\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@splunk/dashboard-visualizations/common/BaseVisualization\");","module.exports = require(\"styled-components\");","module.exports = require(\"@babel/runtime/helpers/taggedTemplateLiteral\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"@babel/runtime/helpers/extends\");","module.exports = require(\"@splunk/visualizations-shared/style\");","module.exports = require(\"@splunk/dashboard-visualizations/common/IconPlaceholder\");","module.exports = require(\"@splunk/themes/pick\");","module.exports = require(\"@splunk/dashboard-visualizations/common/VisualizationEvent\");","module.exports = require(\"@splunk/visualization-themes/variables\");","module.exports = require(\"@splunk/visualization-icons\");","module.exports = require(\"lodash/get\");","module.exports = require(\"lodash\");","module.exports = require(\"@splunk/visualizations-shared/colorUtils\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"@splunk/dashboard-visualizations/utils/dataUtils\");","module.exports = require(\"lodash/isEmpty\");","module.exports = require(\"@splunk/visualization-encoding-parsers/SingleValueParser\");","module.exports = require(\"@splunk/dashboard-visualizations/utils/paginationUtils\");","module.exports = require(\"@splunk/visualizations-shared/Message\");","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"@splunk/react-ui/Table\");","module.exports = require(\"lodash/pick\");","module.exports = require(\"@splunk/themes/getTheme\");","module.exports = require(\"lodash/each\");","module.exports = require(\"@splunk/react-visualizations/utils/numberUtils\");","module.exports = require(\"@splunk/themes\");","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport T from 'prop-types';\nimport styled, { withTheme } from 'styled-components';\nimport get from 'lodash/get';\nimport pick from 'lodash/pick';\nimport each from 'lodash/each';\nimport isUndefined from 'lodash/isUndefined';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { _ } from '@splunk/ui-utils/i18n';\nimport { parse } from '@splunk/visualization-encoding-parsers/SingleValueParser';\nimport Message from '@splunk/visualizations-shared/Message';\nimport { toDimension, toPx } from '@splunk/visualizations-shared/style';\nimport SizeAwareWrapper from '@splunk/visualizations-shared/SizeAwareWrapper';\nimport {\n    renderPaginator,\n    getPaginationInformation,\n    FixedHeightPaginatorContainer,\n} from '@splunk/dashboard-visualizations/utils/paginationUtils';\nimport { sanitize } from '@splunk/visualizations-shared/SanitizeProps';\nimport { isColor } from '@splunk/visualizations-shared/colorUtils';\nimport getTheme from '@splunk/themes/getTheme';\nimport getSettingsFromThemedProps from '@splunk/themes/getSettingsFromThemedProps';\n\nconst Item = styled.div.attrs(({ width }) => ({\n    style: {\n        width: toPx(width),\n    },\n}))`\n    position: relative;\n    background-color: ${props => props.backgroundColor};\n`;\n\n// Use `.attrs()` for highly dynamic styles. Ref: https://github.com/styled-components/styled-components/issues/134#issuecomment-312415291\nconst FixSizeItem = styled.div.attrs(({ width, height }) => ({\n    style: {\n        ...(width && { width: toPx(width) }),\n        ...(height && { height: toPx(height) }),\n    },\n}))`\n    position: relative;\n    flex-direction: column;\n    flex: 1;\n    display: flex;\n    background-color: ${props => props.backgroundColor};\n`;\n\nconst ItemContent = styled.div`\n    position: relative;\n    min-height: 100px;\n    width: 100%;\n`;\n\nconst FixSizeItemContent = styled.div`\n    min-height: 0px;\n    flex: 1;\n    position: relative;\n`;\n\nconst Blocker = styled.div`\n    position: relative;\n    width: 100%;\n    height: 100%;\n`;\n\nconst Cover = styled.div`\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n`;\n\n/**\n * Todo: Need remove this function when we refactor `fill` encoding of Single Value not for background color.\n * Helper function. Necessary since not all Viz will have a background color derived from encoding.\n *\n * @param {*} dataSources\n * @param {*} encoding\n * @param {String} type Viz type\n * @returns {String} color\n */\nconst getEncodingBackgroundColor = (dataSources, encoding, type) => {\n    const isTypeOfSingleValue = vizType => ['viz.singlevalue', 'viz.singlevalueradial'].includes(vizType);\n    if (isTypeOfSingleValue(type) && !isEmpty(dataSources) && encoding) {\n        const parsed = parse(dataSources, encoding);\n        return parsed.backgroundColor || '';\n    }\n    return '';\n};\n\n/**\n * Internal helper to get the default themed background color for enhancer\n * enterprise.dark is using black; however enterprise.light and prisma use backgroundColorSidebar as per design\n * @param {Object} params.theme - theme context object containing the theme family, colorScheme, and density\n * @param {Object} params.themeVariables - all variables available to use for the given theme\n */\nconst getDefaultThemedBackgroundColor = ({ theme, themeVariables }) => {\n    const { family, colorScheme } = getSettingsFromThemedProps({ theme });\n    return family === 'enterprise' && colorScheme === 'dark'\n        ? themeVariables?.black\n        : themeVariables?.backgroundColorSidebar;\n};\n\n/**\n * default empty datasource placeholder\n * @param {Number} width\n * @param {Number} height\n */\nconst DefaultPlaceHolder = ({ width, height }) => (\n    <Message width={width} height={height} level=\"warning\" message={_('No DataSource Connected')} />\n);\nDefaultPlaceHolder.propTypes = {\n    /**\n     * width in pixel or string, defaults to 100%\n     */\n    width: T.oneOfType([T.string, T.number]),\n    /**\n     * height in pixel or string\n     */\n    height: T.oneOfType([T.string, T.number]),\n};\n\n/**\n * pass static props to new viz\n * @param {ReactElement} Base\n * @param {ReactElement} Viz\n */\nconst extendViz = (Base, Viz) => {\n    const extendProperties = ['dataContract', 'vizContract', 'propTypes', 'defaultProps', 'schema', 'editor'];\n    each(pick(Base, extendProperties), (v, k) => {\n        if (v) {\n            Viz[k] = v; // eslint-disable-line no-param-reassign\n        }\n    });\n};\n\n/**\n * display placeholder if no primary datasource is connected or\n * primary datasource does not have any search data\n * @param {Object} props\n */\nexport const defaultShowPlaceholder = props => {\n    const { dataSources, loading } = props;\n    if (loading || !dataSources || !dataSources.primary) {\n        return true;\n    }\n    const data = get(dataSources, 'primary.data');\n    return !data || !data.columns || !data.columns.length;\n};\n\n/**\n * HOC that renders a placeholder if viz does not connect to datasource\n * or datasource does not have any data\n * @param {ReactElement} placeholder placeholder react element\n * @param {Function} shouldShowPlaceholder a function return true/false to indicate if a placeholder should be rendered\n */\nexport const withPlaceholder = ({\n    placeholder = <DefaultPlaceHolder />,\n    shouldShowPlaceholder = defaultShowPlaceholder,\n}) => Visualization => {\n    const Wrapper = props => {\n        const show = shouldShowPlaceholder(props);\n        if (show) {\n            return React.cloneElement(placeholder, {\n                width: props.width,\n                height: props.height,\n            });\n        }\n        return <Visualization {...props} />;\n    };\n    extendViz(Visualization, Wrapper);\n    return Wrapper;\n};\n\n/**\n * HOC that renders the visualization with a Paginator component\n * @param {ReactElement} Visualization Visualization Element\n * @param {Number} VizHeightOffset Visualization specific value to reduce height by in order to make room for the Paginator\n * @param {Boolean} defaultPageable Visualization specific default value for whether pagination should be enabled\n */\nexport const withPaginator = ({ VizHeightOffset = 0, defaultPageable = false }) => Visualization => {\n    const Container = styled.div`\n        overflow: hidden;\n        position: relative;\n        ${props => toDimension(pick(props, ['width', 'height']))};\n    `;\n    const Wrapper = props => {\n        const { totalPages, currentPage, isPaging, requestParams } = getPaginationInformation(props);\n        const pageable =\n            props.options && !isUndefined(props.options.pageable) ? props.options.pageable : defaultPageable;\n        const { height, width, onRequestParamsChange } = props;\n\n        const fixedHeight = height != null;\n        const PaginatorContainer = fixedHeight ? FixedHeightPaginatorContainer : null;\n        const vizHeight = isPaging && pageable && VizHeightOffset ? height - VizHeightOffset : height;\n        const vizProps = { ...props, height: vizHeight };\n\n        return (\n            <Container data-test=\"paginator-wrapper\" width={width} height={height}>\n                <Visualization {...vizProps} />\n                {pageable &&\n                    renderPaginator({\n                        totalPages,\n                        currentPage,\n                        isPaging,\n                        requestParams,\n                        theme: props.theme,\n                        onRequestParamsChange,\n                        ...(fixedHeight && { PaginatorContainer }),\n                    })}\n            </Container>\n        );\n    };\n    extendViz(Visualization, Wrapper);\n    return Wrapper;\n};\n\n/**\n * HOC that renders a container that provides a background color and size\n * @param {Function|String} defaultBackgroundColor default background color for a viz\n * @param {Function|Boolean} enableBackgroundColorOption indicate whether backgroundColor in option should be applied if present\n * @param {ReactElement} Visualization\n */\nexport const withBackgroundColor = ({\n    defaultBackgroundColor,\n    enableBackgroundColorOption,\n}) => Visualization => {\n    const Wrapper = props => {\n        const { dataSources, encoding, options = {}, width, height, theme, type } = props;\n        // due to the computational nature of backgroundColor,\n        // we use getTheme and inspect the hardcoded internal to unconditionally pass dark prisma themes variables if no SplunkThemeProvider is present\n        // in this case, we default to transparent if no theme is present\n        // TODO: move away from hardcoded internal that may change\n        const themeVariables = theme?.splunkThemeV1 ? getTheme(theme?.splunkThemeV1) : {};\n        const defaultThemedBackgroundColor = getDefaultThemedBackgroundColor({ theme, themeVariables });\n        const encodingBackgroundColor = getEncodingBackgroundColor(dataSources, encoding, type);\n        const backgroundColor =\n            (isColor(encodingBackgroundColor) && encodingBackgroundColor) ||\n            (enableBackgroundColorOption && isColor(options.backgroundColor) && options.backgroundColor) ||\n            defaultThemedBackgroundColor ||\n            defaultBackgroundColor ||\n            'transparent';\n\n        return !height ? (\n            <Item data-test=\"item\" width={width} backgroundColor={backgroundColor}>\n                <ItemContent>\n                    <Visualization {...props} />\n                </ItemContent>\n            </Item>\n        ) : (\n            <FixSizeItem\n                data-test=\"fix-size-item\"\n                width={width}\n                height={height}\n                backgroundColor={backgroundColor}\n            >\n                <FixSizeItemContent>\n                    <SizeAwareWrapper>\n                        {containerDimension => {\n                            const overrideProps = {\n                                ...props,\n                                width: containerDimension.width,\n                                height: containerDimension.height,\n                            };\n                            return <Visualization {...overrideProps} />;\n                        }}\n                    </SizeAwareWrapper>\n                </FixSizeItemContent>\n            </FixSizeItem>\n        );\n    };\n    extendViz(Visualization, Wrapper);\n    return Wrapper;\n};\n\n/**\n * HOC that renders a cover layer in edit mode\n * @param {ReactElement} Visualization\n */\nexport const withEventBlocker = Visualization => {\n    const Wrapper = props => {\n        const { mode } = props;\n        return (\n            <Blocker>\n                <Visualization {...props} />\n                {mode === 'edit' && <Cover />}\n            </Blocker>\n        );\n    };\n    extendViz(Visualization, Wrapper);\n    return Wrapper;\n};\n\n/**\n * HOC combination for a generic viz\n * @param {Function|String} defaultBackgroundColor default background color for a viz\n * @param {Function|Boolean} enableBackgroundColorOption indicate whether backgroundColor in option should be applied if present-\n * @param {ReactElement} placeholder\n */\nexport const withVisualizationHOCs = ({\n    defaultBackgroundColor,\n    enableBackgroundColorOption = true,\n    placeholder,\n}) => Viz =>\n    withBackgroundColor({ defaultBackgroundColor, enableBackgroundColorOption })(\n        withPlaceholder({\n            placeholder,\n        })(withEventBlocker(Viz))\n    );\n\n/**\n * HOC combination for viz with theme information\n * @param {Function|Boolean} enableBackgroundColorOption indicate whether backgroundColor in option should be applied if present-\n * @param {Function|String} defaultBackgroundColor default background color for a viz\n * @param {ReactElement} placeholder\n */\nexport const withVisualizationAndThemeHOCs = ({\n    enableBackgroundColorOption,\n    defaultBackgroundColor,\n    placeholder,\n}) => Viz =>\n    // splunk-charting need to access theme prop, so we use additional withTheme hoc.\n    withTheme(\n        withVisualizationHOCs({ enableBackgroundColorOption, defaultBackgroundColor, placeholder })(Viz)\n    );\n\n/**\n * HOC that sanitizes options.\n * @param {ReactElement} Visualization\n */\nexport const withSanitizedOptions = Visualization => {\n    const Wrapper = props => {\n        const { options, ...rest } = props;\n        const sanitizedOptions = sanitize(options);\n        return <Visualization options={sanitizedOptions} {...rest} />;\n    };\n    extendViz(Visualization, Wrapper);\n    return Wrapper;\n};\n","module.exports = require(\"@babel/runtime/helpers/objectWithoutProperties\");","module.exports = require(\"lodash/isUndefined\");","module.exports = require(\"@splunk/visualizations-shared/SizeAwareWrapper\");","module.exports = require(\"@splunk/visualizations-shared/SanitizeProps\");","module.exports = require(\"@splunk/themes/getSettingsFromThemedProps\");","import { _ } from '@splunk/ui-utils/i18n';\n\nconst numberFormatting = {\n    label: _('Number Formatting'),\n    layout: [\n        [\n            {\n                label: _('Digit Precision'),\n                option: 'numberPrecision',\n                editor: 'editor.number',\n                editorProps: {\n                    min: 0,\n                },\n            },\n        ],\n        [\n            {\n                label: _('Unit'),\n                option: 'unit',\n                editor: 'editor.text',\n            },\n            {\n                label: _('Position'), // todo: we need a new editor combining unit and position\n                option: 'unitPosition',\n                editor: 'editor.select',\n                editorProps: {\n                    values: [\n                        { label: _('Before'), value: 'before' },\n                        { label: _('After'), value: 'after' },\n                    ],\n                },\n            },\n        ],\n    ],\n};\n\nexport default numberFormatting;\n","module.exports = require(\"@splunk/dashboard-visualizations/utils/propUtils\");","module.exports = require(\"chroma-js\");","module.exports = require(\"@splunk/dashboard-visualizations/utils/timeUtils\");","module.exports = require(\"@splunk/visualization-encoding-parsers/TableParser\");","module.exports = require(\"@splunk/dashboard-visualizations/utils/DataSet\");","module.exports = require(\"@splunk/dashboard-visualizations/utils/numberUtils\");","module.exports = require(\"react-event-listener\");","module.exports = require(\"@splunk/react-sparkline/Line\");","import T from 'prop-types';\n\nexport const CellPropTypes = {\n    onCellClick: T.func,\n    value: T.oneOfType([T.number, T.string, T.array]).isRequired,\n    cellOptions: T.object,\n    fieldOptions: T.object,\n};\n\nexport const CellDefaultProps = {\n    cellOptions: {},\n    fieldOptions: {},\n    onCellClick: () => {},\n};\n\nexport const CellDefaultStyle = {\n    maxWidth: '100px',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n};\n","import { filter, map, debounce } from 'lodash';\nimport React, { Component } from 'react';\nimport EventListener from 'react-event-listener';\nimport Table from '@splunk/react-ui/Table';\nimport Line from '@splunk/react-sparkline/Line';\nimport { isNumerial, parseNumber } from '@splunk/react-visualizations/utils/numberUtils';\nimport { isSparklineData } from '@splunk/dashboard-visualizations/utils/dataUtils';\nimport { CellPropTypes, CellDefaultProps } from './CellPropShape';\n\n/**\n * A Cell renders a Sparkline\n */\nclass SparklineCell extends Component {\n    computeSize = debounce(() => {\n        const { cell } = this.state;\n        if (cell) {\n            this.setState({\n                height: cell.offsetHeight,\n                width: cell.offsetWidth,\n            });\n        }\n    }, 5);\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            cell: null,\n            width: null,\n            height: null,\n        };\n    }\n\n    onCellMount = cell => {\n        this.setState(\n            {\n                cell,\n            },\n            this.computeSize\n        );\n    };\n\n    render() {\n        const {\n            value,\n            fieldOptions: { align },\n            onCellClick,\n        } = this.props;\n        const sparklineData = map(filter(value.slice(1), isNumerial), parseNumber);\n        const { width, height } = this.state;\n        const style = { position: 'relative' };\n        return (\n            <Table.Cell\n                style={style}\n                elementRef={this.onCellMount}\n                align={align}\n                test-cell-type=\"sparkline\"\n                onClick={onCellClick}\n            >\n                <EventListener target={window} onResize={this.computeSize} />\n                {width && (\n                    <Line\n                        style={{\n                            position: 'absolute',\n                            left: '5px',\n                            right: '0px',\n                            top: '5px',\n                            bottom: '0px',\n                        }}\n                        data={sparklineData}\n                        isArea\n                        height={height - 8}\n                        width={width - 10}\n                    />\n                )}\n            </Table.Cell>\n        );\n    }\n}\n\nSparklineCell.propTypes = CellPropTypes;\nSparklineCell.defaultProps = CellDefaultProps;\nSparklineCell.canRender = (field, fieldOptions, value) =>\n    fieldOptions.type === 'sparkline' && isSparklineData(value);\nexport default SparklineCell;\n","import React from 'react';\nimport Table from '@splunk/react-ui/Table';\nimport { formatTime } from '@splunk/dashboard-visualizations/utils/timeUtils';\nimport { CellPropTypes, CellDefaultProps, CellDefaultStyle } from './CellPropShape';\n\nconst TimeCell = ({\n    value,\n    onCellClick,\n    cellOptions: { textColor },\n    fieldOptions: { timeGranularity, align },\n}) => {\n    const time = formatTime(value, timeGranularity);\n    const style = { ...CellDefaultStyle, color: textColor };\n    return (\n        <Table.Cell align={align} style={style} title={time} onClick={onCellClick} test-cell-type=\"time\">\n            {time}\n        </Table.Cell>\n    );\n};\n\nTimeCell.propTypes = CellPropTypes;\nTimeCell.defaultProps = CellDefaultProps;\nTimeCell.canRender = (field, fieldOptions) => fieldOptions.type === 'time';\n\nexport default TimeCell;\n","import React from 'react';\nimport chroma from 'chroma-js';\nimport Table from '@splunk/react-ui/Table';\nimport { formatNumber, isNumerial, parseNumber } from '@splunk/react-visualizations/utils/numberUtils';\nimport { CellPropTypes, CellDefaultProps, CellDefaultStyle } from './CellPropShape';\n\nconst computeColorStyle = (\n    number,\n    { dataOverlayMode, textColor },\n    { heatRange, heatOffset, max: maxNumber, min: minNumber }\n) => {\n    const style = { ...CellDefaultStyle, color: textColor };\n    let heatValue;\n    switch (dataOverlayMode) {\n        case 'heatmap':\n            heatValue =\n                heatRange === 0\n                    ? 0\n                    : Math.min(Math.max(Math.ceil(((number - heatOffset) / heatRange) * 1000) / 1000, 0), 1);\n\n            style.backgroundColor = chroma.scale(['#FFFFFF', '#D6563C'])(heatValue).hex();\n            break;\n        case 'highlow':\n            if (number === minNumber) {\n                style.backgroundColor = chroma('#1E93C6').hex();\n            } else if (number === maxNumber) {\n                style.backgroundColor = chroma('#D6563C').hex();\n            }\n            break;\n        default:\n            break;\n    }\n    return style;\n};\n\nconst NumberCell = ({ value, onCellClick, cellOptions, fieldOptions }) => {\n    const { numberPrecision, useThousandSeparators, unit, unitPosition, defaultPrecision = 20 } = cellOptions;\n    const number = parseNumber(value);\n    let v = number;\n    v = formatNumber(number, numberPrecision, { useThousandSeparators, defaultPrecision });\n    const style = computeColorStyle(number, cellOptions, fieldOptions);\n    if (unit) {\n        v = unitPosition === 'before' ? `${unit} ${v}` : `${v} ${unit}`;\n    }\n    return (\n        <Table.Cell\n            data-test=\"NumberCell-Test\"\n            style={style}\n            title={v}\n            align={fieldOptions.align}\n            onClick={onCellClick}\n            test-cell-type=\"number\"\n        >\n            {v}\n        </Table.Cell>\n    );\n};\n\nNumberCell.propTypes = CellPropTypes;\nNumberCell.defaultProps = CellDefaultProps;\nNumberCell.canRender = (field, fieldOptions, value) => isNumerial(value);\nexport default NumberCell;\n","import React from 'react';\nimport Table from '@splunk/react-ui/Table';\nimport { CellPropTypes, CellDefaultProps, CellDefaultStyle } from './CellPropShape';\n\nconst StringCell = ({ value, cellOptions: { textColor }, fieldOptions: { align }, onCellClick }) => {\n    const style = { ...CellDefaultStyle, color: textColor };\n    return (\n        <Table.Cell align={align} style={style} title={value} test-cell-type=\"string\" onClick={onCellClick}>\n            {value ?? ''}\n        </Table.Cell>\n    );\n};\n\nStringCell.propTypes = CellPropTypes;\nStringCell.defaultProps = CellDefaultProps;\nStringCell.canRender = () => true;\nexport default StringCell;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Table from '@splunk/react-ui/Table';\nimport { pick, variables } from '@splunk/themes';\nimport { formatNumber, parseNumber } from '@splunk/react-visualizations/utils/numberUtils';\nimport { CellPropTypes, CellDefaultProps, CellDefaultStyle } from './CellPropShape';\n\nconst ChildCell = styled.div`\n    padding-right: 12px;\n    padding-left: 12px;\n\n    &[data-text-align='right'] {\n        text-align: right;\n    }\n\n    &[data-text-align='center'] {\n        text-align: center;\n    }\n\n    &[data-clickable] {\n        cursor: pointer;\n\n        &:hover {\n            background-color: ${pick({\n                enterprise: {\n                    light: variables.accentColorL50,\n                    dark: variables.accentColorD50,\n                },\n            })};\n            box-shadow: ${variables.focusShadowInset};\n        }\n\n        &:focus {\n            box-shadow: ${variables.focusShadowInset};\n            outline: none;\n        }\n    }\n`;\n\nconst formatNumberValue = ({ value, cellOptions }) => {\n    const { numberPrecision, useThousandSeparators, unit, unitPosition, defaultPrecision = 20 } = cellOptions;\n    const number = parseNumber(value);\n    let v = formatNumber(number, numberPrecision, { useThousandSeparators, defaultPrecision });\n    if (unit) {\n        v = unitPosition === 'before' ? `${unit} ${v}` : `${v} ${unit}`;\n    }\n    return v;\n};\n\nconst defaultFormatValue = ({ value }) => value;\n\nconst ArrayCell = ({ value: values, cellOptions, fieldOptions, onCellClick }) => {\n    const { align, type } = fieldOptions;\n    const style = {\n        ...CellDefaultStyle,\n        color: cellOptions.textColor,\n        paddingRight: 0,\n        paddingLeft: 0,\n    };\n    const clickable = onCellClick !== Table.Cell.defaultProps.onClick;\n    const formatValue = type === 'number' ? formatNumberValue : defaultFormatValue;\n    const childCells = values.map((value, index) => {\n        const formattedValue = formatValue({ value, cellOptions, fieldOptions });\n        return (\n            <ChildCell\n                // eslint-disable-next-line react/no-array-index-key\n                key={index}\n                data-test=\"child-cell\"\n                title={formattedValue}\n                data-clickable={clickable}\n                onClick={onCellClick}\n                tabIndex={clickable ? 0 : undefined}\n            >\n                {formattedValue}\n            </ChildCell>\n        );\n    });\n\n    return (\n        <Table.Cell align={align} style={style} test-cell-type=\"array\">\n            {childCells}\n        </Table.Cell>\n    );\n};\n\nArrayCell.propTypes = CellPropTypes;\nArrayCell.defaultProps = CellDefaultProps;\nArrayCell.canRender = (field, fieldOptions, value) => Array.isArray(value);\nexport default ArrayCell;\n","import { COLOR_OR_TOKEN_PATTERN, getPattern } from '@splunk/visualizations-shared/schemaUtils';\n\nexport default {\n    backgroundColor: {\n        description:\n            'Specify the color to use for the chart background using a Hex code. The default for light mode is \"#ffffff\". The default for dark mode is \"#212527\". The default for prisma dark mode is \"#0b0c0e\".',\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    count: {\n        description: 'Specify the maximum number of rows to display.',\n        type: 'number',\n        default: 20,\n    },\n    rowNumbers: {\n        description: 'Specify whether to display the row numbers.',\n        type: 'boolean',\n        default: false,\n    },\n    showHeader: {\n        description: 'Specify whether to display the table header.',\n        type: 'boolean',\n        default: true,\n    },\n    headerBackgroundColor: {\n        description: `Specify the table header background color using a Hex code. The default for light mode is \"#e1e6eb\". The default for dark mode is \"#171d21\". The default for prisma dark mode is \"#272a2f\".`,\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    headerTextColor: {\n        description: `Specify the table header text color using a Hex code. The default for light mode is \"#3C444D\". The default for dark mode is \"#FFFFFF\". The default for prisma dark mode is \"#f5f5f5\".`,\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    rowBackgroundColorEven: {\n        description: `Specify the background color for even table rows using a Hex code. The default for light mode is \"#F2F4F5\". The default for dark mode is \"#0D1012\". The default for prisma dark mode is \"#0b0c0e\".`,\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    rowBackgroundColorOdd: {\n        description: `Specify the background color for odd table rows using a Hex code. The default for light mode is \"#FFFFFF\". The default for dark mode is \"#000000\". The default for prisma dark mode is \"#111215\".`,\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    rowTextColorEven: {\n        description: `Specify the text color for even table rows using a Hex code. The default for light mode is \"#006EAA\". The default for dark mode is \"#00A4FD\". The default for prisma dark mode is \"#acacad\".`,\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    rowTextColorOdd: {\n        description: `Specify the text color for odd table rows using a Hex code. The default for light mode is \"#006EAA\". The default for dark mode is \"#00A4FD\". The default for prisma dark mode is \"#acacad\".`,\n        pattern: COLOR_OR_TOKEN_PATTERN,\n        type: 'string',\n    },\n    numberPrecision: {\n        default: 0,\n        maximum: 20,\n        minimum: 0,\n        description:\n            'Specify the number of decimal places to display. For example, to display 3 decimal places, use a value of 3. The maximum value is 20.',\n        type: 'number',\n    },\n    useThousandSeparators: {\n        default: true,\n        description: 'Specify whether numeric values use commas as thousandths separaters.',\n        type: 'boolean',\n    },\n    unit: {\n        description:\n            'Specify a label to show next to the cell value. The unit text should be brief. For example, an abbreviation such as MB, or a symbol such as $, can be used.',\n        type: 'string',\n    },\n    unitPosition: {\n        default: 'after',\n        description: 'Specify whether the unit label should appear before or after the cell value.',\n        type: 'string',\n        pattern: getPattern(['before', 'after']),\n    },\n    dataOverlayMode: {\n        default: 'none',\n        description: 'Specify which type of overlay to display. Overlays only apply to numerical columns.',\n        type: 'string',\n        pattern: getPattern(['heatmap', 'highlow', 'none']),\n    },\n};\n","import { _ } from '@splunk/ui-utils/i18n';\nimport pick from '@splunk/themes/pick';\nimport variables from '@splunk/themes/variables';\nimport NumberFormattingConfig from '../../common/editorConfig/NumberFormatting';\n\nconst editorConfig = [\n    {\n        label: _('Data Settings'),\n        layout: [\n            [\n                {\n                    label: _('Show Header'),\n                    option: 'showHeader',\n                    editor: 'editor.checkbox',\n                },\n            ],\n            [\n                {\n                    label: _('Show Row Numbers'),\n                    option: 'rowNumbers',\n                    editor: 'editor.checkbox',\n                },\n            ],\n        ],\n    },\n    {\n        label: _('Font'),\n        layout: [\n            [\n                {\n                    label: _('Header Text Color'),\n                    option: 'headerTextColor',\n                    editor: 'editor.color',\n                    editorProps: {\n                        pickFromTheme: theme =>\n                            pick({\n                                enterprise: variables.textColor,\n                                prisma: {\n                                    light: variables.contentColorDefault,\n                                    dark: variables.neutral500,\n                                },\n                            })({ theme }),\n                    },\n                    // If property matches the default value specified in schema, its not set in options. Hence we check if its undefined.\n                    showEditor: ({ options }) => options.showHeader || options.showHeader === undefined,\n                },\n            ],\n            [\n                {\n                    label: _('Odd Row Text Color'),\n                    option: 'rowTextColorOdd',\n                    editor: 'editor.color',\n                    editorProps: {\n                        pickFromTheme: theme =>\n                            pick({\n                                enterprise: variables.linkColor,\n                                prisma: variables.neutral500,\n                            })({ theme }),\n                    },\n                },\n            ],\n            [\n                {\n                    label: _('Even Row Text Color'),\n                    option: 'rowTextColorEven',\n                    editor: 'editor.color',\n                    editorProps: {\n                        pickFromTheme: theme =>\n                            pick({\n                                enterprise: variables.linkColor,\n                                prisma: variables.neutral500,\n                            })({ theme }),\n                    },\n                },\n            ],\n        ],\n    },\n    {\n        label: _('Fill'),\n        layout: [\n            [\n                {\n                    label: _('Background Color'),\n                    option: 'backgroundColor',\n                    editor: 'editor.color',\n                    editorProps: {\n                        pickFromTheme: theme =>\n                            pick({\n                                enterprise: {\n                                    dark: variables.black,\n                                    light: variables.backgroundColor,\n                                },\n                                prisma: variables.backgroundColorSidebar,\n                            })({ theme }),\n                    },\n                },\n            ],\n            [\n                {\n                    label: _('Header Fill Color'),\n                    option: 'headerBackgroundColor',\n                    editor: 'editor.color',\n                    editorProps: {\n                        pickFromTheme: theme =>\n                            pick({\n                                enterprise: {\n                                    light: variables.gray92,\n                                    dark: variables.gray20,\n                                },\n                                prisma: variables.interactiveColorBackground,\n                            })({ theme }),\n                    },\n                    // If property matches the default value specified in schema, its not set in options. Hence we check if its undefined.\n                    showEditor: ({ options }) => options.showHeader || options.showHeader === undefined,\n                },\n            ],\n            [\n                {\n                    label: _('Odd Row Fill Color'),\n                    option: 'rowBackgroundColorOdd',\n                    editor: 'editor.color',\n                    editorProps: {\n                        pickFromTheme: theme =>\n                            pick({\n                                enterprise: {\n                                    light: variables.white,\n                                    dark: variables.black,\n                                },\n                                prisma: variables.backgroundColorPage,\n                            })({ theme }),\n                    },\n                },\n            ],\n            [\n                {\n                    label: _('Even Row Fill Color'),\n                    option: 'rowBackgroundColorEven',\n                    editor: 'editor.color',\n                    editorProps: {\n                        pickFromTheme: theme =>\n                            pick({\n                                enterprise: {\n                                    light: variables.gray96,\n                                    dark: () => '#0D1012',\n                                },\n                                prisma: variables.backgroundColorPage,\n                            })({ theme }),\n                    },\n                },\n            ],\n        ],\n    },\n    NumberFormattingConfig,\n];\n\nexport default editorConfig;\n","import T from 'prop-types';\nimport { chain, each, filter, get, max, min, reduce } from 'lodash';\nimport React, { Component } from 'react';\nimport styled, { css } from 'styled-components';\nimport chroma from 'chroma-js';\nimport Table from '@splunk/react-ui/Table';\nimport BaseVisualization from '@splunk/dashboard-visualizations/common/BaseVisualization';\nimport { getRequestParams } from '@splunk/dashboard-visualizations/utils/propUtils';\nimport {\n    isTimeField,\n    isNumericArray,\n    isSparklineArray,\n} from '@splunk/dashboard-visualizations/utils/dataUtils';\nimport { getPaginationInformation } from '@splunk/dashboard-visualizations/utils/paginationUtils';\nimport { computeGranularity } from '@splunk/dashboard-visualizations/utils/timeUtils';\nimport DataSet from '@splunk/dashboard-visualizations/utils/DataSet';\nimport { getPercentiles } from '@splunk/dashboard-visualizations/utils/numberUtils';\nimport { isNumerial, parseNumber } from '@splunk/react-visualizations/utils/numberUtils';\nimport VisualizationEvent from '@splunk/dashboard-visualizations/common/VisualizationEvent';\nimport { toMargin, toPx } from '@splunk/visualizations-shared/style';\nimport variables from '@splunk/themes/variables';\nimport { enterprise } from '@splunk/visualization-themes/variables';\nimport IconPlaceholder from '@splunk/dashboard-visualizations/common/IconPlaceholder';\nimport { Table as TableIcon } from '@splunk/visualization-icons';\nimport { pick } from '@splunk/themes';\nimport { parse, dataContract } from '@splunk/visualization-encoding-parsers/TableParser';\nimport { withVisualizationAndThemeHOCs, withPaginator, withSanitizedOptions } from '../../utils/enhancer';\nimport SparklineCell from './cells/SparklineCell';\nimport TimeCell from './cells/TimeCell';\nimport NumberCell from './cells/NumberCell';\nimport StringCell from './cells/StringCell';\nimport ArrayCell from './cells/ArrayCell';\nimport optionsSchema from './optionsSchema';\nimport editorConfig from './editorConfig';\n\n/**\n * order matters, they will be eveluated from left to right\n */\nconst DefaultCellRenders = [TimeCell, SparklineCell, ArrayCell, NumberCell, StringCell];\n\n// if only one alternating color is defined, override row number defaults so that they are in sync (since they will likely appear as alternating)\n// TODO: remove after SUI refactor that removes need to define alternating colors inline (should be done via Theme)\nconst RowNumberCell = styled(Table.Cell)`\n    color: ${props =>\n        props.hasCustomTextColors\n            ? props.textColor\n            : pick({\n                  enterprise: variables.textColor,\n                  prisma: {\n                      light: variables.black,\n                      dark: variables.white,\n                  },\n              })(props)};\n    background-color: ${props => props.backgroundColor};\n`;\n\nconst NormalTableContainer = styled.div`\n    position: relative;\n    overflow: hidden;\n    ${props => toMargin(props.tableMargin)};\n`;\nconst FixedHeightTableContainer = styled(NormalTableContainer)`\n    position: absolute;\n    margin: 0px;\n    top: ${props => toPx(props.tableMargin, 15)};\n    left: ${props => toPx(props.tableMargin, 15)};\n    right: ${props => toPx(props.tableMargin, 15)};\n    bottom: ${props => toPx(props.isPaging ? 42 : props.tableMargin)};\n`;\n\nconst NonVisibleTableHead = styled(Table.Head)`\n    display: none;\n`;\n\n// TODO: Replace unsupported hacky style overrides\nconst StyledTable = styled(Table)`\n    ${({ $headerBackgroundColor, $headerTextColor }) => css`\n        & [data-test='head-cell'] {\n            background-color: ${$headerBackgroundColor};\n        }\n\n        & [data-test='head-cell'] > div > span {\n            color: ${$headerTextColor};\n        }\n    `}\n\n    ${pick({\n        enterprise: {\n            light: css`\n                & [data-test='head-cell'] + [data-test='head-cell'] {\n                    border-left-color: ${variables.white};\n                }\n            `,\n            dark: css`\n                & [data-test='head-cell'] + [data-test='head-cell'] {\n                    border-left-color: ${variables.gray20};\n                }\n            `,\n        },\n        // prisma: css`\n        //     & [data-test='row'] {\n        //         border-bottom: 1px solid #43454b; /* TODO: prisma no longer has this border */\n        //     }\n        // `,\n    })};\n`;\n\nconst defaultPageable = true;\n\n/**\n * Compute data dataOverlayMode for numeric field\n * @param {Object} fieldOptions current field options\n * @param {Object} dataSet current dataset\n * @param {Object} options table formatting options\n */\nexport const computeOverlay = (fieldOptions, dataSet, options) => {\n    const newFieldOptions = {\n        ...fieldOptions,\n    };\n    if (options.dataOverlayMode) {\n        const numericFields = filter(\n            dataSet.getFields(),\n            ({ name }) => newFieldOptions[name].type === 'number'\n        );\n        // compute data overlay for numeric fields\n        const allNumericValues = chain(numericFields)\n            .map(({ name }) => dataSet.getColumnByField(name))\n            .flatten()\n            // be aware that not all value here is numeric\n            .filter(isNumerial)\n            .map(parseNumber)\n            .value();\n        let minNumber;\n        let maxNumber;\n        let bounds;\n        // compute overlay\n        switch (options.dataOverlayMode) {\n            case 'heatmap':\n                bounds = getPercentiles(\n                    allNumericValues.sort((a, b) => a - b),\n                    0.05,\n                    0.95\n                );\n                each(numericFields, ({ name }) => {\n                    newFieldOptions[name] = {\n                        ...newFieldOptions[name],\n                        heatRange: bounds.upper - bounds.lower,\n                        heatOffset: bounds.lower,\n                    };\n                });\n                break;\n            case 'highlow':\n                minNumber = min(allNumericValues);\n                maxNumber = max(allNumericValues);\n                each(numericFields, ({ name }) => {\n                    newFieldOptions[name] = {\n                        ...newFieldOptions[name],\n                        min: minNumber === maxNumber ? null : minNumber,\n                        max: minNumber === maxNumber ? null : maxNumber,\n                    };\n                });\n                break;\n            default:\n                break;\n        }\n    }\n    return newFieldOptions;\n};\n\n/**\n * Apply time granularity for 'time' field\n * @param {*} fieldOptions\n * @param {*} dataSet\n */\nexport const computeTimeGranularity = (fieldOptions, dataSet) =>\n    reduce(\n        dataSet.getFields(),\n        (mergedOptions, { name }) => {\n            if (mergedOptions[name].type === 'time') {\n                const dataColumn = dataSet.getColumnByField(name);\n                // eslint-disable-next-line no-param-reassign\n                mergedOptions[name] = {\n                    ...mergedOptions[name],\n                    timeGranularity: computeGranularity(dataColumn),\n                };\n            }\n            return mergedOptions;\n        },\n        fieldOptions\n    );\n/**\n * Given a dataset, determine type of each field\n * @param {*} dataSet\n */\nexport const determineFieldType = dataSet =>\n    reduce(\n        dataSet.getFields(),\n        (fieldOptions, { name }) => {\n            let option = {\n                type: 'string',\n                align: 'left',\n            };\n            if (isTimeField(name)) {\n                option = {\n                    type: 'time',\n                    align: 'left',\n                };\n            } else if (isNumericArray(dataSet.getColumnByField(name))) {\n                option = {\n                    type: 'number',\n                    align: 'right',\n                };\n            } else if (isSparklineArray(dataSet.getColumnByField(name))) {\n                option = {\n                    type: 'sparkline',\n                    align: 'left',\n                };\n            }\n            // eslint-disable-next-line no-param-reassign\n            fieldOptions[name] = option;\n            return fieldOptions;\n        },\n        {}\n    );\n/**\n * Compute runtime formatting options for each field\n * @param {DataSet} dataSet\n */\nexport const computeFieldsOptions = (dataSet, options = {}) => {\n    let fieldsOptions = determineFieldType(dataSet);\n    fieldsOptions = computeOverlay(fieldsOptions, dataSet, options);\n    fieldsOptions = computeTimeGranularity(fieldsOptions, dataSet);\n    return fieldsOptions;\n};\n\n/**\n * Returns one of the input colors based on row index parity (i.e. even/odd)\n * NOTE: rowIndex + 1 is being used, since we are using zero-based numbering when passing in rowIndex.\n * However, a user defining these colors would interpret row numbers using 1-based numbering, so we have to offset rowIndex by 1.\n * For example, if rowIndex is 0, this would correspond to the first row number, so colorOdd would be returned.\n * TODO: remove upon table SUI refactor that should remove need to explicitly define alternating text colors for striped tables\n * @param {number} rowIndex\n * @param {string} colorEven\n * @param {string} colorOdd\n * @returns {string} color\n */\nexport function getAlternatingColor(rowIndex, colorEven, colorOdd) {\n    try {\n        return (rowIndex + 1) % 2 === 0 ? chroma(colorEven).hex() : chroma(colorOdd).hex();\n    } catch (_ignore) {\n        return 'transparent';\n    }\n}\n\nclass TableVisualization extends Component {\n    static propTypes = {\n        ...BaseVisualization.propTypes,\n        // an array of custom cell renderers.\n        cellRenderers: T.array,\n    };\n\n    static defaultProps = {\n        ...BaseVisualization.defaultProps,\n        // default for empty array\n        cellRenderers: [],\n    };\n\n    static dataContract = dataContract;\n\n    static vizContract = {\n        initialDimension: {\n            width: 300,\n            height: 300,\n        },\n    };\n\n    static schema = optionsSchema;\n\n    static editor = editorConfig;\n\n    /**\n     * return cell renderer list\n     */\n    getCellRenderers = () => {\n        const customRenderers = this.props.cellRenderers || [];\n        // custom rendereres will supersede default renderers\n        return [...customRenderers, ...DefaultCellRenders];\n    };\n\n    handleCellClick = (e, fieldValue, cellIndex, cellValue, row) => {\n        this.props.onEventTrigger(\n            new VisualizationEvent({\n                originalEvent: e,\n                payload: {\n                    fieldValue,\n                    cellIndex,\n                    cellValue,\n                    rowValue: row,\n                },\n                type: 'cell.click',\n            })\n        );\n    };\n\n    handleSort = (e, field) => {\n        const requestParams = getRequestParams(this.props) || {};\n        const currentSort = requestParams.sort?.field ?? 'none';\n        let nextSort = 'asc';\n        if (currentSort === 'none') {\n            nextSort = 'asc';\n        } else if (currentSort === 'asc') {\n            nextSort = 'desc';\n        }\n        this.props.onRequestParamsChange('primary', {\n            ...requestParams,\n            sort: {\n                [field]: nextSort,\n            },\n        });\n    };\n\n    renderCell({ key, row, cellValue, fieldName, customStyles, onCellClick, fieldOptions = {} }) {\n        const Cell = this.getCellRenderers().find(renderer =>\n            renderer.canRender(fieldName, fieldOptions, cellValue)\n        );\n        const { options = {} } = this.props;\n        const { textColor } = customStyles;\n        const cellOptions = {\n            ...options,\n            ...get(options, ['fields', fieldName], {}),\n            rowContext: row,\n            textColor,\n        };\n        return (\n            <Cell\n                key={key}\n                value={cellValue}\n                cellOptions={cellOptions}\n                fieldOptions={fieldOptions}\n                onCellClick={onCellClick}\n            />\n        );\n    }\n\n    render() {\n        const { dataSources, encoding, options = {} } = this.props;\n        const { columnsFieldName, columns } = parse(dataSources, encoding);\n        const dataSet = new DataSet(columnsFieldName, columns);\n        const fieldsOptions = computeFieldsOptions(dataSet, options);\n        const { perPage, currentPage, isPaging, requestParams } = getPaginationInformation(this.props);\n\n        const fixedHeight = this.props.height != null;\n        const TableContainer = fixedHeight ? FixedHeightTableContainer : NormalTableContainer;\n\n        const hasCustomTextColors = options.rowTextColorEven || options.rowTextColorOdd;\n\n        const { fields, rows } = dataSet.toJSONRows();\n        const {\n            margin = pick({\n                enterprise: variables.spacingHalf(this.props),\n                prisma: variables.spacingSmall(this.props),\n            })(this.props),\n            rowNumbers = false,\n            showHeader = true,\n            rowTextColorEven = pick({\n                enterprise: variables.linkColor(this.props),\n                prisma: variables.neutral500(this.props),\n            })(this.props),\n            rowTextColorOdd = pick({\n                enterprise: variables.linkColor(this.props),\n                prisma: variables.neutral500(this.props),\n            })(this.props),\n\n            // from previous style override:\n            // // TODO: add stripeOdd and stripeEvenTextColor that removes need to define alternating text colors inline (i.e. should be done via Theme)\n            headerTextColor = pick({\n                enterprise: variables.textColor(this.props),\n                prisma: {\n                    light: variables.contentColorDefault(this.props),\n                    dark: variables.neutral500(this.props),\n                },\n            })(this.props),\n            headerBackgroundColor = pick({\n                enterprise: {\n                    light: variables.gray92(this.props),\n                    dark: variables.gray20(this.props),\n                },\n                prisma: variables.interactiveColorBackground(this.props),\n            })(this.props),\n            rowBackgroundColorOdd = pick({\n                enterprise: {\n                    light: variables.backgroundColor(this.props),\n                    dark: variables.black(this.props),\n                },\n                prisma: variables.backgroundColorPage(this.props),\n            })(this.props),\n            rowBackgroundColorEven = pick({\n                enterprise: {\n                    light: variables.gray96(this.props),\n                    dark: '#0D1012',\n                },\n                prisma: variables.backgroundColorPage(this.props),\n            })(this.props),\n        } = options;\n        const TableHead = showHeader ? Table.Head : NonVisibleTableHead;\n\n        return (\n            <TableContainer tableMargin={margin} isPaging={isPaging}>\n                <StyledTable\n                    headType=\"fixed\"\n                    innerStyle={{ height: '100%' }}\n                    outerStyle={{ height: '100%' }}\n                    stripeRows\n                    $headerBackgroundColor={headerBackgroundColor}\n                    $headerTextColor={headerTextColor}\n                >\n                    <TableHead>\n                        {!!rowNumbers && <Table.HeadCell width={60} key=\"rowNumbers\" />}\n                        {fields.map(({ name }, fieldIndex) => (\n                            <Table.HeadCell\n                                sortKey={name}\n                                sortDir={get(requestParams, ['sort', name], 'none')}\n                                key={`field${fieldIndex}`} // eslint-disable-line react/no-array-index-key\n                                onSort={e => {\n                                    this.handleSort(e, name);\n                                }}\n                                align={fieldsOptions[name].align}\n                            >\n                                {name}\n                            </Table.HeadCell>\n                        ))}\n                    </TableHead>\n                    <Table.Body>\n                        {rows.map((row, rowIndex) => (\n                            <Table.Row\n                                // eslint-disable-next-line react/no-array-index-key\n                                key={`row${rowIndex}`}\n                                style={{\n                                    backgroundColor:\n                                        rowIndex % 2 ? rowBackgroundColorEven : rowBackgroundColorOdd,\n                                }}\n                            >\n                                {!!rowNumbers && (\n                                    <RowNumberCell\n                                        align=\"right\"\n                                        key=\"rowNumbers\"\n                                        hasCustomTextColors={hasCustomTextColors}\n                                        textColor={getAlternatingColor(\n                                            rowIndex,\n                                            rowTextColorEven,\n                                            rowTextColorOdd\n                                        )}\n                                    >\n                                        {perPage * (currentPage - 1) + rowIndex + 1}\n                                    </RowNumberCell>\n                                )}\n                                {row.map((cellValue, cellIndex) =>\n                                    this.renderCell({\n                                        key: cellIndex,\n                                        row,\n                                        cellValue,\n                                        fieldName: fields[cellIndex].name,\n                                        customStyles: {\n                                            textColor: getAlternatingColor(\n                                                rowIndex,\n                                                rowTextColorEven,\n                                                rowTextColorOdd\n                                            ),\n                                        },\n                                        onCellClick: e => {\n                                            this.handleCellClick(\n                                                e,\n                                                fields[cellIndex].name,\n                                                cellIndex,\n                                                cellValue,\n                                                row\n                                            );\n                                        },\n                                        fieldOptions: fieldsOptions[fields[cellIndex].name],\n                                    })\n                                )}\n                            </Table.Row>\n                        ))}\n                    </Table.Body>\n                </StyledTable>\n            </TableContainer>\n        );\n    }\n}\n\nexport default withVisualizationAndThemeHOCs({\n    defaultBackgroundColor: enterprise.defaultBackgroundColor,\n    placeholder: <IconPlaceholder icon={<TableIcon />} />,\n})(withPaginator({ defaultPageable })(withSanitizedOptions(TableVisualization)));\n"],"sourceRoot":""}