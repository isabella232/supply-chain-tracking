"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enrichParse = enrichParse;
exports.default = exports.convertToISO = exports.findPanelType = exports.possibleAdvancedInputTypes = exports.possibleFormInputTypes = exports.FormInputType = exports.AdvancedInputType = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _lodash = require("lodash");

var _moment = _interopRequireDefault(require("@splunk/moment"));

var _time = require("@splunk/time-range-utils/time");

var _config = require("@splunk/splunk-utils/config");

var _Accordion = _interopRequireDefault(require("@splunk/react-ui/Accordion"));

var _Advanced = _interopRequireDefault(require("./Advanced"));

var _DateRange = _interopRequireDefault(require("./DateRange"));

var _DateTimeRange = _interopRequireDefault(require("./DateTimeRange"));

var _Presets = _interopRequireDefault(require("./Presets"));

var _RealTime = _interopRequireDefault(require("./RealTime"));

var _Relative = _interopRequireDefault(require("./Relative"));

var _stylesAndData = _interopRequireDefault(require("./stylesAndData"));

var _jsxFileName = "/builds/swp/ui-platform/projects/lib/search-components/react-time-range/src/Dialog/Dialog.tsx";

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const locale = _config.locale || 'en_US';
let AdvancedInputType;
exports.AdvancedInputType = AdvancedInputType;

(function (AdvancedInputType) {
  AdvancedInputType["relative"] = "relative";
  AdvancedInputType["realTime"] = "realTime";
  AdvancedInputType["allTime"] = "allTime";
  AdvancedInputType["dateTime"] = "dateTime";
})(AdvancedInputType || (exports.AdvancedInputType = AdvancedInputType = {}));

let FormInputType;
exports.FormInputType = FormInputType;

(function (FormInputType) {
  FormInputType["relative"] = "relative";
  FormInputType["realTime"] = "realTime";
  FormInputType["date"] = "date";
  FormInputType["dateTime"] = "dateTime";
})(FormInputType || (exports.FormInputType = FormInputType = {}));

var PanelType;

(function (PanelType) {
  PanelType["relative"] = "relative";
  PanelType["realTime"] = "realTime";
  PanelType["date"] = "date";
  PanelType["dateTime"] = "dateTime";
  PanelType["presets"] = "presets";
  PanelType["advanced"] = "advanced";
})(PanelType || (PanelType = {}));

const possibleFormInputTypes = Object.keys(FormInputType);
exports.possibleFormInputTypes = possibleFormInputTypes;
const possibleAdvancedInputTypes = Object.keys(AdvancedInputType);
exports.possibleAdvancedInputTypes = possibleAdvancedInputTypes;

const findPanelType = ({
  advancedInputTypes,
  earliest,
  formInputTypes,
  latest,
  presets
}) => {
  // Presets
  if ((0, _time.findPresetLabel)(presets, earliest, latest)) {
    return PanelType.presets;
  } // RealTime or Relative


  const earliestParse = (0, _time.parseTimeString)(earliest);
  const earliestMods = earliestParse.modifiers;
  const latestParse = (0, _time.parseTimeString)(latest);

  if (earliestParse.isFullyParsed && latestParse.isFullyParsed && earliestMods.length === 1) {
    // Relative
    if ((0, _lodash.includes)(formInputTypes, FormInputType.relative) && earliestParse.type !== 'realTime' && latestParse.type !== 'realTime' && (!earliestMods[0].snap || earliestMods[0].unit === earliestMods[0].snap)) {
      if ((0, _time.isLatestNow)(latest)) {
        return PanelType.relative;
      }

      const mod = latestParse.modifiers[0];

      if (mod && !mod.amount && mod.snap === earliestMods[0].unit) {
        return PanelType.relative;
      }
    } // RealTime


    if ((0, _lodash.includes)(formInputTypes, FormInputType.realTime) && earliestParse.type === 'realTime' && !earliestMods[0].snap && (latest === 'rt' || latest === 'rtnow')) {
      return PanelType.realTime;
    }
  } // DateRange or DateTimeRange


  if ((0, _time.isISO)(earliest) && (latest === '' || latest === 'now')) {
    if ((0, _lodash.includes)(formInputTypes, FormInputType.date) && (0, _time.isWholeDay)(earliest)) {
      return PanelType.date;
    }

    if ((0, _lodash.includes)(formInputTypes, FormInputType.dateTime)) {
      return PanelType.dateTime;
    }
  } else if ((0, _time.isISO)(latest) && (earliest === '' || earliest === '0')) {
    if ((0, _lodash.includes)(formInputTypes, FormInputType.date) && (0, _time.isWholeDay)(latest)) {
      return PanelType.date;
    }

    if ((0, _lodash.includes)(formInputTypes, FormInputType.dateTime)) {
      return PanelType.dateTime;
    }
  } else if ((0, _time.isISO)(earliest) && (0, _time.isISO)(latest)) {
    if ((0, _lodash.includes)(formInputTypes, FormInputType.date) && (0, _time.isWholeDay)(earliest) && (0, _time.isWholeDay)(latest)) {
      return PanelType.date;
    }

    if ((0, _lodash.includes)(formInputTypes, FormInputType.dateTime)) {
      return PanelType.dateTime;
    }
  } else if ((0, _time.isEpoch)(earliest) && (0, _time.isEpoch)(latest)) {
    return PanelType.dateTime;
  } // Advanced


  if (advancedInputTypes.length) {
    return PanelType.advanced;
  } // Fallback to first available


  if (presets.length) {
    return PanelType.presets;
  }

  return PanelType[formInputTypes[0]];
};

exports.findPanelType = findPanelType;

const convertToISO = (time, parse, isEarliest = true) => {
  if ((0, _time.isISO)(time)) {
    return time;
  }

  if (isEarliest && (0, _time.isEarliestEmpty)(time)) {
    return '';
  }

  if (!isEarliest && (0, _time.isLatestNow)(time)) {
    return '';
  }

  if (parse && parse.iso) {
    return parse.iso; // remove timezone
  }

  return '';
};

exports.convertToISO = convertToISO;

function enrichParse(parse) {
  if (!parse) {
    return;
  }
  /* ISO doesn't spec dates before the year 0000 or after 9999. Splunk's time parser is not
   * compatible with moment or the native Date methods in these cases (SUI-1330).
   * If the iso time is incompatible, the display value is removed and an error is added.
   * */


  const iso = parse.iso && (0, _time.isISO)(parse.iso) ? (0, _time.removeISOTimezone)(parse.iso) : undefined; // eslint-disable-next-line consistent-return

  return {
    error: parse.error || iso ? parse.error : new Error('The iso time could not be converted to a JavaScript Date.'),
    iso,
    displayValue: iso ? (0, _moment.default)(iso).locale(locale).format('LLL') : undefined,
    time: parse.time
  };
}

const TimeRangeDialog = props => {
  const {
    onRequestParseEarliest,
    onRequestParseLatest,
    earliest,
    latest,
    momentTimeZone,
    advancedInputTypes,
    documentationURL,
    formInputTypes,
    onChange,
    presets,
    style
  } = props;
  const [openPanelId, setOpenPanelId] = (0, _react.useState)(findPanelType(props));
  const prevMomentTimeZone = (0, _react.useRef)();
  const prevEarliest = (0, _react.useRef)();
  const prevLatest = (0, _react.useRef)();
  (0, _react.useEffect)(() => {
    prevMomentTimeZone.current = momentTimeZone;
  }, [momentTimeZone]);
  (0, _react.useEffect)(() => {
    prevEarliest.current = earliest;
  }, [earliest]);
  (0, _react.useEffect)(() => {
    prevLatest.current = latest;
  }, [latest]);

  if (prevMomentTimeZone.current !== momentTimeZone) {
    _moment.default.tz.add(_moment.default.tz.pack(momentTimeZone));
  }

  (0, _react.useEffect)(() => {
    /* Get the necessary data to populate the data and date-time panels.
     * Real-time, relative and advanced panels will call parse on mount, so it's not necessary
     * to cover those cases here.
     */
    if ((0, _time.isEpoch)(earliest) || openPanelId === 'presets') {
      onRequestParseEarliest(earliest);
    }

    if ((0, _time.isEpoch)(latest) || openPanelId === 'presets') {
      onRequestParseLatest(latest);
    }
  }, [onRequestParseEarliest, onRequestParseLatest, earliest, latest, openPanelId]);

  if (earliest !== prevEarliest.current && (0, _time.isEpoch)(earliest)) {
    onRequestParseEarliest(earliest);
  }

  if (latest !== prevLatest.current && (0, _time.isEpoch)(latest)) {
    onRequestParseLatest(latest);
  }

  const handleAccordionChange = (e, {
    panelId
  }) => {
    setOpenPanelId(PanelType[panelId]);
  };

  const handleRequestParseEarliest = (time, panelId) => {
    if (panelId === openPanelId) {
      const timeCleaned = (0, _time.removeRealTime)(time || '0');
      onRequestParseEarliest(timeCleaned, panelId);
    }
  };

  const handleRequestParseLatest = (time, panelId) => {
    if (panelId === openPanelId) {
      const timeCleaned = (0, _time.removeRealTime)(time || 'now');
      onRequestParseLatest(timeCleaned, panelId);
    }
  };

  const momentTimeZoneName = momentTimeZone ? momentTimeZone.name : '';
  const panelProps = {
    earliest,
    latest,
    onChange
  };
  const parseEarliest = enrichParse(props.parseEarliest);
  const parseLatest = enrichParse(props.parseLatest);
  const parserProps = {
    onRequestParseEarliest: handleRequestParseEarliest,
    onRequestParseLatest: handleRequestParseLatest,
    parseEarliest,
    parseLatest
  };
  const panelISOProps = {
    earliest: convertToISO(earliest, parseEarliest, true),
    latest: convertToISO(latest, parseLatest, false),
    onChange,
    locale
  };
  const children = [];

  if (presets && presets.length) {
    children.push( /*#__PURE__*/_react.default.createElement(_Presets.default, (0, _extends2.default)({
      panelId: "presets",
      key: "presets",
      presets: presets,
      onRequestParseLatest: handleRequestParseLatest,
      onRequestParseEarliest: handleRequestParseEarliest
    }, panelProps, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 399,
        columnNumber: 13
      }
    })));
  }

  if ((0, _lodash.includes)(formInputTypes, FormInputType.relative)) {
    children.push( /*#__PURE__*/_react.default.createElement(_Relative.default, (0, _extends2.default)({
      panelId: "relative",
      key: "relative"
    }, panelProps, parserProps, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 410,
        columnNumber: 23
      }
    })));
  }

  if ((0, _lodash.includes)(formInputTypes, FormInputType.realTime)) {
    children.push( /*#__PURE__*/_react.default.createElement(_RealTime.default, (0, _extends2.default)({
      panelId: "realTime",
      key: "realTime"
    }, panelProps, parserProps, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 413,
        columnNumber: 23
      }
    })));
  }

  if ((0, _lodash.includes)(formInputTypes, FormInputType.date)) {
    children.push( /*#__PURE__*/_react.default.createElement(_DateRange.default, (0, _extends2.default)({
      panelId: "date",
      key: "date",
      momentTimeZoneName: momentTimeZoneName
    }, panelISOProps, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 417,
        columnNumber: 13
      }
    })));
  }

  if ((0, _lodash.includes)(formInputTypes, FormInputType.dateTime)) {
    children.push( /*#__PURE__*/_react.default.createElement(_DateTimeRange.default, (0, _extends2.default)({
      panelId: "dateTime",
      key: "dateTime",
      momentTimeZoneName: momentTimeZoneName
    }, panelISOProps, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 422,
        columnNumber: 13
      }
    })));
  }

  if (advancedInputTypes.length) {
    children.push( /*#__PURE__*/_react.default.createElement(_Advanced.default, (0, _extends2.default)({
      panelId: "advanced",
      key: "advanced",
      inputTypes: advancedInputTypes,
      documentationURL: documentationURL,
      momentTimeZoneName: momentTimeZoneName
    }, panelProps, parserProps, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 432,
        columnNumber: 13
      }
    })));
  }

  return /*#__PURE__*/_react.default.createElement(_Accordion.default, (0, _extends2.default)({
    openPanelId: openPanelId,
    onChange: handleAccordionChange,
    "data-test": "time-range-dialog",
    "data-test-earliest": earliest,
    "data-test-latest": latest
  }, (0, _stylesAndData.default)(props), {
    style: _objectSpread({
      minWidth: 820
    }, style),
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 445,
      columnNumber: 9
    }
  }), children);
};

TimeRangeDialog.defaultProps = {
  advancedInputTypes: possibleAdvancedInputTypes,
  formInputTypes: possibleFormInputTypes,
  placeholder: 'Select...',
  onChange: _lodash.noop,
  onRequestParseEarliest: _lodash.noop,
  onRequestParseLatest: _lodash.noop
};
var _default = TimeRangeDialog;
exports.default = _default;