"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _i18n = require("@splunk/ui-utils/i18n");

var _keyboard = require("@splunk/ui-utils/keyboard");

var _moment = _interopRequireDefault(require("@splunk/moment"));

var _time = require("@splunk/time-range-utils/time");

var _Button = _interopRequireDefault(require("@splunk/react-ui/Button"));

var _ControlGroup = _interopRequireDefault(require("@splunk/react-ui/ControlGroup"));

var _Date = _interopRequireDefault(require("@splunk/react-ui/Date"));

var _Message = _interopRequireDefault(require("@splunk/react-ui/Message"));

var _Select = _interopRequireDefault(require("@splunk/react-ui/Select"));

var _StaticContent = _interopRequireDefault(require("@splunk/react-ui/StaticContent"));

var _Styles = require("./Styles");

var _Panel = _interopRequireDefault(require("./Panel"));

const _excluded = ["earliest", "latest", "locale", "momentTimeZoneName", "onChange"];
var _jsxFileName = "/builds/swp/ui-platform/projects/lib/search-components/react-time-range/src/Dialog/DateRange.tsx";

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const getTypeFromProps = (earliest, latest) => {
  if (earliest && (!latest || latest === 'now')) {
    return 'since';
  }

  if (latest && (!earliest || earliest === '0')) {
    return 'before';
  }

  return 'between';
};

const convertEarliestPropToState = (earliest, momentTimeZoneName) => {
  let tz;

  if (momentTimeZoneName) {
    tz = earliest ? _moment.default.tz(earliest, momentTimeZoneName) : _moment.default.unix(0);
  } else {
    tz = earliest ? (0, _moment.default)(earliest) : _moment.default.unix(0);
  }

  return tz.format(_Date.default.momentFormat);
};

const convertLatestPropToState = (latest, momentTimeZoneName, type) => {
  let tz;

  if (momentTimeZoneName) {
    tz = latest ? _moment.default.tz(latest, momentTimeZoneName) : _moment.default.tz(undefined, momentTimeZoneName);
  } else {
    tz = latest ? (0, _moment.default)(latest) : (0, _moment.default)(undefined);
  }

  if (type && type === 'between') {
    if (latest && (0, _time.isWholeDay)(latest)) {
      tz = tz.subtract({
        days: 1
      });
    }
  }

  return tz.format(_Date.default.momentFormat);
};

const DateRange = _ref => {
  let {
    earliest: propsEarliest,
    latest: propsLatest,
    locale,
    momentTimeZoneName,
    onChange
  } = _ref,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const typeFromProps = getTypeFromProps(propsEarliest, propsLatest);
  const convertedEarliest = convertEarliestPropToState(propsEarliest, momentTimeZoneName);
  const convertedLatest = convertLatestPropToState(propsLatest, momentTimeZoneName, typeFromProps);
  const [earliest, setEarliest] = (0, _react.useState)(convertedEarliest);
  const [latest, setLatest] = (0, _react.useState)(convertedLatest);
  const [errorMessage, setErrorMessage] = (0, _react.useState)();
  const [type, setType] = (0, _react.useState)(typeFromProps);
  const earliestRef = (0, _react.useRef)();
  const latestRef = (0, _react.useRef)();
  (0, _react.useEffect)(() => {
    earliestRef.current = propsEarliest;
    latestRef.current = propsLatest;
  }, [propsEarliest, propsLatest]);

  if (earliestRef.current !== propsEarliest && earliest !== convertedEarliest) {
    setEarliest(convertedEarliest);
  }

  if (latestRef.current !== propsLatest && latest !== convertedLatest) {
    setLatest(convertedLatest);
  }

  if ((earliestRef.current !== propsEarliest || latestRef.current !== propsLatest) && type !== typeFromProps) {
    setType(typeFromProps);
  }

  const handleTypeChange = (e, {
    value
  }) => {
    setType(value);
  };

  const handleChange = (e, {
    value,
    name
  }) => {
    if (name === 'earliest') {
      setEarliest(value);
    } else {
      setLatest(value);
    }
  };

  const apply = (e, updatedEarliest, updatedLatest) => {
    const latestAdjusted = type === 'between' ? _moment.default.tz(updatedLatest, momentTimeZoneName).add({
      days: 1
    }).format(_Date.default.momentFormat) : latest;
    let error = '';

    if (type === 'between' && _moment.default.tz(updatedEarliest, momentTimeZoneName).valueOf() >= _moment.default.tz(latestAdjusted, momentTimeZoneName).valueOf()) {
      error = (0, _i18n._)('Earliest must be before latest.');
    }

    setErrorMessage(error);

    if (!error && onChange) {
      onChange(e, {
        earliest: type === 'before' ? '0' : (0, _time.getISOWithTimeZone)(`${updatedEarliest}T00:00:00.000`, momentTimeZoneName),
        latest: type === 'since' ? 'now' : (0, _time.getISOWithTimeZone)(`${latestAdjusted}T00:00:00.000`, momentTimeZoneName)
      });
    }
  };

  const handleApply = e => {
    apply(e, earliest, latest);
  };

  const handleKeyDown = e => {
    if ((0, _keyboard.keycode)(e) === 'enter') {
      const target = e.target;
      const {
        name,
        value
      } = target;
      apply(e, name === 'earliest' ? convertEarliestPropToState(value) : earliest, name === 'latest' ? convertLatestPropToState(value) : latest);
    }
  };
  /* Due to IE11 bug (SUI-909) the Type Select needs to grow slightly,
   * so it takes 1% of the extra space. */


  const typeStyles = {
    flex: '0 1 auto',
    marginRight: 10,
    marginTop: 0 // remove prisma first-child cg top margin

  };
  const dateStyles = {
    flex: 1
  };
  return /*#__PURE__*/_react.default.createElement(_Panel.default, (0, _extends2.default)({
    title: (0, _i18n._)('Date Range')
  }, rest, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 181,
      columnNumber: 9
    }
  }), errorMessage && /*#__PURE__*/_react.default.createElement(_Message.default, {
    type: "error",
    "data-test": "error-message",
    style: {
      margin: '0 20px'
    },
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 183,
      columnNumber: 17
    }
  }, errorMessage), /*#__PURE__*/_react.default.createElement(_Styles.StyledCGWrapper, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 187,
      columnNumber: 13
    }
  }, /*#__PURE__*/_react.default.createElement(_ControlGroup.default, {
    controlsLayout: "none",
    label: "",
    labelPosition: "top",
    style: typeStyles,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 188,
      columnNumber: 17
    }
  }, /*#__PURE__*/_react.default.createElement(_Select.default, {
    value: type,
    "data-test": "range-type",
    onChange: handleTypeChange,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 189,
      columnNumber: 21
    }
  }, /*#__PURE__*/_react.default.createElement(_Select.default.Option, {
    label: (0, _i18n._)('Between'),
    value: "between",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 190,
      columnNumber: 25
    }
  }), /*#__PURE__*/_react.default.createElement(_Select.default.Option, {
    label: (0, _i18n._)('Before'),
    value: "before",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 191,
      columnNumber: 25
    }
  }), /*#__PURE__*/_react.default.createElement(_Select.default.Option, {
    label: (0, _i18n._)('Since'),
    value: "since",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 192,
      columnNumber: 25
    }
  }))), /*#__PURE__*/_react.default.createElement(_ControlGroup.default, {
    controlsLayout: "none",
    label: "",
    labelPosition: "top",
    help: "00:00:00",
    style: dateStyles,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 195,
      columnNumber: 17
    }
  }, /*#__PURE__*/_react.default.createElement(_Date.default, {
    name: type !== 'before' ? 'earliest' : 'latest',
    value: type !== 'before' ? earliest : latest,
    onChange: handleChange,
    onKeyDown: handleKeyDown,
    inline: false,
    locale: locale,
    style: dateStyles,
    "data-test": type !== 'before' ? 'earliest-date' : 'latest-date',
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 202,
      columnNumber: 21
    }
  })), type !== 'before' && /*#__PURE__*/_react.default.createElement(_ControlGroup.default, {
    controlsLayout: "none",
    label: "",
    labelPosition: "top",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 214,
      columnNumber: 21
    }
  }, /*#__PURE__*/_react.default.createElement(_StaticContent.default, {
    style: {
      marginLeft: type === 'between' ? 0 : 10,
      // StaticContent lost left/right padding in Prisma - TBD if intentional or bug
      paddingLeft: 7,
      paddingRight: 7
    },
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 215,
      columnNumber: 25
    }
  }, type === 'between' ? (0, _i18n._)('and') : (0, _i18n._)('until now'))), type === 'between' && /*#__PURE__*/_react.default.createElement(_ControlGroup.default, {
    controlsLayout: "none",
    label: "",
    labelPosition: "top",
    help: "24:00:00",
    style: dateStyles,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 228,
      columnNumber: 21
    }
  }, /*#__PURE__*/_react.default.createElement(_Date.default, {
    name: "latest",
    value: latest,
    onChange: handleChange,
    inline: false,
    locale: locale,
    onKeyDown: handleKeyDown,
    "data-test": "latest-date",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 235,
      columnNumber: 25
    }
  }))), /*#__PURE__*/_react.default.createElement(_Styles.StyledApplyContainer, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 247,
      columnNumber: 13
    }
  }, /*#__PURE__*/_react.default.createElement(_Button.default, {
    label: (0, _i18n._)('Apply'),
    "data-test": "apply",
    onClick: handleApply,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 248,
      columnNumber: 17
    }
  })));
};

DateRange.defaultProps = {
  placeholder: 'Select...'
};
var _default = DateRange;
exports.default = _default;