import React, { SyntheticEvent } from 'react';
import { ParseTimeResult } from './Panel';
export declare enum AdvancedInputType {
    relative = "relative",
    realTime = "realTime",
    allTime = "allTime",
    dateTime = "dateTime"
}
export declare enum FormInputType {
    relative = "relative",
    realTime = "realTime",
    date = "date",
    dateTime = "dateTime"
}
declare enum PanelType {
    relative = "relative",
    realTime = "realTime",
    date = "date",
    dateTime = "dateTime",
    presets = "presets",
    advanced = "advanced"
}
export declare type Preset = {
    label: string;
    earliest: string;
    latest?: string;
};
export declare type MomentTimeZone = {
    name: string;
};
export interface TimeRangeProps {
    /**
     * An array of types of input allowed in the Advanced panel.
     * Defaults to ['realTime', 'relative', 'allTime', 'dateTime'].
     */
    advancedInputTypes?: AdvancedInputType[];
    /**
     * The id of the description. When placed in a ControlGroup, this automatically set to the
     * ControlGroup's help component.
     */
    describedBy?: string;
    /**
     * A URL for the documentation link in the Advanced Panel.
     */
    documentationURL?: string;
    /**
     * Earliest limit for search
     * Default value is '0' (beginning of epoch)
     */
    earliest: string;
    /**
     * An array of types of input allowed in the forms. Removing a value will disable
     * the related panel. Defaults to ['realTime', 'relative', 'date', 'dateTime'].
     */
    formInputTypes?: FormInputType[];
    /** Make the control an inline block with variable width. */
    inline?: boolean;
    /**
     * Latest limit for search
     * Default value is 'now'
     */
    latest: string;
    /**
     * A callback to receive the change events.
     * If value is set, this callback is required. This must set the value prop to retain the
     * change. The callback is passed an object with two properties: 'earliest' and 'latest'.
     */
    onChange?: (e: SyntheticEvent, data?: any) => void;
    /**
     * A callback to passed a time string. This function must update the parseEarliest prop. This
     * function is required when not using the SplunkwebConnector.
     */
    onRequestParseEarliest?: (time: string, panelId?: string) => void;
    /**
     * A callback to passed a time string. This function must update the parseLatest prop. This
     * function is required when not using the SplunkwebConnector.
     */
    onRequestParseLatest?: (time: string, panelId?: string) => void;
    /**
     * The parseEarliest is used to preview earliest times and validate form data. The `time`
     * value must be the time string passed to the onRequestParseEarliest function. Example
     * return format:
     * ```
     * {
     *     error: null,
     *     iso: '2017-05-08T00:00:00.000',
     *     time: '-7d'
     * }
     * ```
     */
    parseEarliest?: ParseTimeResult;
    /**
     * The parseLatest is used to preview latest times and validate form data. The `time`
     * value must be the time string passed to the onRequestParseLatest function. Example
     * return format:
     * ```
     * {
     *     error: null,
     *     iso: '2017-05-08T00:00:00.000',
     *     time: '-7d'
     * }
     * ```
     */
    parseLatest?: ParseTimeResult;
    placeholder?: string;
    /**
     * A definition of the presets. The time util can be used to inpect and filter certain
     * types of time ranges before setting this prop. This property is required to display the
     * presets panel when not using the SplunkwebConnector.
     */
    presets?: Preset[];
    /**
     * Styles to place on the wrapper.
     */
    style?: {
        [key: string]: any;
    };
    /**
     * A moment Time Zone object in Unpacked format (https://momentjs.com/timezone/docs/#/data-formats/unpacked-format/).
     * It is used to set the Time Zone of the Time Range Dialog Component.
     */
    momentTimeZone?: MomentTimeZone;
}
export declare const possibleFormInputTypes: FormInputType[];
export declare const possibleAdvancedInputTypes: AdvancedInputType[];
export declare const findPanelType: ({ advancedInputTypes, earliest, formInputTypes, latest, presets, }: TimeRangeProps) => PanelType;
export declare const convertToISO: (time: string, parse: ParseTimeResult, isEarliest?: boolean) => string;
export declare function enrichParse(parse: ParseTimeResult): ParseTimeResult;
declare const TimeRangeDialog: React.FC<TimeRangeProps>;
export default TimeRangeDialog;
