"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _i18n = require("@splunk/ui-utils/i18n");

var _keyboard = require("@splunk/ui-utils/keyboard");

var _moment = _interopRequireDefault(require("@splunk/moment"));

var _Button = _interopRequireDefault(require("@splunk/react-ui/Button"));

var _ControlGroup = _interopRequireDefault(require("@splunk/react-ui/ControlGroup"));

var _Date = _interopRequireDefault(require("@splunk/react-ui/Date"));

var _Message = _interopRequireDefault(require("@splunk/react-ui/Message"));

var _Select = _interopRequireDefault(require("@splunk/react-ui/Select"));

var _StaticContent = _interopRequireDefault(require("@splunk/react-ui/StaticContent"));

var _Text = _interopRequireDefault(require("@splunk/react-ui/Text"));

var _time = require("@splunk/time-range-utils/time");

var _Styles = require("./Styles");

var _Panel = _interopRequireDefault(require("./Panel"));

const _excluded = ["earliest", "latest", "onChange", "momentTimeZoneName", "locale"];
var _jsxFileName = "/builds/swp/ui-platform/projects/lib/search-components/react-time-range/src/Dialog/DateTimeRange.tsx";

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const DateTimeRange = _ref => {
  let {
    earliest,
    latest,
    onChange,
    momentTimeZoneName,
    locale
  } = _ref,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  const convertEarliestPropToState = (earliestProp, momentTimeZoneNameProp) => {
    const earliestMomentDateTime = momentTimeZoneNameProp ? _moment.default.tz(earliestProp, momentTimeZoneNameProp) : (0, _moment.default)(earliestProp);
    const earliestDateTime = earliestProp ? earliestMomentDateTime : _moment.default.unix(0);
    return {
      date: earliestDateTime.format(_Date.default.momentFormat),
      time: earliestDateTime.format(DateTimeRange.timeFormat)
    };
  };

  const convertLatestPropToState = (latestProp, momentTimeZoneNameProp) => {
    const latestDateTime = momentTimeZoneNameProp ? _moment.default.tz(latestProp || undefined, momentTimeZoneNameProp) : (0, _moment.default)(latestProp || undefined);
    return {
      date: latestDateTime.format(_Date.default.momentFormat),
      time: latestDateTime.format(DateTimeRange.timeFormat)
    };
  };

  const earliestDateTime = convertEarliestPropToState(earliest, momentTimeZoneName);
  const latestDateTime = convertLatestPropToState(latest, momentTimeZoneName);
  const typeFromProps = DateTimeRange.inferType(earliest, latest);
  const [earliestDate, setEarliestDate] = (0, _react.useState)(earliestDateTime.date);
  const [earliestTime, setEarliestTime] = (0, _react.useState)(earliestDateTime.time);
  const [latestDate, setLatestDate] = (0, _react.useState)(latestDateTime.date);
  const [latestTime, setLatestTime] = (0, _react.useState)(latestDateTime.time);
  const [type, setType] = (0, _react.useState)(typeFromProps);
  const [errorMessage, setErrorMessage] = (0, _react.useState)('');
  const earliestRef = (0, _react.useRef)();
  const latestRef = (0, _react.useRef)();
  (0, _react.useEffect)(() => {
    earliestRef.current = earliest;
    latestRef.current = latest;
  }, [earliest, latest]);

  if (earliestRef.current !== earliest && earliestDateTime.date !== earliestDate) {
    setEarliestDate(earliestDateTime.date);
  }

  if (latestRef.current !== latest && latestDateTime.date !== latestDate) {
    setLatestDate(latestDateTime.date);
  }

  if (typeFromProps !== type && (earliestRef.current !== earliest || latestRef.current !== latest)) {
    setType(typeFromProps);
  }

  const handleTypeChange = (e, {
    value
  }) => {
    setType(value);
  };

  const handleEarliestDateChange = (e, {
    value
  }) => {
    setEarliestDate(value);
  };

  const handleEarliestTimeChange = (e, {
    value
  }) => {
    setEarliestTime(value);
  };

  const handleLatestDateChange = (e, {
    value
  }) => {
    setLatestDate(value);
  };

  const handleLatestTimeChange = (e, {
    value
  }) => {
    setLatestTime(value);
  };

  const apply = (e, updatedEarliestTime, updatedEarliestDate, updatedLatestTime, updatedLatestDate) => {
    let error = '';
    const updatedEarliest = type === 'before' ? '0' : (0, _time.getISOWithTimeZone)(`${updatedEarliestDate}T${updatedEarliestTime}`, momentTimeZoneName);
    const updatedLatest = type === 'since' ? 'now' : (0, _time.getISOWithTimeZone)(`${updatedLatestDate}T${updatedLatestTime}`, momentTimeZoneName);
    /* validateTime() checks the string is formatted correctly for splunkd.
     * moment() validates that it is a valid time, such as not having 61 minutes.
     */

    if (type !== 'before' && !(DateTimeRange.validateTime(updatedEarliestTime) && _moment.default.tz(updatedEarliest, momentTimeZoneName).isValid())) {
      error = (0, _i18n._)('Earliest time is invalid.');
    } else if (type !== 'since' && !(DateTimeRange.validateTime(updatedLatestTime) && _moment.default.tz(updatedLatest, momentTimeZoneName).isValid())) {
      error = (0, _i18n._)('Latest time is invalid.');
    } else if (type === 'between' && _moment.default.tz(updatedEarliest, momentTimeZoneName).valueOf() >= _moment.default.tz(updatedLatest, momentTimeZoneName).valueOf()) {
      error = (0, _i18n._)('Earliest must be before latest.');
    }

    setErrorMessage(error);

    if (!error && onChange) {
      onChange(e, {
        earliest: updatedEarliest,
        latest: updatedLatest
      });
    }
  };

  const handleApply = e => {
    apply(e, earliestTime, earliestDate, latestTime, latestDate);
  };

  const handleTimeKeyDown = e => {
    if ((0, _keyboard.keycode)(e) === 'enter') {
      apply(e, earliestTime, earliestDate, latestTime, latestDate);
    }
  };

  const handleDateKeyDown = e => {
    if ((0, _keyboard.keycode)(e) === 'enter') {
      const {
        value,
        name
      } = e.target;
      const updatedEarliestDate = name === 'earliestDate' ? convertEarliestPropToState(value).date : earliestDate;
      const updatedLatestDate = name === 'latestDate' ? convertLatestPropToState(value).date : latestDate;
      apply(e, earliestTime, updatedEarliestDate, latestTime, updatedLatestDate);
    }
  };
  /* Due to IE11 bug (SUI-909) the Type Select needs to grow slightly,
   * so it takes 1% of the extra space. */


  const typeStyles = {
    flex: '0 1 auto',
    marginRight: 10,
    marginTop: 0 // remove prisma first-child cg top margin

  };
  const dateStyles = {
    flex: '0 1 150px',
    marginRight: 10
  };
  const latestTimeStyles = {
    flex: 1
  };
  const earliestTimeStyles = {
    flex: 1
  };
  return /*#__PURE__*/_react.default.createElement(_Panel.default, (0, _extends2.default)({
    title: (0, _i18n._)('Date & Time Range')
  }, rest, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 216,
      columnNumber: 9
    }
  }), errorMessage && /*#__PURE__*/_react.default.createElement(_Message.default, {
    type: "error",
    "data-test": "error-message",
    style: {
      margin: '0 20px'
    },
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 218,
      columnNumber: 17
    }
  }, errorMessage), /*#__PURE__*/_react.default.createElement(_Styles.StyledCGWrapper, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 222,
      columnNumber: 13
    }
  }, /*#__PURE__*/_react.default.createElement(_ControlGroup.default, {
    controlsLayout: "none",
    label: "",
    "data-role": "rangetype",
    labelPosition: "top",
    style: typeStyles,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 223,
      columnNumber: 17
    }
  }, /*#__PURE__*/_react.default.createElement(_Select.default, {
    value: type,
    "data-test": "range-type",
    onChange: handleTypeChange,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 230,
      columnNumber: 21
    }
  }, /*#__PURE__*/_react.default.createElement(_Select.default.Option, {
    label: (0, _i18n._)('Between'),
    value: "between",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 231,
      columnNumber: 25
    }
  }), /*#__PURE__*/_react.default.createElement(_Select.default.Option, {
    label: (0, _i18n._)('Before'),
    value: "before",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 232,
      columnNumber: 25
    }
  }), /*#__PURE__*/_react.default.createElement(_Select.default.Option, {
    label: (0, _i18n._)('Since'),
    value: "since",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 233,
      columnNumber: 25
    }
  }))), type !== 'before' && /*#__PURE__*/_react.default.createElement(_ControlGroup.default, {
    controlsLayout: "none",
    label: "",
    labelPosition: "top",
    style: dateStyles,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 237,
      columnNumber: 21
    }
  }, /*#__PURE__*/_react.default.createElement(_Date.default, {
    name: "earliestDate",
    value: earliestDate,
    onChange: handleEarliestDateChange,
    onKeyDown: handleDateKeyDown,
    inline: false,
    locale: locale,
    "data-test": "earliest-date",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 238,
      columnNumber: 25
    }
  })), type !== 'before' && /*#__PURE__*/_react.default.createElement(_ControlGroup.default, {
    controlsLayout: "none",
    label: "",
    labelPosition: "top",
    help: "HH:MM:SS.SSS",
    style: earliestTimeStyles,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 250,
      columnNumber: 21
    }
  }, /*#__PURE__*/_react.default.createElement(_Text.default, {
    value: earliestTime,
    onChange: handleEarliestTimeChange,
    onKeyDown: handleTimeKeyDown,
    "data-test": "earliest-time",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 257,
      columnNumber: 25
    }
  })), type !== 'before' && /*#__PURE__*/_react.default.createElement(_ControlGroup.default, {
    controlsLayout: "none",
    label: "",
    labelPosition: "top",
    inline: false,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 266,
      columnNumber: 21
    }
  }, /*#__PURE__*/_react.default.createElement(_StaticContent.default, {
    style: {
      marginLeft: type === 'between' ? 0 : 10,
      // StaticContent lost left/right padding in Prisma - TBD if intentional or bug
      paddingLeft: 7,
      paddingRight: 7
    },
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 267,
      columnNumber: 25
    }
  }, type === 'between' ? (0, _i18n._)('and') : (0, _i18n._)('until now'))), type !== 'since' && /*#__PURE__*/_react.default.createElement(_ControlGroup.default, {
    controlsLayout: "none",
    label: "",
    labelPosition: "top",
    style: dateStyles,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 280,
      columnNumber: 21
    }
  }, /*#__PURE__*/_react.default.createElement(_Date.default, {
    name: "latestDate",
    value: latestDate,
    onChange: handleLatestDateChange,
    onKeyDown: handleDateKeyDown,
    inline: false,
    locale: locale,
    "data-test": "latest-date",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 281,
      columnNumber: 25
    }
  })), type !== 'since' && /*#__PURE__*/_react.default.createElement(_ControlGroup.default, {
    controlsLayout: "none",
    label: "",
    labelPosition: "top",
    help: (0, _i18n._)('HH:MM:SS.SSS'),
    style: latestTimeStyles,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 293,
      columnNumber: 21
    }
  }, /*#__PURE__*/_react.default.createElement(_Text.default, {
    value: latestTime,
    onChange: handleLatestTimeChange,
    onKeyDown: handleTimeKeyDown,
    "data-test": "latest-time",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 300,
      columnNumber: 25
    }
  }))), /*#__PURE__*/_react.default.createElement(_Styles.StyledApplyContainer, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 309,
      columnNumber: 13
    }
  }, /*#__PURE__*/_react.default.createElement(_Button.default, {
    label: (0, _i18n._)('Apply'),
    "data-test": "apply",
    onClick: handleApply,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 310,
      columnNumber: 17
    }
  })));
};

DateTimeRange.defaultProps = {
  placeholder: 'Select...'
};
DateTimeRange.timeFormat = 'HH:mm:ss.SSS';

DateTimeRange.validateTime = time => {
  return time.match(/^\d\d:\d\d(:\d\d|:\d\d\.\d?\d?\d?)?$/);
};

DateTimeRange.inferType = (earliest, latest) => {
  if (earliest && (!latest || latest === 'now')) {
    return 'since';
  }

  if (latest && (!earliest || earliest === '0')) {
    return 'before';
  }

  return 'between';
};

var _default = DateTimeRange;
exports.default = _default;