"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _lodash = require("lodash");

var _i18n = require("@splunk/ui-utils/i18n");

var _keyboard = require("@splunk/ui-utils/keyboard");

var _moment = _interopRequireDefault(require("@splunk/moment"));

var _time = require("@splunk/time-range-utils/time");

var _Button = _interopRequireDefault(require("@splunk/react-ui/Button"));

var _Link = _interopRequireDefault(require("@splunk/react-ui/Link"));

var _Message = _interopRequireDefault(require("@splunk/react-ui/Message"));

var _Text = _interopRequireDefault(require("@splunk/react-ui/Text"));

var _AbsoluteValue = _interopRequireDefault(require("./AbsoluteValue"));

var _Panel = _interopRequireDefault(require("./Panel"));

var _Styles = require("./Styles");

const _excluded = ["earliest", "latest", "onRequestParseEarliest", "onRequestParseLatest", "onChange", "documentationURL", "parseEarliest", "parseLatest", "momentTimeZoneName", "inputTypes"];
var _jsxFileName = "/builds/swp/ui-platform/projects/lib/search-components/react-time-range/src/Dialog/Advanced.tsx";

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const Advanced = _ref => {
  let {
    earliest: propsEarliest,
    latest: propsLatest,
    onRequestParseEarliest,
    onRequestParseLatest,
    onChange,
    documentationURL,
    parseEarliest,
    parseLatest,
    momentTimeZoneName,
    inputTypes
  } = _ref,
      panelProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const {
    open,
    panelId
  } = panelProps;
  const [earliest, setEarliest] = (0, _react.useState)(propsEarliest);
  const [latest, setLatest] = (0, _react.useState)(propsLatest);
  const [errorMessage, setErrorMessage] = (0, _react.useState)(null);
  const prevEarliest = (0, _react.useRef)();
  const prevLatest = (0, _react.useRef)();
  const prevOpen = (0, _react.useRef)();

  if (open && !prevOpen.current) {
    onRequestParseEarliest(propsEarliest.trim() ? propsEarliest : '0', panelId);
    onRequestParseLatest(propsLatest.trim() ? propsLatest : 'now', panelId);
  }

  (0, _react.useEffect)(() => {
    prevEarliest.current = propsEarliest;
    prevLatest.current = propsLatest;
    prevOpen.current = open;
  });

  if (prevEarliest.current && propsEarliest !== prevEarliest.current) {
    if (open && !prevOpen.current) {
      onRequestParseEarliest(propsEarliest, panelId);
    }
  }

  if (prevLatest.current && propsLatest !== prevLatest.current) {
    if (open) {
      onRequestParseLatest(propsLatest, panelId);
    }
  }

  if (open && !prevOpen.current) {
    if (earliest !== propsEarliest && (0, _time.isValidTime)(earliest)) {
      onRequestParseEarliest(earliest, panelId);
    } else {
      onRequestParseEarliest(propsEarliest, panelId);
    }

    if (latest !== propsLatest && (0, _time.isValidTime)(latest)) {
      onRequestParseLatest(latest, panelId);
    } else {
      onRequestParseLatest(propsLatest, panelId);
    }
  }

  const handleEarliestChange = (e, {
    value
  }) => {
    setEarliest(previousEarliest => {
      const val = value.trim();
      const isValid = (0, _time.isValidTime)(val);

      if (previousEarliest.trim() !== val && isValid) {
        onRequestParseEarliest(val || '0', panelId);
      } else if (!isValid) {
        // if user input invalid value, we need to recover parser value
        // so that switch to other panel will not cause issue.
        onRequestParseEarliest(propsEarliest, panelId);
      }

      return value;
    });
  };

  const handleLatestChange = (e, {
    value
  }) => {
    setLatest(previousLatest => {
      const val = value.trim();
      const isValid = (0, _time.isValidTime)(val);

      if (previousLatest.trim() !== val && isValid) {
        onRequestParseLatest(val || 'now', panelId);
      } else if (!isValid) {
        onRequestParseLatest(propsLatest, panelId);
      }

      return value;
    });
  };

  const handleApply = e => {
    let error = '';
    const ASTEarliest = (0, _time.parseTimeString)(earliest);
    const ASTLatest = (0, _time.parseTimeString)(latest);
    const absoluteTypes = ['iso', 'epoch'];

    if (!ASTEarliest.isFullyParsed && earliest || _moment.default.tz(parseEarliest.iso, momentTimeZoneName).valueOf() > _moment.default.tz(momentTimeZoneName).valueOf()) {
      error = (0, _i18n._)('The earliest time is invalid.');
    } else if (!ASTLatest.isFullyParsed && latest) {
      error = (0, _i18n._)('The latest time is invalid.');
    } else if (earliest && earliest === latest) {
      error = (0, _i18n._)('You cannot have equivalent times.');
    } else if (!(0, _lodash.includes)(inputTypes, 'relative') && ASTEarliest.type !== 'realTime' && !(0, _lodash.includes)(absoluteTypes, ASTLatest.type)) {
      error = (0, _i18n._)('Relative searches are not supported.');
    } else if (!(0, _lodash.includes)(inputTypes, 'relative') && ASTLatest.type !== 'realTime' && ASTLatest.type !== 'epoch' && ASTLatest.type !== 'iso') {
      error = (0, _i18n._)('Relative searches are not supported.');
    } else if (!(0, _lodash.includes)(inputTypes, 'realTime') && (ASTLatest.type === 'realTime' || ASTEarliest.type === 'realTime')) {
      error = (0, _i18n._)('Real-time searches are not supported.');
    } else if ((ASTLatest.type === 'realTime' || ASTEarliest.type === 'realTime') && ASTLatest.type !== ASTEarliest.type) {
      error = (0, _i18n._)('You must set a rt value for both earliest and latest time.');
    } else if (!(0, _lodash.includes)(inputTypes, 'dateTime') && ((0, _lodash.includes)(absoluteTypes, ASTLatest.type) || (0, _lodash.includes)(absoluteTypes, ASTEarliest.type))) {
      error = (0, _i18n._)('Epoch and ISO times are not supported.');
    } else if (!(0, _lodash.includes)(inputTypes, 'allTime') && (0, _time.isEarliestEmpty)(earliest) && (0, _time.isLatestNow)(latest)) {
      error = (0, _i18n._)('All-time searches are not supported.');
    } else if (parseEarliest.error) {
      error = (0, _i18n._)('Earliest could not be validated.');
    } else if (parseLatest.error) {
      error = (0, _i18n._)('Latest could not be validated.');
    } else if (_moment.default.tz(parseEarliest.iso, momentTimeZoneName).valueOf() >= _moment.default.tz(parseLatest.iso, momentTimeZoneName).valueOf()) {
      error = (0, _i18n._)('Earliest must be before latest.');
    }

    setErrorMessage(error);

    if (!error && onChange) {
      onChange(e, {
        earliest,
        latest
      });
    }
  };

  const handleKeydown = e => {
    if ((0, _keyboard.keycode)(e) === 'enter') {
      handleApply(e);
    }
  };

  const earliestParseValid = parseEarliest && Advanced.parseIsValid(earliest, parseEarliest.time, '0');
  const latestParseValid = parseLatest && Advanced.parseIsValid(latest, parseLatest.time, 'now');
  const inputValid = ((0, _time.isValidTime)(earliest) && parseEarliest ? parseEarliest.error === null : false) && ((0, _time.isValidTime)(latest) && parseLatest ? parseLatest.error === null : false);
  return /*#__PURE__*/_react.default.createElement(_Panel.default, (0, _extends2.default)({
    title: (0, _i18n._)('Advanced')
  }, panelProps, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 210,
      columnNumber: 9
    }
  }), errorMessage && /*#__PURE__*/_react.default.createElement(_Message.default, {
    type: "error",
    "data-test": "error-message",
    style: {
      margin: '0 20px'
    },
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 212,
      columnNumber: 17
    }
  }, errorMessage), /*#__PURE__*/_react.default.createElement(_Styles.StyledCGWrapper, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 216,
      columnNumber: 13
    }
  }, /*#__PURE__*/_react.default.createElement(_Styles.FlexControlGroup, {
    controlsLayout: "none",
    label: (0, _i18n._)('Earliest:'),
    labelPosition: "top",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 217,
      columnNumber: 17
    }
  }, /*#__PURE__*/_react.default.createElement(_Text.default, {
    value: earliest,
    "data-test": "earliest",
    onChange: handleEarliestChange,
    onKeyDown: inputValid ? handleKeydown : undefined,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 218,
      columnNumber: 21
    }
  }), /*#__PURE__*/_react.default.createElement(_AbsoluteValue.default, {
    "data-test": "earliest-absolute-value",
    error: earliestParseValid ? parseEarliest.error : new Error('invalid'),
    displayValue: earliestParseValid ? parseEarliest.displayValue : undefined,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 224,
      columnNumber: 21
    }
  })), /*#__PURE__*/_react.default.createElement(_Styles.FlexControlGroup, {
    controlsLayout: "none",
    label: (0, _i18n._)('Latest:'),
    labelPosition: "top",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 230,
      columnNumber: 17
    }
  }, /*#__PURE__*/_react.default.createElement(_Text.default, {
    value: latest,
    "data-test": "latest",
    onChange: handleLatestChange,
    onKeyDown: inputValid ? handleKeydown : undefined,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 231,
      columnNumber: 21
    }
  }), /*#__PURE__*/_react.default.createElement(_AbsoluteValue.default, {
    "data-test": "latest-absolute-value",
    error: latestParseValid ? parseLatest.error : new Error('invalid'),
    displayValue: latestParseValid ? parseLatest.displayValue : undefined,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 237,
      columnNumber: 21
    }
  }))), /*#__PURE__*/_react.default.createElement(_Styles.StyledApplyContainer, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 244,
      columnNumber: 13
    }
  }, !!documentationURL && /*#__PURE__*/_react.default.createElement(_Link.default, {
    to: documentationURL,
    style: {
      marginRight: 20
    },
    openInNewContext: true,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 246,
      columnNumber: 21
    }
  }, (0, _i18n._)('Documentation')), /*#__PURE__*/_react.default.createElement(_Button.default, {
    disabled: !inputValid,
    label: (0, _i18n._)('Apply'),
    onClick: handleApply,
    "data-test": "apply",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 250,
      columnNumber: 17
    }
  })));
};

Advanced.defaultProps = {
  open: false,
  onChange: _lodash.noop,
  onRequestParseEarliest: _lodash.noop,
  onRequestParseLatest: _lodash.noop
};

Advanced.parseIsValid = (stateValue, parseValue, defaultValue) => {
  const stateValueCleaned = stateValue.trim() || defaultValue;
  return (0, _time.removeRealTime)(stateValueCleaned) === parseValue.trim();
};

var _default = Advanced;
exports.default = _default;