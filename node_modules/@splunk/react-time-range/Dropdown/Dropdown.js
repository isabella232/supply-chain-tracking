"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _lodash = require("lodash");

var _time = require("@splunk/time-range-utils/time");

var _Button = _interopRequireDefault(require("@splunk/react-ui/Button"));

var _Dropdown = _interopRequireDefault(require("@splunk/react-ui/Dropdown"));

var _Dialog = _interopRequireWildcard(require("../Dialog"));

var _stylesAndData = _interopRequireDefault(require("../Dialog/stylesAndData"));

var _jsxFileName = "/builds/swp/ui-platform/projects/lib/search-components/react-time-range/src/Dropdown/Dropdown.tsx";

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Appearance;

(function (Appearance) {
  Appearance["default"] = "default";
  Appearance["primary"] = "primary";
  Appearance["pill"] = "pill";
  Appearance["toggle"] = "toggle";
  Appearance["flat"] = "flat";
})(Appearance || (Appearance = {}));

var CloseReasons;

(function (CloseReasons) {
  CloseReasons["clickAway"] = "clickAway";
  CloseReasons["escapeKey"] = "escapeKey";
  CloseReasons["offScreen"] = "offScreen";
  CloseReasons["toggleClick"] = "toggleClick";
})(CloseReasons || (CloseReasons = {}));

const TimeRange = props => {
  const {
    onChange,
    appearance,
    append,
    describedBy,
    disabled,
    earliest,
    inline,
    labelMaxChars,
    latest,
    prepend,
    presets
  } = props;
  const dropdownRef = (0, _react.useRef)(null);
  const [open, setOpen] = (0, _react.useState)(false);

  const focus = () => {
    const {
      current
    } = dropdownRef;

    if (current) {
      current.focus();
    }
  };

  const handleChange = (e, data) => {
    setOpen(false);
    onChange(e, data);
    focus();
  };

  const handleRequestClose = ({
    reason
  }) => {
    if (reason !== 'contentClick') {
      setOpen(false);
    }
  };

  const handleRequestOpen = () => {
    setOpen(true);
  };

  const ariaLabel = props['aria-label'];
  const label = (0, _time.createRangeLabel)(earliest, latest, {
    presets,
    maxChars: labelMaxChars
  });
  const closeReasons = Object.keys(CloseReasons);

  const toggle = /*#__PURE__*/_react.default.createElement(_Button.default, (0, _extends2.default)({
    appearance: appearance,
    disabled: disabled,
    label: label,
    append: append,
    prepend: prepend,
    inline: inline,
    isMenu: true,
    "aria-describedby": describedBy,
    "data-test": "time-range-dropdown",
    "data-test-earliest": earliest,
    "data-test-latest": latest,
    ref: dropdownRef
  }, (0, _stylesAndData.default)(props), {
    "aria-label": ariaLabel ? `${ariaLabel}, ${label}` : undefined,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 101,
      columnNumber: 9
    }
  }));

  return /*#__PURE__*/_react.default.createElement(_Dropdown.default, {
    inline: inline,
    open: open,
    retainFocus: true,
    toggle: toggle,
    closeReasons: closeReasons,
    onRequestClose: handleRequestClose,
    onRequestOpen: handleRequestOpen,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 120,
      columnNumber: 9
    }
  }, open && /*#__PURE__*/_react.default.createElement(_Dialog.default, (0, _extends2.default)({
    onChange: handleChange,
    style: {
      width: 640
    }
  }, (0, _lodash.omit)(props, 'appearance', 'disabled', 'prepend', 'append', 'describedBy', 'onChange', 'labelMaxChars', 'data-test', 'style', 'className'), {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 130,
      columnNumber: 17
    }
  })));
};

TimeRange.defaultProps = {
  appearance: Appearance.toggle,
  advancedInputTypes: _Dialog.possibleAdvancedInputTypes,
  disabled: false,
  inline: true,
  formInputTypes: _Dialog.possibleFormInputTypes,
  labelMaxChars: 30,
  onChange: _lodash.noop
};
var _default = TimeRange;
exports.default = _default;