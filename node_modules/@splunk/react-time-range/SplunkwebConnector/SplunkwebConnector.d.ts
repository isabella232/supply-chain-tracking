import { Component, ReactElement } from 'react';
import PropTypes from 'prop-types';
interface SplunkwebConnectorProps {
    children: any;
    presetsTransform: (presets: string[]) => string[];
}
declare type MomentTimeZone = {
    [key: string]: any;
};
declare type TimeParseResult = {
    error?: any;
    iso?: string;
    time: string;
};
declare type SplunkwebConnectorState = {
    momentTimeZone?: MomentTimeZone;
    parseLatest?: TimeParseResult;
    parseEarliest?: TimeParseResult;
    presets: string[];
};
declare class SplunkwebConnector extends Component<SplunkwebConnectorProps, SplunkwebConnectorState> {
    static propTypes: {
        /**
         * Must be either a Time Range `Dialog` or `Dropdown`.
         */
        children: PropTypes.Validator<PropTypes.ReactElementLike>;
        /**
         * A function to transform presets before they are passed to the wrapped component.
         * Should accept and return a presets array.
         */
        presetsTransform: PropTypes.Requireable<(...args: any[]) => any>;
    };
    static defaultProps: {
        presetsTransform: (presets: string[]) => string[];
    };
    static instances: SplunkwebConnector[];
    static sharedPresets: string[];
    static hashCode(str: string): number;
    private cancelableEarliestTimeParser;
    private cancelableLatestTimeParser;
    constructor(props: SplunkwebConnectorProps, ...rest: any[]);
    componentWillUnmount(): void;
    updatePresets(): void;
    handleRequestParseEarliest: (time: string) => void;
    handleRequestParseLatest: (time: string) => void;
    render(): ReactElement;
}
export default SplunkwebConnector;
