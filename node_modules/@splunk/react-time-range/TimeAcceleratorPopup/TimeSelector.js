"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TimeUnit = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _time = require("@splunk/time-range-utils/time");

var _i18n = require("@splunk/ui-utils/i18n");

var _keyboard = require("@splunk/ui-utils/keyboard");

var _Button = _interopRequireDefault(require("@splunk/react-ui/Button"));

var _Text = _interopRequireDefault(require("@splunk/react-ui/Text"));

var _BaseDropdown = _interopRequireDefault(require("./BaseDropdown"));

var _jsxFileName = "/builds/swp/ui-platform/projects/lib/search-components/react-time-range/src/TimeAcceleratorPopup/TimeSelector.tsx";

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var PlusMinus;

(function (PlusMinus) {
  PlusMinus["PlusMinus"] = "plusMinus";
  PlusMinus["Plus"] = "plus";
  PlusMinus["Minus"] = "minus";
})(PlusMinus || (PlusMinus = {}));

const plusMinusMenu = {
  [PlusMinus.PlusMinus]: '+/-',
  [PlusMinus.Plus]: '+',
  [PlusMinus.Minus]: '-'
};
let TimeUnit;
exports.TimeUnit = TimeUnit;

(function (TimeUnit) {
  TimeUnit["Week"] = "w";
  TimeUnit["Day"] = "d";
  TimeUnit["Hour"] = "h";
  TimeUnit["Minute"] = "m";
  TimeUnit["Second"] = "s";
  TimeUnit["Millisecond"] = "ms";
})(TimeUnit || (exports.TimeUnit = TimeUnit = {}));

const timeUnitMenu = {
  [TimeUnit.Week]: (0, _i18n._)('week(s)'),
  [TimeUnit.Day]: (0, _i18n._)('day(s)'),
  [TimeUnit.Hour]: (0, _i18n._)('hour(s)'),
  [TimeUnit.Minute]: (0, _i18n._)('minute(s)'),
  [TimeUnit.Second]: (0, _i18n._)('second(s)'),
  [TimeUnit.Millisecond]: (0, _i18n._)('millisecond(s)')
};
const FlexDiv = _styledComponents.default.div`
    display: flex;

    & > button {
        flex: 0 0 auto;
    }

    & > button:nth-child(1) {
        flex-basis: 70px;
    }
`;

const isInvalidNumber = value => {
  if (value === '' || value <= '0') {
    return true;
  } // eslint-disable-next-line no-restricted-globals


  return isNaN(Number(value));
};

const TimeSelector = ({
  onTimeChanged,
  eventTime,
  timeUnits,
  timeUnit
}) => {
  const defaultTimeUnitSelected = timeUnit || timeUnits && timeUnits[timeUnits.length - 1] || TimeUnit.Second;
  const [timeValue, setTimeValue] = (0, _react.useState)('5');
  const [plusMinusSelected, setPlusMinusSelected] = (0, _react.useState)(PlusMinus.PlusMinus);
  const [timeUnitSelected, setTimeUnitSelected] = (0, _react.useState)(defaultTimeUnitSelected);

  const handleApplyClicked = () => {
    const duration = Number(timeValue);

    switch (plusMinusSelected) {
      case PlusMinus.Plus:
        onTimeChanged({
          earliest: eventTime,
          latest: (0, _time.getAcceleratedTimeRange)(eventTime, duration, timeUnitSelected).latest
        });
        break;

      case PlusMinus.Minus:
        onTimeChanged({
          earliest: (0, _time.getAcceleratedTimeRange)(eventTime, duration, timeUnitSelected).earliest,
          latest: eventTime
        });
        break;

      case PlusMinus.PlusMinus:
        onTimeChanged((0, _time.getAcceleratedTimeRange)(eventTime, duration, timeUnitSelected));
        break;

      default:
        break;
    }
  };

  const handleKeyDown = e => {
    if ((0, _keyboard.keycode)(e) === 'enter' && !isInvalidNumber(timeValue)) {
      handleApplyClicked();
    }
  };

  return /*#__PURE__*/_react.default.createElement(FlexDiv, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 118,
      columnNumber: 9
    }
  }, /*#__PURE__*/_react.default.createElement(_BaseDropdown.default, {
    id: "plusMinusMenu",
    menuItemIds: Object.values(PlusMinus),
    menuItems: plusMinusMenu,
    selected: plusMinusSelected,
    onMenuItemClick: (e, id) => {
      setPlusMinusSelected(id);
    },
    append: true,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 119,
      columnNumber: 13
    }
  }), /*#__PURE__*/_react.default.createElement(_Text.default, {
    value: timeValue,
    onChange: (e, {
      value
    }) => {
      setTimeValue(value);
    },
    onKeyDown: handleKeyDown,
    prepend: true,
    append: true,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 129,
      columnNumber: 13
    }
  }), /*#__PURE__*/_react.default.createElement(_BaseDropdown.default, {
    id: "timeUnitMenu",
    menuItemIds: timeUnits || Object.values(TimeUnit),
    menuItems: timeUnitMenu,
    selected: timeUnitSelected,
    onMenuItemClick: (e, id) => {
      setTimeUnitSelected(id);
    },
    prepend: true,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 138,
      columnNumber: 13
    }
  }), /*#__PURE__*/_react.default.createElement(_Button.default, {
    appearance: "toggle",
    label: (0, _i18n._)('Apply'),
    disabled: isInvalidNumber(timeValue),
    onClick: handleApplyClicked,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 148,
      columnNumber: 13
    }
  }));
};

var _default = TimeSelector;
exports.default = _default;